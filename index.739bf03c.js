// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"l4AUa":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "ba60c367739bf03c";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"ebWYT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jquery = require("jquery");
var _jqueryDefault = parcelHelpers.interopDefault(_jquery);
var _rdflib = require("rdflib");
var _bootstrap = require("bootstrap");
const $rdf = require('rdflib');
const EventEmitter = require('events');
var RDF = $rdf.Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
var RDFS = $rdf.Namespace("http://www.w3.org/2000/01/rdf-schema#");
var OWL = $rdf.Namespace("http://www.w3.org/2002/07/owl#");
var XSD = $rdf.Namespace("http://www.w3.org/2001/XMLSchema#");
var DCAT = $rdf.Namespace("http://www.w3.org/ns/dcat#");
var FOAF = $rdf.Namespace("http://xmlns.com/foaf/0.1/");
var PROV = $rdf.Namespace("http://www.w3.org/ns/prov#");
var SCHEMA = $rdf.Namespace("http://schema.org/");
var VOID = $rdf.Namespace("http://rdfs.org/ns/void#");
var SD = $rdf.Namespace("http://www.w3.org/ns/sparql-service-description#");
var DCE = $rdf.Namespace("http://purl.org/dc/elements/1.1/");
var DCT = $rdf.Namespace("http://purl.org/dc/terms/");
var SKOS = $rdf.Namespace("http://www.w3.org/2004/02/skos/core#");
var PAV = $rdf.Namespace("http://purl.org/pav/");
var MOD = $rdf.Namespace("https://w3id.org/mod#");
const exampleDataset = $rdf.sym('https://e.g/dataset');
_jqueryDefault.default(()=>{
    var dataCol = _jqueryDefault.default('#dataCol');
    var navCol = _jqueryDefault.default('#navCol');
    var uniqueIdCounter = 0;
    class CategoryCore {
        constructor(config = {
            recommended: false,
            categoryTitle: "",
            legend: "",
            idPrefix: "id",
            minArity: 0,
            maxArity: Infinity,
            fields: []
        }){
            this.recommended = config.recommended;
            this.categoryTitle = config.categoryTitle;
            this.legend = config.legend;
            this.idPrefix = config.idPrefix;
            this.minArity = config.minArity;
            this.maxArity = config.maxArity;
            this.fields = [];
            config.fields.forEach((fieldConfig)=>{
                this.addNewField(fieldConfig);
            });
        }
        addNewField(fieldConfig) {
            fieldConfig.parentCategory = this;
            this.fields.push(fieldConfig);
        }
    }
    class CategoryView extends EventEmitter {
        constructor(config = {
            category: null
        }){
            super();
            this.categoryCore = config.category;
            this.lines = [];
            this.categoryCore.fields.forEach((field)=>{
                if (this.categoryCore.minArity > 0) this.addLine();
            });
            this.categoryId = this.categoryCore.idPrefix + "Category";
            var dataDiv = _jqueryDefault.default(document.createElement('div'));
            dataDiv.addClass("row");
            dataDiv.attr("id", this.categoryId);
            this.jQueryContent = dataDiv;
            this.generateCategoryFields();
            this.navItem = this.generateNavItem();
        }
        addLine() {
            this.categoryCore.fields.forEach((field)=>{
                if (this.lines.length < this.categoryCore.maxArity) {
                    var fieldLine = null;
                    if (field instanceof SingleFieldCore) fieldLine = new SingleFieldView({
                        core: field,
                        parentCategoryView: this
                    });
                    else if (field instanceof MultipleFieldCore) fieldLine = new MultipleFieldView({
                        core: field,
                        parentCategoryView: this
                    });
                    else {
                        console.error(field);
                        throw new Error("Unknown line type ");
                    }
                    this.lines.push(fieldLine);
                    fieldLine.on("add", (statement, source)=>{
                        this.emit("add", statement, source);
                    });
                    fieldLine.on("remove", (statement, source)=>{
                        this.emit("remove", statement, source);
                    });
                    fieldLine.on("invalidValue", (statement, source)=>{
                        this.emit("invalidValue", statement, source);
                    });
                }
            });
        }
        refresh() {
            this.jQueryContent.empty();
            this.jQueryContent = this.generateCategoryFields();
        }
        generateNavItem() {
            var navLink = _jqueryDefault.default(document.createElement("a"));
            navLink.addClass('nav-link');
            navLink.addClass('dropdown-item');
            navLink.text(this.categoryCore.categoryTitle);
            navLink.attr("href", "#" + this.categoryId);
            return navLink;
        }
        generateCategoryFields() {
            var addButtonId = "add" + this.categoryCore.idPrefix + "Button";
            var removeButtonId = "remove" + this.categoryCore.idPrefix + "Button";
            var catTitle = _jqueryDefault.default(document.createElement('h3'));
            catTitle.addClass("text-center");
            catTitle.text(this.categoryCore.categoryTitle);
            var catControlRow = _jqueryDefault.default(document.createElement('div'));
            catControlRow.addClass("row");
            var catLegendCol = _jqueryDefault.default(document.createElement('div'));
            catLegendCol.addClass("col-10");
            var catLegend = _jqueryDefault.default(document.createElement('p'));
            catLegend.text(this.categoryCore.legend);
            catLegendCol.append(catLegend);
            catControlRow.append(catLegendCol);
            var catAddLineCol = _jqueryDefault.default(document.createElement('div'));
            catAddLineCol.addClass("col-1");
            var catAddLineButton = _jqueryDefault.default(document.createElement('button'));
            catAddLineButton.addClass("btn");
            catAddLineButton.attr('type', "button");
            catAddLineButton.attr("id", addButtonId);
            catAddLineCol.append(catAddLineButton);
            var catAddLineButtonImage = _jqueryDefault.default(document.createElement('i'));
            catAddLineButtonImage.addClass("bi");
            catAddLineButtonImage.addClass("bi-file-plus");
            catAddLineButton.append(catAddLineButtonImage);
            var catRemoveLineCol = _jqueryDefault.default(document.createElement('div'));
            catRemoveLineCol.addClass("col-1");
            var catRemoveLineButton = _jqueryDefault.default(document.createElement('button'));
            catRemoveLineButton.addClass("btn");
            catRemoveLineButton.attr('type', "button");
            catRemoveLineButton.attr("id", removeButtonId);
            catRemoveLineCol.append(catRemoveLineButton);
            var catRemoveLineButtonImage = _jqueryDefault.default(document.createElement('i'));
            catRemoveLineButtonImage.addClass("bi");
            catRemoveLineButtonImage.addClass("bi-file-minus");
            catRemoveLineButton.append(catRemoveLineButtonImage);
            catControlRow.append(catAddLineCol);
            catControlRow.append(catRemoveLineCol);
            var catFieldRow = _jqueryDefault.default(document.createElement('div'));
            catFieldRow.addClass("row");
            var catFieldCol = _jqueryDefault.default(document.createElement('div'));
            catFieldCol.addClass("col");
            this.jQueryContent.append(catTitle);
            this.jQueryContent.append(catControlRow);
            this.jQueryContent.append(catFieldRow);
            catFieldRow.append(catFieldCol);
            this.refreshLines = ()=>{
                catFieldCol.empty();
                this.lines.forEach((field)=>{
                    catFieldCol.append(field.generateJQueryContent());
                });
            };
            this.refreshLines();
            catAddLineButton.on("click", ()=>{
                console.log("ADD");
                this.addLine();
                this.refreshLines();
            });
            catRemoveLineButton.on("click", ()=>{
                console.log("REMOVE");
                if (this.categoryCore.minArity < this.lines.length) {
                    if (this.lines.at(-1).getData() != undefined) this.emit("remove", this.lines.at(-1).getData(), this.lines.at(-1));
                    this.lines.pop();
                }
                this.refreshLines();
            });
        }
    }
    class FieldCore {
        constructor(config = {
            placeholder: "",
            dataValidationFunction: (inputVal)=>{
            },
            dataCreationFunction: (inputVal)=>{
            },
            dataExtractionFunction: ()=>{
            },
            parentCategory: null,
            defaultValue: null,
            advice: ""
        }){
            this.placeholder = config.placeholder;
            this.dataValidationFunction = (inputVal)=>{
                var result = false;
                try {
                    result = config.dataValidationFunction(inputVal);
                    return result;
                } catch (e) {
                    return result;
                }
            };
            this.dataCreationFunction = (inputVal)=>{
                if (this.dataValidationFunction(inputVal)) return config.dataCreationFunction(inputVal);
            };
            this.dataExtractionFunction = ()=>{
                try {
                    return config.dataExtractionFunction();
                } catch (e) {
                    this.emit("error", e);
                    return [];
                }
            };
            this.parentCategory = config.parentCategory;
            this.defaultValue = config.defaultValue;
            this.advice = config.advice;
        }
    }
    class SingleFieldCore extends FieldCore {
    }
    class MultipleFieldCore extends FieldCore {
        constructor(config = {
            placeholder: [],
            bootstrapFieldColWidth: [],
            dataValidationFunction: (inputValArray)=>{
            },
            dataCreationFunction: (inputValArray)=>{
            },
            dataExtractionFunction: ()=>{
            },
            parentCategory: null,
            defaultValue: []
        }){
            super();
            this.placeholder = config.placeholder;
            this.bootstrapFieldColWidth = config.bootstrapFieldColWidth;
            this.dataValidationFunction = (inputValArray)=>{
                var result = inputValArray.map((value)=>false
                );
                try {
                    result = config.dataValidationFunction(inputValArray);
                    return result;
                } catch (e) {
                    return result;
                }
            };
            this.dataCreationFunction = (inputVal)=>{
                if (this.dataValidationFunction(inputVal)) return config.dataCreationFunction(inputVal);
                return store.toNT();
            };
            this.dataExtractionFunction = ()=>{
                try {
                    return config.dataExtractionFunction();
                } catch (e) {
                    this.emit("error", e);
                    return [];
                }
            };
            this.defaultValue = config.defaultValue;
            this.parentCategory = config.parentCategory;
        }
    }
    class FieldView extends EventEmitter {
        constructor(config = {
            core: null,
            parentCategoryView: null
        }){
            super();
            this.fieldCore = config.core;
            this.parentCategoryView = config.parentCategoryView;
            this.index = uniqueIdCounter++;
            this.metadataFieldIdPrefix = this.fieldCore.parentCategory.idPrefix + "Field";
            this.fieldValue = this.fieldCore.defaultValue;
            this.inputId = this.metadataFieldIdPrefix + this.index;
            this.tooltip = null;
        }
        getValue() {
            return this.fieldValue;
        }
        getData() {
            return this.validateContent();
        }
        dataValidationFunction = (inputVal)=>{
            var result = this.fieldCore.dataValidationFunction(inputVal);
            this.setValidationState(result);
            if (result) this.fieldValue = inputVal;
            return result;
        };
        setValidationState = (valid)=>{
        };
        dataExtractionFunction = ()=>{
            return this.fieldCore.dataExtractionFunction();
        };
        validateContent = ()=>{
            var validated = this.dataValidationFunction(this.fieldValue);
            if (validated) {
                var statement = this.fieldCore.dataCreationFunction(this.fieldValue);
                this.emit("add", statement, this);
                return statement;
            } else this.emit("invalidValue", this.fieldCore.advice, this);
        };
        updateContent = (newValue)=>{
            var oldValueValidated = this.fieldCore.dataValidationFunction(this.fieldValue);
            if (oldValueValidated) {
                var statement = this.fieldCore.dataCreationFunction(this.fieldValue);
                this.emit("remove", statement, this);
            }
            this.fieldValue = newValue;
            this.validateContent();
        };
        generateJQueryContent = ()=>{
        };
    }
    class SingleFieldView extends FieldView {
        constructor(config = {
            core: null
        }){
            super(config);
            this.inputIdField = this.inputId + "Textfield";
            this.inputIdButton = this.inputId + "Button";
        }
        setValidationState = (valid)=>{
            setButtonValidatedState(this.inputIdButton, valid);
            var field = _jqueryDefault.default('#' + this.inputIdField);
            if (valid) {
                field.removeClass("border-danger");
                field.addClass("border-success");
            } else {
                field.addClass("border-danger");
                field.removeClass("border-success");
                if (this.fieldCore.advice != undefined) this.tooltip.show();
            }
        };
        generateJQueryContent = ()=>{
            var lineDiv = _jqueryDefault.default(document.createElement('div'));
            var textInput = _jqueryDefault.default(document.createElement('input'));
            var lineLabel = _jqueryDefault.default(document.createElement('label'));
            textInput.attr('type', 'text');
            textInput.addClass('form-control');
            textInput.attr('id', this.inputIdField);
            textInput.val(this.fieldValue);
            lineLabel.attr('for', this.inputIdField);
            lineLabel.text(this.fieldCore.placeholder);
            var lineFieldCol = _jqueryDefault.default(document.createElement('div'));
            lineFieldCol.addClass('col-11');
            var lineValidButtonCol = _jqueryDefault.default(document.createElement('div'));
            lineValidButtonCol.addClass('col-1');
            var lineValidButton = _jqueryDefault.default(document.createElement('a'));
            lineValidButton.attr("type", "button");
            lineValidButton.attr("id", this.inputIdButton);
            lineValidButton.attr("tabindex", 0);
            lineValidButton.addClass("btn");
            lineValidButton.addClass("btn-light");
            lineValidButton.text("Validate");
            lineValidButtonCol.append(lineValidButton);
            lineDiv.addClass('row');
            lineDiv.append(lineFieldCol);
            lineDiv.append(lineValidButtonCol);
            lineFieldCol.addClass('form-floating');
            lineFieldCol.append(textInput);
            lineFieldCol.append(lineLabel);
            textInput.on("change", ()=>{
                this.updateContent(textInput.val());
            });
            lineValidButton.on("click", ()=>{
                this.updateContent(textInput.val());
            });
            if (this.fieldValue.length > 0) this.validateContent();
            // this.tooltip = new bootstrap.Tooltip('#' + this.inputIdButton);
            // this.tooltip.setContent( this.fieldCore.advice);
            return lineDiv;
        };
    }
    class MultipleFieldView extends FieldView {
        constructor(config = {
            core: null
        }){
            super(config);
            this.numberOfFields = this.fieldCore.placeholder.length;
            this.bootstrapFieldColWidth = config.core.bootstrapFieldColWidth;
            this.fieldValue = this.fieldCore.defaultValue;
            this.inputIdFields = [];
            for(var i = 0; i < this.numberOfFields; i++)this.inputIdFields.push(this.inputId + "Textfield" + i);
            this.inputIdButton = this.inputId + "Button";
        }
        setValidationState = (valid)=>{
            setButtonValidatedState(this.inputIdButton, valid);
            this.inputIdFields.forEach((id)=>{
                var field = _jqueryDefault.default('#' + id);
                if (valid) {
                    field.removeClass("border-danger");
                    field.addClass("border-success");
                } else {
                    field.addClass("border-danger");
                    field.removeClass("border-success");
                }
            });
        };
        generateJQueryContent = ()=>{
            var lineDiv = _jqueryDefault.default(document.createElement('div'));
            var lineValidButtonCol = _jqueryDefault.default(document.createElement('div'));
            lineValidButtonCol.addClass('col-1');
            var lineValidButton = _jqueryDefault.default(document.createElement('button'));
            lineValidButton.attr("type", "button");
            lineValidButton.attr("id", this.inputIdButton);
            lineValidButton.addClass("btn");
            lineValidButton.addClass("btn-light");
            lineValidButton.text("Validate");
            lineValidButtonCol.append(lineValidButton);
            var fields = [];
            for(var i = 0; i < this.numberOfFields; i++){
                var lineFieldCol = _jqueryDefault.default(document.createElement('div'));
                lineFieldCol.addClass('col-' + this.bootstrapFieldColWidth[i]);
                var textInput = _jqueryDefault.default(document.createElement('input'));
                var lineLabel = _jqueryDefault.default(document.createElement('label'));
                textInput.attr('type', 'text');
                textInput.addClass('form-control');
                textInput.attr('id', this.inputIdFields[i]);
                textInput.val(this.fieldValue[i]);
                lineLabel.attr('for', this.inputIdFields[i]);
                lineLabel.text(this.fieldCore.placeholder[i]);
                fields.push(textInput);
                textInput.on("change", ()=>{
                    this.updateContent(fields.map((field)=>field.val()
                    ));
                });
                lineFieldCol.addClass('form-floating');
                lineFieldCol.append(textInput);
                lineFieldCol.append(lineLabel);
                lineDiv.append(lineFieldCol);
            }
            lineDiv.addClass('row');
            lineDiv.append(lineValidButtonCol);
            lineValidButton.on("click", ()=>{
                this.updateContent(fields.map((field)=>field.val()
                ));
            });
            if (fields.map((field)=>field.val().length > 0
            ).reduce((previous, current)=>previous || current
            , false)) {
                this.fieldValue = fields.map((field)=>field.val()
                );
                this.validateContent();
            }
            return lineDiv;
        };
    }
    function setButtonValidatedState(inputId, validated, message) {
        if (validated) {
            _jqueryDefault.default('#' + inputId).removeClass("btn-light");
            _jqueryDefault.default('#' + inputId).removeClass("btn-warning");
            _jqueryDefault.default('#' + inputId).removeClass("btn-danger");
            _jqueryDefault.default('#' + inputId).addClass("btn-success");
        } else {
            _jqueryDefault.default('#' + inputId).removeClass("btn-light");
            _jqueryDefault.default('#' + inputId).removeClass("btn-warning");
            _jqueryDefault.default('#' + inputId).addClass("btn-danger");
            _jqueryDefault.default('#' + inputId).removeClass("btn-success");
        }
    }
    function isLiteral(value) {
        try {
            return value != undefined && value.length > 0 && $rdf.isLiteral($rdf.lit(value));
        } catch (e) {
            return false;
        }
    }
    function isURI(value) {
        try {
            return value != undefined && value.length > 0 && $rdf.isNamedNode($rdf.sym(value));
        } catch (e) {
            return false;
        }
    }
    function isNotBlank(value) {
        try {
            return isURI(value) || isLiteral(value);
        } catch (e) {
            return false;
        }
    }
    function isDatetime(value) {
        try {
            return isLiteral(value);
        } catch (e) {
            return false;
        }
    }
    function isDuration(value) {
        try {
            return isLiteral(value);
        } catch (e) {
            return false;
        }
    }
    var inputMetadata = [
        {
            recommended: true,
            categoryTitle: "Title",
            legend: "Short title for the knowledge base and its content.",
            idPrefix: "title",
            minArity: 1,
            maxArity: Infinity,
            fields: [
                new MultipleFieldCore({
                    placeholder: [
                        "Short title for the knowledge base",
                        "Language tag (optional)"
                    ],
                    advice: "The short title must be non-empty",
                    defaultValue: [
                        "",
                        "en"
                    ],
                    bootstrapFieldColWidth: [
                        8,
                        3
                    ],
                    dataCreationFunction: (argArray)=>{
                        var inputVal = argArray[0];
                        var inputTag = argArray[1];
                        if (inputTag.length > 0) return new _rdflib.Statement(exampleDataset, DCT('title'), $rdf.lit(inputVal, inputTag));
                        else return new _rdflib.Statement(exampleDataset, DCT('title'), $rdf.lit(inputVal));
                    },
                    dataValidationFunction: (valuesArray)=>{
                        var inputVal = valuesArray[0];
                        var inputTag = valuesArray[1];
                        var result = isLiteral(inputVal) && (isLiteral(inputTag) || inputTag.length == 0);
                        return result;
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Creator",
            legend: "Represents the different actors involved in the creation of the dataset.",
            idPrefix: "creator",
            minArity: 1,
            maxArity: Infinity,
            fields: [
                new SingleFieldCore({
                    placeholder: "Creator's name or URI",
                    defaultValue: "",
                    advice: "The creator must be non-empty",
                    dataValidationFunction: (inputVal)=>{
                        var result = isLiteral(inputVal);
                        return result;
                    },
                    dataCreationFunction: (inputVal)=>{
                        return new _rdflib.Statement(exampleDataset, DCT('creator'), inputVal);
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Endpoint URL",
            legend: "URL of the SPARQL endpoint.",
            idPrefix: "endpoint",
            minArity: 1,
            maxArity: Infinity,
            fields: [
                new SingleFieldCore({
                    placeholder: "Endpoint's URL",
                    defaultValue: "",
                    dataValidationFunction: (inputVal)=>{
                        return isURI(inputVal);
                    },
                    dataCreationFunction: (inputVal)=>{
                        return new _rdflib.Statement(exampleDataset, VOID('sparqlEndpoint'), $rdf.sym(inputVal));
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Description",
            legend: "Long description of the knowledge base and its content.",
            idPrefix: "description",
            minArity: 1,
            maxArity: Infinity,
            fields: [
                new MultipleFieldCore({
                    placeholder: [
                        "Long description of the knowledge base",
                        "Language tag (optional)"
                    ],
                    defaultValue: [
                        "",
                        "en"
                    ],
                    advice: "The description must be non-empty",
                    bootstrapFieldColWidth: [
                        8,
                        3
                    ],
                    dataCreationFunction: (argArray)=>{
                        var inputVal = argArray[0];
                        var inputLang = argArray[1];
                        if (inputLang.length > 0) return new _rdflib.Statement(exampleDataset, DCT('description'), $rdf.lit(inputVal, inputLang));
                        else return new _rdflib.Statement(exampleDataset, DCT('description'), $rdf.lit(inputVal));
                    },
                    dataValidationFunction: (valuesArray)=>{
                        var inputVal = valuesArray[0];
                        var inputTag = valuesArray[1];
                        var result = isLiteral(inputVal) && (isLiteral(inputTag) || inputTag.length == 0);
                        return result;
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Publication date",
            legend: "Publication date of the knowledge base.",
            idPrefix: "publication",
            minArity: 1,
            maxArity: 1,
            fields: [
                new SingleFieldCore({
                    placeholder: "Publication date of the knowledge base",
                    defaultValue: "",
                    advice: "The date must be non-empty and in the correct format",
                    dataCreationFunction: (inputVal)=>{
                        return new _rdflib.Statement(exampleDataset, DCT('issued'), $rdf.lit(inputVal));
                    },
                    dataValidationFunction: (inputVal)=>{
                        return isLiteral(inputVal);
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Vocabularies",
            legend: "URIs of the vocabularies used in the knowledge base.",
            idPrefix: "vocabulary",
            minArity: 1,
            maxArity: Infinity,
            fields: [
                new SingleFieldCore({
                    placeholder: "Vocabularies used in the knowledge base",
                    defaultValue: "",
                    advice: "The vocabulary must be an URI",
                    dataCreationFunction: (inputVal)=>{
                        return new _rdflib.Statement(exampleDataset, VOID('vocabulary'), $rdf.sym(inputVal));
                    },
                    dataValidationFunction: (inputVal)=>{
                        return isURI(inputVal);
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Languages",
            legend: "Language tags used in the literals of the knowledge base.",
            idPrefix: "language",
            minArity: 1,
            maxArity: Infinity,
            fields: [
                new SingleFieldCore({
                    placeholder: "Language tags used in the literals of the knowledge base",
                    defaultValue: "",
                    advice: "The vocabulary must be non empty",
                    dataCreationFunction: (inputVal)=>{
                        return new _rdflib.Statement(exampleDataset, DCT('language'), $rdf.lit(inputVal));
                    },
                    dataValidationFunction: (inputVal)=>{
                        return isLiteral(inputVal);
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Keywords",
            legend: "Keywords describing the content of the knowledge base.",
            idPrefix: "keyword",
            minArity: 1,
            maxArity: Infinity,
            fields: [
                new SingleFieldCore({
                    placeholder: "Keyworks used to describe the knowledge base",
                    defaultValue: "",
                    advice: "The keyword must be non empty",
                    dataCreationFunction: (inputVal)=>{
                        if (isLiteral(inputVal)) return new _rdflib.Statement(exampleDataset, DCAT('keyword'), $rdf.lit(inputVal));
                        if (isURI(inputVal)) return new _rdflib.Statement(exampleDataset, DCAT('theme'), $rdf.sym(inputVal));
                        return null;
                    },
                    dataValidationFunction: (inputVal)=>{
                        return isLiteral(inputVal) || isURI(inputVal);
                    }
                })
            ]
        },
        {
            recommended: true,
            categoryTitle: "Version",
            legend: "Current version number of the knowledge base.",
            idPrefix: "version",
            minArity: 1,
            maxArity: 1,
            fields: [
                new SingleFieldCore({
                    placeholder: "Current version of the knowledge base",
                    defaultValue: "1.0",
                    advice: "The version must be non empty",
                    dataCreationFunction: (inputVal)=>{
                        return new _rdflib.Statement(exampleDataset, DCAT('version'), $rdf.lit(inputVal));
                    },
                    dataValidationFunction: (inputVal)=>{
                        return isLiteral(inputVal);
                    },
                    dataExtractionFunction: ()=>{
                    }
                })
            ]
        }
    ];
    let controlInstance;
    class Control {
        constructor(){
            if (controlInstance) throw new Error("Control already instanced");
            controlInstance = this;
            this.store = $rdf.graph();
            this.contentDisplay = _jqueryDefault.default("#displayTextArea");
            this.categoryViews = [];
            this.store.add(exampleDataset, RDF("type"), DCAT("Dataset"));
            this.generateFields();
            this.refreshStore();
        }
        generateFields() {
            inputMetadata.forEach((catMetadata)=>{
                var catMetadataView = new CategoryView({
                    category: new CategoryCore(catMetadata)
                });
                this.categoryViews.push(catMetadataView);
                dataCol.append(catMetadataView.jQueryContent);
                navCol.append(catMetadataView.navItem);
                catMetadataView.on("add", (statement, source)=>{
                    console.log("add ", statement);
                    this.store.add(statement);
                    this.refreshStore();
                });
                catMetadataView.on("remove", (statement, source)=>{
                    console.log("remove ", statement);
                    if (this.store.holdsStatement(statement)) {
                        this.store.remove(statement);
                        this.refreshStore();
                    }
                });
            });
        }
        refreshStore() {
            this.categoryViews.forEach((view)=>{
                this.contentDisplay.val(this.store.toNT());
            });
        }
    }
    new Control();
});

},{"jquery":"hgMhh","rdflib":"j1nKW","events":"1VQLm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","bootstrap":"h36JB"}],"hgMhh":[function(require,module,exports) {
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */ (function(global, factory) {
    if (typeof module === "object" && typeof module.exports === "object") // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function(w) {
        if (!w.document) throw new Error("jQuery requires a window with a document");
        return factory(w);
    };
    else factory(global);
// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function(window1, noGlobal) {
    // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
    // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
    // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
    // enough that all such attempts are guarded in a try block.
    "use strict";
    var arr1 = [];
    var getProto = Object.getPrototypeOf;
    var slice1 = arr1.slice;
    var flat = arr1.flat ? function(array) {
        return arr1.flat.call(array);
    } : function(array) {
        return arr1.concat.apply([], array);
    };
    var push1 = arr1.push;
    var indexOf1 = arr1.indexOf;
    var class2type = {
    };
    var toString = class2type.toString;
    var hasOwn1 = class2type.hasOwnProperty;
    var fnToString = hasOwn1.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support1 = {
    };
    var isFunction = function isFunction(obj) {
        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
        // Plus for old WebKit, typeof returns "function" for HTML collections
        // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
    };
    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };
    var document1 = window1.document;
    var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
    };
    function DOMEval(code, node, doc) {
        doc = doc || document1;
        var i, val, script = doc.createElement("script");
        script.text = code;
        if (node) for(i in preservedScriptAttributes){
            // Support: Firefox 64+, Edge 18+
            // Some browsers don't support the "nonce" property on scripts.
            // On the other hand, just using `getAttribute` is not enough as
            // the `nonce` attribute is reset to an empty string whenever it
            // becomes browsing-context connected.
            // See https://github.com/whatwg/html/issues/2369
            // See https://html.spec.whatwg.org/#nonce-attributes
            // The `node.getAttribute` check was added for the sake of
            // `jQuery.globalEval` so that it can fake a nonce-containing node
            // via an object.
            val = node[i] || node.getAttribute && node.getAttribute(i);
            if (val) script.setAttribute(i, val);
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    function toType(obj) {
        if (obj == null) return obj + "";
        // Support: Android <=2.3 only (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
    }
    /* global Symbol */ // Defining this global in .eslintrc.json would create a danger of using the global
    // unguarded in another place, it seems safer to define global only for this module
    var version = "3.6.0", // Define a local copy of jQuery
    jQuery = function(selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init(selector, context);
    };
    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function() {
            return slice1.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
            // Return all the elements in a clean array
            if (num == null) return slice1.call(this);
            // Return just the one element from the set
            return num < 0 ? this[num + this.length] : this[num];
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {
            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            // Return the newly-formed element set
            return ret;
        },
        // Execute a callback for every element in the matched set.
        each: function(callback) {
            return jQuery.each(this, callback);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice1.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        even: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
                return (i + 1) % 2;
            }));
        },
        odd: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
                return i % 2;
            }));
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [
                this[j]
            ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push1,
        sort: arr1.sort,
        splice: arr1.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {
        }, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;
            // Skip the boolean and the target
            target = arguments[i] || {
            };
            i++;
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !isFunction(target)) target = {
        };
        // Extend jQuery itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }
        for(; i < length; i++){
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) // Extend the base object
            for(name in options){
                copy = options[name];
                // Prevent Object.prototype pollution
                // Prevent never-ending loop
                if (name === "__proto__" || target === copy) continue;
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    src = target[name];
                    // Ensure proper type for the source value
                    if (copyIsArray && !Array.isArray(src)) clone = [];
                    else if (!copyIsArray && !jQuery.isPlainObject(src)) clone = {
                    };
                    else clone = src;
                    copyIsArray = false;
                    // Never move original objects, clone them
                    target[name] = jQuery.extend(deep, clone, copy);
                // Don't bring in undefined values
                } else if (copy !== undefined) target[name] = copy;
            }
        }
        // Return the modified object
        return target;
    };
    jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {
        },
        isPlainObject: function(obj) {
            var proto, Ctor;
            // Detect obvious negatives
            // Use toString instead of jQuery.type to catch host objects
            if (!obj || toString.call(obj) !== "[object Object]") return false;
            proto = getProto(obj);
            // Objects with no prototype (e.g., `Object.create( null )`) are plain
            if (!proto) return true;
            // Objects with prototype are plain iff they were constructed by a global Object function
            Ctor = hasOwn1.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
            var name;
            for(name in obj)return false;
            return true;
        },
        // Evaluates a script in a provided context; falls back to the global one
        // if not specified.
        globalEval: function(code, options, doc) {
            DOMEval(code, {
                nonce: options && options.nonce
            }, doc);
        },
        each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for(; i < length; i++){
                    if (callback.call(obj[i], i, obj[i]) === false) break;
                }
            } else for(i in obj){
                if (callback.call(obj[i], i, obj[i]) === false) break;
            }
            return obj;
        },
        // results is for internal usage only
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) jQuery.merge(ret, typeof arr === "string" ? [
                    arr
                ] : arr);
                else push1.call(ret, arr);
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            return arr == null ? -1 : indexOf1.call(arr, elem, i);
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for(; j < len; j++)first[i++] = second[j];
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            // Go through the array, only saving the items
            // that pass the validator function
            for(; i < length; i++){
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) matches.push(elems[i]);
            }
            return matches;
        },
        // arg is for internal usage only
        map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            // Go through the array, translating each of the items to their new values
            if (isArrayLike(elems)) {
                length = elems.length;
                for(; i < length; i++){
                    value = callback(elems[i], i, arg);
                    if (value != null) ret.push(value);
                }
            // Go through every key on the object,
            } else for(i in elems){
                value = callback(elems[i], i, arg);
                if (value != null) ret.push(value);
            }
            // Flatten any nested arrays
            return flat(ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support1
    });
    if (typeof Symbol === "function") jQuery.fn[Symbol.iterator] = arr1[Symbol.iterator];
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) return false;
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle1 = /*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */ function(window) {
        var i1, support, Expr, getText, isXML1, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, // Local document vars
        setDocument, document, docElem1, documentIsHTML, rbuggyQSA, rbuggyMatches, matches1, contains, // Instance-specific data
        expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
            if (a === b) hasDuplicate = true;
            return 0;
        }, // Instance methods
        hasOwn = {
        }.hasOwnProperty, arr2 = [], pop = arr2.pop, pushNative = arr2.push, push = arr2.push, slice = arr2.slice, // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function(list, elem) {
            var i = 0, len = list.length;
            for(; i < len; i++){
                if (list[i] === elem) return i;
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", // Regular expressions
        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]", // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
        // or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
        ".*" + ")\\)|)", // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            "ID": new RegExp("^#(" + identifier + ")"),
            "CLASS": new RegExp("^\\.(" + identifier + ")"),
            "TAG": new RegExp("^(" + identifier + "|[*])"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            "bool": new RegExp("^(?:" + booleans + ")$", "i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rhtml = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
            var high = "0x" + escape.slice(1) - 65536;
            return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
            nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
            // Support: IE <=11+
            // For values outside the Basic Multilingual Plane (BMP), manually construct a
            // surrogate pair
            high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
            if (asCodePoint) {
                // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                if (ch === "\0") return "\uFFFD";
                // Control characters and (dependent upon position) numbers get escaped as code points
                return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
            }
            // Other potentially-special ASCII characters get backslash-escaped
            return "\\" + ch;
        }, // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function() {
            setDocument();
        }, inDisabledFieldset = addCombinator(function(elem) {
            return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
        }, {
            dir: "parentNode",
            next: "legend"
        });
        // Optimize for push.apply( _, NodeList )
        try {
            push.apply(arr2 = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            // Support: Android<4.0
            // Detect silently failing push.apply
            // eslint-disable-next-line no-unused-expressions
            arr2[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr2.length ? // Leverage slice if possible
                function(target, els) {
                    pushNative.apply(target, slice.call(els));
                } : // Support: IE<9
                // Otherwise append directly
                function(target, els) {
                    var j = target.length, i = 0;
                    // Can't trust NodeList.length
                    while(target[j++] = els[i++]);
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, // nodeType defaults to 9, since context defaults to document
            nodeType = context ? context.nodeType : 9;
            results = results || [];
            // Return early from calls with invalid selector or context
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) return results;
            // Try to shortcut find operations (as opposed to filters) in HTML documents
            if (!seed) {
                setDocument(context);
                context = context || document;
                if (documentIsHTML) {
                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                    // (excepting DocumentFragment context, where the methods don't exist)
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        // ID selector
                        if (m = match[1]) {
                            // Document context
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) // Support: IE, Opera, Webkit
                                // TODO: identify versions
                                // getElementById can match elements by name instead of ID
                                {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else return results;
                            // Element context
                            } else // Support: IE, Opera, Webkit
                            // TODO: identify versions
                            // getElementById can match elements by name instead of ID
                            if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        // Type selector
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        // Class selector
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    // Take advantage of querySelectorAll
                    if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                        newSelector = selector;
                        newContext = context;
                        // qSA considers elements outside a scoping root when evaluating child or
                        // descendant combinators, which is not what we want.
                        // In such cases, we work around the behavior by prefixing every selector in the
                        // list with an ID selector referencing the scope context.
                        // The technique has to be used as well when a leading combinator is used
                        // as such selectors are not recognized by querySelectorAll.
                        // Thanks to Andrew Dupont for this technique.
                        if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                            // Expand context for sibling selectors
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                            // We can use :scope instead of the ID hack if the browser
                            // supports it & if we're not changing the context.
                            if (newContext !== context || !support.scope) {
                                // Capture the context ID, setting it first if necessary
                                if (nid = context.getAttribute("id")) nid = nid.replace(rcssescape, fcssescape);
                                else context.setAttribute("id", nid = expando);
                            }
                            // Prefix every selector in the list
                            groups = tokenize(selector);
                            i = groups.length;
                            while(i--)groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
                            newSelector = groups.join(",");
                        }
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {
                            nonnativeSelectorCache(selector, true);
                        } finally{
                            if (nid === expando) context.removeAttribute("id");
                        }
                    }
                }
            }
            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */ function createCache() {
            var keys = [];
            function cache(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key + " ") > Expr.cacheLength) // Only keep the most recent entries
                delete cache[keys.shift()];
                return cache[key + " "] = value;
            }
            return cache;
        }
        /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */ function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        /**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */ function assert(fn) {
            var el = document.createElement("fieldset");
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally{
                // Remove from its parent by default
                if (el.parentNode) el.parentNode.removeChild(el);
                // release memory in IE
                el = null;
            }
        }
        /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */ function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = arr.length;
            while(i--)Expr.attrHandle[arr[i]] = handler;
        }
        /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */ function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            // Use IE sourceIndex if available on both nodes
            if (diff) return diff;
            // Check if b follows a
            if (cur) while(cur = cur.nextSibling){
                if (cur === b) return -1;
            }
            return a ? 1 : -1;
        }
        /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */ function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */ function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        /**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */ function createDisabledPseudo(disabled) {
            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
            return function(elem) {
                // Only certain elements can match :enabled or :disabled
                // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                if ("form" in elem) {
                    // Check for inherited disabledness on relevant non-disabled elements:
                    // * listed form-associated elements in a disabled fieldset
                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                    // * option elements in a disabled optgroup
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                    // All such elements have a "form" property.
                    if (elem.parentNode && elem.disabled === false) {
                        // Option elements defer to a parent optgroup if present
                        if ("label" in elem) {
                            if ("label" in elem.parentNode) return elem.parentNode.disabled === disabled;
                            else return elem.disabled === disabled;
                        }
                        // Support: IE 6 - 11
                        // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                        return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                        /* jshint -W018 */ elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                // Try to winnow out elements that can't be disabled before trusting the disabled property.
                // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                // even exist on them, let alone have a boolean value.
                } else if ("label" in elem) return elem.disabled === disabled;
                // Remaining elements are neither :enabled nor :disabled
                return false;
            };
        }
        /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */ function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    // Match elements found at the specified indexes
                    while(i--)if (seed[j = matchIndexes[i]]) seed[j] = !(matches[j] = seed[j]);
                });
            });
        }
        /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */ function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        // Expose support vars for convenience
        support = Sizzle.support = {
        };
        /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */ isXML1 = Sizzle.isXML = function(elem) {
            var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
            // Support: IE <=8
            // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
            // https://bugs.jquery.com/ticket/4833
            return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
        };
        /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */ setDocument = Sizzle.setDocument = function(node1) {
            var hasCompare, subWindow, doc = node1 ? node1.ownerDocument || node1 : preferredDoc;
            // Return early if doc is invalid or already selected
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if (doc == document || doc.nodeType !== 9 || !doc.documentElement) return document;
            // Update global variables
            document = doc;
            docElem1 = document.documentElement;
            documentIsHTML = !isXML1(document);
            // Support: IE 9 - 11+, Edge 12 - 18+
            // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                // Support: IE 11, Edge
                if (subWindow.addEventListener) subWindow.addEventListener("unload", unloadHandler, false);
                else if (subWindow.attachEvent) subWindow.attachEvent("onunload", unloadHandler);
            }
            // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
            // Safari 4 - 5 only, Opera <=11.6 - 12.x only
            // IE/Edge & older browsers don't support the :scope pseudo-class.
            // Support: Safari 6.0 only
            // Safari 6.0 supports :scope but it's an alias of :root there.
            support.scope = assert(function(el) {
                docElem1.appendChild(el).appendChild(document.createElement("div"));
                return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
            });
            /* Attributes
	---------------------------------------------------------------------- */ // Support: IE<8
            // Verify that getAttribute really returns attributes and not properties
            // (excepting IE8 booleans)
            support.attributes = assert(function(el) {
                el.className = "i";
                return !el.getAttribute("className");
            });
            /* getElement(s)By*
	---------------------------------------------------------------------- */ // Check if getElementsByTagName("*") returns only elements
            support.getElementsByTagName = assert(function(el) {
                el.appendChild(document.createComment(""));
                return !el.getElementsByTagName("*").length;
            });
            // Support: IE<9
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            // Support: IE<10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programmatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function(el) {
                docElem1.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            // ID filter and find
            if (support.getById) {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [
                            elem
                        ] : [];
                    }
                };
            } else {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
                // Support: IE 6 - 7 only
                // getElementById is not reliable as a find shortcut
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            // Verify the id attribute
                            node = elem.getAttributeNode("id");
                            if (node && node.value === id) return [
                                elem
                            ];
                            // Fall back on getElementsByName
                            elems = context.getElementsByName(id);
                            i = 0;
                            while(elem = elems[i++]){
                                node = elem.getAttributeNode("id");
                                if (node && node.value === id) return [
                                    elem
                                ];
                            }
                        }
                        return [];
                    }
                };
            }
            // Tag
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") return context.getElementsByTagName(tag);
                else if (support.qsa) return context.querySelectorAll(tag);
            } : function(tag, context) {
                var elem, tmp = [], i = 0, // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);
                // Filter out possible comments
                if (tag === "*") {
                    while(elem = results[i++])if (elem.nodeType === 1) tmp.push(elem);
                    return tmp;
                }
                return results;
            };
            // Class
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) return context.getElementsByClassName(className);
            };
            /* QSA/matchesSelector
	---------------------------------------------------------------------- */ // QSA and matchesSelector support
            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];
            // qSa(:focus) reports false when true (Chrome 21)
            // We allow this because of a bug in IE8/9 that throws an error
            // whenever `document.activeElement` is accessed on an iframe
            // So, we allow :focus to pass through QSA all the time to avoid the IE error
            // See https://bugs.jquery.com/ticket/13378
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function(el) {
                    var input;
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // https://bugs.jquery.com/ticket/12359
                    docElem1.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
                    // Support: IE8, Opera 11-12.16
                    // Nothing should be selected when empty strings follow ^= or $= or *=
                    // The test attribute must be unknown in Opera but "safe" for WinRT
                    // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                    if (el.querySelectorAll("[msallowcapture^='']").length) rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!el.querySelectorAll("[selected]").length) rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) rbuggyQSA.push("~=");
                    // Support: IE 11+, Edge 15 - 18+
                    // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                    // Adding a temporary attribute to the document before the selection works
                    // around the issue.
                    // Interestingly, IE 10 & older don't seem to have the issue.
                    input = document.createElement("input");
                    input.setAttribute("name", "");
                    el.appendChild(input);
                    if (!el.querySelectorAll("[name='']").length) rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!el.querySelectorAll(":checked").length) rbuggyQSA.push(":checked");
                    // Support: Safari 8+, iOS 8+
                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                    // In-page `selector#id sibling-combinator selector` fails
                    if (!el.querySelectorAll("a#" + expando + "+*").length) rbuggyQSA.push(".#.+[+~]");
                    // Support: Firefox <=3.6 - 5 only
                    // Old Firefox doesn't throw on a badly-escaped identifier.
                    el.querySelectorAll("\\\f");
                    rbuggyQSA.push("[\\r\\n\\f]");
                });
                assert(function(el) {
                    el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                    // Support: Windows 8 Native Apps
                    // The type and name attributes are restricted during .innerHTML assignment
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");
                    // Support: IE8
                    // Enforce case-sensitivity of name attribute
                    if (el.querySelectorAll("[name=d]").length) rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (el.querySelectorAll(":enabled").length !== 2) rbuggyQSA.push(":enabled", ":disabled");
                    // Support: IE9-11+
                    // IE's :disabled selector does not pick up the children of disabled fieldsets
                    docElem1.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) rbuggyQSA.push(":enabled", ":disabled");
                    // Support: Opera 10 - 11 only
                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches1 = docElem1.matches || docElem1.webkitMatchesSelector || docElem1.mozMatchesSelector || docElem1.oMatchesSelector || docElem1.msMatchesSelector)) assert(function(el) {
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node (IE 9)
                support.disconnectedMatch = matches1.call(el, "*");
                // This should fail with an exception
                // Gecko does not error, returns false instead
                matches1.call(el, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            /* Contains
	---------------------------------------------------------------------- */ hasCompare = rnative.test(docElem1.compareDocumentPosition);
            // Element contains another
            // Purposefully self-exclusive
            // As in, an element does not contain itself
            contains = hasCompare || rnative.test(docElem1.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) while(b = b.parentNode){
                    if (b === a) return true;
                }
                return false;
            };
            /* Sorting
	---------------------------------------------------------------------- */ // Document order sorting
            sortOrder = hasCompare ? function(a, b) {
                // Flag for duplicate removal
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                // Sort on method existence if only one input has compareDocumentPosition
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) return compare;
                // Calculate position if both inputs belong to the same document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
                1;
                // Disconnected nodes
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    // Choose the first element that is related to our preferred document
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) return -1;
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) return 1;
                    // Maintain original order
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                // Exit early if the nodes are identical
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [
                    a
                ], bp = [
                    b
                ];
                // Parentless nodes are either documents or disconnected
                if (!aup || !bup) // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */ return a == document ? -1 : b == document ? 1 : /* eslint-enable eqeqeq */ aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                else if (aup === bup) return siblingCheck(a, b);
                // Otherwise we need full lists of their ancestors for comparison
                cur = a;
                while(cur = cur.parentNode)ap.unshift(cur);
                cur = b;
                while(cur = cur.parentNode)bp.unshift(cur);
                // Walk down the tree looking for a discrepancy
                while(ap[i] === bp[i])i++;
                return i ? // Do a sibling check if the nodes have a common ancestor
                siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */ ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 : /* eslint-enable eqeqeq */ 0;
            };
            return document;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            setDocument(elem);
            if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches1.call(elem, expr);
                // IE 9's matchesSelector returns false on disconnected nodes
                if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) return ret;
            } catch (e) {
                nonnativeSelectorCache(expr, true);
            }
            return Sizzle(expr, document, null, [
                elem
            ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if ((context.ownerDocument || context) != document) setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            // Set document vars if needed
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if ((elem.ownerDocument || elem) != document) setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function(sel) {
            return (sel + "").replace(rcssescape, fcssescape);
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */ Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while(elem = results[i++])if (elem === results[i]) j = duplicates.push(i);
                while(j--)results.splice(duplicates[j], 1);
            }
            // Clear input after sorting to release objects
            // See https://github.com/jquery/sizzle/pull/225
            sortInput = null;
            return results;
        };
        /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */ getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) // If no nodeType, this is expected to be an array
            while(node = elem[i++])// Do not traverse comment nodes
            ret += getText(node);
            else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (jQuery #11153)
                if (typeof elem.textContent === "string") return elem.textContent;
                else // Traverse its children
                for(elem = elem.firstChild; elem; elem = elem.nextSibling)ret += getText(elem);
            } else if (nodeType === 3 || nodeType === 4) return elem.nodeValue;
            // Do not include comment or processing instruction nodes
            return ret;
        };
        Expr = Sizzle.selectors = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {
            },
            find: {
            },
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                "ATTR": function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") match[3] = " " + match[3] + " ";
                    return match.slice(0, 4);
                },
                "CHILD": function(match) {
                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/ match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) Sizzle.error(match[0]);
                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    // other types prohibit arguments
                    } else if (match[3]) Sizzle.error(match[0]);
                    return match;
                },
                "PSEUDO": function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) return null;
                    // Accept quoted arguments as-is
                    if (match[3]) match[2] = match[4] || match[5] || "";
                    else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },
            filter: {
                "TAG": function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                "CLASS": function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)"), classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    }));
                },
                "ATTR": function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) return operator === "!=";
                        if (!operator) return true;
                        result += "";
                        /* eslint-disable max-len */ return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    /* eslint-enable max-len */ };
                },
                "CHILD": function(type, what, _argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
                    function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, _context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                                while(dir){
                                    node = elem;
                                    while(node = node[dir]){
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) return false;
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [
                                forward ? parent.firstChild : parent.lastChild
                            ];
                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                                // Seek `elem` from a previously-cached index
                                // ...in a gzip-friendly way
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {
                                });
                                // Support: IE <9 only
                                // Defend against cloned attroperties (jQuery gh-1709)
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {
                                });
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())// When found, cache indexes on `parent` and break
                                if (node.nodeType === 1 && ++diff && node === elem) {
                                    uniqueCache[type] = [
                                        dirruns,
                                        nodeIndex,
                                        diff
                                    ];
                                    break;
                                }
                            } else {
                                // Use previously-cached element index if available
                                if (useCache) {
                                    // ...in a gzip-friendly way
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {
                                    });
                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {
                                    });
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                // xml :nth-child(...)
                                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                if (diff === false) {
                                    // Use the same loop as above to seek `elem` from the start
                                    while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        // Cache the index of each encountered element
                                        if (useCache) {
                                            outerCache = node[expando] || (node[expando] = {
                                            });
                                            // Support: IE <9 only
                                            // Defend against cloned attroperties (jQuery gh-1709)
                                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {
                                            });
                                            uniqueCache[type] = [
                                                dirruns,
                                                diff
                                            ];
                                        }
                                        if (node === elem) break;
                                    }
                                }
                            }
                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                "PSEUDO": function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) return fn(argument);
                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            "",
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while(i--){
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, _context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        // Match elements unmatched by `matcher`
                        while(i--)if (elem = unmatched[i]) seed[i] = !(matches[i] = elem);
                    }) : function(elem, _context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        // Don't keep the element (issue #299)
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                "has": markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                "contains": markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || getText(elem)).indexOf(text) > -1;
                    };
                }),
                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                        }
                        while ((elem = elem.parentNode) && elem.nodeType === 1)
                        return false;
                    };
                }),
                // Miscellaneous
                "target": function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                "root": function(elem) {
                    return elem === docElem1;
                },
                "focus": function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                // Boolean properties
                "enabled": createDisabledPseudo(false),
                "disabled": createDisabledPseudo(true),
                "checked": function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                "selected": function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) // eslint-disable-next-line no-unused-expressions
                    elem.parentNode.selectedIndex;
                    return elem.selected === true;
                },
                // Contents
                "empty": function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for(elem = elem.firstChild; elem; elem = elem.nextSibling){
                        if (elem.nodeType < 6) return false;
                    }
                    return true;
                },
                "parent": function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                // Element/input types
                "header": function(elem) {
                    return rheader.test(elem.nodeName);
                },
                "input": function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                "button": function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                "text": function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                // Position-in-collection
                "first": createPositionalPseudo(function() {
                    return [
                        0
                    ];
                }),
                "last": createPositionalPseudo(function(_matchIndexes, length) {
                    return [
                        length - 1
                    ];
                }),
                "eq": createPositionalPseudo(function(_matchIndexes, length, argument) {
                    return [
                        argument < 0 ? argument + length : argument
                    ];
                }),
                "even": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for(; i < length; i += 2)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "odd": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for(; i < length; i += 2)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument > length ? length : argument;
                    for(; --i >= 0;)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for(; ++i < length;)matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        // Add button/input type pseudos
        for(i1 in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        })Expr.pseudos[i1] = createInputPseudo(i1);
        for(i1 in {
            submit: true,
            reset: true
        })Expr.pseudos[i1] = createButtonPseudo(i1);
        // Easy API for creating new setFilters
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while(soFar){
                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) // Don't consume trailing commas as valid
                    soFar = soFar.slice(match[0].length) || soFar;
                    groups.push(tokens = []);
                }
                matched = false;
                // Combinators
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                // Filters
                for(type in Expr.filter)if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
            tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for(; i < len; i++)selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? // Check against closest ancestor/preceding element
            function(elem, context, xml) {
                while(elem = elem[dir]){
                    if (elem.nodeType === 1 || checkNonElements) return matcher(elem, context, xml);
                }
                return false;
            } : // Check against all ancestor/preceding elements
            function(elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [
                    dirruns,
                    doneName
                ];
                // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                if (xml) {
                    while(elem = elem[dir])if (elem.nodeType === 1 || checkNonElements) {
                        if (matcher(elem, context, xml)) return true;
                    }
                } else {
                    while(elem = elem[dir])if (elem.nodeType === 1 || checkNonElements) {
                        outerCache = elem[expando] || (elem[expando] = {
                        });
                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {
                        });
                        if (skip && skip === elem.nodeName.toLowerCase()) elem = elem[dir] || elem;
                        else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) // Assign to newCache so results back-propagate to previous elements
                        return newCache[2] = oldCache[2];
                        else {
                            // Reuse newcache so results back-propagate to previous elements
                            uniqueCache[key] = newCache;
                            // A match means we're done; a fail means we have to keep checking
                            if (newCache[2] = matcher(elem, context, xml)) return true;
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while(i--){
                    if (!matchers[i](elem, context, xml)) return false;
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for(; i < len; i++)Sizzle(selector, contexts[i], results);
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for(; i < len; i++){
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) map.push(i);
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) postFilter = setMatcher(postFilter);
            if (postFinder && !postFinder[expando]) postFinder = setMatcher(postFinder, postSelector);
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [
                    context
                ] : context, []), // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
                [] : // ...otherwise use results directly
                results : matcherIn;
                // Find primary matches
                if (matcher) matcher(matcherIn, matcherOut, context, xml);
                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while(i--)if (elem = temp[i]) matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while(i--)if (elem = matcherOut[i]) // Restore matcherIn since elem is not yet a final match
                            temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while(i--)if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) seed[temp] = !(results[temp] = elem);
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) postFinder(null, results, matcherOut, xml);
                    else push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [
                function(elem, context, xml) {
                    var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                    // Avoid hanging onto element (issue #299)
                    checkContext = null;
                    return ret;
                }
            ];
            for(; i < len; i++)if (matcher = Expr.relative[tokens[i].type]) matchers = [
                addCombinator(elementMatcher(matchers), matcher)
            ];
            else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                // Return special upon seeing a positional matcher
                if (matcher[expando]) {
                    // Find the next relative operator (if any) for proper handling
                    j = ++i;
                    for(; j < len; j++){
                        if (Expr.relative[tokens[j].type]) break;
                    }
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens.slice(0, i - 1).concat({
                        value: tokens[i - 2].type === " " ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find["TAG"]("*", outermost), // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                if (outermost) // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                outermostContext = context == document || context || outermost;
                // Add elements passing elementMatchers directly to results
                // Support: IE<9, Safari
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                for(; i !== len && (elem = elems[i]) != null; i++){
                    if (byElement && elem) {
                        j = 0;
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (!context && elem.ownerDocument != document) {
                            setDocument(elem);
                            xml = !documentIsHTML;
                        }
                        while(matcher = elementMatchers[j++])if (matcher(elem, context || document, xml)) {
                            results.push(elem);
                            break;
                        }
                        if (outermost) dirruns = dirrunsUnique;
                    }
                    // Track unmatched elements for set filters
                    if (bySet) {
                        // They will have gone through all possible matchers
                        if (elem = !matcher && elem) matchedCount--;
                        // Lengthen the array for every element, matched or not
                        if (seed) unmatched.push(elem);
                    }
                }
                // `i` is now the count of elements visited above, and adding it to `matchedCount`
                // makes the latter nonnegative.
                matchedCount += i;
                // Apply set filters to unmatched elements
                // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                // no element matchers and no seed.
                // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                // numerically zero.
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while(matcher = setMatchers[j++])matcher(unmatched, setMatched, context, xml);
                    if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                            while(i--)if (!(unmatched[i] || setMatched[i])) setMatched[i] = pop.call(results);
                        }
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                    }
                    // Add matches to results
                    push.apply(results, setMatched);
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) Sizzle.uniqueSort(results);
                }
                // Override manipulation of globals by nested matchers
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match /* Internal Use Only */ ) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!match) match = tokenize(selector);
                i = match.length;
                while(i--){
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) setMatchers.push(cached);
                    else elementMatchers.push(cached);
                }
                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                // Save selector and tokenization
                cached.selector = selector;
            }
            return cached;
        };
        /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */ select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            // Try to minimize operations if there is only one selector in the list and no seed
            // (the latter of which guarantees us context)
            if (match.length === 1) {
                // Reduce context if the leading compound selector is an ID
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) return results;
                    else if (compiled) context = context.parentNode;
                    selector = selector.slice(tokens.shift().value.length);
                }
                // Fetch a seed set for right-to-left matching
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while(i--){
                    token = tokens[i];
                    // Abort if we hit a combinator
                    if (Expr.relative[type = token.type]) break;
                    if (find = Expr.find[type]) // Search, expanding context for leading sibling combinators
                    {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            // If seed is empty or no tokens remain, we can return early
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            // Compile and execute a filtering function if one is not provided
            // Provide `match` to avoid retokenization if we modified the selector above
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function(el) {
            // Should return 1, but returns 4 (following)
            return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function(el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute("href") === "#";
        })) addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        });
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function(el) {
            el.innerHTML = "<input/>";
            el.firstChild.setAttribute("value", "");
            return el.firstChild.getAttribute("value") === "";
        })) addHandle("value", function(elem, _name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === "input") return elem.defaultValue;
        });
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function(el) {
            return el.getAttribute("disabled") == null;
        })) addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        });
        return Sizzle;
    }(window1);
    jQuery.find = Sizzle1;
    jQuery.expr = Sizzle1.selectors;
    // Deprecated
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle1.uniqueSort;
    jQuery.text = Sizzle1.getText;
    jQuery.isXMLDoc = Sizzle1.isXML;
    jQuery.contains = Sizzle1.contains;
    jQuery.escapeSelector = Sizzle1.escape;
    var dir1 = function(elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while((elem = elem[dir]) && elem.nodeType !== 9)if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) break;
            matched.push(elem);
        }
        return matched;
    };
    var siblings = function(n, elem) {
        var matched = [];
        for(; n; n = n.nextSibling)if (n.nodeType === 1 && n !== elem) matched.push(n);
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName1(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        // Single element
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        // Arraylike of elements (jQuery, arguments, Array)
        if (typeof qualifier !== "string") return jQuery.grep(elements, function(elem) {
            return indexOf1.call(qualifier, elem) > -1 !== not;
        });
        // Filtered directly for both simple and complex selectors
        return jQuery.filter(qualifier, elements, not);
    }
    jQuery.filter = function(expr, elems, not) {
        var elem1 = elems[0];
        if (not) expr = ":not(" + expr + ")";
        if (elems.length === 1 && elem1.nodeType === 1) return jQuery.find.matchesSelector(elem1, expr) ? [
            elem1
        ] : [];
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== "string") return this.pushStack(jQuery(selector).filter(function() {
                for(i = 0; i < len; i++){
                    if (jQuery.contains(self[i], this)) return true;
                }
            }));
            ret = this.pushStack([]);
            for(i = 0; i < len; i++)jQuery.find(selector, self[i], ret);
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    // Initialize a jQuery object
    // A central reference to the root jQuery(document)
    var rootjQuery, // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr1 = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function(selector, context, root) {
        var match, elem;
        // HANDLE: $(""), $(null), $(undefined), $(false)
        if (!selector) return this;
        // Method init() accepts an alternate rootjQuery
        // so migrate can support jQuery.sub (gh-2101)
        root = root || rootjQuery;
        // Handle HTML strings
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) // Assume that strings that start and end with <> are HTML and skip the regex check
            match = [
                null,
                selector,
                null
            ];
            else match = rquickExpr1.exec(selector);
            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {
                // HANDLE: $(html) -> $(array)
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    // Option to run scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document1, true));
                    // HANDLE: $(html, props)
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for(match in context)// Properties of context are called as methods if possible
                        if (isFunction(this[match])) this[match](context[match]);
                        else this.attr(match, context[match]);
                    }
                    return this;
                // HANDLE: $(#id)
                } else {
                    elem = document1.getElementById(match[2]);
                    if (elem) {
                        // Inject the element directly into the jQuery object
                        this[0] = elem;
                        this.length = 1;
                    }
                    return this;
                }
            } else if (!context || context.jquery) return (context || root).find(selector);
            else return this.constructor(context).find(selector);
        // HANDLE: $(DOMElement)
        } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
        // HANDLE: $(function)
        // Shortcut for document ready
        } else if (isFunction(selector)) return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
        selector(jQuery);
        return jQuery.makeArray(selector, this);
    };
    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;
    // Initialize central reference
    rootjQuery = jQuery(document1);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        has: function(target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function() {
                var i = 0;
                for(; i < l; i++){
                    if (jQuery.contains(this, targets[i])) return true;
                }
            });
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            // Positional selectors never match, since there's no _selection_ context
            if (!rneedsContext.test(selectors)) for(; i < l; i++){
                for(cur = this[i]; cur && cur !== context; cur = cur.parentNode)// Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                    matched.push(cur);
                    break;
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        // Determine the position of an element within the set
        index: function(elem) {
            // No argument, return index in parent
            if (!elem) return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            // Index in selector
            if (typeof elem === "string") return indexOf1.call(jQuery(elem), this[0]);
            // Locate the position of the desired element
            return indexOf1.call(this, // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while((cur = cur[dir]) && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return dir1(elem, "parentNode");
        },
        parentsUntil: function(elem, _i, until) {
            return dir1(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return dir1(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return dir1(elem, "previousSibling");
        },
        nextUntil: function(elem, _i, until) {
            return dir1(elem, "nextSibling", until);
        },
        prevUntil: function(elem, _i, until) {
            return dir1(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return siblings((elem.parentNode || {
            }).firstChild, elem);
        },
        children: function(elem) {
            return siblings(elem.firstChild);
        },
        contents: function(elem) {
            if (elem.contentDocument != null && // Support: IE 11+
            // <object> elements with no `data` attribute has an object
            // `contentDocument` with a `null` prototype.
            getProto(elem.contentDocument)) return elem.contentDocument;
            // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
            // Treat the template element as a regular one in browsers that
            // don't support it.
            if (nodeName1(elem, "template")) elem = elem.content || elem;
            return jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") selector = until;
            if (selector && typeof selector === "string") matched = jQuery.filter(selector, matched);
            if (this.length > 1) {
                // Remove duplicates
                if (!guaranteedUnique[name]) jQuery.uniqueSort(matched);
                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) matched.reverse();
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    // Convert String-formatted options into Object-formatted ones
    function createOptions(options) {
        var object = {
        };
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */ jQuery.Callbacks = function(options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({
        }, options);
        var firing, // Last fire value for non-forgettable lists
        memory, // Flag to know if list was already fired
        fired, // Flag to prevent firing
        locked, // Actual callback list
        list = [], // Queue of execution data for repeatable lists
        queue = [], // Index of currently firing callback (modified by add/remove as needed)
        firingIndex = -1, // Fire callbacks
        fire = function() {
            // Enforce single-firing
            locked = locked || options.once;
            // Execute callbacks for all pending executions,
            // respecting firingIndex overrides and runtime changes
            fired = firing = true;
            for(; queue.length; firingIndex = -1){
                memory = queue.shift();
                while(++firingIndex < list.length)// Run callback and check for early termination
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                    // Jump to end and forget the data so .add doesn't re-fire
                    firingIndex = list.length;
                    memory = false;
                }
            }
            // Forget the data if we're done with it
            if (!options.memory) memory = false;
            firing = false;
            // Clean up if we're done firing for good
            if (locked) {
                // Keep an empty list if we have data for future add calls
                if (memory) list = [];
                else list = "";
            }
        }, // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
                if (list) {
                    // If we have memory from a past run, we should fire after adding
                    if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                    }
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            if (isFunction(arg)) {
                                if (!options.unique || !self.has(arg)) list.push(arg);
                            } else if (arg && arg.length && toType(arg) !== "string") // Inspect recursively
                            add(arg);
                        });
                    })(arguments);
                    if (memory && !firing) fire();
                }
                return this;
            },
            // Remove a callback from the list
            remove: function() {
                jQuery.each(arguments, function(_, arg) {
                    var index;
                    while((index = jQuery.inArray(arg, list, index)) > -1){
                        list.splice(index, 1);
                        // Handle firing indexes
                        if (index <= firingIndex) firingIndex--;
                    }
                });
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
            },
            // Remove all callbacks from the list
            empty: function() {
                if (list) list = [];
                return this;
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function() {
                locked = queue = [];
                list = memory = "";
                return this;
            },
            disabled: function() {
                return !list;
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function() {
                locked = queue = [];
                if (!memory && !firing) list = memory = "";
                return this;
            },
            locked: function() {
                return !!locked;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
                if (!locked) {
                    args = args || [];
                    args = [
                        context,
                        args.slice ? args.slice() : args
                    ];
                    queue.push(args);
                    if (!firing) fire();
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            // Check for promise aspect first to privilege synchronous behavior
            if (value && isFunction(method = value.promise)) method.call(value).done(resolve).fail(reject);
            else if (value && isFunction(method = value.then)) method.call(value, resolve, reject);
            else // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
            // * false: [ value ].slice( 0 ) => resolve( value )
            // * true: [ value ].slice( 1 ) => resolve()
            resolve.apply(undefined, [
                value
            ].slice(noValue));
        // For Promises/A+, convert exceptions into rejections
        // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
        // Deferred#then to conditionally suppress rejection.
        } catch (value1) {
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            reject.apply(undefined, [
                value1
            ]);
        }
    }
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [
                // action, add listener, callbacks,
                // ... .then handlers, argument index, [final state]
                [
                    "notify",
                    "progress",
                    jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"),
                    2
                ],
                [
                    "resolve",
                    "done",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    0,
                    "resolved"
                ],
                [
                    "reject",
                    "fail",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    1,
                    "rejected"
                ]
            ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred1.done(arguments).fail(arguments);
                    return this;
                },
                "catch": function(fn) {
                    return promise.then(null, fn);
                },
                // Keep pipe for back-compat
                pipe: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(_i, tuple) {
                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                            deferred1[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && isFunction(returned.promise)) returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                else newDefer[tuple[0] + "With"](this, fn ? [
                                    returned
                                ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                then: function(onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;
                    function resolve(depth, deferred, handler, special) {
                        return function() {
                            var that = this, args = arguments, mightThrow = function() {
                                var returned, then;
                                // Support: Promises/A+ section 2.3.3.3.3
                                // https://promisesaplus.com/#point-59
                                // Ignore double-resolution attempts
                                if (depth < maxDepth) return;
                                returned = handler.apply(that, args);
                                // Support: Promises/A+ section 2.3.1
                                // https://promisesaplus.com/#point-48
                                if (returned === deferred.promise()) throw new TypeError("Thenable self-resolution");
                                // Support: Promises/A+ sections 2.3.3.1, 3.5
                                // https://promisesaplus.com/#point-54
                                // https://promisesaplus.com/#point-75
                                // Retrieve `then` only once
                                then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                                // Handle a returned thenable
                                if (isFunction(then)) {
                                    // Special processors (notify) just wait for resolution
                                    if (special) then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                    else {
                                        // ...and disregard older resolution values
                                        maxDepth++;
                                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                    }
                                } else {
                                    // Only substitute handlers pass on context
                                    // and multiple values (non-spec behavior)
                                    if (handler !== Identity) {
                                        that = undefined;
                                        args = [
                                            returned
                                        ];
                                    }
                                    // Process the value(s)
                                    // Default process is resolve
                                    (special || deferred.resolveWith)(that, args);
                                }
                            }, // Only normal processors (resolve) catch and reject exceptions
                            process = special ? mightThrow : function() {
                                try {
                                    mightThrow();
                                } catch (e) {
                                    if (jQuery.Deferred.exceptionHook) jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                    // Support: Promises/A+ section 2.3.3.3.4.1
                                    // https://promisesaplus.com/#point-61
                                    // Ignore post-resolution exceptions
                                    if (depth + 1 >= maxDepth) {
                                        // Only substitute handlers pass on context
                                        // and multiple values (non-spec behavior)
                                        if (handler !== Thrower) {
                                            that = undefined;
                                            args = [
                                                e
                                            ];
                                        }
                                        deferred.rejectWith(that, args);
                                    }
                                }
                            };
                            // Support: Promises/A+ section 2.3.3.3.1
                            // https://promisesaplus.com/#point-57
                            // Re-resolve promises immediately to dodge false rejection from
                            // subsequent errors
                            if (depth) process();
                            else {
                                // Call an optional hook to record the stack, in case of exception
                                // since it's otherwise lost when execution goes async
                                if (jQuery.Deferred.getStackHook) process.stackTrace = jQuery.Deferred.getStackHook();
                                window1.setTimeout(process);
                            }
                        };
                    }
                    return jQuery.Deferred(function(newDefer) {
                        // progress_handlers.add( ... )
                        tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                        // fulfilled_handlers.add( ... )
                        tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                        // rejected_handlers.add( ... )
                        tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred1 = {
            };
            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[tuple[1]] = list.add;
                // Handle state
                if (stateString) list.add(function() {
                    // state = "resolved" (i.e., fulfilled)
                    // state = "rejected"
                    state = stateString;
                }, // rejected_callbacks.disable
                // fulfilled_callbacks.disable
                tuples[3 - i][2].disable, // rejected_handlers.disable
                // fulfilled_handlers.disable
                tuples[3 - i][3].disable, // progress_callbacks.lock
                tuples[0][2].lock, // progress_handlers.lock
                tuples[0][3].lock);
                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add(tuple[3].fire);
                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred1[tuple[0]] = function() {
                    deferred1[tuple[0] + "With"](this === deferred1 ? undefined : this, arguments);
                    return this;
                };
                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred1[tuple[0] + "With"] = list.fireWith;
            });
            // Make the deferred a promise
            promise.promise(deferred1);
            // Call given func if any
            if (func) func.call(deferred1, deferred1);
            // All done!
            return deferred1;
        },
        // Deferred helper
        when: function(singleValue) {
            var // count of uncompleted subordinates
            remaining = arguments.length, // count of unprocessed arguments
            i = remaining, // subordinate fulfillment data
            resolveContexts = Array(i), resolveValues = slice1.call(arguments), // the primary Deferred
            primary = jQuery.Deferred(), // subordinate callback factory
            updateFunc = function(i) {
                return function(value) {
                    resolveContexts[i] = this;
                    resolveValues[i] = arguments.length > 1 ? slice1.call(arguments) : value;
                    if (!--remaining) primary.resolveWith(resolveContexts, resolveValues);
                };
            };
            // Single- and empty arguments are adopted like Promise.resolve
            if (remaining <= 1) {
                adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);
                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) return primary.then();
            }
            // Multiple arguments are aggregated like Promise.all array elements
            while(i--)adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            return primary.promise();
        }
    });
    // These usually indicate a programmer mistake during development,
    // warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function(error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window1.console && window1.console.warn && error && rerrorNames.test(error.name)) window1.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    };
    jQuery.readyException = function(error) {
        window1.setTimeout(function() {
            throw error;
        });
    };
    // The deferred used on DOM ready
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function(fn) {
        readyList.then(fn)// Wrap jQuery.readyException in a function so that the lookup
        // happens at the time of error handling instead of callback
        // registration.
        .catch(function(error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Handle when the DOM is ready
        ready: function(wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) return;
            // Remember that the DOM is ready
            jQuery.isReady = true;
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) return;
            // If there are functions bound, to execute
            readyList.resolveWith(document1, [
                jQuery
            ]);
        }
    });
    jQuery.ready.then = readyList.then;
    // The ready event handler and self cleanup method
    function completed1() {
        document1.removeEventListener("DOMContentLoaded", completed1);
        window1.removeEventListener("load", completed1);
        jQuery.ready();
    }
    // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE <=9 - 10 only
    // Older IE sometimes signals "interactive" too soon
    if (document1.readyState === "complete" || document1.readyState !== "loading" && !document1.documentElement.doScroll) // Handle it asynchronously to allow scripts the opportunity to delay ready
    window1.setTimeout(jQuery.ready);
    else {
        // Use the handy event callback
        document1.addEventListener("DOMContentLoaded", completed1);
        // A fallback to window.onload, that will always work
        window1.addEventListener("load", completed1);
    }
    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function(elems, fn, key, value2, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        // Sets many values
        if (toType(key) === "object") {
            chainable = true;
            for(i in key)access(elems, fn, i, key[i], true, emptyGet, raw);
        // Sets one value
        } else if (value2 !== undefined) {
            chainable = true;
            if (!isFunction(value2)) raw = true;
            if (bulk) {
                // Bulk operations run against the entire set
                if (raw) {
                    fn.call(elems, value2);
                    fn = null;
                // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function(elem, _key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) for(; i < len; i++)fn(elems[i], key, raw ? value2 : value2.call(elems[i], i, fn(elems[i], key)));
        }
        if (chainable) return elems;
        // Gets
        if (bulk) return fn.call(elems);
        return len ? fn(elems[0], key) : emptyGet;
    };
    // Matches dashed string for camelizing
    var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
    // Used by camelCase as callback to replace()
    function fcamelCase(_all, letter) {
        return letter.toUpperCase();
    }
    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE <=9 - 11, Edge 12 - 15
    // Microsoft forgot to hump their vendor prefix (#9572)
    function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function(owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function(owner) {
            // Check if the owner object already has a cache
            var value = owner[this.expando];
            // If not, create one
            if (!value) {
                value = {
                };
                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see #8335.
                // Always return an empty object.
                if (acceptData(owner)) {
                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) owner[this.expando] = value;
                    else Object.defineProperty(owner, this.expando, {
                        value: value,
                        configurable: true
                    });
                }
            }
            return value;
        },
        set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            // Handle: [ owner, key, value ] args
            // Always use camelCase key (gh-2257)
            if (typeof data === "string") cache[camelCase(data)] = value;
            else // Copy the properties one-by-one to the cache object
            for(prop in data)cache[camelCase(prop)] = data[prop];
            return cache;
        },
        get: function(owner, key) {
            return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
            owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function(owner, key, value) {
            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined || key && typeof key === "string" && value === undefined) return this.get(owner, key);
            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);
            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) return;
            if (key !== undefined) {
                // Support array or space separated string of keys
                if (Array.isArray(key)) // If key is an array of keys...
                // We always set camelCase keys, so remove that.
                key = key.map(camelCase);
                else {
                    key = camelCase(key);
                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ? [
                        key
                    ] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while(i--)delete cache[key[i]];
            }
            // Remove the expando if there's no more data
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if (owner.nodeType) owner[this.expando] = undefined;
                else delete owner[this.expando];
            }
        },
        hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === "true") return true;
        if (data === "false") return false;
        if (data === "null") return null;
        // Only convert to a number if it doesn't change the string
        if (data === +data + "") return +data;
        if (rbrace.test(data)) return JSON.parse(data);
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = getData(data);
                } catch (e) {
                }
                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
            } else data = undefined;
        }
        return data;
    }
    jQuery.extend({
        hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
            dataUser.remove(elem, name);
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function(key, value3) {
            var i, name, data1, elem = this[0], attrs = elem && elem.attributes;
            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data1 = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while(i--)// Support: IE 11 only
                        // The attrs elements can be null (#14894)
                        if (attrs[i]) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = camelCase(name.slice(5));
                                dataAttr(elem, name, data1[name]);
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data1;
            }
            // Sets multiple values
            if (typeof key === "object") return this.each(function() {
                dataUser.set(this, key);
            });
            return access(this, function(value) {
                var data;
                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {
                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get(elem, key);
                    if (data !== undefined) return data;
                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, key);
                    if (data !== undefined) return data;
                    // We tried really hard, but the data doesn't exist.
                    return;
                }
                // Set the data...
                this.each(function() {
                    // We always store the camelCased key
                    dataUser.set(this, key, value);
                });
            }, null, value3, arguments.length > 1, null, true);
        },
        removeData: function(key) {
            return this.each(function() {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);
                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || Array.isArray(data)) queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    else queue.push(data);
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") queue.unshift("inprogress");
                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) hooks.empty.fire();
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    dataPriv.remove(elem, [
                        type + "queue",
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) return jQuery.queue(this[0], type);
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                // Ensure a hooks for this queue
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") jQuery.dequeue(this, type);
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) defer.resolveWith(elements, [
                    elements
                ]);
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while(i--){
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
    var cssExpand = [
        "Top",
        "Right",
        "Bottom",
        "Left"
    ];
    var documentElement = document1.documentElement;
    var isAttached = function(elem) {
        return jQuery.contains(elem.ownerDocument, elem);
    }, composed = {
        composed: true
    };
    // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
    // Check attachment across shadow DOM boundaries when possible (gh-3504)
    // Support: iOS 10.0-10.2 only
    // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
    // leading to errors. We need to check for `getRootNode`.
    if (documentElement.getRootNode) isAttached = function(elem) {
        return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
    var isHiddenWithinTree = function(elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) && jQuery.css(elem, "display") === "none";
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
        } : function() {
            return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), // Starting value computation is required for potential unit mismatches
        initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            // Support: Firefox <=54
            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
            initial = initial / 2;
            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];
            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;
            while(maxIterations--){
                // Evaluate and update our best guess (doubling guesses that zero out).
                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) maxIterations = 0;
                initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {
    };
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) return display;
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") display = "block";
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        // Determine new display value for elements that need to change
        for(; index < length; index++){
            elem = elements[index];
            if (!elem.style) continue;
            display = elem.style.display;
            if (show) {
                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) elem.style.display = "";
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) values[index] = getDefaultDisplay(elem);
            } else if (display !== "none") {
                values[index] = "none";
                // Remember what we're overwriting
                dataPriv.set(elem, "display", display);
            }
        }
        // Set the display of the elements in a second loop to avoid constant reflow
        for(index = 0; index < length; index++)if (values[index] != null) elements[index].style.display = values[index];
        return elements;
    }
    jQuery.fn.extend({
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") return state ? this.show() : this.hide();
            return this.each(function() {
                if (isHiddenWithinTree(this)) jQuery(this).show();
                else jQuery(this).hide();
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
    (function() {
        var fragment = document1.createDocumentFragment(), div = fragment.appendChild(document1.createElement("div")), input = document1.createElement("input");
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support1.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support1.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        // Support: IE <=9 only
        // IE <=9 replaces <option> tags with their contents when inserted outside of
        // the select element.
        div.innerHTML = "<option></option>";
        support1.option = !!div.lastChild;
    })();
    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [
            1,
            "<table>",
            "</table>"
        ],
        col: [
            2,
            "<table><colgroup>",
            "</colgroup></table>"
        ],
        tr: [
            2,
            "<table><tbody>",
            "</tbody></table>"
        ],
        td: [
            3,
            "<table><tbody><tr>",
            "</tr></tbody></table>"
        ],
        _default: [
            0,
            "",
            ""
        ]
    };
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    // Support: IE <=9 only
    if (!support1.option) wrapMap.optgroup = wrapMap.option = [
        1,
        "<select multiple='multiple'>",
        "</select>"
    ];
    function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") ret = context.getElementsByTagName(tag || "*");
        else if (typeof context.querySelectorAll !== "undefined") ret = context.querySelectorAll(tag || "*");
        else ret = [];
        if (tag === undefined || tag && nodeName1(context, tag)) return jQuery.merge([
            context
        ], ret);
        return ret;
    }
    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for(; i < l; i++)dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
    var rhtml1 = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for(; i < l; i++){
            elem = elems[i];
            if (elem || elem === 0) {
                // Add nodes directly
                if (toType(elem) === "object") // Support: Android <=4.0 only, PhantomJS 1 only
                // push.apply(_, arraylike) throws on ancient WebKit
                jQuery.merge(nodes, elem.nodeType ? [
                    elem
                ] : elem);
                else if (!rhtml1.test(elem)) nodes.push(context.createTextNode(elem));
                else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));
                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || [
                        "",
                        ""
                    ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while(j--)tmp = tmp.lastChild;
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);
                    // Remember the top-level container
                    tmp = fragment.firstChild;
                    // Ensure the created nodes are orphaned (#12392)
                    tmp.textContent = "";
                }
            }
        }
        // Remove wrapper from fragment
        fragment.textContent = "";
        i = 0;
        while(elem = nodes[i++]){
            // Skip elements already in the context collection (trac-4087)
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) ignored.push(elem);
                continue;
            }
            attached = isAttached(elem);
            // Append to fragment
            tmp = getAll(fragment.appendChild(elem), "script");
            // Preserve script evaluation history
            if (attached) setGlobalEval(tmp);
            // Capture executables
            if (scripts) {
                j = 0;
                while(elem = tmp[j++])if (rscriptType.test(elem.type || "")) scripts.push(elem);
            }
        }
        return fragment;
    }
    var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    // Support: IE <=9 - 11+
    // focus() and blur() are asynchronous, except when they are no-op.
    // So expect focus to be synchronous when the element is already active,
    // and blur to be synchronous when the element is not already active.
    // (focus and blur are always synchronous in other supported browsers,
    // this just defines when we can count on it).
    function expectSync1(elem, type) {
        return elem === safeActiveElement() === (type === "focus");
    }
    // Support: IE <=9 only
    // Accessing document.activeElement can throw unexpectedly
    // https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
        try {
            return document1.activeElement;
        } catch (err) {
        }
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        // Types can be a map of types/handlers
        if (typeof types === "object") {
            // ( types-Object, selector, data )
            if (typeof selector !== "string") {
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for(type in types)on(elem, type, selector, data, types[type], one);
            return elem;
        }
        if (data == null && fn == null) {
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {
                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) fn = returnFalse;
        else if (!fn) return elem;
        if (one === 1) {
            origFn = fn;
            fn = function(event) {
                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */ jQuery.event = {
        global: {
        },
        add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            // Only attach events to objects that accept data
            if (!acceptData(elem)) return;
            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            // Ensure that invalid selectors throw exceptions at attach time
            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
            if (selector) jQuery.find.matchesSelector(documentElement, selector);
            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) handler.guid = jQuery.guid++;
            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) events = elemData.events = Object.create(null);
            if (!(eventHandle = elemData.handle)) eventHandle = elemData.handle = function(e) {
                // Discard the second event of a jQuery.event.trigger() and
                // when an event is called after a page has unloaded
                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
            // Handle multiple events separated by a space
            types = (types || "").match(rnothtmlwhite) || [
                ""
            ];
            t = types.length;
            while(t--){
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // There *must* be a type, no attaching namespace-only handlers
                if (!type) continue;
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {
                };
                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;
                // Update special based on newly reset type
                special = jQuery.event.special[type] || {
                };
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    // Only use addEventListener if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) elem.addEventListener(type, eventHandle);
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) handleObj.handler.guid = handler.guid;
                }
                // Add to the element's handler list, delegates in front
                if (selector) handlers.splice(handlers.delegateCount++, 0, handleObj);
                else handlers.push(handleObj);
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }
        },
        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) return;
            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnothtmlwhite) || [
                ""
            ];
            t = types.length;
            while(t--){
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for(type in events)jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    continue;
                }
                special = jQuery.event.special[type] || {
                };
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                // Remove matching events
                origCount = j = handlers.length;
                while(j--){
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) handlers.delegateCount--;
                        if (special.remove) special.remove.call(elem, handleObj);
                    }
                }
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) jQuery.removeEvent(elem, type, elemData.handle);
                    delete events[type];
                }
            }
            // Remove data and the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) dataPriv.remove(elem, "handle events");
        },
        dispatch: function(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {
            };
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            for(i = 1; i < arguments.length; i++)args[i] = arguments[i];
            event.delegateTarget = this;
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) return;
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while((matched = handlerQueue[i++]) && !event.isPropagationStopped()){
                event.currentTarget = matched.elem;
                j = 0;
                while((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped())// If the event is namespaced, then each handler is only invoked if it is
                // specially universal or its namespaces are a superset of the event's.
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                    event.handleObj = handleObj;
                    event.data = handleObj.data;
                    ret = ((jQuery.event.special[handleObj.origType] || {
                    }).handle || handleObj.handler).apply(matched.elem, args);
                    if (ret !== undefined) {
                        if ((event.result = ret) === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
            }
            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) special.postDispatch.call(this, event);
            return event.result;
        },
        handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            // Find delegate handlers
            if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
                for(; cur !== this; cur = cur.parentNode || this)// Don't check non-elements (#13208)
                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                    matchedHandlers = [];
                    matchedSelectors = {
                    };
                    for(i = 0; i < delegateCount; i++){
                        handleObj = handlers[i];
                        // Don't conflict with Object.prototype properties (#13203)
                        sel = handleObj.selector + " ";
                        if (matchedSelectors[sel] === undefined) matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [
                            cur
                        ]).length;
                        if (matchedSelectors[sel]) matchedHandlers.push(handleObj);
                    }
                    if (matchedHandlers.length) handlerQueue.push({
                        elem: cur,
                        handlers: matchedHandlers
                    });
                }
            }
            // Add the remaining (directly-bound) handlers
            cur = this;
            if (delegateCount < handlers.length) handlerQueue.push({
                elem: cur,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        addProp: function(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function() {
                    if (this.originalEvent) return hook(this.originalEvent);
                } : function() {
                    if (this.originalEvent) return this.originalEvent[name];
                },
                set: function(value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            click: {
                // Utilize native event to ensure correct state for checkable inputs
                setup: function(data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;
                    // Claim the first handler
                    if (rcheckableType.test(el.type) && el.click && nodeName1(el, "input")) // dataPriv.set( el, "click", ... )
                    leverageNative(el, "click", returnTrue);
                    // Return false to allow normal processing in the caller
                    return false;
                },
                trigger: function(data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;
                    // Force setup before triggering a click
                    if (rcheckableType.test(el.type) && el.click && nodeName1(el, "input")) leverageNative(el, "click");
                    // Return non-false to allow normal event-path propagation
                    return true;
                },
                // For cross-browser consistency, suppress native .click() on links
                // Also prevent it if we're currently inside a leveraged native-event stack
                _default: function(event) {
                    var target = event.target;
                    return rcheckableType.test(target.type) && target.click && nodeName1(target, "input") && dataPriv.get(target, "click") || nodeName1(target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) event.originalEvent.returnValue = event.result;
                }
            }
        }
    };
    // Ensure the presence of an event listener that handles manually-triggered
    // synthetic events by interrupting progress until reinvoked in response to
    // *native* events that it fires directly, ensuring that state changes have
    // already occurred before other listeners are invoked.
    function leverageNative(el, type, expectSync) {
        // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
        if (!expectSync) {
            if (dataPriv.get(el, type) === undefined) jQuery.event.add(el, type, returnTrue);
            return;
        }
        // Register the controller as a special universal handler for all event namespaces
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
            namespace: false,
            handler: function(event) {
                var notAsync, result, saved = dataPriv.get(this, type);
                if (event.isTrigger & 1 && this[type]) {
                    // Interrupt processing of the outer synthetic .trigger()ed event
                    // Saved data should be false in such cases, but might be a leftover capture object
                    // from an async native handler (gh-4350)
                    if (!saved.length) {
                        // Store arguments for use when handling the inner native event
                        // There will always be at least one argument (an event object), so this array
                        // will not be confused with a leftover capture object.
                        saved = slice1.call(arguments);
                        dataPriv.set(this, type, saved);
                        // Trigger the native event and capture its result
                        // Support: IE <=9 - 11+
                        // focus() and blur() are asynchronous
                        notAsync = expectSync(this, type);
                        this[type]();
                        result = dataPriv.get(this, type);
                        if (saved !== result || notAsync) dataPriv.set(this, type, false);
                        else result = {
                        };
                        if (saved !== result) {
                            // Cancel the outer synthetic event
                            event.stopImmediatePropagation();
                            event.preventDefault();
                            // Support: Chrome 86+
                            // In Chrome, if an element having a focusout handler is blurred by
                            // clicking outside of it, it invokes the handler synchronously. If
                            // that handler calls `.remove()` on the element, the data is cleared,
                            // leaving `result` undefined. We need to guard against this.
                            return result && result.value;
                        }
                    // If this is an inner synthetic event for an event with a bubbling surrogate
                    // (focus or blur), assume that the surrogate already propagated from triggering the
                    // native event and prevent that from happening again here.
                    // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                    // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                    // less bad than duplication.
                    } else if ((jQuery.event.special[type] || {
                    }).delegateType) event.stopPropagation();
                // If this is a native event triggered above, everything is now in order
                // Fire an inner synthetic event with the original arguments
                } else if (saved.length) {
                    // ...and capture the result
                    dataPriv.set(this, type, {
                        value: jQuery.event.trigger(// Support: IE <=9 - 11+
                        // Extend with the prototype to reset the above stopImmediatePropagation()
                        jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
                    });
                    // Abort handling of the native event
                    event.stopImmediatePropagation();
                }
            }
        });
    }
    jQuery.removeEvent = function(elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) elem.removeEventListener(type, handle);
    };
    jQuery.Event = function(src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;
            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (#504, #13143)
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        // Event type
        } else this.type = src;
        // Put explicitly provided properties onto the event object
        if (props) jQuery.extend(this, props);
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || Date.now();
        // Mark it as fixed
        this[jQuery.expando] = true;
    };
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) e.preventDefault();
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) e.stopPropagation();
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) e.stopImmediatePropagation();
            this.stopPropagation();
        }
    };
    // Includes all common event props including KeyEvent and MouseEvent specific props
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
    }, jQuery.event.addProp);
    jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(type, delegateType) {
        jQuery.event.special[type] = {
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function() {
                // Claim the first handler
                // dataPriv.set( this, "focus", ... )
                // dataPriv.set( this, "blur", ... )
                leverageNative(this, type, expectSync1);
                // Return false to allow normal processing in the caller
                return false;
            },
            trigger: function() {
                // Force setup before trigger
                leverageNative(this, type);
                // Return non-false to allow normal event-path propagation
                return true;
            },
            // Suppress native focus or blur as it's already being fired
            // in leverageNative.
            _default: function() {
                return true;
            },
            delegateType: delegateType
        };
    });
    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for(type in types)this.off(type, selector, types[type]);
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) fn = returnFalse;
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i, // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    // Prefer a tbody over its parent table for containing new rows
    function manipulationTarget(elem, content) {
        if (nodeName1(elem, "table") && nodeName1(content.nodeType !== 11 ? content : content.firstChild, "tr")) return jQuery(elem).children("tbody")[0] || elem;
        return elem;
    }
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") elem.type = elem.type.slice(5);
        else elem.removeAttribute("type");
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;
        if (dest.nodeType !== 1) return;
        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
                dataPriv.remove(dest, "handle events");
                for(type in events)for(i = 0, l = events[type].length; i < l; i++)jQuery.event.add(dest, type, events[type][i]);
            }
        }
        // 2. Copy user data
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({
            }, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    // Fix IE bugs, see support tests
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === "input" && rcheckableType.test(src.type)) dest.checked = src.checked;
        else if (nodeName === "input" || nodeName === "textarea") dest.defaultValue = src.defaultValue;
    }
    function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = flat(args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        // We can't cloneNode fragments that contain checked, in WebKit
        if (valueIsFunction || l > 1 && typeof value === "string" && !support1.checkClone && rchecked.test(value)) return collection.each(function(index) {
            var self = collection.eq(index);
            if (valueIsFunction) args[0] = value.call(this, index, self.html());
            domManip(self, args, callback, ignored);
        });
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) fragment = first;
            // Require either new content or an interest in ignored elements to invoke the callback
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;
                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for(; i < l; i++){
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        // Keep references to cloned scripts for later restoration
                        if (hasScripts) // Support: Android <=4.0 only, PhantomJS 1 only
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(scripts, getAll(node, "script"));
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    // Reenable scripts
                    jQuery.map(scripts, restoreScript);
                    // Evaluate executable scripts on first document insertion
                    for(i = 0; i < hasScripts; i++){
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || "").toLowerCase() !== "module") // Optional AJAX dependency, but won't run scripts if not present
                            {
                                if (jQuery._evalUrl && !node.noModule) jQuery._evalUrl(node.src, {
                                    nonce: node.nonce || node.getAttribute("nonce")
                                }, doc);
                            } else DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for(; (node = nodes[i]) != null; i++){
            if (!keepData && node.nodeType === 1) jQuery.cleanData(getAll(node));
            if (node.parentNode) {
                if (keepData && isAttached(node)) setGlobalEval(getAll(node, "script"));
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function(html) {
            return html;
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            // Fix IE cloning issues
            if (!support1.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for(i = 0, l = srcElements.length; i < l; i++)fixInput(srcElements[i], destElements[i]);
            }
            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for(i = 0, l = srcElements.length; i < l; i++)cloneCopyEvent(srcElements[i], destElements[i]);
                } else cloneCopyEvent(elem, clone);
            }
            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            // Return the cloned set
            return clone;
        },
        cleanData: function(elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for(; (elem = elems[i]) !== undefined; i++)if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                    if (data.events) {
                        for(type in data.events)if (special[type]) jQuery.event.remove(elem, type);
                        else jQuery.removeEvent(elem, type, data.handle);
                    }
                    // Support: Chrome <=35 - 45+
                    // Assign undefined instead of using delete, see Data#remove
                    elem[dataPriv.expando] = undefined;
                }
                if (elem[dataUser.expando]) // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined;
            }
        }
    });
    jQuery.fn.extend({
        detach: function(selector) {
            return remove(this, selector, true);
        },
        remove: function(selector) {
            return remove(this, selector);
        },
        text: function(value4) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) this.textContent = value;
                });
            }, null, value4, arguments.length);
        },
        append: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this);
            });
        },
        after: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        empty: function() {
            var elem, i = 0;
            for(; (elem = this[i]) != null; i++)if (elem.nodeType === 1) {
                // Prevent memory leaks
                jQuery.cleanData(getAll(elem, false));
                // Remove any remaining nodes
                elem.textContent = "";
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value5) {
            return access(this, function(value) {
                var elem = this[0] || {
                }, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) return elem.innerHTML;
                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                    "",
                    ""
                ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for(; i < l; i++){
                            elem = this[i] || {
                            };
                            // Remove element nodes and prevent memory leaks
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {
                    }
                }
                if (elem) this.empty().append(value);
            }, null, value5, arguments.length);
        },
        replaceWith: function() {
            var ignored = [];
            // Make the changes, replacing each non-ignored context element with the new content
            return domManip(this, arguments, function(elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) parent.replaceChild(elem, this);
                }
            // Force callback invocation
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for(; i <= last; i++){
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                // Support: Android <=4.0 only, PhantomJS 1 only
                // .get() because push.apply(_, arraylike) throws on ancient WebKit
                push1.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles = function(elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) view = window1;
        return view.getComputedStyle(elem);
    };
    var swap = function(elem, options, callback) {
        var ret, name, old = {
        };
        // Remember the old values, and insert the new ones
        for(name in options){
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.call(elem);
        // Revert the old values
        for(name in options)elem.style[name] = old[name];
        return ret;
    };
    var rboxStyle = new RegExp(cssExpand.join("|"), "i");
    (function() {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
            // This is a singleton, we need to execute it only once
            if (!div) return;
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window1.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
            // Some styles come back with percentage values, even though they shouldn't
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            // Support: IE 9 - 11 only
            // Detect misreporting of content dimensions for box-sizing:border-box elements
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            // Support: IE 9 only
            // Detect overflow:scroll screwiness (gh-3699)
            // Support: Chrome <=64
            // Don't get tricked when zoom affects offsetWidth (gh-4029)
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            // Nullify the div so it wouldn't be stored in the memory and
            // it will also be a sign that checks already performed
            div = null;
        }
        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document1.createElement("div"), div = document1.createElement("div");
        // Finish early in limited (non-browser) environments
        if (!div.style) return;
        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support1.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support1, {
            boxSizingReliable: function() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function() {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function() {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
                computeStyleTests();
                return scrollboxSizeVal;
            },
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function() {
                var table, tr, trChild, trStyle;
                if (reliableTrDimensionsVal == null) {
                    table = document1.createElement("table");
                    tr = document1.createElement("tr");
                    trChild = document1.createElement("div");
                    table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                    tr.style.cssText = "border:1px solid";
                    // Support: Chrome 86+
                    // Height set through cssText does not get applied.
                    // Computed height then comes back as 0.
                    tr.style.height = "1px";
                    trChild.style.height = "9px";
                    // Support: Android 8 Chrome 86+
                    // In our bodyBackground.html iframe,
                    // display for all div elements is set to "inline",
                    // which causes a problem only in Android 8 Chrome 86.
                    // Ensuring the div is display: block
                    // gets around this issue.
                    trChild.style.display = "block";
                    documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                    trStyle = window1.getComputedStyle(tr);
                    reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                    documentElement.removeChild(table);
                }
                return reliableTrDimensionsVal;
            }
        });
    })();
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, // Support: Firefox 51+
        // Retrieving style before computed somehow
        // fixes an issue with getting wrong values
        // on detached elements
        style = elem.style;
        computed = computed || getStyles(elem);
        // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, #12537)
        //   .css('--customProperty) (#3144)
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === "" && !isAttached(elem)) ret = jQuery.style(elem, name);
            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // https://drafts.csswg.org/cssom/#resolved-values
            if (!support1.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + "" : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }
                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var cssPrefixes = [
        "Webkit",
        "Moz",
        "ms"
    ], emptyStyle = document1.createElement("div").style, vendorProps = {
    };
    // Return a vendor-prefixed property or undefined
    function vendorPropName(name) {
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while(i--){
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) return name;
        }
    }
    // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
    function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];
        if (final) return final;
        if (name in emptyStyle) return name;
        return vendorProps[name] = vendorPropName(name) || name;
    }
    var // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    };
    function setPositiveNumber(_elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
    }
    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
        // Adjustment may not be necessary
        if (box === (isBorderBox ? "border" : "content")) return 0;
        for(; i < 4; i += 2){
            // Both box models exclude margin
            if (box === "margin") delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
            if (!isBorderBox) {
                // Add padding
                delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // For "border" or "margin", add border
                if (box !== "padding") delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                else extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            // If we get here with a border-box (content + padding + border), we're seeking "content" or
            // "padding" or "margin"
            } else {
                // For "content", subtract padding
                if (box === "content") delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // For "content" or "padding", subtract border
                if (box !== "margin") delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
        }
        // Account for positive content-box scroll gutter when requested by providing computedVal
        if (!isBorderBox && computedVal >= 0) // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
        // Assuming integer scroll gutter, subtract the rest and round down
        delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
        return delta;
    }
    function getWidthOrHeight(elem, dimension, extra) {
        // Start with computed style
        var styles = getStyles(elem), // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
        // Fake content-box until we know it's needed to know the true value.
        boxSizingNeeded = !support1.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
        // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.
        if (rnumnonpx.test(val)) {
            if (!extra) return val;
            val = "auto";
        }
        // Support: IE 9 - 11 only
        // Use offsetWidth/offsetHeight for when box sizing is unreliable.
        // In those cases, the computed value can be trusted to be border-box.
        if ((!support1.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        !support1.reliableTrDimensions() && nodeName1(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === "auto" || // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
        elem.getClientRects().length) {
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
            // Where available, offsetWidth/offsetHeight approximate border box dimensions.
            // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
            // retrieved value as a content box dimension.
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) val = elem[offsetProp];
        }
        // Normalize "" and auto
        val = parseFloat(val) || 0;
        // Adjust for the element's box model
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val) + "px";
    }
    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
        },
        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) return;
            // Make sure that we're working with the right name
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            // Make sure that we're working with the right name. We don't
            // want to query the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) name = finalPropName(origName);
            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;
                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    // Fixes bug #9237
                    type = "number";
                }
                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) return;
                // If a number was passed in, add the unit (except for certain CSS properties)
                // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                // "px" to a few hardcoded values.
                if (type === "number" && !isCustomProp) value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                // background-* props affect original clone's values
                if (!support1.clearCloneStyle && value === "" && name.indexOf("background") === 0) style[name] = "inherit";
                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) style.setProperty(name, value);
                    else style[name] = value;
                }
            } else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) return ret;
                // Otherwise just get the value from the style object
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            // Make sure that we're working with the right name. We don't
            // want to modify the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) name = finalPropName(origName);
            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) val = hooks.get(elem, true, extra);
            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) val = curCSS(elem, name, styles);
            // Convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) val = cssNormalTransform[name];
            // Make numeric if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        "height",
        "width"
    ], function(_i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
                if (computed) // Certain elements can have dimension info if we invisibly show them
                // but it must have a current display style that would benefit
                return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
            },
            set: function(elem, value, extra) {
                var matches, styles = getStyles(elem), // Only read styles.position if the test has a chance to fail
                // to avoid forcing a reflow.
                scrollboxSizeBuggy = !support1.scrollboxSize() && styles.position === "absolute", // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
                // Account for unreliable border-box dimensions by comparing offset* to computed and
                // faking a content-box to get border and padding (gh-3699)
                if (isBorderBox && scrollboxSizeBuggy) subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
                // Convert to pixels if value adjustment is needed
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support1.reliableMarginLeft, function(elem, computed) {
        if (computed) return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
            marginLeft: 0
        }, function() {
            return elem.getBoundingClientRect().left;
        })) + "px";
    });
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {
                }, // Assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [
                    value
                ];
                for(; i < 4; i++)expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        if (prefix !== "margin") jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    });
    jQuery.fn.extend({
        css: function(name1, value6) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {
                }, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for(; i < len; i++)map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name1, value6, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            else this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) this.options.step.call(this.elem, this.now, this);
            if (hooks && hooks.set) hooks.set(this);
            else Tween.propHooks._default.set(this);
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) return tween.elem[tween.prop];
                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) jQuery.fx.step[tween.prop](tween);
                else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                else tween.elem[tween.prop] = tween.now;
            }
        }
    };
    // Support: IE <=9 only
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) tween.elem[tween.prop] = tween.now;
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };
    jQuery.fx = Tween.prototype.init;
    // Back compat <1.8 extension point
    jQuery.fx.step = {
    };
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document1.hidden === false && window1.requestAnimationFrame) window1.requestAnimationFrame(schedule);
            else window1.setTimeout(schedule, jQuery.fx.interval);
            jQuery.fx.tick();
        }
    }
    // Animations created synchronously will run synchronously
    function createFxNow() {
        window1.setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }
    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = {
            height: type
        };
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for(; i < 4; i += 2 - includeWidth){
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) attrs.opacity = attrs.width = type;
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for(; index < length; index++){
            if (tween = collection[index].call(animation, prop, value)) // We're done with this property
            return tween;
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {
        }, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        // Queue-skipping animations hijack the fx hooks
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                // Ensure the complete handler is called before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) hooks.empty.fire();
                });
            });
        }
        // Detect show/hide animations
        for(prop in props){
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) hidden = true;
                    else continue;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) return;
        // Restrict "overflow" and "display" styles during box animations
        if (isBox && elem.nodeType === 1) {
            // Support: IE <=9 - 11, Edge 12 - 15
            // Record all 3 overflow attributes because IE does not infer the shorthand
            // from identically-valued overflowX and overflowY and Edge just mirrors
            // the overflowX value there.
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            // Identify a display type, preferring old show/hide data over the CSS cascade
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) restoreDisplay = dataPriv.get(elem, "display");
            display = jQuery.css(elem, "display");
            if (display === "none") {
                if (restoreDisplay) display = restoreDisplay;
                else {
                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide([
                        elem
                    ], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([
                        elem
                    ]);
                }
            }
            // Animate inline elements as inline-block
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {
                    // Restore the original display value at the end of pure show/hide animations
                    if (!propTween) {
                        anim.done(function() {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        // Implement show/hide animations
        propTween = false;
        for(prop in orig){
            // General show/hide setup for this element animation
            if (!propTween) {
                if (dataShow) {
                    if ("hidden" in dataShow) hidden = dataShow.hidden;
                } else dataShow = dataPriv.access(elem, "fxshow", {
                    display: restoreDisplay
                });
                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if (toggle) dataShow.hidden = !hidden;
                // Show elements before animating them
                if (hidden) showHide([
                    elem
                ], true);
                /* eslint-disable no-loop-func */ anim.done(function() {
                    /* eslint-enable no-loop-func */ // The final step of a "hide" animation is actually hiding the element
                    if (!hidden) showHide([
                        elem
                    ]);
                    dataPriv.remove(elem, "fxshow");
                    for(prop in orig)jQuery.style(elem, prop, orig[prop]);
                });
            }
            // Per-property setup
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for(index in props){
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for(index in value)if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                }
            } else specialEasing[name] = easing;
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index1 = 0, length1 = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            // Don't match elem in the :animated selector
            delete tick.elem;
        }), tick = function() {
            if (stopped) return false;
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), // Support: Android 2.3 only
            // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
            temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for(; index < length; index++)animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [
                animation,
                percent,
                remaining
            ]);
            // If there's more to do, yield
            if (percent < 1 && length) return remaining;
            // If this was an empty animation, synthesize a final progress notification
            if (!length) deferred.notifyWith(elem, [
                animation,
                1,
                0
            ]);
            // Resolve the animation and report its conclusion
            deferred.resolveWith(elem, [
                animation
            ]);
            return false;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({
            }, properties),
            opts: jQuery.extend(true, {
                specialEasing: {
                },
                easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = true;
                for(; index < length; index++)animation.tweens[index].run(1);
                // Resolve when we played the last frame; otherwise, reject
                if (gotoEnd) {
                    deferred.notifyWith(elem, [
                        animation,
                        1,
                        0
                    ]);
                    deferred.resolveWith(elem, [
                        animation,
                        gotoEnd
                    ]);
                } else deferred.rejectWith(elem, [
                    animation,
                    gotoEnd
                ]);
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for(; index1 < length1; index1++){
            result = Animation.prefilters[index1].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) animation.opts.start.call(elem, animation);
        // Attach callbacks from options
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            "*": [
                function(prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                }
            ]
        },
        tweener: function(props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = [
                    "*"
                ];
            } else props = props.match(rnothtmlwhite);
            var prop, index = 0, length = props.length;
            for(; index < length; index++){
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [
            defaultPrefilter
        ],
        prefilter: function(callback, prepend) {
            if (prepend) Animation.prefilters.unshift(callback);
            else Animation.prefilters.push(callback);
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({
        }, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };
        // Go to the end state if fx are off
        if (jQuery.fx.off) opt.duration = 0;
        else if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) opt.duration = jQuery.fx.speeds[opt.duration];
            else opt.duration = jQuery.fx.speeds._default;
        }
        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) opt.queue = "fx";
        // Queueing
        opt.old = opt.complete;
        opt.complete = function() {
            if (isFunction(opt.old)) opt.old.call(this);
            if (opt.queue) jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            // Show any hidden elements after setting opacity to 0
            return this.filter(isHiddenWithinTree).css("opacity", 0).show()// Animate to the value specified
            .end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation(this, jQuery.extend({
                }, prop), optall);
                // Empty animations, or finishing resolves immediately
                if (empty || dataPriv.get(this, "finish")) anim.stop(true);
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue) this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) stopQueue(data[index]);
                } else {
                    for(index in data)if (data[index] && data[index].stop && rrun.test(index)) stopQueue(data[index]);
                }
                for(index = timers.length; index--;)if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                }
                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) jQuery.dequeue(this, type);
            });
        },
        finish: function(type) {
            if (type !== false) type = type || "fx";
            return this.each(function() {
                var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                // Enable finishing flag on private data
                data.finish = true;
                // Empty the queue first
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) hooks.stop.call(this, true);
                // Look for any active animations, and finish them
                for(index = timers.length; index--;)if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                }
                // Look for any animations in the old queue and finish them
                for(index = 0; index < length; index++)if (queue[index] && queue[index].finish) queue[index].finish.call(this);
                // Turn off finishing flag
                delete data.finish;
            });
        }
    });
    jQuery.each([
        "toggle",
        "show",
        "hide"
    ], function(_i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for(; i < timers.length; i++){
            timer = timers[i];
            // Run the timer and safely remove it when done (allowing for external removal)
            if (!timer() && timers[i] === timer) timers.splice(i--, 1);
        }
        if (!timers.length) jQuery.fx.stop();
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (inProgress) return;
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function() {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    // Based off of the plugin by Clint Helfers, with permission.
    // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = window1.setTimeout(next, time);
            hooks.stop = function() {
                window1.clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input = document1.createElement("input"), select = document1.createElement("select"), opt = select.appendChild(document1.createElement("option"));
        input.type = "checkbox";
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support1.checkOn = input.value !== "";
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support1.optSelected = opt.selected;
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document1.createElement("input");
        input.value = "t";
        input.type = "radio";
        support1.radioValue = input.value === "t";
    })();
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) return;
            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") return jQuery.prop(elem, name, value);
            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret;
                elem.setAttribute(name, value + "");
                return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) return ret;
            ret = jQuery.find.attr(elem, name);
            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support1.radioValue && value === "radio" && nodeName1(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) elem.value = val;
                        return value;
                    }
                }
            }
        },
        removeAttr: function(elem, value) {
            var name, i = 0, // Attribute names can contain non-HTML whitespace characters
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
            attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) while(name = attrNames[i++])elem.removeAttribute(name);
        }
    });
    // Hooks for boolean attributes
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name);
            else elem.setAttribute(name, name);
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name2) {
        var getter = attrHandle[name2] || jQuery.find.attr;
        attrHandle[name2] = function(elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            // Don't get/set properties on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) return;
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret;
                return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) return ret;
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    if (tabindex) return parseInt(tabindex, 10);
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) return 0;
                    return -1;
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    });
    // Support: IE <=11 only
    // Accessing the selectedIndex property
    // forces the browser to respect setting selected
    // on the option
    // The getter ensures a default option is selected
    // when in an optgroup
    // eslint rule "no-unused-expressions" is disabled for this code
    // since it considers such accessions noop
    if (!support1.optSelected) jQuery.propHooks.selected = {
        get: function(elem) {
            /* eslint no-unused-expressions: "off" */ var parent = elem.parentNode;
            if (parent && parent.parentNode) parent.parentNode.selectedIndex;
            return null;
        },
        set: function(elem) {
            /* eslint no-unused-expressions: "off" */ var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) parent.parentNode.selectedIndex;
            }
        }
    };
    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    // Strip and collapse whitespace according to HTML spec
    // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }
    function classesToArray(value) {
        if (Array.isArray(value)) return value;
        if (typeof value === "string") return value.match(rnothtmlwhite) || [];
        return [];
    }
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, curValue, clazz, j1, finalValue, i = 0;
            if (isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
            classes = classesToArray(value);
            if (classes.length) while(elem = this[i++]){
                curValue = getClass(elem);
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                    j1 = 0;
                    while(clazz = classes[j1++])if (cur.indexOf(" " + clazz + " ") < 0) cur += clazz + " ";
                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) elem.setAttribute("class", finalValue);
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, curValue, clazz, j2, finalValue, i = 0;
            if (isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
            if (!arguments.length) return this.attr("class", "");
            classes = classesToArray(value);
            if (classes.length) while(elem = this[i++]){
                curValue = getClass(elem);
                // This expression is here for better compressibility (see addClass)
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                    j2 = 0;
                    while(clazz = classes[j2++])// Remove *all* instances
                    while(cur.indexOf(" " + clazz + " ") > -1)cur = cur.replace(" " + clazz + " ", " ");
                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) elem.setAttribute("class", finalValue);
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (typeof stateVal === "boolean" && isValidValue) return stateVal ? this.addClass(value) : this.removeClass(value);
            if (isFunction(value)) return this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
            });
            return this.each(function() {
                var className, i, self, classNames;
                if (isValidValue) {
                    // Toggle individual class names
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);
                    while(className = classNames[i++])// Check each className given, space separated list
                    if (self.hasClass(className)) self.removeClass(className);
                    else self.addClass(className);
                // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) // Store className if set
                    dataPriv.set(this, "__className__", className);
                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                }
            });
        },
        hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while(elem = this[i++]){
                if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) return true;
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value7) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) return ret;
                    ret = elem.value;
                    // Handle most common string cases
                    if (typeof ret === "string") return ret.replace(rreturn, "");
                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                }
                return;
            }
            valueIsFunction = isFunction(value7);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) return;
                if (valueIsFunction) val = value7.call(this, i, jQuery(this).val());
                else val = value7;
                // Treat null/undefined as ""; convert numbers to string
                if (val == null) val = "";
                else if (typeof val === "number") val += "";
                else if (Array.isArray(val)) val = jQuery.map(val, function(value) {
                    return value == null ? "" : value + "";
                });
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) this.value = val;
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : // Support: IE <=10 - 11 only
                    // option.text throws exceptions (#14686, #14858)
                    // Strip and collapse whitespace
                    // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                    stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) i = max;
                    else i = one ? index : 0;
                    // Loop through all the selected options
                    for(; i < max; i++){
                        option = options[i];
                        // Support: IE <=9 only
                        // IE8-9 doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                        !option.disabled && (!option.parentNode.disabled || !nodeName1(option.parentNode, "optgroup"))) {
                            // Get the specific value for the option
                            value = jQuery(option).val();
                            // We don't need an array for one selects
                            if (one) return value;
                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while(i--){
                        option = options[i];
                        /* eslint-disable no-cond-assign */ if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) optionSet = true;
                    /* eslint-enable no-cond-assign */ }
                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) elem.selectedIndex = -1;
                    return values;
                }
            }
        }
    });
    // Radios and checkboxes getter/setter
    jQuery.each([
        "radio",
        "checkbox"
    ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (Array.isArray(value)) return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
        };
        if (!support1.checkOn) jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
        };
    });
    // Return jQuery for attributes-only inclusion
    support1.focusin = "onfocusin" in window1;
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
        e.stopPropagation();
    };
    jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [
                elem || document1
            ], type = hasOwn1.call(event, "type") ? event.type : event, namespaces = hasOwn1.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document1;
            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) return;
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) return;
            if (type.indexOf(".") > -1) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) event.target = elem;
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [
                event
            ] : jQuery.makeArray(data, [
                event
            ]);
            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {
            };
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) return;
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) cur = cur.parentNode;
                for(; cur; cur = cur.parentNode){
                    eventPath.push(cur);
                    tmp = cur;
                }
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document1)) eventPath.push(tmp.defaultView || tmp.parentWindow || window1);
            }
            // Fire handlers on the event path
            i = 0;
            while((cur = eventPath[i++]) && !event.isPropagationStopped()){
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;
                // jQuery handler
                handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
                if (handle) handle.apply(cur, data);
                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) event.preventDefault();
                }
            }
            event.type = type;
            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) // Call a native DOM method on the target with the same name as the event.
                // Don't do default actions on window, that's where global variables be (#6170)
                {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];
                        if (tmp) elem[ontype] = null;
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        if (event.isPropagationStopped()) lastElement.addEventListener(type, stopPropagationCallback);
                        elem[type]();
                        if (event.isPropagationStopped()) lastElement.removeEventListener(type, stopPropagationCallback);
                        jQuery.event.triggered = undefined;
                        if (tmp) elem[ontype] = tmp;
                    }
                }
            }
            return event.result;
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function(type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type, data, elem, true);
        }
    });
    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    if (!support1.focusin) jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(orig, fix) {
        // Attach a single capturing handler on the document while someone wants focusin/focusout
        var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
        };
        jQuery.event.special[fix] = {
            setup: function() {
                // Handle: regular nodes (via `this.ownerDocument`), window
                // (via `this.document`) & document (via `this`).
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
                if (!attaches) doc.addEventListener(orig, handler, true);
                dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
                if (!attaches) {
                    doc.removeEventListener(orig, handler, true);
                    dataPriv.remove(doc, fix);
                } else dataPriv.access(doc, fix, attaches);
            }
        };
    });
    var location = window1.location;
    var nonce = {
        guid: Date.now()
    };
    var rquery = /\?/;
    // Cross-browser xml parsing
    jQuery.parseXML = function(data) {
        var xml, parserErrorElem;
        if (!data || typeof data !== "string") return null;
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
            xml = new window1.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
        }
        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
        if (!xml || parserErrorElem) jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
            return el.textContent;
        }).join("\n") : data));
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) // Serialize array item.
        jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) // Treat each array item as a scalar.
            add(prefix, v);
            else // Item is non-scalar (array or object), encode its numeric index.
            buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
        });
        else if (!traditional && toType(obj) === "object") // Serialize object item.
        for(name in obj)buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
        else // Serialize scalar item.
        add(prefix, obj);
    }
    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
            // If value is a function, invoke it and use its return value
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (a == null) return "";
        // If an array was passed in, assume that it is an array of form elements.
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) // Serialize the form elements
        jQuery.each(a, function() {
            add(this.name, this.value);
        });
        else // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for(prefix in a)buildParams(prefix, a[prefix], traditional, add);
        // Return the resulting serialization
        return s.join("&");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                // Use .is( ":disabled" ) so that fieldset[disabled] works
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
                var val1 = jQuery(this).val();
                if (val1 == null) return null;
                if (Array.isArray(val1)) return jQuery.map(val1, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                });
                return {
                    name: elem.name,
                    value: val1.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */ prefilters = {
    }, /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */ transports = {
    }, // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*"), // Anchor tag for parsing the document origin
    originAnchor = document1.createElement("a");
    originAnchor.href = location.href;
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while(dataType = dataTypes[i++])// Prepend if requested
                if (dataType[0] === "+") {
                    dataType = dataType.slice(1) || "*";
                    (structure[dataType] = structure[dataType] || []).unshift(func);
                // Otherwise append
                } else (structure[dataType] = structure[dataType] || []).push(func);
            }
        };
    }
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {
        }, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) return !(selected = dataTypeOrTransport);
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {
        };
        for(key in src)if (src[key] !== undefined) (flatOptions[key] ? target : deep || (deep = {
        }))[key] = src[key];
        if (deep) jQuery.extend(true, target, deep);
        return target;
    }
    /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */ function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while(dataTypes[0] === "*"){
            dataTypes.shift();
            if (ct === undefined) ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
        // Check if we're dealing with a known content-type
        if (ct) {
            for(type in contents)if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
            }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) finalDataType = dataTypes[0];
        else {
            // Try convertible dataTypes
            for(type in responses){
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) firstDataType = type;
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) dataTypes.unshift(finalDataType);
            return responses[finalDataType];
        }
    }
    /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */ function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {
        }, // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) for(conv in s.converters)converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while(current){
            if (s.responseFields[current]) jqXHR[s.responseFields[current]] = response;
            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) response = s.dataFilter(response, s.dataType);
            prev = current;
            current = dataTypes.shift();
            if (current) {
                // There's only work to do if current dataType is non-auto
                if (current === "*") current = prev;
                else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];
                    // If none found, seek a pair
                    if (!conv) for(conv2 in converters){
                        // If conv2 outputs current
                        tmp = conv2.split(" ");
                        if (tmp[1] === current) {
                            // If prev can be converted to accepted input
                            conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                            if (conv) {
                                // Condense equivalence converters
                                if (conv === true) conv = converters[conv2];
                                else if (converters[conv2] !== true) {
                                    current = tmp[0];
                                    dataTypes.unshift(tmp[1]);
                                }
                                break;
                            }
                        }
                    }
                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s.throws) response = conv(response);
                        else try {
                            response = conv(response);
                        } catch (e) {
                            return {
                                state: "parsererror",
                                error: conv ? e : "No conversion from " + prev + " to " + current
                            };
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {
        },
        etag: {
        },
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/ accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
                // Convert anything to text
                "* text": String,
                // Text to html (true = no transformation)
                "text html": true,
                // Evaluate text as a json expression
                "text json": JSON.parse,
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
            return settings ? // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
            ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function(url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            // Force options to be an object
            options = options || {
            };
            var transport, // URL without anti-cache param
            cacheURL, // Response headers
            responseHeadersString, responseHeaders, // timeout handle
            timeoutTimer, // Url cleanup var
            urlAnchor, // Request state (becomes false upon send and true upon completion)
            completed, // To know if global events are to be dispatched
            fireGlobals, // Loop variable
            i, // uncached part of the url
            uncached, // Create the final options object
            s = jQuery.ajaxSetup({
            }, options), // Callbacks context
            callbackContext = s.context || s, // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), // Status-dependent callbacks
            statusCode = s.statusCode || {
            }, // Headers (they are sent all at once)
            requestHeaders = {
            }, requestHeadersNames = {
            }, // Default abort message
            strAbort = "canceled", // Fake xhr
            jqXHR = {
                readyState: 0,
                // Builds headers hashtable if needed
                getResponseHeader: function(key) {
                    var match;
                    if (completed) {
                        if (!responseHeaders) {
                            responseHeaders = {
                            };
                            while(match = rheaders.exec(responseHeadersString))responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                        }
                        match = responseHeaders[key.toLowerCase() + " "];
                    }
                    return match == null ? null : match.join(", ");
                },
                // Raw string
                getAllResponseHeaders: function() {
                    return completed ? responseHeadersString : null;
                },
                // Caches the header
                setRequestHeader: function(name, value) {
                    if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                // Overrides response content-type header
                overrideMimeType: function(type) {
                    if (completed == null) s.mimeType = type;
                    return this;
                },
                // Status-dependent callbacks
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (completed) // Execute the appropriate callbacks
                        jqXHR.always(map[jqXHR.status]);
                        else // Lazy-add the new callbacks in a way that preserves old ones
                        for(code in map)statusCode[code] = [
                            statusCode[code],
                            map[code]
                        ];
                    }
                    return this;
                },
                // Cancel the request
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            // Attach deferreds
            deferred.promise(jqXHR);
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
            // Extract dataTypes list
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [
                ""
            ];
            // A cross-domain request is in order when the origin doesn't match the current origin.
            if (s.crossDomain == null) {
                urlAnchor = document1.createElement("a");
                // Support: IE <=8 - 11, Edge 12 - 15
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;
                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }
            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") s.data = jQuery.param(s.data, s.traditional);
            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            // If request was aborted inside a prefilter, stop there
            if (completed) return jqXHR;
            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;
            // Watch for a new set of requests
            if (fireGlobals && (jQuery.active++) === 0) jQuery.event.trigger("ajaxStart");
            // Uppercase the type
            s.type = s.type.toUpperCase();
            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace(rhash, "");
            // More options handling for requests with no content
            if (!s.hasContent) {
                // Remember the hash so we can put it back
                uncached = s.url.slice(cacheURL.length);
                // If data is available and should be processed, append data to url
                if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
                // Add or update anti-cache param if needed
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
                }
                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;
            // Change '%20' to '+' if this is encoded form body content (gh-2658)
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) s.data = s.data.replace(r20, "+");
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                if (jQuery.etag[cacheURL]) jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) jqXHR.setRequestHeader("Content-Type", s.contentType);
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            // Check for headers option
            for(i in s.headers)jqXHR.setRequestHeader(i, s.headers[i]);
            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) // Abort if not done already and return
            return jqXHR.abort();
            // Aborting is no longer a cancellation
            strAbort = "abort";
            // Install callbacks on deferreds
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            // If no transport, we auto-abort
            if (!transport) done(-1, "No Transport");
            else {
                jqXHR.readyState = 1;
                // Send global event
                if (fireGlobals) globalEventContext.trigger("ajaxSend", [
                    jqXHR,
                    s
                ]);
                // If request was aborted inside ajaxSend, stop there
                if (completed) return jqXHR;
                // Timeout
                if (s.async && s.timeout > 0) timeoutTimer = window1.setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout);
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Rethrow post-completion exceptions
                    if (completed) throw e;
                    // Propagate others as results
                    done(-1, e);
                }
            }
            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                // Ignore repeat invocations
                if (completed) return;
                completed = true;
                // Clear timeout if it exists
                if (timeoutTimer) window1.clearTimeout(timeoutTimer);
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
                // Cache response headers
                responseHeadersString = headers || "";
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
                // Get response data
                if (responses) response = ajaxHandleResponses(s, jqXHR, responses);
                // Use a noop converter for missing script but not if jsonp
                if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) s.converters["text script"] = function() {
                };
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                // If successful, handle type chaining
                if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) jQuery.lastModified[cacheURL] = modified;
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) jQuery.etag[cacheURL] = modified;
                    }
                    // if no content
                    if (status === 204 || s.type === "HEAD") statusText = "nocontent";
                    else if (status === 304) statusText = "notmodified";
                    else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) status = 0;
                    }
                }
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                // Success/Error
                if (isSuccess) deferred.resolveWith(callbackContext, [
                    success,
                    statusText,
                    jqXHR
                ]);
                else deferred.rejectWith(callbackContext, [
                    jqXHR,
                    statusText,
                    error
                ]);
                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [
                    jqXHR,
                    s,
                    isSuccess ? success : error
                ]);
                // Complete
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [
                        jqXHR,
                        s
                    ]);
                    // Handle the global AJAX counter
                    if (!--jQuery.active) jQuery.event.trigger("ajaxStop");
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([
        "get",
        "post"
    ], function(_i, method) {
        jQuery[method] = function(url, data, callback, type) {
            // Shift arguments if data argument was omitted
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            // The url can be an options object (which then must have .url)
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery.ajaxPrefilter(function(s) {
        var i;
        for(i in s.headers)if (i.toLowerCase() === "content-type") s.contentType = s.headers[i] || "";
    });
    jQuery._evalUrl = function(url, options, doc) {
        return jQuery.ajax({
            url: url,
            // Make this explicit, since user can override this through ajaxSetup (#11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
                "text script": function() {
                }
            },
            dataFilter: function(response) {
                jQuery.globalEval(response, options, doc);
            }
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            var wrap;
            if (this[0]) {
                if (isFunction(html)) html = html.call(this[0]);
                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) wrap.insertBefore(this[0]);
                wrap.map(function() {
                    var elem = this;
                    while(elem.firstElementChild)elem = elem.firstElementChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            });
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) contents.wrapAll(html);
                else self.append(html);
            });
        },
        wrap: function(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window1.XMLHttpRequest();
        } catch (e) {
        }
    };
    var xhrSuccessStatus = {
        // File protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE <=9 only
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
    support1.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    support1.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        // Cross domain only allowed if supported through XMLHttpRequest
        if (support1.cors || xhrSupported && !options.crossDomain) return {
            send: function(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(options.type, options.url, options.async, options.username, options.password);
                // Apply custom fields if provided
                if (options.xhrFields) for(i in options.xhrFields)xhr[i] = options.xhrFields[i];
                // Override mime type if needed
                if (options.mimeType && xhr.overrideMimeType) xhr.overrideMimeType(options.mimeType);
                // X-Requested-With header
                // For cross-domain requests, seeing as conditions for a preflight are
                // akin to a jigsaw puzzle, we simply never set it to be sure.
                // (it can always be set on a per-request basis or even using ajaxSetup)
                // For same-domain requests, won't change header if already provided.
                if (!options.crossDomain && !headers["X-Requested-With"]) headers["X-Requested-With"] = "XMLHttpRequest";
                // Set headers
                for(i in headers)xhr.setRequestHeader(i, headers[i]);
                // Callback
                callback = function(type) {
                    return function() {
                        if (callback) {
                            callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                            if (type === "abort") xhr.abort();
                            else if (type === "error") {
                                // Support: IE <=9 only
                                // On a manual native abort, IE9 throws
                                // errors on any property access that is not readyState
                                if (typeof xhr.status !== "number") complete(0, "error");
                                else complete(// File: protocol always yields status 0; see #8605, #14207
                                xhr.status, xhr.statusText);
                            } else complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                            // IE9 has no XHR2 but throws on binary (trac-11426)
                            // For XHR2 non-text, let the caller handle it (gh-2498)
                            (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                                binary: xhr.response
                            } : {
                                text: xhr.responseText
                            }, xhr.getAllResponseHeaders());
                        }
                    };
                };
                // Listen to events
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                // Support: IE 9 only
                // Use onreadystatechange to replace onabort
                // to handle uncaught aborts
                if (xhr.onabort !== undefined) xhr.onabort = errorCallback;
                else xhr.onreadystatechange = function() {
                    // Check readyState before timeout as it changes
                    if (xhr.readyState === 4) // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window1.setTimeout(function() {
                        if (callback) errorCallback();
                    });
                };
                // Create the abort callback
                callback = callback("abort");
                try {
                    // Do send the request (this may raise an exception)
                    xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                    // #14683: Only rethrow if this hasn't been notified as an error yet
                    if (callback) throw e;
                }
            },
            abort: function() {
                if (callback) callback();
            }
        };
    });
    // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) s.contents.script = false;
    });
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) s.cache = false;
        if (s.crossDomain) s.type = "GET";
    });
    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {
        // This transport only deals with cross domain or forced-by-attrs requests
        if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
                send: function(_, complete) {
                    script = jQuery("<script>").attr(s.scriptAttrs || {
                    }).prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) complete(evt.type === "error" ? 404 : 200, evt.type);
                    });
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document1.head.appendChild(script[0]);
                },
                abort: function() {
                    if (callback) callback();
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
        }
    });
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            // Insert callback into url or form data
            if (jsonProp) s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            else if (s.jsonp !== false) s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            // Force json dataType
            s.dataTypes[0] = "json";
            // Install callback
            overwritten = window1[callbackName];
            window1[callbackName] = function() {
                responseContainer = arguments;
            };
            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // If previous value didn't exist - remove it
                if (overwritten === undefined) jQuery(window1).removeProp(callbackName);
                else window1[callbackName] = overwritten;
                // Save back as free
                if (s[callbackName]) {
                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    // Save the callback name for future use
                    oldCallbacks.push(callbackName);
                }
                // Call if it was a function and we have a response
                if (responseContainer && isFunction(overwritten)) overwritten(responseContainer[0]);
                responseContainer = overwritten = undefined;
            });
            // Delegate to script
            return "script";
        }
    });
    // Support: Safari 8 only
    // In Safari 8 documents created via document.implementation.createHTMLDocument
    // collapse sibling forms: the second one becomes a child of the first one.
    // Because of that, this security measure has to be disabled in Safari 8.
    // https://bugs.webkit.org/show_bug.cgi?id=137337
    support1.createHTMLDocument = (function() {
        var body = document1.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    })();
    // Argument "data" should be string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") return [];
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            // Stop scripts or inline event handlers from being executed immediately
            // by using document.implementation
            if (support1.createHTMLDocument) {
                context = document1.implementation.createHTMLDocument("");
                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement("base");
                base.href = document1.location.href;
                context.head.appendChild(base);
            } else context = document1;
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        // Single tag
        if (parsed) return [
            context.createElement(parsed[1])
        ];
        parsed = buildFragment([
            data
        ], context, scripts);
        if (scripts && scripts.length) jQuery(scripts).remove();
        return jQuery.merge([], parsed.childNodes);
    };
    /**
 * Load a url into a page
 */ jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        // If it's a function
        if (isFunction(params)) {
            // We assume that it's the callback
            callback = params;
            params = undefined;
        // Otherwise, build a param string
        } else if (params && typeof params === "object") type = "POST";
        // If we have elements to modify, make the request
        if (self.length > 0) jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || "GET",
            dataType: "html",
            data: params
        }).done(function(responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText);
        // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
        }).always(callback && function(jqXHR, status) {
            self.each(function() {
                callback.apply(this, response || [
                    jqXHR.responseText,
                    status,
                    jqXHR
                ]);
            });
        });
        return this;
    };
    jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {
            };
            // Set position first, in-case top/left are set even on static elem
            if (position === "static") elem.style.position = "relative";
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({
            }, curOffset));
            if (options.top != null) props.top = options.top - curOffset.top + curTop;
            if (options.left != null) props.left = options.left - curOffset.left + curLeft;
            if ("using" in options) options.using.call(elem, props);
            else curElem.css(props);
        }
    };
    jQuery.fn.extend({
        // offset() relates an element's border box to the document origin
        offset: function(options) {
            // Preserve chaining for setter
            if (arguments.length) return options === undefined ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
            var rect, win, elem = this[0];
            if (!elem) return;
            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
            // Support: IE <=11 only
            // Running getBoundingClientRect on a
            // disconnected node in IE throws an error
            if (!elem.getClientRects().length) return {
                top: 0,
                left: 0
            };
            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function() {
            if (!this[0]) return;
            var offsetParent, offset, doc, elem = this[0], parentOffset = {
                top: 0,
                left: 0
            };
            // position:fixed elements are offset from the viewport, which itself always has zero offset
            if (jQuery.css(elem, "position") === "fixed") // Assume position:fixed implies availability of getBoundingClientRect
            offset = elem.getBoundingClientRect();
            else {
                offset = this.offset();
                // Account for the *real* offset parent, which can be the document or its root element
                // when a statically positioned element is identified
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while(offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static")offsetParent = offsetParent.parentNode;
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                    parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
                }
            }
            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent;
                while(offsetParent && jQuery.css(offsetParent, "position") === "static")offsetParent = offsetParent.offsetParent;
                return offsetParent || documentElement;
            });
        }
    });
    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val2) {
            return access(this, function(elem, method, val) {
                // Coalesce documents and windows
                var win;
                if (isWindow(elem)) win = elem;
                else if (elem.nodeType === 9) win = elem.defaultView;
                if (val === undefined) return win ? win[prop] : elem[method];
                if (win) win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                else elem[method] = val;
            }, method, val2, arguments.length);
        };
    });
    // Support: Safari <=7 - 9.1, Chrome <=37 - 49
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each([
        "top",
        "left"
    ], function(_i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support1.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                // If curCSS returns percentage, fallback to offset
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type1) {
        jQuery.each({
            padding: "inner" + name,
            content: type1,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value8) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value8 === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (isWindow(elem)) // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                    return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css(elem, type, extra) : // Set width or height on the element
                    jQuery.style(elem, type, value, extra);
                }, type1, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function(_i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.fn.extend({
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(_i, name) {
        // Handle event binding
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    // Support: Android <=4.0 only
    // Make sure we trim BOM and NBSP
    var rtrim1 = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    // Bind a function to a context, optionally partially applying any
    // arguments.
    // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
    // However, it is not slated for removal any time soon
    jQuery.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }
        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if (!isFunction(fn)) return undefined;
        // Simulated bind
        args = slice1.call(arguments, 2);
        proxy = function() {
            return fn.apply(context || this, args.concat(slice1.call(arguments)));
        };
        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };
    jQuery.holdReady = function(hold) {
        if (hold) jQuery.readyWait++;
        else jQuery.ready(true);
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName1;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;
    jQuery.isNumeric = function(obj) {
        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        !isNaN(obj - parseFloat(obj));
    };
    jQuery.trim = function(text) {
        return text == null ? "" : (text + "").replace(rtrim1, "");
    };
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    if (typeof define === "function" && define.amd) define("jquery", [], function() {
        return jQuery;
    });
    var // Map over jQuery in case of overwrite
    _jQuery = window1.jQuery, // Map over the $ in case of overwrite
    _$ = window1.$;
    jQuery.noConflict = function(deep) {
        if (window1.$ === jQuery) window1.$ = _$;
        if (deep && window1.jQuery === jQuery) window1.jQuery = _jQuery;
        return jQuery;
    };
    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (typeof noGlobal === "undefined") window1.jQuery = window1.$ = jQuery;
    return jQuery;
});

},{}],"j1nKW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlankNode", ()=>_blankNodeDefault.default
);
parcelHelpers.export(exports, "Collection", ()=>_collectionDefault.default
);
parcelHelpers.export(exports, "convert", ()=>_convert
);
parcelHelpers.export(exports, "DataFactory", ()=>_rdflibDataFactoryDefault.default
);
parcelHelpers.export(exports, "Empty", ()=>_emptyDefault.default
);
parcelHelpers.export(exports, "Fetcher", ()=>_fetcherDefault.default
);
parcelHelpers.export(exports, "Formula", ()=>_formulaDefault.default
);
parcelHelpers.export(exports, "Store", ()=>_storeDefault.default
);
parcelHelpers.export(exports, "jsonParser", ()=>_jsonparserDefault.default
);
parcelHelpers.export(exports, "Literal", ()=>_literalDefault.default
);
parcelHelpers.export(exports, "log", ()=>_logDefault.default
);
parcelHelpers.export(exports, "N3Parser", ()=>_n3ParserDefault.default
);
parcelHelpers.export(exports, "NamedNode", ()=>_namedNodeDefault.default
);
parcelHelpers.export(exports, "Namespace", ()=>_namespaceDefault.default
);
parcelHelpers.export(exports, "Node", ()=>_nodeDefault.default
);
parcelHelpers.export(exports, "parse", ()=>_parseDefault.default
);
parcelHelpers.export(exports, "Query", ()=>_query.Query
);
parcelHelpers.export(exports, "queryToSPARQL", ()=>_queryToSparqlDefault.default
);
parcelHelpers.export(exports, "RDFaProcessor", ()=>_rdfaparserDefault.default
);
parcelHelpers.export(exports, "RDFParser", ()=>_rdfxmlparserDefault.default
);
parcelHelpers.export(exports, "serialize", ()=>_serializeDefault.default
);
parcelHelpers.export(exports, "Serializer", ()=>_serializerDefault.default
);
parcelHelpers.export(exports, "SPARQLToQuery", ()=>_sparqlToQueryDefault.default
);
parcelHelpers.export(exports, "sparqlUpdateParser", ()=>_patchParserDefault.default
);
parcelHelpers.export(exports, "Statement", ()=>_statementDefault.default
);
parcelHelpers.export(exports, "term", ()=>term
);
parcelHelpers.export(exports, "UpdateManager", ()=>_updateManagerDefault.default
);
parcelHelpers.export(exports, "UpdatesSocket", ()=>_updatesVia.UpdatesSocket
);
parcelHelpers.export(exports, "UpdatesVia", ()=>_updatesVia.UpdatesVia
);
parcelHelpers.export(exports, "uri", ()=>_uri
);
parcelHelpers.export(exports, "Util", ()=>_utilsJs
);
parcelHelpers.export(exports, "Variable", ()=>_variableDefault.default
);
parcelHelpers.export(exports, "IndexedFormula", ()=>_storeDefault.default
);
parcelHelpers.export(exports, "NextId", ()=>NextId
);
parcelHelpers.export(exports, "fromNT", ()=>fromNT
);
parcelHelpers.export(exports, "fetcher", ()=>fetcher
);
parcelHelpers.export(exports, "graph", ()=>graph
);
parcelHelpers.export(exports, "lit", ()=>lit
);
parcelHelpers.export(exports, "st", ()=>st
);
parcelHelpers.export(exports, "sym", ()=>namedNode
);
parcelHelpers.export(exports, "blankNode", ()=>blankNode
);
parcelHelpers.export(exports, "defaultGraph", ()=>defaultGraph
);
parcelHelpers.export(exports, "literal", ()=>literal
);
parcelHelpers.export(exports, "namedNode", ()=>namedNode
);
parcelHelpers.export(exports, "quad", ()=>quad
);
parcelHelpers.export(exports, "triple", ()=>triple
);
parcelHelpers.export(exports, "variable", ()=>variable
);
parcelHelpers.export(exports, "termValue", ()=>_termValue.termValue
);
parcelHelpers.export(exports, "ConnectedStore", ()=>ConnectedStore
);
parcelHelpers.export(exports, "LiveStore", ()=>LiveStore
);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _blankNode = require("./blank-node");
var _blankNodeDefault = parcelHelpers.interopDefault(_blankNode);
var _collection = require("./collection");
var _collectionDefault = parcelHelpers.interopDefault(_collection);
var _convert = require("./convert");
var _empty = require("./empty");
var _emptyDefault = parcelHelpers.interopDefault(_empty);
var _fetcher = require("./fetcher");
var _fetcherDefault = parcelHelpers.interopDefault(_fetcher);
var _formula = require("./formula");
var _formulaDefault = parcelHelpers.interopDefault(_formula);
var _store = require("./store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _jsonparser = require("./jsonparser");
var _jsonparserDefault = parcelHelpers.interopDefault(_jsonparser);
var _literal = require("./literal");
var _literalDefault = parcelHelpers.interopDefault(_literal);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _n3Parser = require("./n3parser");
var _n3ParserDefault = parcelHelpers.interopDefault(_n3Parser);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
var _node = require("./node");
var _nodeDefault = parcelHelpers.interopDefault(_node);
var _parse = require("./parse");
var _parseDefault = parcelHelpers.interopDefault(_parse);
var _query = require("./query");
var _queryToSparql = require("./query-to-sparql");
var _queryToSparqlDefault = parcelHelpers.interopDefault(_queryToSparql);
var _rdfaparser = require("./rdfaparser");
var _rdfaparserDefault = parcelHelpers.interopDefault(_rdfaparser);
var _rdfxmlparser = require("./rdfxmlparser");
var _rdfxmlparserDefault = parcelHelpers.interopDefault(_rdfxmlparser);
var _serialize = require("./serialize");
var _serializeDefault = parcelHelpers.interopDefault(_serialize);
var _serializer = require("./serializer");
var _serializerDefault = parcelHelpers.interopDefault(_serializer);
var _sparqlToQuery = require("./sparql-to-query");
var _sparqlToQueryDefault = parcelHelpers.interopDefault(_sparqlToQuery);
var _patchParser = require("./patch-parser");
var _patchParserDefault = parcelHelpers.interopDefault(_patchParser);
var _statement = require("./statement");
var _statementDefault = parcelHelpers.interopDefault(_statement);
var _updateManager = require("./update-manager");
var _updateManagerDefault = parcelHelpers.interopDefault(_updateManager);
var _updatesVia = require("./updates-via");
var _uri = require("./uri");
var _utilsJs = require("./utils-js");
var _variable = require("./variable");
var _variableDefault = parcelHelpers.interopDefault(_variable);
var _rdflibDataFactory = require("./factories/rdflib-data-factory"); // Prepare bound versions of data factory methods for export
var _rdflibDataFactoryDefault = parcelHelpers.interopDefault(_rdflibDataFactory);
var _terms = require("./utils/terms");
parcelHelpers.exportAll(_terms, exports);
var _termValue = require("./utils/termValue");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
var boundDataFactory = {
};
for(var name in _rdflibDataFactoryDefault.default)if (typeof _rdflibDataFactoryDefault.default[name] === 'function') boundDataFactory[name] = _rdflibDataFactoryDefault.default[name].bind(_rdflibDataFactoryDefault.default);
var fetcher = boundDataFactory.fetcher, graph = boundDataFactory.graph, lit = boundDataFactory.lit, st = boundDataFactory.st, namedNode = boundDataFactory.namedNode, variable = boundDataFactory.variable, blankNode = boundDataFactory.blankNode, defaultGraph = boundDataFactory.defaultGraph, literal = boundDataFactory.literal, quad = boundDataFactory.quad, triple = boundDataFactory.triple;
var formula = new _formulaDefault.default();
var fromNT = function fromNT(str) {
    return formula.fromNT(str);
};
var term = _nodeDefault.default.fromValue; // TODO: this export is broken;
// it exports the _current_ value of nextId, which is always 0
var NextId = _blankNodeDefault.default.nextId;
var ConnectedStore = /*#__PURE__*/ function(_Store) {
    _inheritsDefault.default(ConnectedStore1, _Store);
    var _super = _createSuper(ConnectedStore1);
    function ConnectedStore1(features) {
        var _this;
        _classCallCheckDefault.default(this, ConnectedStore1);
        _this = _super.call(this, features);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "fetcher", void 0);
        _this.fetcher = new _fetcherDefault.default(_assertThisInitializedDefault.default(_this), {
        });
        return _this;
    }
    return _createClassDefault.default(ConnectedStore1);
}(_storeDefault.default);
var LiveStore = /*#__PURE__*/ function(_ConnectedStore) {
    _inheritsDefault.default(LiveStore1, _ConnectedStore);
    var _super2 = _createSuper(LiveStore1);
    function LiveStore1(features) {
        var _this2;
        _classCallCheckDefault.default(this, LiveStore1);
        _this2 = _super2.call(this, features);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this2), "updater", void 0);
        _this2.updater = new _updateManagerDefault.default(_assertThisInitializedDefault.default(_this2));
        return _this2;
    }
    return _createClassDefault.default(LiveStore1);
}(ConnectedStore);

},{"@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./blank-node":"8EviO","./collection":"hfkNS","./convert":"6cbc9","./empty":"dJJED","./fetcher":"i4UAw","./formula":"8etYk","./store":"8JtW2","./jsonparser":"fLGm5","./literal":"8jO2p","./log":"44B5t","./n3parser":"f4bGR","./named-node":"imvOa","./namespace":"iFtHC","./node":"fLCeO","./parse":"aLUnk","./query":"1LIOf","./query-to-sparql":"2WzWX","./rdfaparser":"4L3yv","./rdfxmlparser":"5j1sr","./serialize":"aht3D","./serializer":"cnscC","./sparql-to-query":"lXtbK","./patch-parser":"bRSLG","./statement":"e8Diy","./update-manager":"9LDv0","./updates-via":"gR1PI","./uri":"cwuSF","./utils-js":"2DMBx","./variable":"hxAV4","./factories/rdflib-data-factory":"eHYzn","./utils/terms":"cHcdt","./utils/termValue":"cjlpq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2yzPp":[function(require,module,exports) {
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"3nRml":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"1mVba":[function(require,module,exports) {
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"bYd1U":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf.js");
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) setPrototypeOf(subClass, superClass);
}
module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./setPrototypeOf.js":"bblYu"}],"bblYu":[function(require,module,exports) {
function _setPrototypeOf(o1, p1) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _setPrototypeOf(o1, p1);
}
module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"cW3L5":[function(require,module,exports) {
var _typeof = require("./typeof.js")["default"];
var assertThisInitialized = require("./assertThisInitialized.js");
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return assertThisInitialized(self);
}
module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./typeof.js":"jgQjt","./assertThisInitialized.js":"1mVba"}],"jgQjt":[function(require,module,exports) {
function _typeof(obj1) {
    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj1);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"gWrBy":[function(require,module,exports) {
function _getPrototypeOf(o1) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _getPrototypeOf(o1);
}
module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"4x6r7":[function(require,module,exports) {
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"8EviO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>BlankNode
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _classOrder = require("./class-order");
var _classOrderDefault = parcelHelpers.interopDefault(_classOrder);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * An RDF blank node is a Node without a URI
 * @link https://rdf.js.org/data-model-spec/#blanknode-interface
 */ var BlankNode = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(BlankNode1, _Node);
    var _super = _createSuper(BlankNode1);
    /**
   * Initializes this node
   * @param [id] The identifier for the blank node
   */ function BlankNode1(id) {
        var _this;
        _classCallCheckDefault.default(this, BlankNode1);
        _this = _super.call(this, BlankNode1.getId(id));
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.BlankNodeTermType);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "classOrder", _classOrderDefault.default.BlankNode);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "isBlank", 1);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "isVar", 1);
        return _this;
    }
    /**
   * The identifier for the blank node
   */ _createClassDefault.default(BlankNode1, [
        {
            key: "id",
            get: function get() {
                return this.value;
            },
            set: function set(value) {
                this.value = value;
            }
        },
        {
            key: "compareTerm",
            value: function compareTerm(other) {
                if (this.classOrder < other.classOrder) return -1;
                if (this.classOrder > other.classOrder) return 1;
                if (this.id < other.id) return -1;
                if (this.id > other.id) return 1;
                return 0;
            }
        },
        {
            key: "copy",
            value: function copy(formula) {
                // depends on the formula
                var bnodeNew = new BlankNode1();
                formula.copyTo(this, bnodeNew);
                return bnodeNew;
            }
        },
        {
            key: "toCanonical",
            value: function toCanonical() {
                return BlankNode1.NTAnonymousNodePrefix + this.value;
            }
        },
        {
            key: "toString",
            value: function toString() {
                return BlankNode1.NTAnonymousNodePrefix + this.id;
            }
        }
    ], [
        {
            key: "getId",
            value: /**
     * The next unique identifier for blank nodes
     */ function getId(id) {
                if (id) {
                    if (typeof id !== 'string') {
                        console.log('Bad blank id:', id);
                        throw new Error('Bad id argument to new blank node: ' + id);
                    }
                    if (id.includes('#')) {
                        // Is a URI with hash fragment
                        var fragments = id.split('#');
                        return fragments[fragments.length - 1];
                    }
                    return id;
                }
                return 'n' + BlankNode1.nextId++;
            }
        }
    ]);
    return BlankNode1;
}(_nodeInternalDefault.default);
_definePropertyDefault.default(BlankNode, "nextId", 0);
_definePropertyDefault.default(BlankNode, "NTAnonymousNodePrefix", '_:');

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./class-order":"5Vmqo","./node-internal":"kZc6I","./types":"hXMiD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Vmqo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
* Class orders
*/ var ClassOrder = {
    'Literal': 1,
    'Collection': 3,
    'Graph': 4,
    'NamedNode': 5,
    'BlankNode': 6,
    'Variable': 7
};
exports.default = ClassOrder;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"kZc6I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Node
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
/**
 * The superclass of all RDF Statement objects, that is
 * NamedNode, Literal, BlankNode, etc.
 * Should not be instantiated directly.
 * Also called Term.
 * @link https://rdf.js.org/data-model-spec/#term-interface
 * @class Node
 */ var Node = /*#__PURE__*/ function() {
    // Specified in './node.ts' to prevent circular dependency
    // Specified in './node.ts' to prevent circular dependency
    /** The type of node */ /** The class order for this node */ /** The node's value */ function Node1(value) {
        _classCallCheckDefault.default(this, Node1);
        _definePropertyDefault.default(this, "termType", void 0);
        _definePropertyDefault.default(this, "classOrder", void 0);
        _definePropertyDefault.default(this, "value", void 0);
        this.value = value;
    }
    /**
   * Creates the substituted node for this one, according to the specified bindings
   * @param bindings - Bindings of identifiers to nodes
   */ _createClassDefault.default(Node1, [
        {
            key: "substitute",
            value: function substitute(bindings) {
                console.log('@@@ node substitute' + this);
                return this;
            }
        },
        {
            key: "compareTerm",
            value: function compareTerm(other) {
                if (this.classOrder < other.classOrder) return -1;
                if (this.classOrder > other.classOrder) return 1;
                if (this.value < other.value) return -1;
                if (this.value > other.value) return 1;
                return 0;
            }
        },
        {
            key: "equals",
            value: function equals(other) {
                if (!other) return false;
                return this.termType === other.termType && this.value === other.value;
            }
        },
        {
            key: "hashString",
            value: function hashString() {
                return this.toCanonical();
            }
        },
        {
            key: "sameTerm",
            value: function sameTerm(other) {
                return this.equals(other);
            }
        },
        {
            key: "toCanonical",
            value: function toCanonical() {
                return this.toNT();
            }
        },
        {
            key: "toNT",
            value: function toNT() {
                return this.toString();
            }
        },
        {
            key: "toNQ",
            value: function toNQ() {
                return this.toNT();
            }
        },
        {
            key: "toString",
            value: function toString() {
                throw new Error('Node.toString() is abstract - see the subclasses instead');
            }
        }
    ]);
    return Node1;
}();
_definePropertyDefault.default(Node, "fromValue", void 0);
_definePropertyDefault.default(Node, "toJS", void 0);

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/defineProperty":"4x6r7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hXMiD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NamedNodeTermType", ()=>NamedNodeTermType
);
parcelHelpers.export(exports, "BlankNodeTermType", ()=>BlankNodeTermType
);
parcelHelpers.export(exports, "LiteralTermType", ()=>LiteralTermType
);
parcelHelpers.export(exports, "VariableTermType", ()=>VariableTermType
);
parcelHelpers.export(exports, "DefaultGraphTermType", ()=>DefaultGraphTermType
);
parcelHelpers.export(exports, "CollectionTermType", ()=>CollectionTermType
);
parcelHelpers.export(exports, "EmptyTermType", ()=>EmptyTermType
);
parcelHelpers.export(exports, "GraphTermType", ()=>GraphTermType
);
parcelHelpers.export(exports, "HTMLContentType", ()=>HTMLContentType
);
parcelHelpers.export(exports, "JSONLDContentType", ()=>JSONLDContentType
);
parcelHelpers.export(exports, "N3ContentType", ()=>N3ContentType
);
parcelHelpers.export(exports, "N3LegacyContentType", ()=>N3LegacyContentType
);
parcelHelpers.export(exports, "NQuadsAltContentType", ()=>NQuadsAltContentType
);
parcelHelpers.export(exports, "NQuadsContentType", ()=>NQuadsContentType
);
parcelHelpers.export(exports, "NTriplesContentType", ()=>NTriplesContentType
);
parcelHelpers.export(exports, "RDFXMLContentType", ()=>RDFXMLContentType
);
parcelHelpers.export(exports, "SPARQLUpdateContentType", ()=>SPARQLUpdateContentType
);
parcelHelpers.export(exports, "SPARQLUpdateSingleMatchContentType", ()=>SPARQLUpdateSingleMatchContentType
);
parcelHelpers.export(exports, "TurtleContentType", ()=>TurtleContentType
);
parcelHelpers.export(exports, "TurtleLegacyContentType", ()=>TurtleLegacyContentType
);
parcelHelpers.export(exports, "XHTMLContentType", ()=>XHTMLContentType
);
var NamedNodeTermType = "NamedNode";
var BlankNodeTermType = "BlankNode";
var LiteralTermType = "Literal";
var VariableTermType = "Variable";
var DefaultGraphTermType = "DefaultGraph"; // Non-RDF/JS types:
var CollectionTermType = "Collection";
var EmptyTermType = "Empty";
var GraphTermType = "Graph";
var HTMLContentType = "text/html";
var JSONLDContentType = "application/ld+json";
var N3ContentType = "text/n3";
var N3LegacyContentType = "application/n3";
var NQuadsAltContentType = "application/nquads";
var NQuadsContentType = "application/n-quads";
var NTriplesContentType = "application/n-triples";
var RDFXMLContentType = "application/rdf+xml";
var SPARQLUpdateContentType = "application/sparql-update";
var SPARQLUpdateSingleMatchContentType = "application/sparql-update-single-match";
var TurtleContentType = "text/turtle";
var TurtleLegacyContentType = "application/x-turtle";
var XHTMLContentType = "application/xhtml+xml"; /**
 * A valid mime type header
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hfkNS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates an RDF Node from a native javascript value.
 * RDF Nodes are returned unchanged, undefined returned as itself.
 * Arrays return Collections.
 * Strings, numbers and booleans return Literals.
 * @param value {Node|Date|String|Number|Boolean|Undefined}
 * @return {Node|Collection}
 */ parcelHelpers.export(exports, "fromValue", ()=>fromValue
);
parcelHelpers.export(exports, "default", ()=>Collection
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _blankNode = require("./blank-node");
var _blankNodeDefault = parcelHelpers.interopDefault(_blankNode);
var _classOrder = require("./class-order");
var _classOrderDefault = parcelHelpers.interopDefault(_classOrder);
var _literal = require("./literal");
var _literalDefault = parcelHelpers.interopDefault(_literal);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
var _terms = require("./utils/terms");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
function fromValue(value) {
    if (typeof value === 'undefined' || value === null) return value;
    if (_terms.isTerm(value)) // a Node subclass or a Collection
    return value;
    if (Array.isArray(value)) return new Collection(value);
    return _literalDefault.default.fromValue(value);
}
/**
 * A collection of other RDF nodes
 *
 * Use generic T to control the contents of the array.
 */ var Collection = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(Collection1, _Node);
    var _super = _createSuper(Collection1);
    /**
   * The nodes in this collection
   */ function Collection1(initial) {
        var _this;
        _classCallCheckDefault.default(this, Collection1);
        _this = _super.call(this, (_blankNodeDefault.default.nextId++).toString());
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.CollectionTermType);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "classOrder", _classOrderDefault.default.Collection);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "closed", false);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "compareTerm", _blankNodeDefault.default.prototype.compareTerm);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "elements", []);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "isVar", 0);
        if (initial && initial.length > 0) initial.forEach(function(element) {
            _this.elements.push(fromValue(element));
        });
        return _this;
    }
    _createClassDefault.default(Collection1, [
        {
            key: "id",
            get: function get() {
                return this.value;
            },
            set: function set(value) {
                this.value = value;
            }
        },
        {
            key: "append",
            value: function append(element) {
                return this.elements.push(element);
            }
        },
        {
            key: "close",
            value: function close() {
                this.closed = true;
                return this.closed;
            }
        },
        {
            key: "shift",
            value: function shift() {
                return this.elements.shift();
            }
        },
        {
            key: "substitute",
            value: function substitute(bindings) {
                var elementsCopy = this.elements.map(function(ea) {
                    return ea.substitute(bindings);
                });
                return new Collection1(elementsCopy);
            }
        },
        {
            key: "toNT",
            value: function toNT() {
                return Collection1.toNT(this);
            }
        },
        {
            key: "toString",
            value: /**
     * Serializes the collection to a string.
     * Surrounded by (parentheses) and separated by spaces.
     */ function toString() {
                return '(' + this.elements.join(' ') + ')';
            }
        },
        {
            key: "unshift",
            value: function unshift(element) {
                return this.elements.unshift(element);
            }
        }
    ], [
        {
            key: "toNT",
            value: function toNT(collection) {
                return _blankNodeDefault.default.NTAnonymousNodePrefix + collection.id;
            }
        }
    ]);
    return Collection1;
}(_nodeInternalDefault.default);
_definePropertyDefault.default(Collection, "termType", _types.CollectionTermType);

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./blank-node":"8EviO","./class-order":"5Vmqo","./literal":"8jO2p","./node-internal":"kZc6I","./types":"hXMiD","./utils/terms":"cHcdt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8jO2p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Literal
);
var _typeof = require("@babel/runtime/helpers/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _classOrder = require("./class-order");
var _classOrderDefault = parcelHelpers.interopDefault(_classOrder);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
var _terms = require("./utils/terms");
var _xsdInternal = require("./xsd-internal");
var _xsdInternalDefault = parcelHelpers.interopDefault(_xsdInternal);
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * An RDF literal, containing some value which isn't expressed as an IRI.
 * @link https://rdf.js.org/data-model-spec/#literal-interface
 */ var Literal = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(Literal1, _Node);
    var _super = _createSuper(Literal1);
    /**
   * The literal's datatype as a named node
   */ /**
   * The language for the literal
   */ /**
   * Initializes a literal
   * @param value - The literal's lexical value
   * @param language - The language for the literal. Defaults to ''.
   * @param datatype - The literal's datatype as a named node. Defaults to xsd:string.
   */ function Literal1(value, language, datatype) {
        var _this;
        _classCallCheckDefault.default(this, Literal1);
        _this = _super.call(this, value);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.LiteralTermType);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "classOrder", _classOrderDefault.default.Literal);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "datatype", _xsdInternalDefault.default.string);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "isVar", 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "language", '');
        if (language) {
            _this.language = language;
            _this.datatype = _xsdInternalDefault.default.langString;
        } else if (datatype) _this.datatype = _namedNodeDefault.default.fromValue(datatype);
        else _this.datatype = _xsdInternalDefault.default.string;
        return _this;
    }
    /**
   * Gets a copy of this literal
   */ _createClassDefault.default(Literal1, [
        {
            key: "copy",
            value: function copy() {
                return new Literal1(this.value, this.lang, this.datatype);
            }
        },
        {
            key: "equals",
            value: function equals(other) {
                if (!other) return false;
                return this.termType === other.termType && this.value === other.value && this.language === other.language && (!this.datatype && !other.datatype || this.datatype && this.datatype.equals(other.datatype));
            }
        },
        {
            key: "lang",
            get: function get() {
                return this.language;
            },
            set: function set(language) {
                this.language = language || '';
            }
        },
        {
            key: "toNT",
            value: function toNT() {
                return Literal1.toNT(this);
            }
        },
        {
            key: "toString",
            value: function toString() {
                return '' + this.value;
            }
        }
    ], [
        {
            key: "toNT",
            value: function toNT(literal) {
                if (typeof literal.value === 'number') return '' + literal.value;
                else if (typeof literal.value !== 'string') throw new Error('Value of RDF literal is not string or number: ' + literal.value);
                var str = literal.value; // #x22 ("), #x5C (\), #x0A (\n) and #xD (\r) are disallowed and need to be replaced
                // see https://www.w3.org/TR/n-triples/#grammar-production-STRING_LITERAL_QUOTE
                str = str.replace(/\\/g, '\\\\');
                str = str.replace(/\"/g, '\\"');
                str = str.replace(/\n/g, '\\n');
                str = str.replace(/\r/g, '\\r');
                str = '"' + str + '"';
                if (literal.language) str += '@' + literal.language;
                else if (!literal.datatype.equals(_xsdInternalDefault.default.string)) // Only add datatype if it's not a string
                str += '^^' + literal.datatype.toCanonical();
                return str;
            }
        },
        {
            key: "fromBoolean",
            value: function fromBoolean(value) {
                var strValue = value ? '1' : '0';
                return new Literal1(strValue, null, _xsdInternalDefault.default.boolean);
            }
        },
        {
            key: "fromDate",
            value: function fromDate(value) {
                if (!(value instanceof Date)) throw new TypeError('Invalid argument to Literal.fromDate()');
                var d2 = function d2(x) {
                    return ('' + (100 + x)).slice(1, 3);
                };
                var date = '' + value.getUTCFullYear() + '-' + d2(value.getUTCMonth() + 1) + '-' + d2(value.getUTCDate()) + 'T' + d2(value.getUTCHours()) + ':' + d2(value.getUTCMinutes()) + ':' + d2(value.getUTCSeconds()) + 'Z';
                return new Literal1(date, null, _xsdInternalDefault.default.dateTime);
            }
        },
        {
            key: "fromNumber",
            value: function fromNumber(value) {
                if (typeof value !== 'number') throw new TypeError('Invalid argument to Literal.fromNumber()');
                var datatype;
                var strValue = value.toString();
                if (strValue.indexOf('e') < 0 && Math.abs(value) <= Number.MAX_SAFE_INTEGER) datatype = Number.isInteger(value) ? _xsdInternalDefault.default.integer : _xsdInternalDefault.default.decimal;
                else datatype = _xsdInternalDefault.default.double;
                return new Literal1(strValue, null, datatype);
            }
        },
        {
            key: "fromValue",
            value: function fromValue(value) {
                if (_terms.isLiteral(value)) return value;
                switch(_typeofDefault.default(value)){
                    case 'object':
                        if (value instanceof Date) return Literal1.fromDate(value);
                    case 'boolean':
                        return Literal1.fromBoolean(value);
                    case 'number':
                        return Literal1.fromNumber(value);
                    case 'string':
                        return new Literal1(value);
                }
                throw new Error("Can't make literal from " + value + ' of type ' + _typeofDefault.default(value));
            }
        }
    ]);
    return Literal1;
}(_nodeInternalDefault.default);

},{"@babel/runtime/helpers/typeof":"jgQjt","@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./class-order":"5Vmqo","./named-node":"imvOa","./node-internal":"kZc6I","./types":"hXMiD","./utils/terms":"cHcdt","./xsd-internal":"dVZl8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"imvOa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>NamedNode
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _classOrder = require("./class-order");
var _classOrderDefault = parcelHelpers.interopDefault(_classOrder);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
var _termValue = require("./utils/termValue");
var _terms = require("./utils/terms");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * A named (IRI) RDF node
 */ var NamedNode = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(NamedNode1, _Node);
    var _super = _createSuper(NamedNode1);
    /**
   * Create a named (IRI) RDF Node
   * @constructor
   * @param iri - The IRI for this node
   */ function NamedNode1(iri) {
        var _this;
        _classCallCheckDefault.default(this, NamedNode1);
        _this = _super.call(this, _termValue.termValue(iri));
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.NamedNodeTermType);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "classOrder", _classOrderDefault.default.NamedNode);
        if (!_this.value) throw new Error('Missing IRI for NamedNode');
        if (!_this.value.includes(':')) throw new Error('NamedNode IRI "' + iri + '" must be absolute.');
        if (_this.value.includes(' ')) {
            var message = 'Error: NamedNode IRI "' + iri + '" must not contain unencoded spaces.';
            throw new Error(message);
        }
        return _this;
    }
    /**
   * Returns an $rdf node for the containing directory, ending in slash.
   */ _createClassDefault.default(NamedNode1, [
        {
            key: "dir",
            value: function dir() {
                var str = this.value.split('#')[0];
                var p = str.slice(0, -1).lastIndexOf('/');
                var q = str.indexOf('//');
                if (q >= 0 && p < q + 2 || p < 0) return null;
                return new NamedNode1(str.slice(0, p + 1));
            }
        },
        {
            key: "site",
            value: function site() {
                var str = this.value.split('#')[0];
                var p = str.indexOf('//');
                if (p < 0) throw new Error('This URI does not have a web site part (origin)');
                var q = str.indexOf('/', p + 2);
                if (q < 0) return new NamedNode1(str.slice(0) + '/'); // Add slash to a bare origin
                else return new NamedNode1(str.slice(0, q + 1));
            }
        },
        {
            key: "doc",
            value: function doc() {
                if (this.value.indexOf('#') < 0) return this;
                else return new NamedNode1(this.value.split('#')[0]);
            }
        },
        {
            key: "toString",
            value: function toString() {
                return '<' + this.value + '>';
            }
        },
        {
            key: "id",
            value: function id() {
                return this.value.split('#')[1];
            }
        },
        {
            key: "uri",
            get: function get() {
                return this.value;
            },
            set: function set(uri) {
                this.value = uri;
            }
        }
    ], [
        {
            key: "fromValue",
            value: function fromValue(value) {
                if (typeof value === 'undefined' || value === null) return value;
                if (_terms.isTerm(value)) return value;
                return new NamedNode1(value);
            }
        }
    ]);
    return NamedNode1;
}(_nodeInternalDefault.default);

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./class-order":"5Vmqo","./node-internal":"kZc6I","./types":"hXMiD","./utils/termValue":"cjlpq","./utils/terms":"cHcdt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjlpq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Retrieve the value of a term, or self if already a string. */ parcelHelpers.export(exports, "termValue", ()=>termValue
);
function termValue(node) {
    if (typeof node === 'string') return node;
    return node.value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cHcdt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** TypeGuard for RDFLib Statements */ parcelHelpers.export(exports, "isStatement", ()=>isStatement
);
/** TypeGuard for RDFlib Stores */ parcelHelpers.export(exports, "isStore", ()=>isStore
);
/** TypeGuard for RDFLib Collections */ parcelHelpers.export(exports, "isCollection", ()=>isCollection
);
/** TypeGuard for valid RDFlib Object types, also allows Collections */ parcelHelpers.export(exports, "isRDFlibObject", ()=>isRDFlibObject
);
/** TypeGuard for RDFLib Variables */ parcelHelpers.export(exports, "isVariable", ()=>isVariable
);
/** TypeGuard for RDF/JS spec Terms */ parcelHelpers.export(exports, "isTerm", ()=>isTerm
);
/** TypeGuard for RDF/JS spec Literals */ parcelHelpers.export(exports, "isLiteral", ()=>isLiteral
);
/** TypeGuard for RDF/JS spec Quads */ parcelHelpers.export(exports, "isQuad", ()=>isQuad
);
/** TypeGuard for RDF/JS spec NamedNodes */ parcelHelpers.export(exports, "isNamedNode", ()=>isNamedNode
);
/** TypeGuard for RDF/JS spec BlankNodes */ parcelHelpers.export(exports, "isBlankNode", ()=>isBlankNode
);
/** TypeGuard for valid RDF/JS spec Subject types */ parcelHelpers.export(exports, "isSubject", ()=>isSubject
);
/** TypeGuard for valid RDF/JS spec Predicate types */ parcelHelpers.export(exports, "isPredicate", ()=>isPredicate
);
/** TypeGuard for valid RDF/JS spec Object types */ parcelHelpers.export(exports, "isRDFObject", ()=>isRDFObject
);
/** TypeGuard for valid RDF/JS Graph types */ parcelHelpers.export(exports, "isGraph", ()=>isGraph
);
var _typeof = require("@babel/runtime/helpers/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _types = require("../types");
function isStatement(obj) {
    return _typeofDefault.default(obj) === 'object' && obj !== null && 'subject' in obj;
}
function isStore(obj) {
    return _typeofDefault.default(obj) === 'object' && obj !== null && 'statements' in obj;
}
function isCollection(obj) {
    return isTerm(obj) && obj.termType === _types.CollectionTermType;
}
function isRDFlibObject(obj) {
    return obj && Object.prototype.hasOwnProperty.call(obj, 'termType') && (obj.termType === _types.NamedNodeTermType || obj.termType === _types.VariableTermType || obj.termType === _types.BlankNodeTermType || obj.termType === _types.CollectionTermType || obj.termType === _types.LiteralTermType || obj.termType === _types.GraphTermType);
}
function isVariable(obj) {
    return isTerm(obj) && obj.termType === _types.VariableTermType;
}
function isTerm(obj) {
    return _typeofDefault.default(obj) === 'object' && obj !== null && 'termType' in obj;
}
function isLiteral(value) {
    return value.termType === _types.LiteralTermType;
}
function isQuad(obj) {
    return _typeofDefault.default(obj) === "object" && obj !== null && 'subject' in obj && 'predicate' in obj && 'object' in obj;
}
function isNamedNode(obj) {
    return isTerm(obj) && obj.termType === 'NamedNode';
}
function isBlankNode(obj) {
    return isTerm(obj) && 'termType' in obj && obj.termType === 'BlankNode';
}
function isSubject(obj) {
    return isTerm(obj) && (obj.termType === _types.NamedNodeTermType || obj.termType === _types.VariableTermType || obj.termType === _types.BlankNodeTermType);
}
function isPredicate(obj) {
    return isTerm(obj) && (obj.termType === _types.NamedNodeTermType || obj.termType === _types.VariableTermType);
}
function isRDFObject(obj) {
    return isTerm(obj) && (obj.termType === _types.NamedNodeTermType || obj.termType === _types.VariableTermType || obj.termType === _types.BlankNodeTermType || obj.termType === _types.LiteralTermType);
}
function isGraph(obj) {
    return isTerm(obj) && (obj.termType === _types.NamedNodeTermType || obj.termType === _types.VariableTermType || obj.termType === _types.BlankNodeTermType || obj.termType === _types.DefaultGraphTermType);
}

},{"@babel/runtime/helpers/typeof":"jgQjt","../types":"hXMiD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dVZl8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
exports.default = {
    boolean: new _namedNodeDefault.default('http://www.w3.org/2001/XMLSchema#boolean'),
    dateTime: new _namedNodeDefault.default('http://www.w3.org/2001/XMLSchema#dateTime'),
    decimal: new _namedNodeDefault.default('http://www.w3.org/2001/XMLSchema#decimal'),
    double: new _namedNodeDefault.default('http://www.w3.org/2001/XMLSchema#double'),
    integer: new _namedNodeDefault.default('http://www.w3.org/2001/XMLSchema#integer'),
    langString: new _namedNodeDefault.default('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString'),
    string: new _namedNodeDefault.default('http://www.w3.org/2001/XMLSchema#string')
};

},{"./named-node":"imvOa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6cbc9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertToJson", ()=>convertToJson
);
parcelHelpers.export(exports, "convertToNQuads", ()=>convertToNQuads
);
var _async = require("async"); // @@ Goal: remove this dependency
var _asyncDefault = parcelHelpers.interopDefault(_async);
var _jsonld = require("jsonld");
var _jsonldDefault = parcelHelpers.interopDefault(_jsonld);
var _n3 = require("n3"); // @@ Goal: remove this dependency
function convertToJson(n3String, jsonCallback) {
    var jsonString;
    var n3Parser = new _n3.Parser();
    var n3Writer = new _n3.Writer({
        format: 'N-Quads'
    });
    _asyncDefault.default.waterfall([
        function(callback) {
            n3Parser.parse(n3String, function(error, quad, prefixes) {
                if (error) callback(error);
                else if (quad !== null) n3Writer.addQuad(quad);
                else n3Writer.end(callback);
            });
        },
        function(result1, callback) {
            try {
                _jsonldDefault.default.fromRDF(result1, {
                    format: 'application/nquads'
                }).then(function(result) {
                    callback(null, result);
                });
            } catch (err) {
                callback(err);
            }
        },
        function(json, callback) {
            jsonString = JSON.stringify(json);
            jsonCallback(null, jsonString);
        }
    ], function(err, result) {
        jsonCallback(err, jsonString);
    });
}
function convertToNQuads(n3String, nquadCallback) {
    var nquadString;
    var n3Parser = new _n3.Parser();
    var n3Writer = new _n3.Writer({
        format: 'N-Quads'
    });
    _asyncDefault.default.waterfall([
        function(callback) {
            n3Parser.parse(n3String, function(error, triple, prefixes) {
                if (error) callback(error);
                else if (quad !== null) n3Writer.addQuad(quad);
                else n3Writer.end(callback);
            });
        },
        function(result, callback) {
            nquadString = result;
            nquadCallback(null, nquadString);
        }
    ], function(err, result) {
        nquadCallback(err, nquadString);
    });
}

},{"async":"e6meC","jsonld":"hDReo","n3":"6eLdg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e6meC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "apply", ()=>apply
);
parcelHelpers.export(exports, "applyEach", ()=>applyEach$1
);
parcelHelpers.export(exports, "applyEachSeries", ()=>applyEachSeries
);
parcelHelpers.export(exports, "asyncify", ()=>asyncify
);
parcelHelpers.export(exports, "auto", ()=>auto
);
parcelHelpers.export(exports, "autoInject", ()=>autoInject
);
parcelHelpers.export(exports, "cargo", ()=>cargo
);
parcelHelpers.export(exports, "cargoQueue", ()=>cargo$1
);
parcelHelpers.export(exports, "compose", ()=>compose
);
parcelHelpers.export(exports, "concat", ()=>concat$1
);
parcelHelpers.export(exports, "concatLimit", ()=>concatLimit$1
);
parcelHelpers.export(exports, "concatSeries", ()=>concatSeries$1
);
parcelHelpers.export(exports, "constant", ()=>constant
);
parcelHelpers.export(exports, "detect", ()=>detect$1
);
parcelHelpers.export(exports, "detectLimit", ()=>detectLimit$1
);
parcelHelpers.export(exports, "detectSeries", ()=>detectSeries$1
);
parcelHelpers.export(exports, "dir", ()=>dir
);
parcelHelpers.export(exports, "doUntil", ()=>doUntil
);
parcelHelpers.export(exports, "doWhilst", ()=>doWhilst$1
);
parcelHelpers.export(exports, "each", ()=>each
);
parcelHelpers.export(exports, "eachLimit", ()=>eachLimit$2
);
parcelHelpers.export(exports, "eachOf", ()=>eachOf$1
);
parcelHelpers.export(exports, "eachOfLimit", ()=>eachOfLimit$2
);
parcelHelpers.export(exports, "eachOfSeries", ()=>eachOfSeries$1
);
parcelHelpers.export(exports, "eachSeries", ()=>eachSeries$1
);
parcelHelpers.export(exports, "ensureAsync", ()=>ensureAsync
);
parcelHelpers.export(exports, "every", ()=>every$1
);
parcelHelpers.export(exports, "everyLimit", ()=>everyLimit$1
);
parcelHelpers.export(exports, "everySeries", ()=>everySeries$1
);
parcelHelpers.export(exports, "filter", ()=>filter$1
);
parcelHelpers.export(exports, "filterLimit", ()=>filterLimit$1
);
parcelHelpers.export(exports, "filterSeries", ()=>filterSeries$1
);
parcelHelpers.export(exports, "forever", ()=>forever$1
);
parcelHelpers.export(exports, "groupBy", ()=>groupBy
);
parcelHelpers.export(exports, "groupByLimit", ()=>groupByLimit$1
);
parcelHelpers.export(exports, "groupBySeries", ()=>groupBySeries
);
parcelHelpers.export(exports, "log", ()=>log
);
parcelHelpers.export(exports, "map", ()=>map$1
);
parcelHelpers.export(exports, "mapLimit", ()=>mapLimit$1
);
parcelHelpers.export(exports, "mapSeries", ()=>mapSeries$1
);
parcelHelpers.export(exports, "mapValues", ()=>mapValues
);
parcelHelpers.export(exports, "mapValuesLimit", ()=>mapValuesLimit$1
);
parcelHelpers.export(exports, "mapValuesSeries", ()=>mapValuesSeries
);
parcelHelpers.export(exports, "memoize", ()=>memoize
);
parcelHelpers.export(exports, "nextTick", ()=>nextTick
);
parcelHelpers.export(exports, "parallel", ()=>parallel$1
);
parcelHelpers.export(exports, "parallelLimit", ()=>parallelLimit
);
parcelHelpers.export(exports, "priorityQueue", ()=>priorityQueue
);
parcelHelpers.export(exports, "queue", ()=>queue$1
);
parcelHelpers.export(exports, "race", ()=>race$1
);
parcelHelpers.export(exports, "reduce", ()=>reduce$1
);
parcelHelpers.export(exports, "reduceRight", ()=>reduceRight
);
parcelHelpers.export(exports, "reflect", ()=>reflect
);
parcelHelpers.export(exports, "reflectAll", ()=>reflectAll
);
parcelHelpers.export(exports, "reject", ()=>reject$2
);
parcelHelpers.export(exports, "rejectLimit", ()=>rejectLimit$1
);
parcelHelpers.export(exports, "rejectSeries", ()=>rejectSeries$1
);
parcelHelpers.export(exports, "retry", ()=>retry
);
parcelHelpers.export(exports, "retryable", ()=>retryable
);
parcelHelpers.export(exports, "seq", ()=>seq
);
parcelHelpers.export(exports, "series", ()=>series
);
parcelHelpers.export(exports, "setImmediate", ()=>setImmediate$1
);
parcelHelpers.export(exports, "some", ()=>some$1
);
parcelHelpers.export(exports, "someLimit", ()=>someLimit$1
);
parcelHelpers.export(exports, "someSeries", ()=>someSeries$1
);
parcelHelpers.export(exports, "sortBy", ()=>sortBy$1
);
parcelHelpers.export(exports, "timeout", ()=>timeout
);
parcelHelpers.export(exports, "times", ()=>times
);
parcelHelpers.export(exports, "timesLimit", ()=>timesLimit
);
parcelHelpers.export(exports, "timesSeries", ()=>timesSeries
);
parcelHelpers.export(exports, "transform", ()=>transform
);
parcelHelpers.export(exports, "tryEach", ()=>tryEach$1
);
parcelHelpers.export(exports, "unmemoize", ()=>unmemoize
);
parcelHelpers.export(exports, "until", ()=>until
);
parcelHelpers.export(exports, "waterfall", ()=>waterfall$1
);
parcelHelpers.export(exports, "whilst", ()=>whilst$1
);
parcelHelpers.export(exports, "all", ()=>every$1
);
parcelHelpers.export(exports, "allLimit", ()=>everyLimit$1
);
parcelHelpers.export(exports, "allSeries", ()=>everySeries$1
);
parcelHelpers.export(exports, "any", ()=>some$1
);
parcelHelpers.export(exports, "anyLimit", ()=>someLimit$1
);
parcelHelpers.export(exports, "anySeries", ()=>someSeries$1
);
parcelHelpers.export(exports, "find", ()=>detect$1
);
parcelHelpers.export(exports, "findLimit", ()=>detectLimit$1
);
parcelHelpers.export(exports, "findSeries", ()=>detectSeries$1
);
parcelHelpers.export(exports, "flatMap", ()=>concat$1
);
parcelHelpers.export(exports, "flatMapLimit", ()=>concatLimit$1
);
parcelHelpers.export(exports, "flatMapSeries", ()=>concatSeries$1
);
parcelHelpers.export(exports, "forEach", ()=>each
);
parcelHelpers.export(exports, "forEachSeries", ()=>eachSeries$1
);
parcelHelpers.export(exports, "forEachLimit", ()=>eachLimit$2
);
parcelHelpers.export(exports, "forEachOf", ()=>eachOf$1
);
parcelHelpers.export(exports, "forEachOfSeries", ()=>eachOfSeries$1
);
parcelHelpers.export(exports, "forEachOfLimit", ()=>eachOfLimit$2
);
parcelHelpers.export(exports, "inject", ()=>reduce$1
);
parcelHelpers.export(exports, "foldl", ()=>reduce$1
);
parcelHelpers.export(exports, "foldr", ()=>reduceRight
);
parcelHelpers.export(exports, "select", ()=>filter$1
);
parcelHelpers.export(exports, "selectLimit", ()=>filterLimit$1
);
parcelHelpers.export(exports, "selectSeries", ()=>filterSeries$1
);
parcelHelpers.export(exports, "wrapSync", ()=>asyncify
);
parcelHelpers.export(exports, "during", ()=>whilst$1
);
parcelHelpers.export(exports, "doDuring", ()=>doWhilst$1
);
var process = require("process");
/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */ function apply(fn, ...args) {
    return (...callArgs)=>fn(...args, ...callArgs)
    ;
}
function initialParams(fn) {
    return function(...args /*, callback*/ ) {
        var callback = args.pop();
        return fn.call(this, args, callback);
    };
}
/* istanbul ignore file */ var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;
var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
function fallback(fn) {
    setTimeout(fn, 0);
}
function wrap(defer) {
    return (fn, ...args)=>defer(()=>fn(...args)
        )
    ;
}
var _defer;
if (hasQueueMicrotask) _defer = queueMicrotask;
else if (hasSetImmediate) _defer = setImmediate;
else if (hasNextTick) _defer = process.nextTick;
else _defer = fallback;
var setImmediate$1 = wrap(_defer);
/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */ function asyncify(func) {
    if (isAsync(func)) return function(...args /*, callback*/ ) {
        const callback = args.pop();
        const promise = func.apply(this, args);
        return handlePromise(promise, callback);
    };
    return initialParams(function(args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (result && typeof result.then === 'function') return handlePromise(result, callback);
        else callback(null, result);
    });
}
function handlePromise(promise, callback) {
    return promise.then((value)=>{
        invokeCallback(callback, null, value);
    }, (err)=>{
        invokeCallback(callback, err && err.message ? err : new Error(err));
    });
}
function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (err) {
        setImmediate$1((e)=>{
            throw e;
        }, err);
    }
}
function isAsync(fn) {
    return fn[Symbol.toStringTag] === 'AsyncFunction';
}
function isAsyncGenerator(fn) {
    return fn[Symbol.toStringTag] === 'AsyncGenerator';
}
function isAsyncIterable(obj) {
    return typeof obj[Symbol.asyncIterator] === 'function';
}
function wrapAsync(asyncFn) {
    if (typeof asyncFn !== 'function') throw new Error('expected a function');
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}
// conditionally promisify a function.
// only return a promise if a callback is omitted
function awaitify(asyncFn, arity = asyncFn.length) {
    if (!arity) throw new Error('arity is undefined');
    function awaitable(...args) {
        if (typeof args[arity - 1] === 'function') return asyncFn.apply(this, args);
        return new Promise((resolve, reject1)=>{
            args[arity - 1] = (err, ...cbArgs)=>{
                if (err) return reject1(err);
                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
            };
            asyncFn.apply(this, args);
        });
    }
    return awaitable;
}
function applyEach(eachfn) {
    return function applyEach(fns, ...callArgs) {
        const go = awaitify(function(callback) {
            var that = this;
            return eachfn(fns, (fn, cb)=>{
                wrapAsync(fn).apply(that, callArgs.concat(cb));
            }, callback);
        });
        return go;
    };
}
function _asyncMap(eachfn, arr, iteratee, callback) {
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);
    return eachfn(arr, (value, _, iterCb)=>{
        var index = counter++;
        _iteratee(value, (err, v)=>{
            results[index] = v;
            iterCb(err);
        });
    }, (err)=>{
        callback(err, results);
    });
}
function isArrayLike(value) {
    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;
}
// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
const breakLoop = {
};
function once(fn) {
    function wrapper(...args) {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    }
    Object.assign(wrapper, fn);
    return wrapper;
}
function getIterator(coll) {
    return coll[Symbol.iterator] && coll[Symbol.iterator]();
}
function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {
            value: coll[i],
            key: i
        } : null;
    };
}
function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done) return null;
        i++;
        return {
            value: item.value,
            key: i
        };
    };
}
function createObjectIterator(obj) {
    var okeys = obj ? Object.keys(obj) : [];
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        if (key === '__proto__') return next();
        return i < len ? {
            value: obj[key],
            key
        } : null;
    };
}
function createIterator(coll) {
    if (isArrayLike(coll)) return createArrayIterator(coll);
    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}
function onlyOnce(fn) {
    return function(...args) {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    };
}
// for async generators
function asyncEachOfLimit(generator, limit, iteratee, callback) {
    let done = false;
    let canceled = false;
    let awaiting = false;
    let running = 0;
    let idx = 0;
    function replenish() {
        //console.log('replenish')
        if (running >= limit || awaiting || done) return;
        //console.log('replenish awaiting')
        awaiting = true;
        generator.next().then(({ value , done: iterDone  })=>{
            //console.log('got value', value)
            if (canceled || done) return;
            awaiting = false;
            if (iterDone) {
                done = true;
                if (running <= 0) //console.log('done nextCb')
                callback(null);
                return;
            }
            running++;
            iteratee(value, idx, iterateeCallback);
            idx++;
            replenish();
        }).catch(handleError);
    }
    function iterateeCallback(err, result) {
        //console.log('iterateeCallback')
        running -= 1;
        if (canceled) return;
        if (err) return handleError(err);
        if (err === false) {
            done = true;
            canceled = true;
            return;
        }
        if (result === breakLoop || done && running <= 0) {
            done = true;
            //console.log('done iterCb')
            return callback(null);
        }
        replenish();
    }
    function handleError(err) {
        if (canceled) return;
        awaiting = false;
        done = true;
        callback(err);
    }
    replenish();
}
var eachOfLimit = (limit)=>{
    return (obj, iteratee, callback)=>{
        callback = once(callback);
        if (limit <= 0) throw new RangeError('concurrency limit cannot be less than 1');
        if (!obj) return callback(null);
        if (isAsyncGenerator(obj)) return asyncEachOfLimit(obj, limit, iteratee, callback);
        if (isAsyncIterable(obj)) return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback);
        var nextElem = createIterator(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
            if (canceled) return;
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            } else if (err === false) {
                done = true;
                canceled = true;
            } else if (value === breakLoop || done && running <= 0) {
                done = true;
                return callback(null);
            } else if (!looping) replenish();
        }
        function replenish() {
            looping = true;
            while(running < limit && !done){
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) callback(null);
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }
        replenish();
    };
};
/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */ function eachOfLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
}
var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);
// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback);
    var index1 = 0, completed = 0, { length  } = coll, canceled = false;
    if (length === 0) callback(null);
    function iteratorCallback(err, value) {
        if (err === false) canceled = true;
        if (canceled === true) return;
        if (err) callback(err);
        else if (++completed === length || value === breakLoop) callback(null);
    }
    for(; index1 < length; index1++)iteratee(coll[index1], index1, onlyOnce(iteratorCallback));
}
// a generic version of eachOf which can handle array, object, and iterator cases.
function eachOfGeneric(coll, iteratee, callback) {
    return eachOfLimit$2(coll, Infinity, iteratee, callback);
}
/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dev.json is a file containing a valid json object config for dev environment
 * // dev.json is a file containing a valid json object config for test environment
 * // prod.json is a file containing a valid json object config for prod environment
 * // invalid.json is a file with a malformed json object
 *
 * let configs = {}; //global variable
 * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};
 * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};
 *
 * // asynchronous function that reads a json file and parses the contents as json object
 * function parseFile(file, key, callback) {
 *     fs.readFile(file, "utf8", function(err, data) {
 *         if (err) return calback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }
 *
 * // Using callbacks
 * async.forEachOf(validConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *     } else {
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *         // JSON parse error exception
 *     } else {
 *         console.log(configs);
 *     }
 * });
 *
 * // Using Promises
 * async.forEachOf(validConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 *     // configs is now a map of JSON data, e.g.
 *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 * }).catch( err => {
 *     console.error(err);
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 * }).catch( err => {
 *     console.error(err);
 *     // JSON parse error exception
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.forEachOf(validConfigFileMap, parseFile);
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * //Error handing
 * async () => {
 *     try {
 *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);
 *         console.log(configs);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // JSON parse error exception
 *     }
 * }
 *
 */ function eachOf(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    return eachOfImplementation(coll, wrapAsync(iteratee), callback);
}
var eachOf$1 = awaitify(eachOf, 3);
/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callbacks
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.map(fileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(results);
 *     }
 * });
 *
 * // Using Promises
 * async.map(fileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now an array of the file size in bytes for each file, e.g.
 *     // [ 1000, 2000, 3000]
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.map(fileList, getFileSizeInBytes);
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.map(withMissingFileList, getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */ function map(coll, iteratee, callback) {
    return _asyncMap(eachOf$1, coll, iteratee, callback);
}
var map$1 = awaitify(map, 3);
/**
 * Applies the provided arguments to each function in the array, calling
 * `callback` after all functions have completed. If you only provide the first
 * argument, `fns`, then it will return a function which lets you pass in the
 * arguments as if it were a single function call. If more arguments are
 * provided, `callback` is required while `args` is still optional. The results
 * for each of the applied async functions are passed to the final callback
 * as an array.
 *
 * @name applyEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s
 * to all call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - Returns a function that takes no args other than
 * an optional callback, that is the result of applying the `args` to each
 * of the functions.
 * @example
 *
 * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')
 *
 * appliedFn((err, results) => {
 *     // results[0] is the results for `enableSearch`
 *     // results[1] is the results for `updateSchema`
 * });
 *
 * // partial application example:
 * async.each(
 *     buckets,
 *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),
 *     callback
 * );
 */ var applyEach$1 = applyEach(map$1);
/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */ function eachOfSeries(coll, iteratee, callback) {
    return eachOfLimit$2(coll, 1, iteratee, callback);
}
var eachOfSeries$1 = awaitify(eachOfSeries, 3);
/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */ function mapSeries(coll, iteratee, callback) {
    return _asyncMap(eachOfSeries$1, coll, iteratee, callback);
}
var mapSeries$1 = awaitify(mapSeries, 3);
/**
 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
 *
 * @name applyEachSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all
 * call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - A function, that when called, is the result of
 * appling the `args` to the list of functions.  It takes no args, other than
 * a callback.
 */ var applyEachSeries = applyEach(mapSeries$1);
const PROMISE_SYMBOL = Symbol('promiseCallback');
function promiseCallback() {
    let resolve, reject2;
    function callback(err, ...args) {
        if (err) return reject2(err);
        resolve(args.length > 1 ? args : args[0]);
    }
    callback[PROMISE_SYMBOL] = new Promise((res, rej)=>{
        resolve = res, reject2 = rej;
    });
    return callback;
}
/**
 * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
 * their requirements. Each function can optionally depend on other functions
 * being completed first, and each function is run as soon as its requirements
 * are satisfied.
 *
 * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
 * will stop. Further tasks will not execute (so any other functions depending
 * on it will not run), and the main `callback` is immediately called with the
 * error.
 *
 * {@link AsyncFunction}s also receive an object containing the results of functions which
 * have completed so far as the first argument, if they have dependencies. If a
 * task function has no dependencies, it will only be passed a callback.
 *
 * @name auto
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Object} tasks - An object. Each of its properties is either a
 * function or an array of requirements, with the {@link AsyncFunction} itself the last item
 * in the array. The object's key of a property serves as the name of the task
 * defined by that property, i.e. can be used when specifying requirements for
 * other tasks. The function receives one or two arguments:
 * * a `results` object, containing the results of the previously executed
 *   functions, only passed if the task has any dependencies,
 * * a `callback(err, result)` function, which must be called when finished,
 *   passing an `error` (which can be `null`) and the result of the function's
 *   execution.
 * @param {number} [concurrency=Infinity] - An optional `integer` for
 * determining the maximum number of tasks that can be run in parallel. By
 * default, as many as possible.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback. Results are always returned; however, if an
 * error occurs, no further `tasks` will be performed, and the results object
 * will only contain partial results. Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 * @example
 *
 * //Using Callbacks
 * async.auto({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         // once the file is written let's email a link to it...
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }, function(err, results) {
 *     if (err) {
 *         console.log('err = ', err);
 *     }
 *     console.log('results = ', results);
 *     // results = {
 *     //     get_data: ['data', 'converted to array']
 *     //     make_folder; 'folder',
 *     //     write_file: 'filename'
 *     //     email_link: { file: 'filename', email: 'user@example.com' }
 *     // }
 * });
 *
 * //Using Promises
 * async.auto({
 *     get_data: function(callback) {
 *         console.log('in get_data');
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         console.log('in make_folder');
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         // once the file is written let's email a link to it...
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }).then(results => {
 *     console.log('results = ', results);
 *     // results = {
 *     //     get_data: ['data', 'converted to array']
 *     //     make_folder; 'folder',
 *     //     write_file: 'filename'
 *     //     email_link: { file: 'filename', email: 'user@example.com' }
 *     // }
 * }).catch(err => {
 *     console.log('err = ', err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.auto({
 *             get_data: function(callback) {
 *                 // async code to get some data
 *                 callback(null, 'data', 'converted to array');
 *             },
 *             make_folder: function(callback) {
 *                 // async code to create a directory to store a file in
 *                 // this is run at the same time as getting the data
 *                 callback(null, 'folder');
 *             },
 *             write_file: ['get_data', 'make_folder', function(results, callback) {
 *                 // once there is some data and the directory exists,
 *                 // write the data to a file in the directory
 *                 callback(null, 'filename');
 *             }],
 *             email_link: ['write_file', function(results, callback) {
 *                 // once the file is written let's email a link to it...
 *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *             }]
 *         });
 *         console.log('results = ', results);
 *         // results = {
 *         //     get_data: ['data', 'converted to array']
 *         //     make_folder; 'folder',
 *         //     write_file: 'filename'
 *         //     email_link: { file: 'filename', email: 'user@example.com' }
 *         // }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function auto(tasks, concurrency, callback) {
    if (typeof concurrency !== 'number') {
        // concurrency is optional, shift the args.
        callback = concurrency;
        concurrency = null;
    }
    callback = once(callback || promiseCallback());
    var numTasks = Object.keys(tasks).length;
    if (!numTasks) return callback(null);
    if (!concurrency) concurrency = numTasks;
    var results = {
    };
    var runningTasks = 0;
    var canceled = false;
    var hasError = false;
    var listeners = Object.create(null);
    var readyTasks = [];
    // for cycle detection:
    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task
    var uncheckedDependencies = {
    };
    Object.keys(tasks).forEach((key)=>{
        var task = tasks[key];
        if (!Array.isArray(task)) {
            // no dependencies
            enqueueTask(key, [
                task
            ]);
            readyToCheck.push(key);
            return;
        }
        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
            enqueueTask(key, task);
            readyToCheck.push(key);
            return;
        }
        uncheckedDependencies[key] = remainingDependencies;
        dependencies.forEach((dependencyName)=>{
            if (!tasks[dependencyName]) throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));
            addListener(dependencyName, ()=>{
                remainingDependencies--;
                if (remainingDependencies === 0) enqueueTask(key, task);
            });
        });
    });
    checkForDeadlocks();
    processQueue();
    function enqueueTask(key, task) {
        readyTasks.push(()=>runTask(key, task)
        );
    }
    function processQueue() {
        if (canceled) return;
        if (readyTasks.length === 0 && runningTasks === 0) return callback(null, results);
        while(readyTasks.length && runningTasks < concurrency){
            var run = readyTasks.shift();
            run();
        }
    }
    function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) taskListeners = listeners[taskName] = [];
        taskListeners.push(fn);
    }
    function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        taskListeners.forEach((fn)=>fn()
        );
        processQueue();
    }
    function runTask(key, task) {
        if (hasError) return;
        var taskCallback = onlyOnce((err, ...result)=>{
            runningTasks--;
            if (err === false) {
                canceled = true;
                return;
            }
            if (result.length < 2) [result] = result;
            if (err) {
                var safeResults = {
                };
                Object.keys(results).forEach((rkey)=>{
                    safeResults[rkey] = results[rkey];
                });
                safeResults[key] = result;
                hasError = true;
                listeners = Object.create(null);
                if (canceled) return;
                callback(err, safeResults);
            } else {
                results[key] = result;
                taskComplete(key);
            }
        });
        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) taskFn(results, taskCallback);
        else taskFn(taskCallback);
    }
    function checkForDeadlocks() {
        // Kahn's algorithm
        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
        var currentTask;
        var counter = 0;
        while(readyToCheck.length){
            currentTask = readyToCheck.pop();
            counter++;
            getDependents(currentTask).forEach((dependent)=>{
                if (--uncheckedDependencies[dependent] === 0) readyToCheck.push(dependent);
            });
        }
        if (counter !== numTasks) throw new Error('async.auto cannot execute tasks due to a recursive dependency');
    }
    function getDependents(taskName) {
        var result = [];
        Object.keys(tasks).forEach((key)=>{
            const task = tasks[key];
            if (Array.isArray(task) && task.indexOf(taskName) >= 0) result.push(key);
        });
        return result;
    }
    return callback[PROMISE_SYMBOL];
}
var FN_ARGS = /^(?:async\s+)?(?:function)?\s*\w*\s*\(\s*([^)]+)\s*\)(?:\s*{)/;
var ARROW_FN_ARGS = /^(?:async\s+)?\(?\s*([^)=]+)\s*\)?(?:\s*=>)/;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /(=.+)?(\s*)$/;
function stripComments(string) {
    let stripped = '';
    let index2 = 0;
    let endBlockComment = string.indexOf('*/');
    while(index2 < string.length){
        if (string[index2] === '/' && string[index2 + 1] === '/') {
            // inline comment
            let endIndex = string.indexOf('\n', index2);
            index2 = endIndex === -1 ? string.length : endIndex;
        } else if (endBlockComment !== -1 && string[index2] === '/' && string[index2 + 1] === '*') {
            // block comment
            let endIndex = string.indexOf('*/', index2);
            if (endIndex !== -1) {
                index2 = endIndex + 2;
                endBlockComment = string.indexOf('*/', index2);
            } else {
                stripped += string[index2];
                index2++;
            }
        } else {
            stripped += string[index2];
            index2++;
        }
    }
    return stripped;
}
function parseParams(func) {
    const src = stripComments(func.toString());
    let match = src.match(FN_ARGS);
    if (!match) match = src.match(ARROW_FN_ARGS);
    if (!match) throw new Error('could not parse args in autoInject\nSource:\n' + src);
    let [, args] = match;
    return args.replace(/\s/g, '').split(FN_ARG_SPLIT).map((arg)=>arg.replace(FN_ARG, '').trim()
    );
}
/**
 * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
 * tasks are specified as parameters to the function, after the usual callback
 * parameter, with the parameter names matching the names of the tasks it
 * depends on. This can provide even more readable task graphs which can be
 * easier to maintain.
 *
 * If a final callback is specified, the task results are similarly injected,
 * specified as named parameters after the initial error parameter.
 *
 * The autoInject function is purely syntactic sugar and its semantics are
 * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
 *
 * @name autoInject
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.auto]{@link module:ControlFlow.auto}
 * @category Control Flow
 * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
 * the form 'func([dependencies...], callback). The object's key of a property
 * serves as the name of the task defined by that property, i.e. can be used
 * when specifying requirements for other tasks.
 * * The `callback` parameter is a `callback(err, result)` which must be called
 *   when finished, passing an `error` (which can be `null`) and the result of
 *   the function's execution. The remaining parameters name other tasks on
 *   which the task is dependent, and the results from those tasks are the
 *   arguments of those parameters.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback, and a `results` object with any completed
 * task results, similar to `auto`.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * //  The example from `auto` can be rewritten as follows:
 * async.autoInject({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: function(get_data, make_folder, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     },
 *     email_link: function(write_file, callback) {
 *         // once the file is written let's email a link to it...
 *         // write_file contains the filename returned by write_file.
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 *
 * // If you are using a JS minifier that mangles parameter names, `autoInject`
 * // will not work with plain functions, since the parameter names will be
 * // collapsed to a single letter identifier.  To work around this, you can
 * // explicitly specify the names of the parameters your task function needs
 * // in an array, similar to Angular.js dependency injection.
 *
 * // This still has an advantage over plain `auto`, since the results a task
 * // depends on are still spread into arguments.
 * async.autoInject({
 *     //...
 *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(write_file, callback) {
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }]
 *     //...
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 */ function autoInject(tasks, callback) {
    var newTasks = {
    };
    Object.keys(tasks).forEach((key)=>{
        var taskFn = tasks[key];
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;
        if (Array.isArray(taskFn)) {
            params = [
                ...taskFn
            ];
            taskFn = params.pop();
            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) // no dependencies, use the function as-is
        newTasks[key] = taskFn;
        else {
            params = parseParams(taskFn);
            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) throw new Error("autoInject task functions require explicit parameters.");
            // remove callback param
            if (!fnIsAsync) params.pop();
            newTasks[key] = params.concat(newTask);
        }
        function newTask(results, taskCb) {
            var newArgs = params.map((name)=>results[name]
            );
            newArgs.push(taskCb);
            wrapAsync(taskFn)(...newArgs);
        }
    });
    return auto(newTasks, callback);
}
// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
class DLL {
    constructor(){
        this.head = this.tail = null;
        this.length = 0;
    }
    removeLink(node) {
        if (node.prev) node.prev.next = node.next;
        else this.head = node.next;
        if (node.next) node.next.prev = node.prev;
        else this.tail = node.prev;
        node.prev = node.next = null;
        this.length -= 1;
        return node;
    }
    empty() {
        while(this.head)this.shift();
        return this;
    }
    insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next) node.next.prev = newNode;
        else this.tail = newNode;
        node.next = newNode;
        this.length += 1;
    }
    insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev) node.prev.next = newNode;
        else this.head = newNode;
        node.prev = newNode;
        this.length += 1;
    }
    unshift(node) {
        if (this.head) this.insertBefore(this.head, node);
        else setInitial(this, node);
    }
    push(node) {
        if (this.tail) this.insertAfter(this.tail, node);
        else setInitial(this, node);
    }
    shift() {
        return this.head && this.removeLink(this.head);
    }
    pop() {
        return this.tail && this.removeLink(this.tail);
    }
    toArray() {
        return [
            ...this
        ];
    }
    *[Symbol.iterator]() {
        var cur = this.head;
        while(cur){
            yield cur.data;
            cur = cur.next;
        }
    }
    remove(testFn) {
        var curr = this.head;
        while(curr){
            var { next  } = curr;
            if (testFn(curr)) this.removeLink(curr);
            curr = next;
        }
        return this;
    }
}
function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}
function queue(worker, concurrency, payload) {
    if (concurrency == null) concurrency = 1;
    else if (concurrency === 0) throw new RangeError('Concurrency must not be zero');
    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];
    const events = {
        error: [],
        drain: [],
        saturated: [],
        unsaturated: [],
        empty: []
    };
    function on(event, handler) {
        events[event].push(handler);
    }
    function once1(event, handler) {
        const handleAndRemove = (...args)=>{
            off(event, handleAndRemove);
            handler(...args);
        };
        events[event].push(handleAndRemove);
    }
    function off(event, handler) {
        if (!event) return Object.keys(events).forEach((ev)=>events[ev] = []
        );
        if (!handler) return events[event] = [];
        events[event] = events[event].filter((ev)=>ev !== handler
        );
    }
    function trigger(event, ...args) {
        events[event].forEach((handler)=>handler(...args)
        );
    }
    var processingScheduled = false;
    function _insert(data, insertAtFront, rejectOnError, callback) {
        if (callback != null && typeof callback !== 'function') throw new Error('task callback must be a function');
        q.started = true;
        var res, rej;
        function promiseCallback1(err, ...args) {
            // we don't care about the error, let the global error handler
            // deal with it
            if (err) return rejectOnError ? rej(err) : res();
            if (args.length <= 1) return res(args[0]);
            res(args);
        }
        var item = q._createTaskItem(data, rejectOnError ? promiseCallback1 : callback || promiseCallback1);
        if (insertAtFront) q._tasks.unshift(item);
        else q._tasks.push(item);
        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(()=>{
                processingScheduled = false;
                q.process();
            });
        }
        if (rejectOnError || !callback) return new Promise((resolve, reject3)=>{
            res = resolve;
            rej = reject3;
        });
    }
    function _createCB(tasks) {
        return function(err, ...args) {
            numRunning -= 1;
            for(var i = 0, l = tasks.length; i < l; i++){
                var task = tasks[i];
                var index3 = workersList.indexOf(task);
                if (index3 === 0) workersList.shift();
                else if (index3 > 0) workersList.splice(index3, 1);
                task.callback(err, ...args);
                if (err != null) trigger('error', err, task.data);
            }
            if (numRunning <= q.concurrency - q.buffer) trigger('unsaturated');
            if (q.idle()) trigger('drain');
            q.process();
        };
    }
    function _maybeDrain(data) {
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            setImmediate$1(()=>trigger('drain')
            );
            return true;
        }
        return false;
    }
    const eventMethod = (name)=>(handler)=>{
            if (!handler) return new Promise((resolve, reject4)=>{
                once1(name, (err, data)=>{
                    if (err) return reject4(err);
                    resolve(data);
                });
            });
            off(name);
            on(name, handler);
        }
    ;
    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        _createTaskItem (data, callback) {
            return {
                data,
                callback
            };
        },
        *[Symbol.iterator] () {
            yield* q._tasks[Symbol.iterator]();
        },
        concurrency,
        payload,
        buffer: concurrency / 4,
        started: false,
        paused: false,
        push (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return;
                return data.map((datum)=>_insert(datum, false, false, callback)
                );
            }
            return _insert(data, false, false, callback);
        },
        pushAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return;
                return data.map((datum)=>_insert(datum, false, true, callback)
                );
            }
            return _insert(data, false, true, callback);
        },
        kill () {
            off();
            q._tasks.empty();
        },
        unshift (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return;
                return data.map((datum)=>_insert(datum, true, false, callback)
                );
            }
            return _insert(data, true, false, callback);
        },
        unshiftAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return;
                return data.map((datum)=>_insert(datum, true, true, callback)
                );
            }
            return _insert(data, true, true, callback);
        },
        remove (testFn) {
            q._tasks.remove(testFn);
        },
        process () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) return;
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for(var i = 0; i < l; i++){
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }
                numRunning += 1;
                if (q._tasks.length === 0) trigger('empty');
                if (numRunning === q.concurrency) trigger('saturated');
                var cb = onlyOnce(_createCB(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length () {
            return q._tasks.length;
        },
        running () {
            return numRunning;
        },
        workersList () {
            return workersList;
        },
        idle () {
            return q._tasks.length + numRunning === 0;
        },
        pause () {
            q.paused = true;
        },
        resume () {
            if (q.paused === false) return;
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    // define these as fixed properties, so people get useful errors when updating
    Object.defineProperties(q, {
        saturated: {
            writable: false,
            value: eventMethod('saturated')
        },
        unsaturated: {
            writable: false,
            value: eventMethod('unsaturated')
        },
        empty: {
            writable: false,
            value: eventMethod('empty')
        },
        drain: {
            writable: false,
            value: eventMethod('drain')
        },
        error: {
            writable: false,
            value: eventMethod('error')
        }
    });
    return q;
}
/**
 * Creates a `cargo` object with the specified payload. Tasks added to the
 * cargo will be processed altogether (up to the `payload` limit). If the
 * `worker` is in progress, the task is queued until it becomes available. Once
 * the `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, cargo passes an array of tasks to a single worker, repeating
 * when the worker is finished.
 *
 * @name cargo
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargo and inner queue.
 * @example
 *
 * // create a cargo object with payload 2
 * var cargo = async.cargo(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2);
 *
 * // add some items
 * cargo.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargo.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * await cargo.push({name: 'baz'});
 * console.log('finished processing baz');
 */ function cargo(worker, payload) {
    return queue(worker, 1, payload);
}
/**
 * Creates a `cargoQueue` object with the specified payload. Tasks added to the
 * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.
 * If the all `workers` are in progress, the task is queued until one becomes available. Once
 * a `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,
 * the cargoQueue passes an array of tasks to multiple parallel workers.
 *
 * @name cargoQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @see [async.cargo]{@link module:ControlFLow.cargo}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargoQueue and inner queue.
 * @example
 *
 * // create a cargoQueue object with payload 2 and concurrency 2
 * var cargoQueue = async.cargoQueue(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2, 2);
 *
 * // add some items
 * cargoQueue.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargoQueue.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * cargoQueue.push({name: 'baz'}, function(err) {
 *     console.log('finished processing baz');
 * });
 * cargoQueue.push({name: 'boo'}, function(err) {
 *     console.log('finished processing boo');
 * });
 */ function cargo$1(worker, concurrency, payload) {
    return queue(worker, concurrency, payload);
}
/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];
 *
 * // asynchronous function that computes the file size in bytes
 * // file size is added to the memoized value, then returned
 * function getFileSizeInBytes(memo, file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, memo + stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.reduce(fileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // 6000
 *     // which is the sum of the file sizes of the three files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */ function reduce(coll, memo, iteratee, callback) {
    callback = once(callback);
    var _iteratee = wrapAsync(iteratee);
    return eachOfSeries$1(coll, (x, i, iterCb)=>{
        _iteratee(memo, x, (err, v)=>{
            memo = v;
            iterCb(err);
        });
    }, (err)=>callback(err, memo)
    );
}
var reduce$1 = awaitify(reduce, 4);
/**
 * Version of the compose function that is more natural to read. Each function
 * consumes the return value of the previous function. It is the equivalent of
 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name seq
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.compose]{@link module:ControlFlow.compose}
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} a function that composes the `functions` in order
 * @example
 *
 * // Requires lodash (or underscore), express3 and dresende's orm2.
 * // Part of an app, that fetches cats of the logged user.
 * // This example uses `seq` function to avoid overnesting and error
 * // handling clutter.
 * app.get('/cats', function(request, response) {
 *     var User = request.models.User;
 *     async.seq(
 *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))
 *         function(user, fn) {
 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
 *         }
 *     )(req.session.user_id, function (err, cats) {
 *         if (err) {
 *             console.error(err);
 *             response.json({ status: 'error', message: err.message });
 *         } else {
 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
 *         }
 *     });
 * });
 */ function seq(...functions) {
    var _functions = functions.map(wrapAsync);
    return function(...args) {
        var that = this;
        var cb = args[args.length - 1];
        if (typeof cb == 'function') args.pop();
        else cb = promiseCallback();
        reduce$1(_functions, args, (newargs, fn, iterCb)=>{
            fn.apply(that, newargs.concat((err, ...nextargs)=>{
                iterCb(err, nextargs);
            }));
        }, (err, results)=>cb(err, ...results)
        );
        return cb[PROMISE_SYMBOL];
    };
}
/**
 * Creates a function which is a composition of the passed asynchronous
 * functions. Each function consumes the return value of the function that
 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
 *
 * If the last argument to the composed function is not a function, a promise
 * is returned when you call it.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name compose
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} an asynchronous function that is the composed
 * asynchronous `functions`
 * @example
 *
 * function add1(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n + 1);
 *     }, 10);
 * }
 *
 * function mul3(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n * 3);
 *     }, 10);
 * }
 *
 * var add1mul3 = async.compose(mul3, add1);
 * add1mul3(4, function (err, result) {
 *     // result now equals 15
 * });
 */ function compose(...args) {
    return seq(...args.reverse());
}
/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */ function mapLimit(coll, limit, iteratee, callback) {
    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback);
}
var mapLimit$1 = awaitify(mapLimit, 4);
/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapLimit
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */ function concatLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb)=>{
        _iteratee(val, (err, ...args)=>{
            if (err) return iterCb(err);
            return iterCb(err, args);
        });
    }, (err, mapResults)=>{
        var result = [];
        for(var i = 0; i < mapResults.length; i++)if (mapResults[i]) result = result.concat(...mapResults[i]);
        return callback(err, result);
    });
}
var concatLimit$1 = awaitify(concatLimit, 4);
/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. The results array will be returned in
 * the original order of `coll` passed to the `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @alias flatMap
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * let directoryList = ['dir1','dir2','dir3'];
 * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];
 *
 * // Using callbacks
 * async.concat(directoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *    }
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *        // [ Error: ENOENT: no such file or directory ]
 *        // since dir4 does not exist
 *    } else {
 *        console.log(results);
 *    }
 * });
 *
 * // Using Promises
 * async.concat(directoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 * }).catch(err => {
 *      console.log(err);
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 * }).catch(err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4 does not exist
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.concat(directoryList, fs.readdir);
 *         console.log(results);
 *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *     } catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.concat(withMissingDirectoryList, fs.readdir);
 *         console.log(results);
 *     } catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4 does not exist
 *     }
 * }
 *
 */ function concat(coll, iteratee, callback) {
    return concatLimit$1(coll, Infinity, iteratee, callback);
}
var concat$1 = awaitify(concat, 3);
/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapSeries
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */ function concatSeries(coll, iteratee, callback) {
    return concatLimit$1(coll, 1, iteratee, callback);
}
var concatSeries$1 = awaitify(concatSeries, 3);
/**
 * Returns a function that when called, calls-back with the values provided.
 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
 * [`auto`]{@link module:ControlFlow.auto}.
 *
 * @name constant
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {...*} arguments... - Any number of arguments to automatically invoke
 * callback with.
 * @returns {AsyncFunction} Returns a function that when invoked, automatically
 * invokes the callback with the previous given arguments.
 * @example
 *
 * async.waterfall([
 *     async.constant(42),
 *     function (value, next) {
 *         // value === 42
 *     },
 *     //...
 * ], callback);
 *
 * async.waterfall([
 *     async.constant(filename, "utf8"),
 *     fs.readFile,
 *     function (fileData, next) {
 *         //...
 *     }
 *     //...
 * ], callback);
 *
 * async.auto({
 *     hostname: async.constant("https://server.net/"),
 *     port: findFreePort,
 *     launchServer: ["hostname", "port", function (options, cb) {
 *         startServer(options, cb);
 *     }],
 *     //...
 * }, callback);
 */ function constant(...args) {
    return function(...ignoredArgs /*, callback*/ ) {
        var callback = ignoredArgs.pop();
        return callback(null, ...args);
    };
}
function _createTester(check, getResult) {
    return (eachfn, arr, _iteratee, cb)=>{
        var testPassed = false;
        var testResult;
        const iteratee = wrapAsync(_iteratee);
        eachfn(arr, (value, _, callback)=>{
            iteratee(value, (err, result)=>{
                if (err || err === false) return callback(err);
                if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    return callback(null, breakLoop);
                }
                callback();
            });
        }, (err)=>{
            if (err) return cb(err);
            cb(null, testPassed ? testResult : getResult(false));
        });
    };
}
/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // dir1/file1.txt
 *        // result now equals the first file in the list that exists
 *    }
 *);
 *
 * // Using Promises
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)
 * .then(result => {
 *     console.log(result);
 *     // dir1/file1.txt
 *     // result now equals the first file in the list that exists
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);
 *         console.log(result);
 *         // dir1/file1.txt
 *         // result now equals the file in the list that exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function detect(coll, iteratee, callback) {
    return _createTester((bool)=>bool
    , (res, item)=>item
    )(eachOf$1, coll, iteratee, callback);
}
var detect$1 = awaitify(detect, 3);
/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */ function detectLimit(coll, limit, iteratee, callback) {
    return _createTester((bool)=>bool
    , (res, item)=>item
    )(eachOfLimit(limit), coll, iteratee, callback);
}
var detectLimit$1 = awaitify(detectLimit, 4);
/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 */ function detectSeries(coll, iteratee, callback) {
    return _createTester((bool)=>bool
    , (res, item)=>item
    )(eachOfLimit(1), coll, iteratee, callback);
}
var detectSeries$1 = awaitify(detectSeries, 3);
function consoleFunc(name) {
    return (fn, ...args)=>wrapAsync(fn)(...args, (err, ...resultArgs)=>{
            /* istanbul ignore else */ if (typeof console === 'object') {
                /* istanbul ignore else */ if (err) /* istanbul ignore else */ {
                    if (console.error) console.error(err);
                } else if (console[name]) resultArgs.forEach((x)=>console[name](x)
                );
            }
        })
    ;
}
/**
 * Logs the result of an [`async` function]{@link AsyncFunction} to the
 * `console` using `console.dir` to display the properties of the resulting object.
 * Only works in Node.js or in browsers that support `console.dir` and
 * `console.error` (such as FF and Chrome).
 * If multiple arguments are returned from the async function,
 * `console.dir` is called on each argument in order.
 *
 * @name dir
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, {hello: name});
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.dir(hello, 'world');
 * {hello: 'world'}
 */ var dir = consoleFunc('dir');
/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */ function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results;
    function next(err, ...args) {
        if (err) return callback(err);
        if (err === false) return;
        results = args;
        _test(...args, check);
    }
    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }
    return check(null, true);
}
var doWhilst$1 = awaitify(doWhilst, 3);
/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */ function doUntil(iteratee, test, callback) {
    const _test = wrapAsync(test);
    return doWhilst$1(iteratee, (...args)=>{
        const cb = args.pop();
        _test(...args, (err, truth)=>cb(err, !truth)
        );
    }, callback);
}
function _withoutIndex(iteratee) {
    return (value, index, callback)=>iteratee(value, callback)
    ;
}
/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];
 * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];
 *
 * // asynchronous function that deletes a file
 * const deleteFile = function(file, callback) {
 *     fs.unlink(file, callback);
 * };
 *
 * // Using callbacks
 * async.each(fileList, deleteFile, function(err) {
 *     if( err ) {
 *         console.log(err);
 *     } else {
 *         console.log('All files have been deleted successfully');
 *     }
 * });
 *
 * // Error Handling
 * async.each(withMissingFileList, deleteFile, function(err){
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using Promises
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         await async.each(files, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         await async.each(withMissingFileList, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4/file2.txt does not exist
 *         // dir1/file1.txt could have been deleted
 *     }
 * }
 *
 */ function eachLimit(coll, iteratee, callback) {
    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var each = awaitify(eachLimit, 3);
/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */ function eachLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var eachLimit$2 = awaitify(eachLimit$1, 4);
/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item
 * in series and therefore the iteratee functions will complete in order.

 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */ function eachSeries(coll, iteratee, callback) {
    return eachLimit$2(coll, 1, iteratee, callback);
}
var eachSeries$1 = awaitify(eachSeries, 3);
/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */ function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return function(...args /*, callback*/ ) {
        var callback = args.pop();
        var sync = true;
        args.push((...innerArgs)=>{
            if (sync) setImmediate$1(()=>callback(...innerArgs)
            );
            else callback(...innerArgs);
        });
        fn.apply(this, args);
        sync = false;
    };
}
/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.every(fileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * });
 *
 * async.every(withMissingFileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * });
 *
 * // Using Promises
 * async.every(fileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.every(withMissingFileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.every(fileList, fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.every(withMissingFileList, fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since NOT every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function every(coll, iteratee, callback) {
    return _createTester((bool)=>!bool
    , (res)=>!res
    )(eachOf$1, coll, iteratee, callback);
}
var every$1 = awaitify(every, 3);
/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */ function everyLimit(coll, limit, iteratee, callback) {
    return _createTester((bool)=>!bool
    , (res)=>!res
    )(eachOfLimit(limit), coll, iteratee, callback);
}
var everyLimit$1 = awaitify(everyLimit, 4);
/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */ function everySeries(coll, iteratee, callback) {
    return _createTester((bool)=>!bool
    , (res)=>!res
    )(eachOfSeries$1, coll, iteratee, callback);
}
var everySeries$1 = awaitify(everySeries, 3);
function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, (x, index, iterCb)=>{
        iteratee(x, (err, v)=>{
            truthValues[index] = !!v;
            iterCb(err);
        });
    }, (err)=>{
        if (err) return callback(err);
        var results = [];
        for(var i = 0; i < arr.length; i++)if (truthValues[i]) results.push(arr[i]);
        callback(null, results);
    });
}
function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, (x, index4, iterCb)=>{
        iteratee(x, (err, v)=>{
            if (err) return iterCb(err);
            if (v) results.push({
                index: index4,
                value: x
            });
            iterCb(err);
        });
    }, (err)=>{
        if (err) return callback(err);
        callback(null, results.sort((a, b)=>a.index - b.index
        ).map((v)=>v.value
        ));
    });
}
function _filter(eachfn, coll, iteratee, callback) {
    var filter1 = isArrayLike(coll) ? filterArray : filterGeneric;
    return filter1(eachfn, coll, wrapAsync(iteratee), callback);
}
/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.filter(files, fileExists, function(err, results) {
 *    if(err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *        // results is now an array of the existing files
 *    }
 * });
 *
 * // Using Promises
 * async.filter(files, fileExists)
 * .then(results => {
 *     console.log(results);
 *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *     // results is now an array of the existing files
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.filter(files, fileExists);
 *         console.log(results);
 *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *         // results is now an array of the existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function filter(coll, iteratee, callback) {
    return _filter(eachOf$1, coll, iteratee, callback);
}
var filter$1 = awaitify(filter, 3);
/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 */ function filterLimit(coll, limit, iteratee, callback) {
    return _filter(eachOfLimit(limit), coll, iteratee, callback);
}
var filterLimit$1 = awaitify(filterLimit, 4);
/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 * @returns {Promise} a promise, if no callback provided
 */ function filterSeries(coll, iteratee, callback) {
    return _filter(eachOfSeries$1, coll, iteratee, callback);
}
var filterSeries$1 = awaitify(filterSeries, 3);
/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @returns {Promise} a promise that rejects if an error occurs and an errback
 * is not passed
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */ function forever(fn, errback) {
    var done = onlyOnce(errback);
    var task = wrapAsync(ensureAsync(fn));
    function next(err) {
        if (err) return done(err);
        if (err === false) return;
        task(next);
    }
    return next();
}
var forever$1 = awaitify(forever, 2);
/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */ function groupByLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb)=>{
        _iteratee(val, (err, key)=>{
            if (err) return iterCb(err);
            return iterCb(err, {
                key,
                val
            });
        });
    }, (err, mapResults)=>{
        var result = {
        };
        // from MDN, handle object having an `hasOwnProperty` prop
        var { hasOwnProperty  } = Object.prototype;
        for(var i = 0; i < mapResults.length; i++)if (mapResults[i]) {
            var { key  } = mapResults[i];
            var { val  } = mapResults[i];
            if (hasOwnProperty.call(result, key)) result[key].push(val);
            else result[key] = [
                val
            ];
        }
        return callback(err, result);
    });
}
var groupByLimit$1 = awaitify(groupByLimit, 4);
/**
 * Returns a new object, where each value corresponds to an array of items, from
 * `coll`, that returned the corresponding key. That is, the keys of the object
 * correspond to the values passed to the `iteratee` callback.
 *
 * Note: Since this function applies the `iteratee` to each item in parallel,
 * there is no guarantee that the `iteratee` functions will complete in order.
 * However, the values for each key in the `result` will be in the same order as
 * the original `coll`. For Objects, the values will roughly be in the order of
 * the original Objects' keys (but this can vary across JavaScript engines).
 *
 * @name groupBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const files = ['dir1/file1.txt','dir2','dir4']
 *
 * // asynchronous function that detects file type as none, file, or directory
 * function detectFile(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(null, 'none');
 *         }
 *         callback(null, stat.isDirectory() ? 'directory' : 'file');
 *     });
 * }
 *
 * //Using callbacks
 * async.groupBy(files, detectFile, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *	       console.log(result);
 *         // {
 *         //     file: [ 'dir1/file1.txt' ],
 *         //     none: [ 'dir4' ],
 *         //     directory: [ 'dir2']
 *         // }
 *         // result is object containing the files grouped by type
 *     }
 * });
 *
 * // Using Promises
 * async.groupBy(files, detectFile)
 * .then( result => {
 *     console.log(result);
 *     // {
 *     //     file: [ 'dir1/file1.txt' ],
 *     //     none: [ 'dir4' ],
 *     //     directory: [ 'dir2']
 *     // }
 *     // result is object containing the files grouped by type
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.groupBy(files, detectFile);
 *         console.log(result);
 *         // {
 *         //     file: [ 'dir1/file1.txt' ],
 *         //     none: [ 'dir4' ],
 *         //     directory: [ 'dir2']
 *         // }
 *         // result is object containing the files grouped by type
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function groupBy(coll, iteratee, callback) {
    return groupByLimit$1(coll, Infinity, iteratee, callback);
}
/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
 *
 * @name groupBySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whose
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */ function groupBySeries(coll, iteratee, callback) {
    return groupByLimit$1(coll, 1, iteratee, callback);
}
/**
 * Logs the result of an `async` function to the `console`. Only works in
 * Node.js or in browsers that support `console.log` and `console.error` (such
 * as FF and Chrome). If multiple arguments are returned from the async
 * function, `console.log` is called on each argument in order.
 *
 * @name log
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, 'hello ' + name);
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.log(hello, 'world');
 * 'hello world'
 */ var log = consoleFunc('log');
/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */ function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback);
    var newObj = {
    };
    var _iteratee = wrapAsync(iteratee);
    return eachOfLimit(limit)(obj, (val, key, next)=>{
        _iteratee(val, key, (err, result)=>{
            if (err) return next(err);
            newObj[key] = result;
            next(err);
        });
    }, (err)=>callback(err, newObj)
    );
}
var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);
/**
 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
 *
 * Produces a new Object by mapping each value of `obj` through the `iteratee`
 * function. The `iteratee` is called each `value` and `key` from `obj` and a
 * callback for when it has finished processing. Each of these callbacks takes
 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
 * passes an error to its callback, the main `callback` (for the `mapValues`
 * function) is immediately called with the error.
 *
 * Note, the order of the keys in the result is not guaranteed.  The keys will
 * be roughly in the order they complete, (but this is very engine-specific)
 *
 * @name mapValues
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileMap = {
 *     f1: 'file1.txt',
 *     f2: 'file2.txt',
 *     f3: 'file3.txt'
 * };
 *
 * const withMissingFileMap = {
 *     f1: 'file1.txt',
 *     f2: 'file2.txt',
 *     f3: 'file4.txt'
 * };
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, key, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // result is now a map of file size in bytes for each file, e.g.
 *         // {
 *         //     f1: 1000,
 *         //     f2: 2000,
 *         //     f3: 3000
 *         // }
 *     }
 * });
 *
 * // Error handling
 * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.mapValues(fileMap, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // result is now a map of file size in bytes for each file, e.g.
 *     // {
 *     //     f1: 1000,
 *     //     f2: 2000,
 *     //     f3: 3000
 *     // }
 * }).catch (err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.mapValues(withMissingFileMap, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch (err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.mapValues(fileMap, getFileSizeInBytes);
 *         console.log(result);
 *         // result is now a map of file size in bytes for each file, e.g.
 *         // {
 *         //     f1: 1000,
 *         //     f2: 2000,
 *         //     f3: 3000
 *         // }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */ function mapValues(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, Infinity, iteratee, callback);
}
/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
 *
 * @name mapValuesSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */ function mapValuesSeries(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, 1, iteratee, callback);
}
/**
 * Caches the results of an async function. When creating a hash to store
 * function results against, the callback is omitted from the hash and an
 * optional hash function can be used.
 *
 * **Note: if the async function errs, the result will not be cached and
 * subsequent calls will call the wrapped function.**
 *
 * If no hash function is specified, the first argument is used as a hash key,
 * which may work reasonably if it is a string or a data type that converts to a
 * distinct string. Note that objects and arrays will not behave reasonably.
 * Neither will cases where the other arguments are significant. In such cases,
 * specify your own hash function.
 *
 * The cache of results is exposed as the `memo` property of the function
 * returned by `memoize`.
 *
 * @name memoize
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function to proxy and cache results from.
 * @param {Function} hasher - An optional function for generating a custom hash
 * for storing results. It has all the arguments applied to it apart from the
 * callback, and must be synchronous.
 * @returns {AsyncFunction} a memoized version of `fn`
 * @example
 *
 * var slow_fn = function(name, callback) {
 *     // do something
 *     callback(null, result);
 * };
 * var fn = async.memoize(slow_fn);
 *
 * // fn can now be used as if it were slow_fn
 * fn('some name', function() {
 *     // callback
 * });
 */ function memoize(fn, hasher = (v)=>v
) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    var _fn = wrapAsync(fn);
    var memoized = initialParams((args, callback)=>{
        var key = hasher(...args);
        if (key in memo) setImmediate$1(()=>callback(null, ...memo[key])
        );
        else if (key in queues) queues[key].push(callback);
        else {
            queues[key] = [
                callback
            ];
            _fn(...args, (err, ...resultArgs)=>{
                // #1465 don't memoize if an error occurred
                if (!err) memo[key] = resultArgs;
                var q = queues[key];
                delete queues[key];
                for(var i = 0, l = q.length; i < l; i++)q[i](err, ...resultArgs);
            });
        }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
}
/* istanbul ignore file */ /**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `process.nextTick`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name nextTick
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.setImmediate]{@link module:Utils.setImmediate}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */ var _defer$1;
if (hasNextTick) _defer$1 = process.nextTick;
else if (hasSetImmediate) _defer$1 = setImmediate;
else _defer$1 = fallback;
var nextTick = wrap(_defer$1);
var parallel = awaitify((eachfn, tasks, callback)=>{
    var results = isArrayLike(tasks) ? [] : {
    };
    eachfn(tasks, (task, key, taskCb)=>{
        wrapAsync(task)((err, ...result)=>{
            if (result.length < 2) [result] = result;
            results[key] = result;
            taskCb(err);
        });
    }, (err)=>callback(err, results)
    );
}, 3);
/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 *
 * //Using Callbacks
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ], function(err, results) {
 *     console.log(results);
 *     // results is equal to ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * });
 *
 * //Using Promises
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ]).then(results => {
 *     console.log(results);
 *     // results is equal to ['one','two'] even though
 *     // the second function had a shorter timeout.
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }).then(results => {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.parallel([
 *             function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 'one');
 *                 }, 200);
 *             },
 *             function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 'two');
 *                 }, 100);
 *             }
 *         ]);
 *         console.log(results);
 *         // results is equal to ['one','two'] even though
 *         // the second function had a shorter timeout.
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // an example using an object instead of an array
 * async () => {
 *     try {
 *         let results = await async.parallel({
 *             one: function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 1);
 *                 }, 200);
 *             },
 *            two: function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 2);
 *                 }, 100);
 *            }
 *         });
 *         console.log(results);
 *         // results is equal to: { one: 1, two: 2 }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function parallel$1(tasks, callback) {
    return parallel(eachOf$1, tasks, callback);
}
/**
 * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]{@link module:ControlFlow.parallel}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 */ function parallelLimit(tasks, limit, callback) {
    return parallel(eachOfLimit(limit), tasks, callback);
}
/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Iterable} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {number} payload - an integer that specifies how many items are
 * passed to the worker function at a time. only applies if this is a
 * [cargo]{@link module:ControlFlow.cargo} object
 * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns
 * a promise that rejects if an error occurs.
 * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns
 * a promise that rejects if an error occurs.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a function that sets a callback that is
 * called when the number of running workers hits the `concurrency` limit, and
 * further tasks will be queued.  If the callback is omitted, `q.saturated()`
 * returns a promise for the next occurrence.
 * @property {Function} unsaturated - a function that sets a callback that is
 * called when the number of running workers is less than the `concurrency` &
 * `buffer` limits, and further tasks will not be queued. If the callback is
 * omitted, `q.unsaturated()` returns a promise for the next occurrence.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a function that sets a callback that is called
 * when the last item from the `queue` is given to a `worker`. If the callback
 * is omitted, `q.empty()` returns a promise for the next occurrence.
 * @property {Function} drain - a function that sets a callback that is called
 * when the last item from the `queue` has returned from the `worker`. If the
 * callback is omitted, `q.drain()` returns a promise for the next occurrence.
 * @property {Function} error - a function that sets a callback that is called
 * when a task errors. Has the signature `function(error, task)`. If the
 * callback is omitted, `error()` returns a promise that rejects on the next
 * error.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 *
 * @example
 * const q = async.queue(worker, 2)
 * q.push(item1)
 * q.push(item2)
 * q.push(item3)
 * // queues are iterable, spread into an array to inspect
 * const items = [...q] // [item1, item2, item3]
 * // or use for of
 * for (let item of q) {
 *     console.log(item)
 * }
 *
 * q.drain(() => {
 *     console.log('all done')
 * })
 * // or
 * await q.drain()
 */ /**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain(function() {
 *     console.log('all items have been processed');
 * });
 * // or await the end
 * await q.drain()
 *
 * // assign an error callback
 * q.error(function(err, task) {
 *     console.error('task experienced an error');
 * });
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * // callback is optional
 * q.push({name: 'bar'});
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */ function queue$1(worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue((items, cb)=>{
        _worker(items[0], cb);
    }, concurrency, 1);
}
// Binary min-heap implementation used for priority queue.
// Implementation is stable, i.e. push time is considered for equal priorities
class Heap {
    constructor(){
        this.heap = [];
        this.pushCount = Number.MIN_SAFE_INTEGER;
    }
    get length() {
        return this.heap.length;
    }
    empty() {
        this.heap = [];
        return this;
    }
    percUp(index5) {
        let p;
        while(index5 > 0 && smaller(this.heap[index5], this.heap[p = parent(index5)])){
            let t = this.heap[index5];
            this.heap[index5] = this.heap[p];
            this.heap[p] = t;
            index5 = p;
        }
    }
    percDown(index6) {
        let l;
        while((l = leftChi(index6)) < this.heap.length){
            if (l + 1 < this.heap.length && smaller(this.heap[l + 1], this.heap[l])) l = l + 1;
            if (smaller(this.heap[index6], this.heap[l])) break;
            let t = this.heap[index6];
            this.heap[index6] = this.heap[l];
            this.heap[l] = t;
            index6 = l;
        }
    }
    push(node) {
        node.pushCount = ++this.pushCount;
        this.heap.push(node);
        this.percUp(this.heap.length - 1);
    }
    unshift(node) {
        return this.heap.push(node);
    }
    shift() {
        let [top] = this.heap;
        this.heap[0] = this.heap[this.heap.length - 1];
        this.heap.pop();
        this.percDown(0);
        return top;
    }
    toArray() {
        return [
            ...this
        ];
    }
    *[Symbol.iterator]() {
        for(let i = 0; i < this.heap.length; i++)yield this.heap[i].data;
    }
    remove(testFn) {
        let j = 0;
        for(let i = 0; i < this.heap.length; i++)if (!testFn(this.heap[i])) {
            this.heap[j] = this.heap[i];
            j++;
        }
        this.heap.splice(j);
        for(let i1 = parent(this.heap.length - 1); i1 >= 0; i1--)this.percDown(i1);
        return this;
    }
}
function leftChi(i) {
    return (i << 1) + 1;
}
function parent(i) {
    return (i + 1 >> 1) - 1;
}
function smaller(x, y) {
    if (x.priority !== y.priority) return x.priority < y.priority;
    else return x.pushCount < y.pushCount;
}
/**
 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
 * completed in ascending priority order.
 *
 * @name priorityQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`.
 * Invoked with (task, callback).
 * @param {number} concurrency - An `integer` for determining how many `worker`
 * functions should be run in parallel.  If omitted, the concurrency defaults to
 * `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three
 * differences between `queue` and `priorityQueue` objects:
 * * `push(task, priority, [callback])` - `priority` should be a number. If an
 *   array of `tasks` is given, all tasks will be assigned the same priority.
 * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,
 *   except this returns a promise that rejects if an error occurs.
 * * The `unshift` and `unshiftAsync` methods were removed.
 */ function priorityQueue(worker, concurrency) {
    // Start with a normal queue
    var q = queue$1(worker, concurrency);
    var { push , pushAsync  } = q;
    q._tasks = new Heap();
    q._createTaskItem = ({ data , priority  }, callback)=>{
        return {
            data,
            priority,
            callback
        };
    };
    function createDataItems(tasks, priority) {
        if (!Array.isArray(tasks)) return {
            data: tasks,
            priority
        };
        return tasks.map((data)=>{
            return {
                data,
                priority
            };
        });
    }
    // Override push to accept second parameter representing priority
    q.push = function(data, priority = 0, callback) {
        return push(createDataItems(data, priority), callback);
    };
    q.pushAsync = function(data, priority = 0, callback) {
        return pushAsync(createDataItems(data, priority), callback);
    };
    // Remove unshift functions
    delete q.unshift;
    delete q.unshiftAsync;
    return q;
}
/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */ function race(tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for(var i = 0, l = tasks.length; i < l; i++)wrapAsync(tasks[i])(callback);
}
var race$1 = awaitify(race, 2);
/**
 * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
 *
 * @name reduceRight
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reduce]{@link module:Collections.reduce}
 * @alias foldr
 * @category Collection
 * @param {Array} array - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */ function reduceRight(array, memo, iteratee, callback) {
    var reversed = [
        ...array
    ].reverse();
    return reduce$1(reversed, memo, iteratee, callback);
}
/**
 * Wraps the async function in another function that always completes with a
 * result object, even when it errors.
 *
 * The result object has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function you want to wrap
 * @returns {Function} - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     })
 * ],
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * });
 */ function reflect(fn) {
    var _fn = wrapAsync(fn);
    return initialParams(function reflectOn(args, reflectCallback) {
        args.push((error, ...cbArgs)=>{
            let retVal = {
            };
            if (error) retVal.error = error;
            if (cbArgs.length > 0) {
                var value = cbArgs;
                if (cbArgs.length <= 1) [value] = cbArgs;
                retVal.value = value;
            }
            reflectCallback(null, retVal);
        });
        return _fn.apply(this, args);
    });
}
/**
 * A helper function that wraps an array or an object of functions with `reflect`.
 *
 * @name reflectAll
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.reflect]{@link module:Utils.reflect}
 * @category Util
 * @param {Array|Object|Iterable} tasks - The collection of
 * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
 * @returns {Array} Returns an array of async functions, each wrapped in
 * `async.reflect`
 * @example
 *
 * let tasks = [
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         // do some more stuff but error ...
 *         callback(new Error('bad stuff happened'));
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ];
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = Error('bad stuff happened')
 *     // results[2].value = 'two'
 * });
 *
 * // an example using an object instead of an array
 * let tasks = {
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         callback('two');
 *     },
 *     three: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'three');
 *         }, 100);
 *     }
 * };
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results.one.value = 'one'
 *     // results.two.error = 'two'
 *     // results.three.value = 'three'
 * });
 */ function reflectAll(tasks) {
    var results;
    if (Array.isArray(tasks)) results = tasks.map(reflect);
    else {
        results = {
        };
        Object.keys(tasks).forEach((key)=>{
            results[key] = reflect.call(this, tasks[key]);
        });
    }
    return results;
}
function reject(eachfn, arr, _iteratee, callback) {
    const iteratee = wrapAsync(_iteratee);
    return _filter(eachfn, arr, (value, cb)=>{
        iteratee(value, (err, v)=>{
            cb(err, !v);
        });
    }, callback);
}
/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.reject(fileList, fileExists, function(err, results) {
 *    // [ 'dir3/file6.txt' ]
 *    // results now equals an array of the non-existing files
 * });
 *
 * // Using Promises
 * async.reject(fileList, fileExists)
 * .then( results => {
 *     console.log(results);
 *     // [ 'dir3/file6.txt' ]
 *     // results now equals an array of the non-existing files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.reject(fileList, fileExists);
 *         console.log(results);
 *         // [ 'dir3/file6.txt' ]
 *         // results now equals an array of the non-existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function reject$1(coll, iteratee, callback) {
    return reject(eachOf$1, coll, iteratee, callback);
}
var reject$2 = awaitify(reject$1, 3);
/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */ function rejectLimit(coll, limit, iteratee, callback) {
    return reject(eachOfLimit(limit), coll, iteratee, callback);
}
var rejectLimit$1 = awaitify(rejectLimit, 4);
/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */ function rejectSeries(coll, iteratee, callback) {
    return reject(eachOfSeries$1, coll, iteratee, callback);
}
var rejectSeries$1 = awaitify(rejectSeries, 3);
function constant$1(value) {
    return function() {
        return value;
    };
}
/**
 * Attempts to get a successful response from `task` no more than `times` times
 * before returning an error. If the task is successful, the `callback` will be
 * passed the result of the successful task. If all attempts fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name retry
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @see [async.retryable]{@link module:ControlFlow.retryable}
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
 * object with `times` and `interval` or a number.
 * * `times` - The number of attempts to make before giving up.  The default
 *   is `5`.
 * * `interval` - The time to wait between retries, in milliseconds.  The
 *   default is `0`. The interval may also be specified as a function of the
 *   retry count (see example).
 * * `errorFilter` - An optional synchronous function that is invoked on
 *   erroneous result. If it returns `true` the retry attempts will continue;
 *   if the function returns `false` the retry flow is aborted with the current
 *   attempt's error and result being returned to the final callback.
 *   Invoked with (err).
 * * If `opts` is a number, the number specifies the number of times to retry,
 *   with the default interval of `0`.
 * @param {AsyncFunction} task - An async function to retry.
 * Invoked with (callback).
 * @param {Function} [callback] - An optional callback which is called when the
 * task has succeeded, or after the final failed attempt. It receives the `err`
 * and `result` arguments of the last attempt at completing the `task`. Invoked
 * with (err, results).
 * @returns {Promise} a promise if no callback provided
 *
 * @example
 *
 * // The `retry` function can be used as a stand-alone control flow by passing
 * // a callback, as shown below:
 *
 * // try calling apiMethod 3 times
 * async.retry(3, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 3 times, waiting 200 ms between each retry
 * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 10 times with exponential backoff
 * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
 * async.retry({
 *   times: 10,
 *   interval: function(retryCount) {
 *     return 50 * Math.pow(2, retryCount);
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod the default 5 times no delay between each retry
 * async.retry(apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod only when error condition satisfies, all other
 * // errors will abort the retry control flow and return to final callback
 * async.retry({
 *   errorFilter: function(err) {
 *     return err.message === 'Temporary error'; // only retry on a specific error
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // to retry individual methods that are not as reliable within other
 * // control flow functions, use the `retryable` wrapper:
 * async.auto({
 *     users: api.getUsers.bind(api),
 *     payments: async.retryable(3, api.getPayments.bind(api))
 * }, function(err, results) {
 *     // do something with the results
 * });
 *
 */ const DEFAULT_TIMES = 5;
const DEFAULT_INTERVAL = 0;
function retry(opts, task, callback) {
    var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
    };
    if (arguments.length < 3 && typeof opts === 'function') {
        callback = task || promiseCallback();
        task = opts;
    } else {
        parseTimes(options, opts);
        callback = callback || promiseCallback();
    }
    if (typeof task !== 'function') throw new Error("Invalid arguments for async.retry");
    var _task = wrapAsync(task);
    var attempt = 1;
    function retryAttempt() {
        _task((err, ...args)=>{
            if (err === false) return;
            if (err && (attempt++) < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) setTimeout(retryAttempt, options.intervalFunc(attempt - 1));
            else callback(err, ...args);
        });
    }
    retryAttempt();
    return callback[PROMISE_SYMBOL];
}
function parseTimes(acc, t) {
    if (typeof t === 'object') {
        acc.times = +t.times || DEFAULT_TIMES;
        acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);
        acc.errorFilter = t.errorFilter;
    } else if (typeof t === 'number' || typeof t === 'string') acc.times = +t || DEFAULT_TIMES;
    else throw new Error("Invalid arguments for async.retry");
}
/**
 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]{@link module:ControlFlow.retry}
 * @category Control Flow
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
 * options, exactly the same as from `retry`, except for a `opts.arity` that
 * is the arity of the `task` function, defaulting to `task.length`
 * @param {AsyncFunction} task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns {AsyncFunction} The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto({
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) {
 *         maybeProcessData(results.dep1, cb);
 *     })]
 * }, callback);
 */ function retryable(opts, task) {
    if (!task) {
        task = opts;
        opts = null;
    }
    let arity = opts && opts.arity || task.length;
    if (isAsync(task)) arity += 1;
    var _task = wrapAsync(task);
    return initialParams((args, callback)=>{
        if (args.length < arity - 1 || callback == null) {
            args.push(callback);
            callback = promiseCallback();
        }
        function taskFn(cb) {
            _task(...args, cb);
        }
        if (opts) retry(opts, taskFn, callback);
        else retry(taskFn, callback);
        return callback[PROMISE_SYMBOL];
    });
}
/**
 * Run the functions in the `tasks` collection in series, each one running once
 * the previous function has completed. If any functions in the series pass an
 * error to its callback, no more functions are run, and `callback` is
 * immediately called with the value of the error. Otherwise, `callback`
 * receives an array of results when `tasks` have completed.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function, and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 *  results from {@link async.series}.
 *
 * **Note** that while many implementations preserve the order of object
 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
 * explicitly states that
 *
 * > The mechanics and order of enumerating the properties is not specified.
 *
 * So if you rely on the order in which your series of functions are executed,
 * and want this to work on all platforms, consider using an array.
 *
 * @name series
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing
 * [async functions]{@link AsyncFunction} to run in series.
 * Each function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This function gets a results array (or object)
 * containing all the result arguments passed to the `task` callbacks. Invoked
 * with (err, result).
 * @return {Promise} a promise, if no callback is passed
 * @example
 *
 * //Using Callbacks
 * async.series([
 *     function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ], function(err, results) {
 *     console.log(results);
 *     // results is equal to ['one','two']
 * });
 *
 * // an example using objects instead of arrays
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * });
 *
 * //Using Promises
 * async.series([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ]).then(results => {
 *     console.log(results);
 *     // results is equal to ['one','two']
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // an example using an object instead of an array
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }).then(results => {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.series([
 *             function(callback) {
 *                 setTimeout(function() {
 *                     // do some async task
 *                     callback(null, 'one');
 *                 }, 200);
 *             },
 *             function(callback) {
 *                 setTimeout(function() {
 *                     // then do another async task
 *                     callback(null, 'two');
 *                 }, 100);
 *             }
 *         ]);
 *         console.log(results);
 *         // results is equal to ['one','two']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // an example using an object instead of an array
 * async () => {
 *     try {
 *         let results = await async.parallel({
 *             one: function(callback) {
 *                 setTimeout(function() {
 *                     // do some async task
 *                     callback(null, 1);
 *                 }, 200);
 *             },
 *            two: function(callback) {
 *                 setTimeout(function() {
 *                     // then do another async task
 *                     callback(null, 2);
 *                 }, 100);
 *            }
 *         });
 *         console.log(results);
 *         // results is equal to: { one: 1, two: 2 }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function series(tasks, callback) {
    return parallel(eachOfSeries$1, tasks, callback);
}
/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // true
 *        // result is true since some file in the list exists
 *    }
 *);
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // false
 *        // result is false since none of the files exists
 *    }
 *);
 *
 * // Using Promises
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since some file in the list exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since none of the files exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since some file in the list exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since none of the files exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function some(coll, iteratee, callback) {
    return _createTester(Boolean, (res)=>res
    )(eachOf$1, coll, iteratee, callback);
}
var some$1 = awaitify(some, 3);
/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */ function someLimit(coll, limit, iteratee, callback) {
    return _createTester(Boolean, (res)=>res
    )(eachOfLimit(limit), coll, iteratee, callback);
}
var someLimit$1 = awaitify(someLimit, 4);
/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */ function someSeries(coll, iteratee, callback) {
    return _createTester(Boolean, (res)=>res
    )(eachOfSeries$1, coll, iteratee, callback);
}
var someSeries$1 = awaitify(someSeries, 3);
/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback passed
 * @example
 *
 * // bigfile.txt is a file that is 251100 bytes in size
 * // mediumfile.txt is a file that is 11000 bytes in size
 * // smallfile.txt is a file that is 121 bytes in size
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) return callback(getFileSizeErr);
 *         callback(null, fileSize);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // descending order
 * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) {
 *             return callback(getFileSizeErr);
 *         }
 *         callback(null, fileSize * -1);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']
 *         }
 *     }
 * );
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *             // [ Error: ENOENT: no such file or directory ]
 *         } else {
 *             console.log(results);
 *         }
 *     }
 * );
 *
 * // Using Promises
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now the original array of files sorted by
 *     // file size (ascending by default), e.g.
 *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *         // results is now the original array of files sorted by
 *         // file size (ascending by default), e.g.
 *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * // Error handling
 * async () => {
 *     try {
 *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */ function sortBy(coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
    return map$1(coll, (x, iterCb)=>{
        _iteratee(x, (err, criteria)=>{
            if (err) return iterCb(err);
            iterCb(err, {
                value: x,
                criteria
            });
        });
    }, (err, results)=>{
        if (err) return callback(err);
        callback(null, results.sort(comparator).map((v)=>v.value
        ));
    });
}
var sortBy$1 = awaitify(sortBy, 3);
/**
 * Sets a time limit on an asynchronous function. If the function does not call
 * its callback within the specified milliseconds, it will be called with a
 * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
 *
 * @name timeout
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} asyncFn - The async function to limit in time.
 * @param {number} milliseconds - The specified time limit.
 * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
 * to timeout Error for more information..
 * @returns {AsyncFunction} Returns a wrapped function that can be used with any
 * of the control flow functions.
 * Invoke this function with the same parameters as you would `asyncFunc`.
 * @example
 *
 * function myFunction(foo, callback) {
 *     doAsyncTask(foo, function(err, data) {
 *         // handle errors
 *         if (err) return callback(err);
 *
 *         // do some stuff ...
 *
 *         // return processed data
 *         return callback(null, data);
 *     });
 * }
 *
 * var wrapped = async.timeout(myFunction, 1000);
 *
 * // call `wrapped` as you would `myFunction`
 * wrapped({ bar: 'bar' }, function(err, data) {
 *     // if `myFunction` takes < 1000 ms to execute, `err`
 *     // and `data` will have their expected values
 *
 *     // else `err` will be an Error with the code 'ETIMEDOUT'
 * });
 */ function timeout(asyncFn, milliseconds, info) {
    var fn = wrapAsync(asyncFn);
    return initialParams((args, callback)=>{
        var timedOut = false;
        var timer;
        function timeoutCallback() {
            var name = asyncFn.name || 'anonymous';
            var error = new Error('Callback function "' + name + '" timed out.');
            error.code = 'ETIMEDOUT';
            if (info) error.info = info;
            timedOut = true;
            callback(error);
        }
        args.push((...cbArgs)=>{
            if (!timedOut) {
                callback(...cbArgs);
                clearTimeout(timer);
            }
        });
        // setup timer and call original function
        timer = setTimeout(timeoutCallback, milliseconds);
        fn(...args);
    });
}
function range(size) {
    var result = Array(size);
    while(size--)result[size] = size;
    return result;
}
/**
 * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name timesLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} count - The number of times to run the function.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see [async.map]{@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */ function timesLimit(count, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(range(count), limit, _iteratee, callback);
}
/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]{@link module:Collections.map}.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) {
 *     callback(null, {
 *         id: 'user' + id
 *     });
 * };
 *
 * // generate 5 users
 * async.times(5, function(n, next) {
 *     createUser(n, function(err, user) {
 *         next(err, user);
 *     });
 * }, function(err, users) {
 *     // we should now have 5 users
 * });
 */ function times(n, iteratee, callback) {
    return timesLimit(n, Infinity, iteratee, callback);
}
/**
 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
 *
 * @name timesSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */ function timesSeries(n, iteratee, callback) {
    return timesLimit(n, 1, iteratee, callback);
}
/**
 * A relative of `reduce`.  Takes an Object or Array, and iterates over each
 * element in parallel, each step potentially mutating an `accumulator` value.
 * The type of the accumulator defaults to the type of collection passed in.
 *
 * @name transform
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} [accumulator] - The initial state of the transform.  If omitted,
 * it will default to an empty Object or Array, depending on the type of `coll`
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * collection that potentially modifies the accumulator.
 * Invoked with (accumulator, item, key, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the transformed accumulator.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 *
 * // helper function that returns human-readable size format from bytes
 * function formatBytes(bytes, decimals = 2) {
 *   // implementation not included for brevity
 *   return humanReadbleFilesize;
 * }
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 *
 * // asynchronous function that returns the file size, transformed to human-readable format
 * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
 * function transformFileSize(acc, value, key, callback) {
 *     fs.stat(value, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         acc[key] = formatBytes(stat.size);
 *         callback(null);
 *     });
 * }
 *
 * // Using callbacks
 * async.transform(fileList, transformFileSize, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 *     }
 * });
 *
 * // Using Promises
 * async.transform(fileList, transformFileSize)
 * .then(result => {
 *     console.log(result);
 *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let result = await async.transform(fileList, transformFileSize);
 *         console.log(result);
 *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 *
 * // helper function that returns human-readable size format from bytes
 * function formatBytes(bytes, decimals = 2) {
 *   // implementation not included for brevity
 *   return humanReadbleFilesize;
 * }
 *
 * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };
 *
 * // asynchronous function that returns the file size, transformed to human-readable format
 * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
 * function transformFileSize(acc, value, key, callback) {
 *     fs.stat(value, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         acc[key] = formatBytes(stat.size);
 *         callback(null);
 *     });
 * }
 *
 * // Using callbacks
 * async.transform(fileMap, transformFileSize, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 *     }
 * });
 *
 * // Using Promises
 * async.transform(fileMap, transformFileSize)
 * .then(result => {
 *     console.log(result);
 *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.transform(fileMap, transformFileSize);
 *         console.log(result);
 *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */ function transform(coll, accumulator, iteratee, callback) {
    if (arguments.length <= 3 && typeof accumulator === 'function') {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = Array.isArray(coll) ? [] : {
        };
    }
    callback = once(callback || promiseCallback());
    var _iteratee = wrapAsync(iteratee);
    eachOf$1(coll, (v, k, cb)=>{
        _iteratee(accumulator, v, k, cb);
    }, (err)=>callback(err, accumulator)
    );
    return callback[PROMISE_SYMBOL];
}
/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */ function tryEach(tasks, callback) {
    var error = null;
    var result;
    return eachSeries$1(tasks, (task, taskCb)=>{
        wrapAsync(task)((err, ...args)=>{
            if (err === false) return taskCb(err);
            if (args.length < 2) [result] = args;
            else result = args;
            error = err;
            taskCb(err ? null : {
            });
        });
    }, ()=>callback(error, result)
    );
}
var tryEach$1 = awaitify(tryEach);
/**
 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
 * unmemoized form. Handy for testing.
 *
 * @name unmemoize
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.memoize]{@link module:Utils.memoize}
 * @category Util
 * @param {AsyncFunction} fn - the memoized function
 * @returns {AsyncFunction} a function that calls the original unmemoized function
 */ function unmemoize(fn) {
    return (...args)=>{
        return (fn.unmemoized || fn)(...args);
    };
}
/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function test(cb) { cb(null, count < 5); },
 *     function iter(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */ function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results = [];
    function next(err, ...rest) {
        if (err) return callback(err);
        results = rest;
        if (err === false) return;
        _test(check);
    }
    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }
    return _test(check);
}
var whilst$1 = awaitify(whilst, 3);
/**
 * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs. `callback` will be passed an error and any
 * arguments passed to the final `iteratee`'s callback.
 *
 * The inverse of [whilst]{@link module:ControlFlow.whilst}.
 *
 * @name until
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with (callback).
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 * const results = []
 * let finished = false
 * async.until(function test(cb) {
 *     cb(null, finished)
 * }, function iter(next) {
 *     fetchPage(url, (err, body) => {
 *         if (err) return next(err)
 *         results = results.concat(body.objects)
 *         finished = !!body.next
 *         next(err)
 *     })
 * }, function done (err) {
 *     // all pages have been fetched
 * })
 */ function until(test, iteratee, callback) {
    const _test = wrapAsync(test);
    return whilst$1((cb)=>_test((err, truth)=>cb(err, !truth)
        )
    , iteratee, callback);
}
/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */ function waterfall(tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;
    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        task(...args, onlyOnce(next));
    }
    function next(err, ...args) {
        if (err === false) return;
        if (err || taskIndex === tasks.length) return callback(err, ...args);
        nextTask(args);
    }
    nextTask([]);
}
var waterfall$1 = awaitify(waterfall);
/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */ var index = {
    apply,
    applyEach: applyEach$1,
    applyEachSeries,
    asyncify,
    auto,
    autoInject,
    cargo,
    cargoQueue: cargo$1,
    compose,
    concat: concat$1,
    concatLimit: concatLimit$1,
    concatSeries: concatSeries$1,
    constant,
    detect: detect$1,
    detectLimit: detectLimit$1,
    detectSeries: detectSeries$1,
    dir,
    doUntil,
    doWhilst: doWhilst$1,
    each,
    eachLimit: eachLimit$2,
    eachOf: eachOf$1,
    eachOfLimit: eachOfLimit$2,
    eachOfSeries: eachOfSeries$1,
    eachSeries: eachSeries$1,
    ensureAsync,
    every: every$1,
    everyLimit: everyLimit$1,
    everySeries: everySeries$1,
    filter: filter$1,
    filterLimit: filterLimit$1,
    filterSeries: filterSeries$1,
    forever: forever$1,
    groupBy,
    groupByLimit: groupByLimit$1,
    groupBySeries,
    log,
    map: map$1,
    mapLimit: mapLimit$1,
    mapSeries: mapSeries$1,
    mapValues,
    mapValuesLimit: mapValuesLimit$1,
    mapValuesSeries,
    memoize,
    nextTick,
    parallel: parallel$1,
    parallelLimit,
    priorityQueue,
    queue: queue$1,
    race: race$1,
    reduce: reduce$1,
    reduceRight,
    reflect,
    reflectAll,
    reject: reject$2,
    rejectLimit: rejectLimit$1,
    rejectSeries: rejectSeries$1,
    retry,
    retryable,
    seq,
    series,
    setImmediate: setImmediate$1,
    some: some$1,
    someLimit: someLimit$1,
    someSeries: someSeries$1,
    sortBy: sortBy$1,
    timeout,
    times,
    timesLimit,
    timesSeries,
    transform,
    tryEach: tryEach$1,
    unmemoize,
    until,
    waterfall: waterfall$1,
    whilst: whilst$1,
    // aliases
    all: every$1,
    allLimit: everyLimit$1,
    allSeries: everySeries$1,
    any: some$1,
    anyLimit: someLimit$1,
    anySeries: someSeries$1,
    find: detect$1,
    findLimit: detectLimit$1,
    findSeries: detectSeries$1,
    flatMap: concat$1,
    flatMapLimit: concatLimit$1,
    flatMapSeries: concatSeries$1,
    forEach: each,
    forEachSeries: eachSeries$1,
    forEachLimit: eachLimit$2,
    forEachOf: eachOf$1,
    forEachOfSeries: eachOfSeries$1,
    forEachOfLimit: eachOfLimit$2,
    inject: reduce$1,
    foldl: reduce$1,
    foldr: reduceRight,
    select: filter$1,
    selectLimit: filterLimit$1,
    selectSeries: filterSeries$1,
    wrapSync: asyncify,
    during: whilst$1,
    doDuring: doWhilst$1
};
exports.default = index;

},{"process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"hDReo":[function(require,module,exports) {
/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2019 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ const canonize = require('rdf-canonize');
const platform = require('./platform');
const util = require('./util');
const ContextResolver = require('./ContextResolver');
const IdentifierIssuer = util.IdentifierIssuer;
const JsonLdError = require('./JsonLdError');
const LRU = require('lru-cache');
const NQuads = require('./NQuads');
const { expand: _expand  } = require('./expand');
const { flatten: _flatten  } = require('./flatten');
const { fromRDF: _fromRDF  } = require('./fromRdf');
const { toRDF: _toRDF  } = require('./toRdf');
const { frameMergedOrDefault: _frameMergedOrDefault , cleanupNull: _cleanupNull  } = require('./frame');
const { isArray: _isArray , isObject: _isObject , isString: _isString  } = require('./types');
const { isSubjectReference: _isSubjectReference ,  } = require('./graphTypes');
const { expandIri: _expandIri , getInitialContext: _getInitialContext , process: _processContext , processingMode: _processingMode  } = require('./context');
const { compact: _compact , compactIri: _compactIri  } = require('./compact');
const { createNodeMap: _createNodeMap , createMergedNodeMap: _createMergedNodeMap , mergeNodeMaps: _mergeNodeMaps  } = require('./nodeMap');
/* eslint-disable indent */ // attaches jsonld API to the given object
const wrapper = function(jsonld) {
    /** Registered RDF dataset parsers hashed by content-type. */ const _rdfParsers = {
    };
    // resolved context cache
    // TODO: consider basing max on context size rather than number
    const RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;
    const _resolvedContextCache = new LRU({
        max: RESOLVED_CONTEXT_CACHE_MAX_SIZE
    });
    /* Core API */ /**
 * Performs JSON-LD compaction.
 *
 * @param input the JSON-LD input to compact.
 * @param ctx the context to compact with.
 * @param [options] options to use:
 *          [base] the base IRI to use.
 *          [compactArrays] true to compact arrays to single values when
 *            appropriate, false not to (default: true).
 *          [compactToRelative] true to compact IRIs to be relative to document
 *            base, false to keep absolute (default: true)
 *          [graph] true to always output a top-level graph (default: false).
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [documentLoader(url, options)] the document loader.
 *          [expansionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [framing] true if compaction is occuring during a framing operation.
 *          [compactionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the compacted output.
 */ jsonld.compact = async function(input, ctx, options) {
        if (arguments.length < 2) throw new TypeError('Could not compact, too few arguments.');
        if (ctx === null) throw new JsonLdError('The compaction context must not be null.', 'jsonld.CompactError', {
            code: 'invalid local context'
        });
        // nothing to compact
        if (input === null) return null;
        // set default options
        options = _setDefaults(options, {
            base: _isString(input) ? input : '',
            compactArrays: true,
            compactToRelative: true,
            graph: false,
            skipExpansion: false,
            link: false,
            issuer: new IdentifierIssuer('_:b'),
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        if (options.link) // force skip expansion when linking, "link" is not part of the public
        // API, it should only be called from framing
        options.skipExpansion = true;
        if (!options.compactToRelative) delete options.base;
        // expand input
        let expanded;
        if (options.skipExpansion) expanded = input;
        else expanded = await jsonld.expand(input, options);
        // process context
        const activeCtx = await jsonld.processContext(_getInitialContext(options), ctx, options);
        // do compaction
        let compacted = await _compact({
            activeCtx,
            element: expanded,
            options,
            compactionMap: options.compactionMap
        });
        // perform clean up
        if (options.compactArrays && !options.graph && _isArray(compacted)) {
            if (compacted.length === 1) // simplify to a single item
            compacted = compacted[0];
            else if (compacted.length === 0) // simplify to an empty object
            compacted = {
            };
        } else if (options.graph && _isObject(compacted)) // always use array if graph option is on
        compacted = [
            compacted
        ];
        // follow @context key
        if (_isObject(ctx) && '@context' in ctx) ctx = ctx['@context'];
        // build output context
        ctx = util.clone(ctx);
        if (!_isArray(ctx)) ctx = [
            ctx
        ];
        // remove empty contexts
        const tmp = ctx;
        ctx = [];
        for(let i = 0; i < tmp.length; ++i)if (!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) ctx.push(tmp[i]);
        // remove array if only one context
        const hasContext = ctx.length > 0;
        if (ctx.length === 1) ctx = ctx[0];
        // add context and/or @graph
        if (_isArray(compacted)) {
            // use '@graph' keyword
            const graphAlias = _compactIri({
                activeCtx,
                iri: '@graph',
                relativeTo: {
                    vocab: true
                }
            });
            const graph = compacted;
            compacted = {
            };
            if (hasContext) compacted['@context'] = ctx;
            compacted[graphAlias] = graph;
        } else if (_isObject(compacted) && hasContext) {
            // reorder keys so @context is first
            const graph = compacted;
            compacted = {
                '@context': ctx
            };
            for(const key in graph)compacted[key] = graph[key];
        }
        return compacted;
    };
    /**
 * Performs JSON-LD expansion.
 *
 * @param input the JSON-LD input to expand.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [keepFreeFloatingNodes] true to keep free-floating nodes,
 *            false not to, defaults to false.
 *          [documentLoader(url, options)] the document loader.
 *          [expansionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the expanded output.
 */ jsonld.expand = async function(input, options) {
        if (arguments.length < 1) throw new TypeError('Could not expand, too few arguments.');
        // set default options
        options = _setDefaults(options, {
            keepFreeFloatingNodes: false,
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        if (options.expansionMap === false) options.expansionMap = undefined;
        // build set of objects that may have @contexts to resolve
        const toResolve = {
        };
        // build set of contexts to process prior to expansion
        const contextsToProcess = [];
        // if an `expandContext` has been given ensure it gets resolved
        if ('expandContext' in options) {
            const expandContext = util.clone(options.expandContext);
            if (_isObject(expandContext) && '@context' in expandContext) toResolve.expandContext = expandContext;
            else toResolve.expandContext = {
                '@context': expandContext
            };
            contextsToProcess.push(toResolve.expandContext);
        }
        // if input is a string, attempt to dereference remote document
        let defaultBase;
        if (!_isString(input)) // input is not a URL, do not need to retrieve it first
        toResolve.input = util.clone(input);
        else {
            // load remote doc
            const remoteDoc = await jsonld.get(input, options);
            defaultBase = remoteDoc.documentUrl;
            toResolve.input = remoteDoc.document;
            if (remoteDoc.contextUrl) {
                // context included in HTTP link header and must be resolved
                toResolve.remoteContext = {
                    '@context': remoteDoc.contextUrl
                };
                contextsToProcess.push(toResolve.remoteContext);
            }
        }
        // set default base
        if (!('base' in options)) options.base = defaultBase || '';
        // process any additional contexts
        let activeCtx = _getInitialContext(options);
        for (const localCtx of contextsToProcess)activeCtx = await _processContext({
            activeCtx,
            localCtx,
            options
        });
        // expand resolved input
        let expanded = await _expand({
            activeCtx,
            element: toResolve.input,
            options,
            expansionMap: options.expansionMap
        });
        // optimize away @graph with no other properties
        if (_isObject(expanded) && '@graph' in expanded && Object.keys(expanded).length === 1) expanded = expanded['@graph'];
        else if (expanded === null) expanded = [];
        // normalize to an array
        if (!_isArray(expanded)) expanded = [
            expanded
        ];
        return expanded;
    };
    /**
 * Performs JSON-LD flattening.
 *
 * @param input the JSON-LD to flatten.
 * @param ctx the context to use to compact the flattened output, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the flattened output.
 */ jsonld.flatten = async function(input, ctx, options) {
        if (arguments.length < 1) return new TypeError('Could not flatten, too few arguments.');
        if (typeof ctx === 'function') ctx = null;
        else ctx = ctx || null;
        // set default options
        options = _setDefaults(options, {
            base: _isString(input) ? input : '',
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        // expand input
        const expanded = await jsonld.expand(input, options);
        // do flattening
        const flattened = _flatten(expanded);
        if (ctx === null) // no compaction required
        return flattened;
        // compact result (force @graph option to true, skip expansion)
        options.graph = true;
        options.skipExpansion = true;
        const compacted = await jsonld.compact(flattened, ctx, options);
        return compacted;
    };
    /**
 * Performs JSON-LD framing.
 *
 * @param input the JSON-LD input to frame.
 * @param frame the JSON-LD frame to use.
 * @param [options] the framing options.
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
 *            (default: '@last').
 *          [explicit] default @explicit flag (default: false).
 *          [requireAll] default @requireAll flag (default: true).
 *          [omitDefault] default @omitDefault flag (default: false).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the framed output.
 */ jsonld.frame = async function(input, frame, options) {
        if (arguments.length < 2) throw new TypeError('Could not frame, too few arguments.');
        // set default options
        options = _setDefaults(options, {
            base: _isString(input) ? input : '',
            embed: '@once',
            explicit: false,
            requireAll: false,
            omitDefault: false,
            bnodesToClear: [],
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        // if frame is a string, attempt to dereference remote document
        if (_isString(frame)) {
            // load remote doc
            const remoteDoc = await jsonld.get(frame, options);
            frame = remoteDoc.document;
            if (remoteDoc.contextUrl) {
                // inject link header @context into frame
                let ctx = frame['@context'];
                if (!ctx) ctx = remoteDoc.contextUrl;
                else if (_isArray(ctx)) ctx.push(remoteDoc.contextUrl);
                else ctx = [
                    ctx,
                    remoteDoc.contextUrl
                ];
                frame['@context'] = ctx;
            }
        }
        const frameContext = frame ? frame['@context'] || {
        } : {
        };
        // process context
        const activeCtx = await jsonld.processContext(_getInitialContext(options), frameContext, options);
        // mode specific defaults
        if (!options.hasOwnProperty('omitGraph')) options.omitGraph = _processingMode(activeCtx, 1.1);
        if (!options.hasOwnProperty('pruneBlankNodeIdentifiers')) options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);
        // expand input
        const expanded = await jsonld.expand(input, options);
        // expand frame
        const opts = {
            ...options
        };
        opts.isFrame = true;
        opts.keepFreeFloatingNodes = true;
        const expandedFrame = await jsonld.expand(frame, opts);
        // if the unexpanded frame includes a key expanding to @graph, frame the
        // default graph, otherwise, the merged graph
        const frameKeys = Object.keys(frame).map((key)=>_expandIri(activeCtx, key, {
                vocab: true
            })
        );
        opts.merged = !frameKeys.includes('@graph');
        opts.is11 = _processingMode(activeCtx, 1.1);
        // do framing
        const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);
        opts.graph = !options.omitGraph;
        opts.skipExpansion = true;
        opts.link = {
        };
        opts.framing = true;
        let compacted = await jsonld.compact(framed, frameContext, opts);
        // replace @null with null, compacting arrays
        opts.link = {
        };
        compacted = _cleanupNull(compacted, opts);
        return compacted;
    };
    /**
 * **Experimental**
 *
 * Links a JSON-LD document's nodes in memory.
 *
 * @param input the JSON-LD document to link.
 * @param [ctx] the JSON-LD context to apply.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the linked output.
 */ jsonld.link = async function(input, ctx, options) {
        // API matches running frame with a wildcard frame and embed: '@link'
        // get arguments
        const frame = {
        };
        if (ctx) frame['@context'] = ctx;
        frame['@embed'] = '@link';
        return jsonld.frame(input, frame, options);
    };
    /**
 * Performs RDF dataset normalization on the given input. The input is JSON-LD
 * unless the 'inputFormat' option is used. The output is an RDF dataset
 * unless the 'format' option is used.
 *
 * @param input the input to normalize as JSON-LD or as a format specified by
 *          the 'inputFormat' option.
 * @param [options] the options to use:
 *          [algorithm] the normalization algorithm to use, `URDNA2015` or
 *            `URGNA2012` (default: `URDNA2015`).
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [inputFormat] the format if input is not JSON-LD:
 *            'application/n-quads' for N-Quads.
 *          [format] the format if output is a string:
 *            'application/n-quads' for N-Quads.
 *          [documentLoader(url, options)] the document loader.
 *          [useNative] true to use a native canonize algorithm
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the normalized output.
 */ jsonld.normalize = jsonld.canonize = async function(input, options) {
        if (arguments.length < 1) throw new TypeError('Could not canonize, too few arguments.');
        // set default options
        options = _setDefaults(options, {
            base: _isString(input) ? input : '',
            algorithm: 'URDNA2015',
            skipExpansion: false,
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        if ('inputFormat' in options) {
            if (options.inputFormat !== 'application/n-quads' && options.inputFormat !== 'application/nquads') throw new JsonLdError('Unknown canonicalization input format.', 'jsonld.CanonizeError');
            // TODO: `await` for async parsers
            const parsedInput = NQuads.parse(input);
            // do canonicalization
            return canonize.canonize(parsedInput, options);
        }
        // convert to RDF dataset then do normalization
        const opts = {
            ...options
        };
        delete opts.format;
        opts.produceGeneralizedRdf = false;
        const dataset = await jsonld.toRDF(input, opts);
        // do canonicalization
        return canonize.canonize(dataset, options);
    };
    /**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset a serialized string of RDF in a format specified by the
 *          format option or an RDF dataset to convert.
 * @param [options] the options to use:
 *          [format] the format if dataset param must first be parsed:
 *            'application/n-quads' for N-Quads (default).
 *          [rdfParser] a custom RDF-parser to use to parse the dataset.
 *          [useRdfType] true to use rdf:type, false to use @type
 *            (default: false).
 *          [useNativeTypes] true to convert XSD types into native types
 *            (boolean, integer, double), false not to (default: false).
 *
 * @return a Promise that resolves to the JSON-LD document.
 */ jsonld.fromRDF = async function(dataset, options) {
        if (arguments.length < 1) throw new TypeError('Could not convert from RDF, too few arguments.');
        // set default options
        options = _setDefaults(options, {
            format: _isString(dataset) ? 'application/n-quads' : undefined
        });
        const { format  } = options;
        let { rdfParser  } = options;
        // handle special format
        if (format) {
            // check supported formats
            rdfParser = rdfParser || _rdfParsers[format];
            if (!rdfParser) throw new JsonLdError('Unknown input format.', 'jsonld.UnknownFormat', {
                format
            });
        } else // no-op parser, assume dataset already parsed
        rdfParser = ()=>dataset
        ;
        // rdfParser must be synchronous or return a promise, no callback support
        const parsedDataset = await rdfParser(dataset);
        return _fromRDF(parsedDataset, options);
    };
    /**
 * Outputs the RDF dataset found in the given JSON-LD object.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [format] the format to use to output a string:
 *            'application/n-quads' for N-Quads.
 *          [produceGeneralizedRdf] true to output generalized RDF, false
 *            to produce only standard RDF (default: false).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the RDF dataset.
 */ jsonld.toRDF = async function(input, options) {
        if (arguments.length < 1) throw new TypeError('Could not convert to RDF, too few arguments.');
        // set default options
        options = _setDefaults(options, {
            base: _isString(input) ? input : '',
            skipExpansion: false,
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        // TODO: support toRDF custom map?
        let expanded;
        if (options.skipExpansion) expanded = input;
        else // expand input
        expanded = await jsonld.expand(input, options);
        // output RDF dataset
        const dataset = _toRDF(expanded, options);
        if (options.format) {
            if (options.format === 'application/n-quads' || options.format === 'application/nquads') return NQuads.serialize(dataset);
            throw new JsonLdError('Unknown output format.', 'jsonld.UnknownFormat', {
                format: options.format
            });
        }
        return dataset;
    };
    /**
 * **Experimental**
 *
 * Recursively flattens the nodes in the given JSON-LD input into a merged
 * map of node ID => node. All graphs will be merged into the default graph.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the merged node map.
 */ jsonld.createNodeMap = async function(input, options) {
        if (arguments.length < 1) throw new TypeError('Could not create node map, too few arguments.');
        // set default options
        options = _setDefaults(options, {
            base: _isString(input) ? input : '',
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        // expand input
        const expanded = await jsonld.expand(input, options);
        return _createMergedNodeMap(expanded, options);
    };
    /**
 * **Experimental**
 *
 * Merges two or more JSON-LD documents into a single flattened document.
 *
 * @param docs the JSON-LD documents to merge together.
 * @param ctx the context to use to compact the merged result, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [mergeNodes] true to merge properties for nodes with the same ID,
 *            false to ignore new properties for nodes with the same ID once
 *            the ID has been defined; note that this may not prevent merging
 *            new properties where a node is in the `object` position
 *            (default: true).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the merged output.
 */ jsonld.merge = async function(docs, ctx, options) {
        if (arguments.length < 1) throw new TypeError('Could not merge, too few arguments.');
        if (!_isArray(docs)) throw new TypeError('Could not merge, "docs" must be an array.');
        if (typeof ctx === 'function') ctx = null;
        else ctx = ctx || null;
        // set default options
        options = _setDefaults(options, {
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        // expand all documents
        const expanded = await Promise.all(docs.map((doc)=>{
            const opts = {
                ...options
            };
            return jsonld.expand(doc, opts);
        }));
        let mergeNodes = true;
        if ('mergeNodes' in options) mergeNodes = options.mergeNodes;
        const issuer = options.issuer || new IdentifierIssuer('_:b');
        const graphs = {
            '@default': {
            }
        };
        for(let i = 0; i < expanded.length; ++i){
            // uniquely relabel blank nodes
            const doc = util.relabelBlankNodes(expanded[i], {
                issuer: new IdentifierIssuer('_:b' + i + '-')
            });
            // add nodes to the shared node map graphs if merging nodes, to a
            // separate graph set if not
            const _graphs = mergeNodes || i === 0 ? graphs : {
                '@default': {
                }
            };
            _createNodeMap(doc, _graphs, '@default', issuer);
            if (_graphs !== graphs) // merge document graphs but don't merge existing nodes
            for(const graphName in _graphs){
                const _nodeMap = _graphs[graphName];
                if (!(graphName in graphs)) {
                    graphs[graphName] = _nodeMap;
                    continue;
                }
                const nodeMap = graphs[graphName];
                for(const key in _nodeMap)if (!(key in nodeMap)) nodeMap[key] = _nodeMap[key];
            }
        }
        // add all non-default graphs to default graph
        const defaultGraph = _mergeNodeMaps(graphs);
        // produce flattened output
        const flattened = [];
        const keys = Object.keys(defaultGraph).sort();
        for(let ki = 0; ki < keys.length; ++ki){
            const node = defaultGraph[keys[ki]];
            // only add full subjects to top-level
            if (!_isSubjectReference(node)) flattened.push(node);
        }
        if (ctx === null) return flattened;
        // compact result (force @graph option to true, skip expansion)
        options.graph = true;
        options.skipExpansion = true;
        const compacted = await jsonld.compact(flattened, ctx, options);
        return compacted;
    };
    /**
 * The default document loader for external documents.
 *
 * @param url the URL to load.
 *
 * @return a promise that resolves to the remote document.
 */ Object.defineProperty(jsonld, 'documentLoader', {
        get: ()=>jsonld._documentLoader
        ,
        set: (v)=>jsonld._documentLoader = v
    });
    // default document loader not implemented
    jsonld.documentLoader = async (url)=>{
        throw new JsonLdError("Could not retrieve a JSON-LD document from the URL. URL dereferencing not implemented.", 'jsonld.LoadDocumentError', {
            code: 'loading document failed',
            url
        });
    };
    /**
 * Gets a remote JSON-LD document using the default document loader or
 * one given in the passed options.
 *
 * @param url the URL to fetch.
 * @param [options] the options to use:
 *          [documentLoader] the document loader to use.
 *
 * @return a Promise that resolves to the retrieved remote document.
 */ jsonld.get = async function(url, options) {
        let load;
        if (typeof options.documentLoader === 'function') load = options.documentLoader;
        else load = jsonld.documentLoader;
        const remoteDoc = await load(url);
        try {
            if (!remoteDoc.document) throw new JsonLdError('No remote document found at the given URL.', 'jsonld.NullRemoteDocument');
            if (_isString(remoteDoc.document)) remoteDoc.document = JSON.parse(remoteDoc.document);
        } catch (e) {
            throw new JsonLdError('Could not retrieve a JSON-LD document from the URL.', 'jsonld.LoadDocumentError', {
                code: 'loading document failed',
                cause: e,
                remoteDoc
            });
        }
        return remoteDoc;
    };
    /**
 * Processes a local context, resolving any URLs as necessary, and returns a
 * new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param [options] the options to use:
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the new active context.
 */ jsonld.processContext = async function(activeCtx, localCtx, options) {
        // set default options
        options = _setDefaults(options, {
            base: '',
            contextResolver: new ContextResolver({
                sharedCache: _resolvedContextCache
            })
        });
        // return initial context early for null context
        if (localCtx === null) return _getInitialContext(options);
        // get URLs in localCtx
        localCtx = util.clone(localCtx);
        if (!(_isObject(localCtx) && '@context' in localCtx)) localCtx = {
            '@context': localCtx
        };
        return _processContext({
            activeCtx,
            localCtx,
            options
        });
    };
    // backwards compatibility
    jsonld.getContextValue = require('./context').getContextValue;
    /**
 * Document loaders.
 */ jsonld.documentLoaders = {
    };
    /**
 * Assigns the default document loader for external document URLs to a built-in
 * default. Supported types currently include: 'xhr' and 'node'.
 *
 * @param type the type to set.
 * @param [params] the parameters required to use the document loader.
 */ jsonld.useDocumentLoader = function(type) {
        if (!(type in jsonld.documentLoaders)) throw new JsonLdError('Unknown document loader type: "' + type + '"', 'jsonld.UnknownDocumentLoader', {
            type
        });
        // set document loader
        jsonld.documentLoader = jsonld.documentLoaders[type].apply(jsonld, Array.prototype.slice.call(arguments, 1));
    };
    /**
 * Registers an RDF dataset parser by content-type, for use with
 * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,
 * a string of input. An RDF dataset parser can be synchronous or
 * asynchronous (by returning a promise).
 *
 * @param contentType the content-type for the parser.
 * @param parser(input) the parser function (takes a string as a parameter
 *          and either returns an RDF dataset or a Promise that resolves to one.
 */ jsonld.registerRDFParser = function(contentType, parser) {
        _rdfParsers[contentType] = parser;
    };
    /**
 * Unregisters an RDF dataset parser by content-type.
 *
 * @param contentType the content-type for the parser.
 */ jsonld.unregisterRDFParser = function(contentType) {
        delete _rdfParsers[contentType];
    };
    // register the N-Quads RDF parser
    jsonld.registerRDFParser('application/n-quads', NQuads.parse);
    jsonld.registerRDFParser('application/nquads', NQuads.parse);
    /* URL API */ jsonld.url = require('./url');
    /* Utility API */ jsonld.util = util;
    // backwards compatibility
    Object.assign(jsonld, util);
    // reexpose API as jsonld.promises for backwards compatability
    jsonld.promises = jsonld;
    // backwards compatibility
    jsonld.RequestQueue = require('./RequestQueue');
    /* WebIDL API */ jsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld);
    platform.setupGlobals(jsonld);
    platform.setupDocumentLoaders(jsonld);
    function _setDefaults(options, { documentLoader =jsonld.documentLoader , ...defaults }) {
        return Object.assign({
        }, {
            documentLoader
        }, defaults, options);
    }
    // end of jsonld API `wrapper` factory
    return jsonld;
};
// external APIs:
// used to generate a new jsonld API instance
const factory = function() {
    return wrapper(function() {
        return factory();
    });
};
// wrap the main jsonld API instance
wrapper(factory);
// export API
module.exports = factory;

},{"rdf-canonize":"630qL","./platform":"15sLt","./util":"ir9k4","./ContextResolver":"5OeWv","./JsonLdError":"9sDAJ","lru-cache":"26bTZ","./NQuads":"2V4Z0","./expand":"8tE9j","./flatten":"7YikR","./fromRdf":"ixnCb","./toRdf":"4Be25","./frame":"iqUf2","./types":"1u182","./graphTypes":"3hVN6","./context":"1zTsA","./compact":"7lEWa","./nodeMap":"kKVUJ","./url":"ifth8","./RequestQueue":"kaTq8","./JsonLdProcessor":"1BSnh"}],"630qL":[function(require,module,exports) {
/**
 * An implementation of the RDF Dataset Normalization specification.
 *
 * @author Dave Longley
 *
 * Copyright 2010-2021 Digital Bazaar, Inc.
 */ module.exports = require('./lib');

},{"./lib":"feCaH"}],"feCaH":[function(require,module,exports) {
/**
 * An implementation of the RDF Dataset Normalization specification.
 * This library works in the browser and node.js.
 *
 * BSD 3-Clause License
 * Copyright (c) 2016-2021 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 'use strict';
const URDNA2015 = require('./URDNA2015');
const URGNA2012 = require('./URGNA2012');
const URDNA2015Sync = require('./URDNA2015Sync');
const URGNA2012Sync = require('./URGNA2012Sync');
// optional native support
let rdfCanonizeNative;
try {
    rdfCanonizeNative = require('rdf-canonize-native');
} catch (e) {
}
const api = {
};
module.exports = api;
// expose helpers
api.NQuads = require('./NQuads');
api.IdentifierIssuer = require('./IdentifierIssuer');
/**
 * Get or set native API.
 *
 * @param api the native API.
 *
 * @return the currently set native API.
 */ api._rdfCanonizeNative = function(api1) {
    if (api1) rdfCanonizeNative = api1;
    return rdfCanonizeNative;
};
/**
 * Asynchronously canonizes an RDF dataset.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return a Promise that resolves to the canonicalized RDF Dataset.
 */ api.canonize = async function(dataset, options) {
    // back-compat with legacy dataset
    if (!Array.isArray(dataset)) dataset = api.NQuads.legacyDatasetToQuads(dataset);
    if (options.useNative) {
        if (!rdfCanonizeNative) throw new Error('rdf-canonize-native not available');
        // TODO: convert native algorithm to Promise-based async
        return new Promise((resolve, reject)=>rdfCanonizeNative.canonize(dataset, options, (err, canonical)=>err ? reject(err) : resolve(canonical)
            )
        );
    }
    if (options.algorithm === 'URDNA2015') return new URDNA2015(options).main(dataset);
    if (options.algorithm === 'URGNA2012') return new URGNA2012(options).main(dataset);
    if (!('algorithm' in options)) throw new Error('No RDF Dataset Canonicalization algorithm specified.');
    throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};
/**
 * This method is no longer available in the public API, it is for testing
 * only. It synchronously canonizes an RDF dataset and does not work in the
 * browser.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return the RDF dataset in canonical form.
 */ api._canonizeSync = function(dataset, options) {
    // back-compat with legacy dataset
    if (!Array.isArray(dataset)) dataset = api.NQuads.legacyDatasetToQuads(dataset);
    if (options.useNative) {
        if (rdfCanonizeNative) return rdfCanonizeNative.canonizeSync(dataset, options);
        throw new Error('rdf-canonize-native not available');
    }
    if (options.algorithm === 'URDNA2015') return new URDNA2015Sync(options).main(dataset);
    if (options.algorithm === 'URGNA2012') return new URGNA2012Sync(options).main(dataset);
    if (!('algorithm' in options)) throw new Error('No RDF Dataset Canonicalization algorithm specified.');
    throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};

},{"./URDNA2015":"6wZju","./URGNA2012":"4Hj0E","./URDNA2015Sync":"c6CTH","./URGNA2012Sync":"54pXs","rdf-canonize-native":"jhUEF","./NQuads":"nD0Xf","./IdentifierIssuer":"jRrui"}],"6wZju":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const IdentifierIssuer = require('./IdentifierIssuer');
const MessageDigest = require('./MessageDigest');
const Permuter = require('./Permuter');
const NQuads = require('./NQuads');
module.exports = class URDNA2015 {
    constructor(){
        this.name = 'URDNA2015';
        this.blankNodeInfo = new Map();
        this.canonicalIssuer = new IdentifierIssuer('_:c14n');
        this.hashAlgorithm = 'sha256';
        this.quads = null;
    }
    // 4.4) Normalization Algorithm
    async main(dataset) {
        this.quads = dataset;
        // 1) Create the normalization state.
        // 2) For every quad in input dataset:
        for (const quad of dataset){
            // 2.1) For each blank node that occurs in the quad, add a reference
            // to the quad using the blank node identifier in the blank node to
            // quads map, creating a new entry if necessary.
            this._addBlankNodeQuadInfo({
                quad,
                component: quad.subject
            });
            this._addBlankNodeQuadInfo({
                quad,
                component: quad.object
            });
            this._addBlankNodeQuadInfo({
                quad,
                component: quad.graph
            });
        }
        // 3) Create a list of non-normalized blank node identifiers
        // non-normalized identifiers and populate it using the keys from the
        // blank node to quads map.
        // Note: We use a map here and it was generated during step 2.
        // 4) `simple` flag is skipped -- loop is optimized away. This optimization
        // is permitted because there was a typo in the hash first degree quads
        // algorithm in the URDNA2015 spec that was implemented widely making it
        // such that it could not be fixed; the result was that the loop only
        // needs to be run once and the first degree quad hashes will never change.
        // 5.1-5.2 are skipped; first degree quad hashes are generated just once
        // for all non-normalized blank nodes.
        // 5.3) For each blank node identifier identifier in non-normalized
        // identifiers:
        const hashToBlankNodes = new Map();
        const nonNormalized = [
            ...this.blankNodeInfo.keys()
        ];
        let i = 0;
        for (const id of nonNormalized){
            // Note: batch hashing first degree quads 100 at a time
            if (++i % 100 === 0) await this._yield();
            // steps 5.3.1 and 5.3.2:
            await this._hashAndTrackBlankNode({
                id,
                hashToBlankNodes
            });
        }
        // 5.4) For each hash to identifier list mapping in hash to blank
        // nodes map, lexicographically-sorted by hash:
        const hashes = [
            ...hashToBlankNodes.keys()
        ].sort();
        // optimize away second sort, gather non-unique hashes in order as we go
        const nonUnique = [];
        for (const hash of hashes){
            // 5.4.1) If the length of identifier list is greater than 1,
            // continue to the next mapping.
            const idList = hashToBlankNodes.get(hash);
            if (idList.length > 1) {
                nonUnique.push(idList);
                continue;
            }
            // 5.4.2) Use the Issue Identifier algorithm, passing canonical
            // issuer and the single blank node identifier in identifier
            // list, identifier, to issue a canonical replacement identifier
            // for identifier.
            const id = idList[0];
            this.canonicalIssuer.getId(id);
        // Note: These steps are skipped, optimized away since the loop
        // only needs to be run once.
        // 5.4.3) Remove identifier from non-normalized identifiers.
        // 5.4.4) Remove hash from the hash to blank nodes map.
        // 5.4.5) Set simple to true.
        }
        // 6) For each hash to identifier list mapping in hash to blank nodes map,
        // lexicographically-sorted by hash:
        // Note: sort optimized away, use `nonUnique`.
        for (const idList of nonUnique){
            // 6.1) Create hash path list where each item will be a result of
            // running the Hash N-Degree Quads algorithm.
            const hashPathList = [];
            // 6.2) For each blank node identifier identifier in identifier list:
            for (const id of idList){
                // 6.2.1) If a canonical identifier has already been issued for
                // identifier, continue to the next identifier.
                if (this.canonicalIssuer.hasId(id)) continue;
                // 6.2.2) Create temporary issuer, an identifier issuer
                // initialized with the prefix _:b.
                const issuer = new IdentifierIssuer('_:b');
                // 6.2.3) Use the Issue Identifier algorithm, passing temporary
                // issuer and identifier, to issue a new temporary blank node
                // identifier for identifier.
                issuer.getId(id);
                // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
                // temporary issuer, and append the result to the hash path list.
                const result = await this.hashNDegreeQuads(id, issuer);
                hashPathList.push(result);
            }
            // 6.3) For each result in the hash path list,
            // lexicographically-sorted by the hash in result:
            hashPathList.sort(_stringHashCompare);
            for (const result of hashPathList){
                // 6.3.1) For each blank node identifier, existing identifier,
                // that was issued a temporary identifier by identifier issuer
                // in result, issue a canonical identifier, in the same order,
                // using the Issue Identifier algorithm, passing canonical
                // issuer and existing identifier.
                const oldIds = result.issuer.getOldIds();
                for (const id of oldIds)this.canonicalIssuer.getId(id);
            }
        }
        /* Note: At this point all blank nodes in the set of RDF quads have been
    assigned canonical identifiers, which have been stored in the canonical
    issuer. Here each quad is updated by assigning each of its blank nodes
    its new identifier. */ // 7) For each quad, quad, in input dataset:
        const normalized = [];
        for (const quad1 of this.quads){
            // 7.1) Create a copy, quad copy, of quad and replace any existing
            // blank node identifiers using the canonical identifiers
            // previously issued by canonical issuer.
            // Note: We optimize with shallow copies here.
            const q = {
                ...quad1
            };
            q.subject = this._useCanonicalId({
                component: q.subject
            });
            q.object = this._useCanonicalId({
                component: q.object
            });
            q.graph = this._useCanonicalId({
                component: q.graph
            });
            // 7.2) Add quad copy to the normalized dataset.
            normalized.push(NQuads.serializeQuad(q));
        }
        // sort normalized output
        normalized.sort();
        // 8) Return the normalized dataset.
        return normalized.join('');
    }
    // 4.6) Hash First Degree Quads
    async hashFirstDegreeQuads(id) {
        // 1) Initialize nquads to an empty list. It will be used to store quads in
        // N-Quads format.
        const nquads = [];
        // 2) Get the list of quads `quads` associated with the reference blank node
        // identifier in the blank node to quads map.
        const info = this.blankNodeInfo.get(id);
        const quads = info.quads;
        // 3) For each quad `quad` in `quads`:
        for (const quad of quads){
            // 3.1) Serialize the quad in N-Quads format with the following special
            // rule:
            // 3.1.1) If any component in quad is an blank node, then serialize it
            // using a special identifier as follows:
            const copy = {
                subject: null,
                predicate: quad.predicate,
                object: null,
                graph: null
            };
            // 3.1.2) If the blank node's existing blank node identifier matches
            // the reference blank node identifier then use the blank node
            // identifier _:a, otherwise, use the blank node identifier _:z.
            copy.subject = this.modifyFirstDegreeComponent(id, quad.subject, 'subject');
            copy.object = this.modifyFirstDegreeComponent(id, quad.object, 'object');
            copy.graph = this.modifyFirstDegreeComponent(id, quad.graph, 'graph');
            nquads.push(NQuads.serializeQuad(copy));
        }
        // 4) Sort nquads in lexicographical order.
        nquads.sort();
        // 5) Return the hash that results from passing the sorted, joined nquads
        // through the hash algorithm.
        const md = new MessageDigest(this.hashAlgorithm);
        for (const nquad of nquads)md.update(nquad);
        info.hash = await md.digest();
        return info.hash;
    }
    // 4.7) Hash Related Blank Node
    async hashRelatedBlankNode(related, quad, issuer, position) {
        // 1) Set the identifier to use for related, preferring first the canonical
        // identifier for related if issued, second the identifier issued by issuer
        // if issued, and last, if necessary, the result of the Hash First Degree
        // Quads algorithm, passing related.
        let id;
        if (this.canonicalIssuer.hasId(related)) id = this.canonicalIssuer.getId(related);
        else if (issuer.hasId(related)) id = issuer.getId(related);
        else id = this.blankNodeInfo.get(related).hash;
        // 2) Initialize a string input to the value of position.
        // Note: We use a hash object instead.
        const md = new MessageDigest(this.hashAlgorithm);
        md.update(position);
        // 3) If position is not g, append <, the value of the predicate in quad,
        // and > to input.
        if (position !== 'g') md.update(this.getRelatedPredicate(quad));
        // 4) Append identifier to input.
        md.update(id);
        // 5) Return the hash that results from passing input through the hash
        // algorithm.
        return md.digest();
    }
    // 4.8) Hash N-Degree Quads
    async hashNDegreeQuads(id, issuer) {
        // 1) Create a hash to related blank nodes map for storing hashes that
        // identify related blank nodes.
        // Note: 2) and 3) handled within `createHashToRelated`
        const md = new MessageDigest(this.hashAlgorithm);
        const hashToRelated = await this.createHashToRelated(id, issuer);
        // 4) Create an empty string, data to hash.
        // Note: We created a hash object `md` above instead.
        // 5) For each related hash to blank node list mapping in hash to related
        // blank nodes map, sorted lexicographically by related hash:
        const hashes = [
            ...hashToRelated.keys()
        ].sort();
        for (const hash of hashes){
            // 5.1) Append the related hash to the data to hash.
            md.update(hash);
            // 5.2) Create a string chosen path.
            let chosenPath = '';
            // 5.3) Create an unset chosen issuer variable.
            let chosenIssuer;
            // 5.4) For each permutation of blank node list:
            const permuter = new Permuter(hashToRelated.get(hash));
            let i = 0;
            while(permuter.hasNext()){
                const permutation = permuter.next();
                // Note: batch permutations 3 at a time
                if (++i % 3 === 0) await this._yield();
                // 5.4.1) Create a copy of issuer, issuer copy.
                let issuerCopy = issuer.clone();
                // 5.4.2) Create a string path.
                let path = '';
                // 5.4.3) Create a recursion list, to store blank node identifiers
                // that must be recursively processed by this algorithm.
                const recursionList = [];
                // 5.4.4) For each related in permutation:
                let nextPermutation = false;
                for (const related of permutation){
                    // 5.4.4.1) If a canonical identifier has been issued for
                    // related, append it to path.
                    if (this.canonicalIssuer.hasId(related)) path += this.canonicalIssuer.getId(related);
                    else {
                        // 5.4.4.2) Otherwise:
                        // 5.4.4.2.1) If issuer copy has not issued an identifier for
                        // related, append related to recursion list.
                        if (!issuerCopy.hasId(related)) recursionList.push(related);
                        // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
                        // issuer copy and related and append the result to path.
                        path += issuerCopy.getId(related);
                    }
                    // 5.4.4.3) If chosen path is not empty and the length of path
                    // is greater than or equal to the length of chosen path and
                    // path is lexicographically greater than chosen path, then
                    // skip to the next permutation.
                    // Note: Comparing path length to chosen path length can be optimized
                    // away; only compare lexicographically.
                    if (chosenPath.length !== 0 && path > chosenPath) {
                        nextPermutation = true;
                        break;
                    }
                }
                if (nextPermutation) continue;
                // 5.4.5) For each related in recursion list:
                for (const related1 of recursionList){
                    // 5.4.5.1) Set result to the result of recursively executing
                    // the Hash N-Degree Quads algorithm, passing related for
                    // identifier and issuer copy for path identifier issuer.
                    const result = await this.hashNDegreeQuads(related1, issuerCopy);
                    // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
                    // copy and related and append the result to path.
                    path += issuerCopy.getId(related1);
                    // 5.4.5.3) Append <, the hash in result, and > to path.
                    path += `<${result.hash}>`;
                    // 5.4.5.4) Set issuer copy to the identifier issuer in
                    // result.
                    issuerCopy = result.issuer;
                    // 5.4.5.5) If chosen path is not empty and the length of path
                    // is greater than or equal to the length of chosen path and
                    // path is lexicographically greater than chosen path, then
                    // skip to the next permutation.
                    // Note: Comparing path length to chosen path length can be optimized
                    // away; only compare lexicographically.
                    if (chosenPath.length !== 0 && path > chosenPath) {
                        nextPermutation = true;
                        break;
                    }
                }
                if (nextPermutation) continue;
                // 5.4.6) If chosen path is empty or path is lexicographically
                // less than chosen path, set chosen path to path and chosen
                // issuer to issuer copy.
                if (chosenPath.length === 0 || path < chosenPath) {
                    chosenPath = path;
                    chosenIssuer = issuerCopy;
                }
            }
            // 5.5) Append chosen path to data to hash.
            md.update(chosenPath);
            // 5.6) Replace issuer, by reference, with chosen issuer.
            issuer = chosenIssuer;
        }
        // 6) Return issuer and the hash that results from passing data to hash
        // through the hash algorithm.
        return {
            hash: await md.digest(),
            issuer
        };
    }
    // helper for modifying component during Hash First Degree Quads
    modifyFirstDegreeComponent(id, component) {
        if (component.termType !== 'BlankNode') return component;
        /* Note: A mistake in the URDNA2015 spec that made its way into
    implementations (and therefore must stay to avoid interop breakage)
    resulted in an assigned canonical ID, if available for
    `component.value`, not being used in place of `_:a`/`_:z`, so
    we don't use it here. */ return {
            termType: 'BlankNode',
            value: component.value === id ? '_:a' : '_:z'
        };
    }
    // helper for getting a related predicate
    getRelatedPredicate(quad) {
        return `<${quad.predicate.value}>`;
    }
    // helper for creating hash to related blank nodes map
    async createHashToRelated(id, issuer) {
        // 1) Create a hash to related blank nodes map for storing hashes that
        // identify related blank nodes.
        const hashToRelated = new Map();
        // 2) Get a reference, quads, to the list of quads in the blank node to
        // quads map for the key identifier.
        const quads = this.blankNodeInfo.get(id).quads;
        // 3) For each quad in quads:
        let i = 0;
        for (const quad of quads){
            // Note: batch hashing related blank node quads 100 at a time
            if (++i % 100 === 0) await this._yield();
            // 3.1) For each component in quad, if component is the subject, object,
            // and graph name and it is a blank node that is not identified by
            // identifier:
            // steps 3.1.1 and 3.1.2 occur in helpers:
            await Promise.all([
                this._addRelatedBlankNodeHash({
                    quad,
                    component: quad.subject,
                    position: 's',
                    id,
                    issuer,
                    hashToRelated
                }),
                this._addRelatedBlankNodeHash({
                    quad,
                    component: quad.object,
                    position: 'o',
                    id,
                    issuer,
                    hashToRelated
                }),
                this._addRelatedBlankNodeHash({
                    quad,
                    component: quad.graph,
                    position: 'g',
                    id,
                    issuer,
                    hashToRelated
                })
            ]);
        }
        return hashToRelated;
    }
    async _hashAndTrackBlankNode({ id , hashToBlankNodes  }) {
        // 5.3.1) Create a hash, hash, according to the Hash First Degree
        // Quads algorithm.
        const hash = await this.hashFirstDegreeQuads(id);
        // 5.3.2) Add hash and identifier to hash to blank nodes map,
        // creating a new entry if necessary.
        const idList = hashToBlankNodes.get(hash);
        if (!idList) hashToBlankNodes.set(hash, [
            id
        ]);
        else idList.push(id);
    }
    _addBlankNodeQuadInfo({ quad , component  }) {
        if (component.termType !== 'BlankNode') return;
        const id = component.value;
        const info = this.blankNodeInfo.get(id);
        if (info) info.quads.add(quad);
        else this.blankNodeInfo.set(id, {
            quads: new Set([
                quad
            ]),
            hash: null
        });
    }
    async _addRelatedBlankNodeHash({ quad , component , position , id , issuer , hashToRelated  }) {
        if (!(component.termType === 'BlankNode' && component.value !== id)) return;
        // 3.1.1) Set hash to the result of the Hash Related Blank Node
        // algorithm, passing the blank node identifier for component as
        // related, quad, path identifier issuer as issuer, and position as
        // either s, o, or g based on whether component is a subject, object,
        // graph name, respectively.
        const related = component.value;
        const hash = await this.hashRelatedBlankNode(related, quad, issuer, position);
        // 3.1.2) Add a mapping of hash to the blank node identifier for
        // component to hash to related blank nodes map, adding an entry as
        // necessary.
        const entries = hashToRelated.get(hash);
        if (entries) entries.push(related);
        else hashToRelated.set(hash, [
            related
        ]);
    }
    _useCanonicalId({ component  }) {
        if (component.termType === 'BlankNode' && !component.value.startsWith(this.canonicalIssuer.prefix)) return {
            termType: 'BlankNode',
            value: this.canonicalIssuer.getId(component.value)
        };
        return component;
    }
    async _yield() {
        return new Promise((resolve)=>setImmediate(resolve)
        );
    }
};
function _stringHashCompare(a, b) {
    return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
}

},{"./IdentifierIssuer":"jRrui","./MessageDigest":"64a6r","./Permuter":"1xJzD","./NQuads":"nD0Xf"}],"jRrui":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
module.exports = class IdentifierIssuer {
    /**
   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
   * identifiers, keeping track of any previously issued identifiers.
   *
   * @param prefix the prefix to use ('<prefix><counter>').
   * @param existing an existing Map to use.
   * @param counter the counter to use.
   */ constructor(prefix, existing = new Map(), counter = 0){
        this.prefix = prefix;
        this._existing = existing;
        this.counter = counter;
    }
    /**
   * Copies this IdentifierIssuer.
   *
   * @return a copy of this IdentifierIssuer.
   */ clone() {
        const { prefix , _existing , counter  } = this;
        return new IdentifierIssuer(prefix, new Map(_existing), counter);
    }
    /**
   * Gets the new identifier for the given old identifier, where if no old
   * identifier is given a new identifier will be generated.
   *
   * @param [old] the old identifier to get the new identifier for.
   *
   * @return the new identifier.
   */ getId(old) {
        // return existing old identifier
        const existing = old && this._existing.get(old);
        if (existing) return existing;
        // get next identifier
        const identifier = this.prefix + this.counter;
        this.counter++;
        // save mapping
        if (old) this._existing.set(old, identifier);
        return identifier;
    }
    /**
   * Returns true if the given old identifer has already been assigned a new
   * identifier.
   *
   * @param old the old identifier to check.
   *
   * @return true if the old identifier has been assigned a new identifier,
   *   false if not.
   */ hasId(old) {
        return this._existing.has(old);
    }
    /**
   * Returns all of the IDs that have been issued new IDs in the order in
   * which they were issued new IDs.
   *
   * @return the list of old IDs that has been issued new IDs in order.
   */ getOldIds() {
        return [
            ...this._existing.keys()
        ];
    }
};

},{}],"64a6r":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
require('setimmediate');
const crypto = self.crypto || self.msCrypto;
// TODO: synchronous version no longer supported in browser
module.exports = class MessageDigest {
    /**
   * Creates a new MessageDigest.
   *
   * @param algorithm the algorithm to use.
   */ constructor(algorithm){
        // check if crypto.subtle is available
        // check is here rather than top-level to only fail if class is used
        if (!(crypto && crypto.subtle)) throw new Error('crypto.subtle not found.');
        if (algorithm === 'sha256') this.algorithm = {
            name: 'SHA-256'
        };
        else if (algorithm === 'sha1') this.algorithm = {
            name: 'SHA-1'
        };
        else throw new Error(`Unsupport algorithm "${algorithm}".`);
        this._content = '';
    }
    update(msg) {
        this._content += msg;
    }
    async digest() {
        const data = new TextEncoder().encode(this._content);
        const buffer = new Uint8Array(await crypto.subtle.digest(this.algorithm, data));
        // return digest in hex
        let hex = '';
        for(let i = 0; i < buffer.length; ++i)hex += buffer[i].toString(16).padStart(2, '0');
        return hex;
    }
};

},{"setimmediate":"g4k8b"}],"g4k8b":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
(function(global1, undefined) {
    if (global1.setImmediate) return;
    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {
    };
    var currentlyRunningATask = false;
    var doc = global1.document;
    var registerImmediate;
    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") callback = new Function("" + callback);
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i + 1];
        // Store and register the task
        var task = {
            callback: callback,
            args: args
        };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }
    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }
    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch(args.length){
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }
    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
        // "too much recursion" error.
        setTimeout(runIfPresent, 0, handle);
        else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally{
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }
    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function() {
                runIfPresent(handle);
            });
        };
    }
    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global1.postMessage && !global1.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global1.onmessage;
            global1.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global1.postMessage("", "*");
            global1.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }
    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global1 && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) runIfPresent(+event.data.slice(messagePrefix.length));
        };
        if (global1.addEventListener) global1.addEventListener("message", onGlobalMessage, false);
        else global1.attachEvent("onmessage", onGlobalMessage);
        registerImmediate = function(handle) {
            global1.postMessage(messagePrefix + handle, "*");
        };
    }
    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };
        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }
    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function() {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }
    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }
    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global1);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global1;
    // Don't get fooled by e.g. browserify environments.
    if (({
    }).toString.call(global1.process) === "[object process]") // For Node.js before 0.9
    installNextTickImplementation();
    else if (canUsePostMessage()) // For non-IE10 modern browsers
    installPostMessageImplementation();
    else if (global1.MessageChannel) // For web workers, where supported
    installMessageChannelImplementation();
    else if (doc && "onreadystatechange" in doc.createElement("script")) // For IE 6–8
    installReadyStateChangeImplementation();
    else // For older browsers
    installSetTimeoutImplementation();
    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);

},{"process":"d5jf4"}],"1xJzD":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
// TODO: convert to ES6 iterable?
module.exports = class Permuter {
    /**
   * A Permuter iterates over all possible permutations of the given array
   * of elements.
   *
   * @param list the array of elements to iterate over.
   */ constructor(list){
        // original array
        this.current = list.sort();
        // indicates whether there are more permutations
        this.done = false;
        // directional info for permutation algorithm
        this.dir = new Map();
        for(let i = 0; i < list.length; ++i)this.dir.set(list[i], true);
    }
    /**
   * Returns true if there is another permutation.
   *
   * @return true if there is another permutation, false if not.
   */ hasNext() {
        return !this.done;
    }
    /**
   * Gets the next permutation. Call hasNext() to ensure there is another one
   * first.
   *
   * @return the next permutation.
   */ next() {
        // copy current permutation to return it
        const { current , dir  } = this;
        const rval = current.slice();
        /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
     permutation algorithm. */ // get largest mobile element k
        // (mobile: element is greater than the one it is looking at)
        let k = null;
        let pos = 0;
        const length = current.length;
        for(let i = 0; i < length; ++i){
            const element = current[i];
            const left = dir.get(element);
            if ((k === null || element > k) && (left && i > 0 && element > current[i - 1] || !left && i < length - 1 && element > current[i + 1])) {
                k = element;
                pos = i;
            }
        }
        // no more permutations
        if (k === null) this.done = true;
        else {
            // swap k and the element it is looking at
            const swap = dir.get(k) ? pos - 1 : pos + 1;
            current[pos] = current[swap];
            current[swap] = k;
            // reverse the direction of all elements larger than k
            for (const element of current)if (element > k) dir.set(element, !dir.get(element));
        }
        return rval;
    }
};

},{}],"nD0Xf":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
// eslint-disable-next-line no-unused-vars
const TERMS = [
    'subject',
    'predicate',
    'object',
    'graph'
];
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const RDF_LANGSTRING = RDF + 'langString';
const XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';
const TYPE_NAMED_NODE = 'NamedNode';
const TYPE_BLANK_NODE = 'BlankNode';
const TYPE_LITERAL = 'Literal';
const TYPE_DEFAULT_GRAPH = 'DefaultGraph';
// build regexes
const REGEX = {
};
(()=>{
    const iri = '(?:<([^:]+:[^>]*)>)';
    // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL
    const PN_CHARS_BASE = "A-Za-z\xc0-\xd6\xd8-\xf6\xf8-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";
    // TODO:
    //'\u10000-\uEFFFF';
    const PN_CHARS_U = PN_CHARS_BASE + '_';
    const PN_CHARS = PN_CHARS_U + '0-9' + '-' + '\u00B7' + '\u0300-\u036F' + '\u203F-\u2040';
    const BLANK_NODE_LABEL = "(_:(?:[" + PN_CHARS_U + '0-9])' + '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' + ')';
    const bnode = BLANK_NODE_LABEL;
    const plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
    const datatype = '(?:\\^\\^' + iri + ')';
    const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';
    const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
    const ws = '[ \\t]+';
    const wso = '[ \\t]*';
    // define quad part regexes
    const subject = '(?:' + iri + '|' + bnode + ')' + ws;
    const property = iri + ws;
    const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
    const graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))';
    // end of line and empty regexes
    REGEX.eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
    REGEX.empty = new RegExp('^' + wso + '$');
    // full quad regex
    REGEX.quad = new RegExp('^' + wso + subject + property + object + graphName + wso + '$');
})();
module.exports = class NQuads {
    /**
   * Parses RDF in the form of N-Quads.
   *
   * @param input the N-Quads input to parse.
   *
   * @return an RDF dataset (an array of quads per http://rdf.js.org/).
   */ static parse(input) {
        // build RDF dataset
        const dataset = [];
        const graphs = {
        };
        // split N-Quad input into lines
        const lines = input.split(REGEX.eoln);
        let lineNumber = 0;
        for (const line of lines){
            lineNumber++;
            // skip empty lines
            if (REGEX.empty.test(line)) continue;
            // parse quad
            const match = line.match(REGEX.quad);
            if (match === null) throw new Error('N-Quads parse error on line ' + lineNumber + '.');
            // create RDF quad
            const quad = {
                subject: null,
                predicate: null,
                object: null,
                graph: null
            };
            // get subject
            if (match[1] !== undefined) quad.subject = {
                termType: TYPE_NAMED_NODE,
                value: match[1]
            };
            else quad.subject = {
                termType: TYPE_BLANK_NODE,
                value: match[2]
            };
            // get predicate
            quad.predicate = {
                termType: TYPE_NAMED_NODE,
                value: match[3]
            };
            // get object
            if (match[4] !== undefined) quad.object = {
                termType: TYPE_NAMED_NODE,
                value: match[4]
            };
            else if (match[5] !== undefined) quad.object = {
                termType: TYPE_BLANK_NODE,
                value: match[5]
            };
            else {
                quad.object = {
                    termType: TYPE_LITERAL,
                    value: undefined,
                    datatype: {
                        termType: TYPE_NAMED_NODE
                    }
                };
                if (match[7] !== undefined) quad.object.datatype.value = match[7];
                else if (match[8] !== undefined) {
                    quad.object.datatype.value = RDF_LANGSTRING;
                    quad.object.language = match[8];
                } else quad.object.datatype.value = XSD_STRING;
                quad.object.value = _unescape(match[6]);
            }
            // get graph
            if (match[9] !== undefined) quad.graph = {
                termType: TYPE_NAMED_NODE,
                value: match[9]
            };
            else if (match[10] !== undefined) quad.graph = {
                termType: TYPE_BLANK_NODE,
                value: match[10]
            };
            else quad.graph = {
                termType: TYPE_DEFAULT_GRAPH,
                value: ''
            };
            // only add quad if it is unique in its graph
            if (!(quad.graph.value in graphs)) {
                graphs[quad.graph.value] = [
                    quad
                ];
                dataset.push(quad);
            } else {
                let unique = true;
                const quads = graphs[quad.graph.value];
                for (const q of quads)if (_compareTriples(q, quad)) {
                    unique = false;
                    break;
                }
                if (unique) {
                    quads.push(quad);
                    dataset.push(quad);
                }
            }
        }
        return dataset;
    }
    /**
   * Converts an RDF dataset to N-Quads.
   *
   * @param dataset (array of quads) the RDF dataset to convert.
   *
   * @return the N-Quads string.
   */ static serialize(dataset) {
        if (!Array.isArray(dataset)) dataset = NQuads.legacyDatasetToQuads(dataset);
        const quads = [];
        for (const quad of dataset)quads.push(NQuads.serializeQuad(quad));
        return quads.sort().join('');
    }
    /**
   * Converts an RDF quad to an N-Quad string (a single quad).
   *
   * @param quad the RDF quad convert.
   *
   * @return the N-Quad string.
   */ static serializeQuad(quad) {
        const s = quad.subject;
        const p = quad.predicate;
        const o = quad.object;
        const g = quad.graph;
        let nquad = '';
        // subject can only be NamedNode or BlankNode
        if (s.termType === TYPE_NAMED_NODE) nquad += `<${s.value}>`;
        else nquad += `${s.value}`;
        // predicate can only be NamedNode
        nquad += ` <${p.value}> `;
        // object is NamedNode, BlankNode, or Literal
        if (o.termType === TYPE_NAMED_NODE) nquad += `<${o.value}>`;
        else if (o.termType === TYPE_BLANK_NODE) nquad += o.value;
        else {
            nquad += `"${_escape(o.value)}"`;
            if (o.datatype.value === RDF_LANGSTRING) {
                if (o.language) nquad += `@${o.language}`;
            } else if (o.datatype.value !== XSD_STRING) nquad += `^^<${o.datatype.value}>`;
        }
        // graph can only be NamedNode or BlankNode (or DefaultGraph, but that
        // does not add to `nquad`)
        if (g.termType === TYPE_NAMED_NODE) nquad += ` <${g.value}>`;
        else if (g.termType === TYPE_BLANK_NODE) nquad += ` ${g.value}`;
        nquad += ' .\n';
        return nquad;
    }
    /**
   * Converts a legacy-formatted dataset to an array of quads dataset per
   * http://rdf.js.org/.
   *
   * @param dataset the legacy dataset to convert.
   *
   * @return the array of quads dataset.
   */ static legacyDatasetToQuads(dataset) {
        const quads = [];
        const termTypeMap = {
            'blank node': TYPE_BLANK_NODE,
            IRI: TYPE_NAMED_NODE,
            literal: TYPE_LITERAL
        };
        for(const graphName in dataset){
            const triples = dataset[graphName];
            triples.forEach((triple)=>{
                const quad = {
                };
                for(const componentName in triple){
                    const oldComponent = triple[componentName];
                    const newComponent = {
                        termType: termTypeMap[oldComponent.type],
                        value: oldComponent.value
                    };
                    if (newComponent.termType === TYPE_LITERAL) {
                        newComponent.datatype = {
                            termType: TYPE_NAMED_NODE
                        };
                        if ('datatype' in oldComponent) newComponent.datatype.value = oldComponent.datatype;
                        if ('language' in oldComponent) {
                            if (!('datatype' in oldComponent)) newComponent.datatype.value = RDF_LANGSTRING;
                            newComponent.language = oldComponent.language;
                        } else if (!('datatype' in oldComponent)) newComponent.datatype.value = XSD_STRING;
                    }
                    quad[componentName] = newComponent;
                }
                if (graphName === '@default') quad.graph = {
                    termType: TYPE_DEFAULT_GRAPH,
                    value: ''
                };
                else quad.graph = {
                    termType: graphName.startsWith('_:') ? TYPE_BLANK_NODE : TYPE_NAMED_NODE,
                    value: graphName
                };
                quads.push(quad);
            });
        }
        return quads;
    }
};
/**
 * Compares two RDF triples for equality.
 *
 * @param t1 the first triple.
 * @param t2 the second triple.
 *
 * @return true if the triples are the same, false if not.
 */ function _compareTriples(t1, t2) {
    // compare subject and object types first as it is the quickest check
    if (!(t1.subject.termType === t2.subject.termType && t1.object.termType === t2.object.termType)) return false;
    // compare values
    if (!(t1.subject.value === t2.subject.value && t1.predicate.value === t2.predicate.value && t1.object.value === t2.object.value)) return false;
    if (t1.object.termType !== TYPE_LITERAL) // no `datatype` or `language` to check
    return true;
    return t1.object.datatype.termType === t2.object.datatype.termType && t1.object.language === t2.object.language && t1.object.datatype.value === t2.object.datatype.value;
}
const _escapeRegex = /["\\\n\r]/g;
/**
 * Escape string to N-Quads literal
 */ function _escape(s) {
    return s.replace(_escapeRegex, function(match) {
        switch(match){
            case '"':
                return '\\"';
            case '\\':
                return '\\\\';
            case '\n':
                return '\\n';
            case '\r':
                return '\\r';
        }
    });
}
const _unescapeRegex = /(?:\\([tbnrf"'\\]))|(?:\\u([0-9A-Fa-f]{4}))|(?:\\U([0-9A-Fa-f]{8}))/g;
/**
 * Unescape N-Quads literal to string
 */ function _unescape(s) {
    return s.replace(_unescapeRegex, function(match, code, u, U) {
        if (code) switch(code){
            case 't':
                return '\t';
            case 'b':
                return '\b';
            case 'n':
                return '\n';
            case 'r':
                return '\r';
            case 'f':
                return '\f';
            case '"':
                return '"';
            case '\'':
                return '\'';
            case '\\':
                return '\\';
        }
        if (u) return String.fromCharCode(parseInt(u, 16));
        if (U) // FIXME: support larger values
        throw new Error('Unsupported U escape');
    });
}

},{}],"4Hj0E":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const URDNA2015 = require('./URDNA2015');
module.exports = class URDNA2012 extends URDNA2015 {
    constructor(){
        super();
        this.name = 'URGNA2012';
        this.hashAlgorithm = 'sha1';
    }
    // helper for modifying component during Hash First Degree Quads
    modifyFirstDegreeComponent(id, component, key) {
        if (component.termType !== 'BlankNode') return component;
        if (key === 'graph') return {
            termType: 'BlankNode',
            value: '_:g'
        };
        return {
            termType: 'BlankNode',
            value: component.value === id ? '_:a' : '_:z'
        };
    }
    // helper for getting a related predicate
    getRelatedPredicate(quad) {
        return quad.predicate.value;
    }
    // helper for creating hash to related blank nodes map
    async createHashToRelated(id, issuer) {
        // 1) Create a hash to related blank nodes map for storing hashes that
        // identify related blank nodes.
        const hashToRelated = new Map();
        // 2) Get a reference, quads, to the list of quads in the blank node to
        // quads map for the key identifier.
        const quads = this.blankNodeInfo.get(id).quads;
        // 3) For each quad in quads:
        let i = 0;
        for (const quad of quads){
            // 3.1) If the quad's subject is a blank node that does not match
            // identifier, set hash to the result of the Hash Related Blank Node
            // algorithm, passing the blank node identifier for subject as related,
            // quad, path identifier issuer as issuer, and p as position.
            let position;
            let related;
            if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
                related = quad.subject.value;
                position = 'p';
            } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {
                // 3.2) Otherwise, if quad's object is a blank node that does not match
                // identifier, to the result of the Hash Related Blank Node algorithm,
                // passing the blank node identifier for object as related, quad, path
                // identifier issuer as issuer, and r as position.
                related = quad.object.value;
                position = 'r';
            } else continue;
            // Note: batch hashing related blank nodes 100 at a time
            if (++i % 100 === 0) await this._yield();
            // 3.4) Add a mapping of hash to the blank node identifier for the
            // component that matched (subject or object) to hash to related blank
            // nodes map, adding an entry as necessary.
            const hash = await this.hashRelatedBlankNode(related, quad, issuer, position);
            const entries = hashToRelated.get(hash);
            if (entries) entries.push(related);
            else hashToRelated.set(hash, [
                related
            ]);
        }
        return hashToRelated;
    }
};

},{"./URDNA2015":"6wZju"}],"c6CTH":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const IdentifierIssuer = require('./IdentifierIssuer');
const MessageDigest = require('./MessageDigest');
const Permuter = require('./Permuter');
const NQuads = require('./NQuads');
module.exports = class URDNA2015Sync {
    constructor(){
        this.name = 'URDNA2015';
        this.blankNodeInfo = new Map();
        this.canonicalIssuer = new IdentifierIssuer('_:c14n');
        this.hashAlgorithm = 'sha256';
        this.quads = null;
    }
    // 4.4) Normalization Algorithm
    main(dataset) {
        this.quads = dataset;
        // 1) Create the normalization state.
        // 2) For every quad in input dataset:
        for (const quad of dataset){
            // 2.1) For each blank node that occurs in the quad, add a reference
            // to the quad using the blank node identifier in the blank node to
            // quads map, creating a new entry if necessary.
            this._addBlankNodeQuadInfo({
                quad,
                component: quad.subject
            });
            this._addBlankNodeQuadInfo({
                quad,
                component: quad.object
            });
            this._addBlankNodeQuadInfo({
                quad,
                component: quad.graph
            });
        }
        // 3) Create a list of non-normalized blank node identifiers
        // non-normalized identifiers and populate it using the keys from the
        // blank node to quads map.
        // Note: We use a map here and it was generated during step 2.
        // 4) `simple` flag is skipped -- loop is optimized away. This optimization
        // is permitted because there was a typo in the hash first degree quads
        // algorithm in the URDNA2015 spec that was implemented widely making it
        // such that it could not be fixed; the result was that the loop only
        // needs to be run once and the first degree quad hashes will never change.
        // 5.1-5.2 are skipped; first degree quad hashes are generated just once
        // for all non-normalized blank nodes.
        // 5.3) For each blank node identifier identifier in non-normalized
        // identifiers:
        const hashToBlankNodes = new Map();
        const nonNormalized = [
            ...this.blankNodeInfo.keys()
        ];
        for (const id of nonNormalized)// steps 5.3.1 and 5.3.2:
        this._hashAndTrackBlankNode({
            id,
            hashToBlankNodes
        });
        // 5.4) For each hash to identifier list mapping in hash to blank
        // nodes map, lexicographically-sorted by hash:
        const hashes = [
            ...hashToBlankNodes.keys()
        ].sort();
        // optimize away second sort, gather non-unique hashes in order as we go
        const nonUnique = [];
        for (const hash of hashes){
            // 5.4.1) If the length of identifier list is greater than 1,
            // continue to the next mapping.
            const idList = hashToBlankNodes.get(hash);
            if (idList.length > 1) {
                nonUnique.push(idList);
                continue;
            }
            // 5.4.2) Use the Issue Identifier algorithm, passing canonical
            // issuer and the single blank node identifier in identifier
            // list, identifier, to issue a canonical replacement identifier
            // for identifier.
            const id = idList[0];
            this.canonicalIssuer.getId(id);
        // Note: These steps are skipped, optimized away since the loop
        // only needs to be run once.
        // 5.4.3) Remove identifier from non-normalized identifiers.
        // 5.4.4) Remove hash from the hash to blank nodes map.
        // 5.4.5) Set simple to true.
        }
        // 6) For each hash to identifier list mapping in hash to blank nodes map,
        // lexicographically-sorted by hash:
        // Note: sort optimized away, use `nonUnique`.
        for (const idList of nonUnique){
            // 6.1) Create hash path list where each item will be a result of
            // running the Hash N-Degree Quads algorithm.
            const hashPathList = [];
            // 6.2) For each blank node identifier identifier in identifier list:
            for (const id of idList){
                // 6.2.1) If a canonical identifier has already been issued for
                // identifier, continue to the next identifier.
                if (this.canonicalIssuer.hasId(id)) continue;
                // 6.2.2) Create temporary issuer, an identifier issuer
                // initialized with the prefix _:b.
                const issuer = new IdentifierIssuer('_:b');
                // 6.2.3) Use the Issue Identifier algorithm, passing temporary
                // issuer and identifier, to issue a new temporary blank node
                // identifier for identifier.
                issuer.getId(id);
                // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
                // temporary issuer, and append the result to the hash path list.
                const result = this.hashNDegreeQuads(id, issuer);
                hashPathList.push(result);
            }
            // 6.3) For each result in the hash path list,
            // lexicographically-sorted by the hash in result:
            hashPathList.sort(_stringHashCompare);
            for (const result of hashPathList){
                // 6.3.1) For each blank node identifier, existing identifier,
                // that was issued a temporary identifier by identifier issuer
                // in result, issue a canonical identifier, in the same order,
                // using the Issue Identifier algorithm, passing canonical
                // issuer and existing identifier.
                const oldIds = result.issuer.getOldIds();
                for (const id of oldIds)this.canonicalIssuer.getId(id);
            }
        }
        /* Note: At this point all blank nodes in the set of RDF quads have been
    assigned canonical identifiers, which have been stored in the canonical
    issuer. Here each quad is updated by assigning each of its blank nodes
    its new identifier. */ // 7) For each quad, quad, in input dataset:
        const normalized = [];
        for (const quad1 of this.quads){
            // 7.1) Create a copy, quad copy, of quad and replace any existing
            // blank node identifiers using the canonical identifiers
            // previously issued by canonical issuer.
            // Note: We optimize with shallow copies here.
            const q = {
                ...quad1
            };
            q.subject = this._useCanonicalId({
                component: q.subject
            });
            q.object = this._useCanonicalId({
                component: q.object
            });
            q.graph = this._useCanonicalId({
                component: q.graph
            });
            // 7.2) Add quad copy to the normalized dataset.
            normalized.push(NQuads.serializeQuad(q));
        }
        // sort normalized output
        normalized.sort();
        // 8) Return the normalized dataset.
        return normalized.join('');
    }
    // 4.6) Hash First Degree Quads
    hashFirstDegreeQuads(id) {
        // 1) Initialize nquads to an empty list. It will be used to store quads in
        // N-Quads format.
        const nquads = [];
        // 2) Get the list of quads `quads` associated with the reference blank node
        // identifier in the blank node to quads map.
        const info = this.blankNodeInfo.get(id);
        const quads = info.quads;
        // 3) For each quad `quad` in `quads`:
        for (const quad of quads){
            // 3.1) Serialize the quad in N-Quads format with the following special
            // rule:
            // 3.1.1) If any component in quad is an blank node, then serialize it
            // using a special identifier as follows:
            const copy = {
                subject: null,
                predicate: quad.predicate,
                object: null,
                graph: null
            };
            // 3.1.2) If the blank node's existing blank node identifier matches
            // the reference blank node identifier then use the blank node
            // identifier _:a, otherwise, use the blank node identifier _:z.
            copy.subject = this.modifyFirstDegreeComponent(id, quad.subject, 'subject');
            copy.object = this.modifyFirstDegreeComponent(id, quad.object, 'object');
            copy.graph = this.modifyFirstDegreeComponent(id, quad.graph, 'graph');
            nquads.push(NQuads.serializeQuad(copy));
        }
        // 4) Sort nquads in lexicographical order.
        nquads.sort();
        // 5) Return the hash that results from passing the sorted, joined nquads
        // through the hash algorithm.
        const md = new MessageDigest(this.hashAlgorithm);
        for (const nquad of nquads)md.update(nquad);
        info.hash = md.digest();
        return info.hash;
    }
    // 4.7) Hash Related Blank Node
    hashRelatedBlankNode(related, quad, issuer, position) {
        // 1) Set the identifier to use for related, preferring first the canonical
        // identifier for related if issued, second the identifier issued by issuer
        // if issued, and last, if necessary, the result of the Hash First Degree
        // Quads algorithm, passing related.
        let id;
        if (this.canonicalIssuer.hasId(related)) id = this.canonicalIssuer.getId(related);
        else if (issuer.hasId(related)) id = issuer.getId(related);
        else id = this.blankNodeInfo.get(related).hash;
        // 2) Initialize a string input to the value of position.
        // Note: We use a hash object instead.
        const md = new MessageDigest(this.hashAlgorithm);
        md.update(position);
        // 3) If position is not g, append <, the value of the predicate in quad,
        // and > to input.
        if (position !== 'g') md.update(this.getRelatedPredicate(quad));
        // 4) Append identifier to input.
        md.update(id);
        // 5) Return the hash that results from passing input through the hash
        // algorithm.
        return md.digest();
    }
    // 4.8) Hash N-Degree Quads
    hashNDegreeQuads(id, issuer) {
        // 1) Create a hash to related blank nodes map for storing hashes that
        // identify related blank nodes.
        // Note: 2) and 3) handled within `createHashToRelated`
        const md = new MessageDigest(this.hashAlgorithm);
        const hashToRelated = this.createHashToRelated(id, issuer);
        // 4) Create an empty string, data to hash.
        // Note: We created a hash object `md` above instead.
        // 5) For each related hash to blank node list mapping in hash to related
        // blank nodes map, sorted lexicographically by related hash:
        const hashes = [
            ...hashToRelated.keys()
        ].sort();
        for (const hash of hashes){
            // 5.1) Append the related hash to the data to hash.
            md.update(hash);
            // 5.2) Create a string chosen path.
            let chosenPath = '';
            // 5.3) Create an unset chosen issuer variable.
            let chosenIssuer;
            // 5.4) For each permutation of blank node list:
            const permuter = new Permuter(hashToRelated.get(hash));
            while(permuter.hasNext()){
                const permutation = permuter.next();
                // 5.4.1) Create a copy of issuer, issuer copy.
                let issuerCopy = issuer.clone();
                // 5.4.2) Create a string path.
                let path = '';
                // 5.4.3) Create a recursion list, to store blank node identifiers
                // that must be recursively processed by this algorithm.
                const recursionList = [];
                // 5.4.4) For each related in permutation:
                let nextPermutation = false;
                for (const related of permutation){
                    // 5.4.4.1) If a canonical identifier has been issued for
                    // related, append it to path.
                    if (this.canonicalIssuer.hasId(related)) path += this.canonicalIssuer.getId(related);
                    else {
                        // 5.4.4.2) Otherwise:
                        // 5.4.4.2.1) If issuer copy has not issued an identifier for
                        // related, append related to recursion list.
                        if (!issuerCopy.hasId(related)) recursionList.push(related);
                        // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
                        // issuer copy and related and append the result to path.
                        path += issuerCopy.getId(related);
                    }
                    // 5.4.4.3) If chosen path is not empty and the length of path
                    // is greater than or equal to the length of chosen path and
                    // path is lexicographically greater than chosen path, then
                    // skip to the next permutation.
                    // Note: Comparing path length to chosen path length can be optimized
                    // away; only compare lexicographically.
                    if (chosenPath.length !== 0 && path > chosenPath) {
                        nextPermutation = true;
                        break;
                    }
                }
                if (nextPermutation) continue;
                // 5.4.5) For each related in recursion list:
                for (const related1 of recursionList){
                    // 5.4.5.1) Set result to the result of recursively executing
                    // the Hash N-Degree Quads algorithm, passing related for
                    // identifier and issuer copy for path identifier issuer.
                    const result = this.hashNDegreeQuads(related1, issuerCopy);
                    // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
                    // copy and related and append the result to path.
                    path += issuerCopy.getId(related1);
                    // 5.4.5.3) Append <, the hash in result, and > to path.
                    path += `<${result.hash}>`;
                    // 5.4.5.4) Set issuer copy to the identifier issuer in
                    // result.
                    issuerCopy = result.issuer;
                    // 5.4.5.5) If chosen path is not empty and the length of path
                    // is greater than or equal to the length of chosen path and
                    // path is lexicographically greater than chosen path, then
                    // skip to the next permutation.
                    // Note: Comparing path length to chosen path length can be optimized
                    // away; only compare lexicographically.
                    if (chosenPath.length !== 0 && path > chosenPath) {
                        nextPermutation = true;
                        break;
                    }
                }
                if (nextPermutation) continue;
                // 5.4.6) If chosen path is empty or path is lexicographically
                // less than chosen path, set chosen path to path and chosen
                // issuer to issuer copy.
                if (chosenPath.length === 0 || path < chosenPath) {
                    chosenPath = path;
                    chosenIssuer = issuerCopy;
                }
            }
            // 5.5) Append chosen path to data to hash.
            md.update(chosenPath);
            // 5.6) Replace issuer, by reference, with chosen issuer.
            issuer = chosenIssuer;
        }
        // 6) Return issuer and the hash that results from passing data to hash
        // through the hash algorithm.
        return {
            hash: md.digest(),
            issuer
        };
    }
    // helper for modifying component during Hash First Degree Quads
    modifyFirstDegreeComponent(id, component) {
        if (component.termType !== 'BlankNode') return component;
        /* Note: A mistake in the URDNA2015 spec that made its way into
    implementations (and therefore must stay to avoid interop breakage)
    resulted in an assigned canonical ID, if available for
    `component.value`, not being used in place of `_:a`/`_:z`, so
    we don't use it here. */ return {
            termType: 'BlankNode',
            value: component.value === id ? '_:a' : '_:z'
        };
    }
    // helper for getting a related predicate
    getRelatedPredicate(quad) {
        return `<${quad.predicate.value}>`;
    }
    // helper for creating hash to related blank nodes map
    createHashToRelated(id, issuer) {
        // 1) Create a hash to related blank nodes map for storing hashes that
        // identify related blank nodes.
        const hashToRelated = new Map();
        // 2) Get a reference, quads, to the list of quads in the blank node to
        // quads map for the key identifier.
        const quads = this.blankNodeInfo.get(id).quads;
        // 3) For each quad in quads:
        for (const quad of quads){
            // 3.1) For each component in quad, if component is the subject, object,
            // or graph name and it is a blank node that is not identified by
            // identifier:
            // steps 3.1.1 and 3.1.2 occur in helpers:
            this._addRelatedBlankNodeHash({
                quad,
                component: quad.subject,
                position: 's',
                id,
                issuer,
                hashToRelated
            });
            this._addRelatedBlankNodeHash({
                quad,
                component: quad.object,
                position: 'o',
                id,
                issuer,
                hashToRelated
            });
            this._addRelatedBlankNodeHash({
                quad,
                component: quad.graph,
                position: 'g',
                id,
                issuer,
                hashToRelated
            });
        }
        return hashToRelated;
    }
    _hashAndTrackBlankNode({ id , hashToBlankNodes  }) {
        // 5.3.1) Create a hash, hash, according to the Hash First Degree
        // Quads algorithm.
        const hash = this.hashFirstDegreeQuads(id);
        // 5.3.2) Add hash and identifier to hash to blank nodes map,
        // creating a new entry if necessary.
        const idList = hashToBlankNodes.get(hash);
        if (!idList) hashToBlankNodes.set(hash, [
            id
        ]);
        else idList.push(id);
    }
    _addBlankNodeQuadInfo({ quad , component  }) {
        if (component.termType !== 'BlankNode') return;
        const id = component.value;
        const info = this.blankNodeInfo.get(id);
        if (info) info.quads.add(quad);
        else this.blankNodeInfo.set(id, {
            quads: new Set([
                quad
            ]),
            hash: null
        });
    }
    _addRelatedBlankNodeHash({ quad , component , position , id , issuer , hashToRelated  }) {
        if (!(component.termType === 'BlankNode' && component.value !== id)) return;
        // 3.1.1) Set hash to the result of the Hash Related Blank Node
        // algorithm, passing the blank node identifier for component as
        // related, quad, path identifier issuer as issuer, and position as
        // either s, o, or g based on whether component is a subject, object,
        // graph name, respectively.
        const related = component.value;
        const hash = this.hashRelatedBlankNode(related, quad, issuer, position);
        // 3.1.2) Add a mapping of hash to the blank node identifier for
        // component to hash to related blank nodes map, adding an entry as
        // necessary.
        const entries = hashToRelated.get(hash);
        if (entries) entries.push(related);
        else hashToRelated.set(hash, [
            related
        ]);
    }
    _useCanonicalId({ component  }) {
        if (component.termType === 'BlankNode' && !component.value.startsWith(this.canonicalIssuer.prefix)) return {
            termType: 'BlankNode',
            value: this.canonicalIssuer.getId(component.value)
        };
        return component;
    }
};
function _stringHashCompare(a, b) {
    return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
}

},{"./IdentifierIssuer":"jRrui","./MessageDigest":"64a6r","./Permuter":"1xJzD","./NQuads":"nD0Xf"}],"54pXs":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const URDNA2015Sync = require('./URDNA2015Sync');
module.exports = class URDNA2012Sync extends URDNA2015Sync {
    constructor(){
        super();
        this.name = 'URGNA2012';
        this.hashAlgorithm = 'sha1';
    }
    // helper for modifying component during Hash First Degree Quads
    modifyFirstDegreeComponent(id, component, key) {
        if (component.termType !== 'BlankNode') return component;
        if (key === 'graph') return {
            termType: 'BlankNode',
            value: '_:g'
        };
        return {
            termType: 'BlankNode',
            value: component.value === id ? '_:a' : '_:z'
        };
    }
    // helper for getting a related predicate
    getRelatedPredicate(quad) {
        return quad.predicate.value;
    }
    // helper for creating hash to related blank nodes map
    createHashToRelated(id, issuer) {
        // 1) Create a hash to related blank nodes map for storing hashes that
        // identify related blank nodes.
        const hashToRelated = new Map();
        // 2) Get a reference, quads, to the list of quads in the blank node to
        // quads map for the key identifier.
        const quads = this.blankNodeInfo.get(id).quads;
        // 3) For each quad in quads:
        for (const quad of quads){
            // 3.1) If the quad's subject is a blank node that does not match
            // identifier, set hash to the result of the Hash Related Blank Node
            // algorithm, passing the blank node identifier for subject as related,
            // quad, path identifier issuer as issuer, and p as position.
            let position;
            let related;
            if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
                related = quad.subject.value;
                position = 'p';
            } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {
                // 3.2) Otherwise, if quad's object is a blank node that does not match
                // identifier, to the result of the Hash Related Blank Node algorithm,
                // passing the blank node identifier for object as related, quad, path
                // identifier issuer as issuer, and r as position.
                related = quad.object.value;
                position = 'r';
            } else continue;
            // 3.4) Add a mapping of hash to the blank node identifier for the
            // component that matched (subject or object) to hash to related blank
            // nodes map, adding an entry as necessary.
            const hash = this.hashRelatedBlankNode(related, quad, issuer, position);
            const entries = hashToRelated.get(hash);
            if (entries) entries.push(related);
            else hashToRelated.set(hash, [
                related
            ]);
        }
        return hashToRelated;
    }
};

},{"./URDNA2015Sync":"c6CTH"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"15sLt":[function(require,module,exports) {
/*
 * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const xhrLoader = require('./documentLoaders/xhr');
const api = {
};
module.exports = api;
/**
 * Setup browser document loaders.
 *
 * @param jsonld the jsonld api.
 */ api.setupDocumentLoaders = function(jsonld) {
    if (typeof XMLHttpRequest !== 'undefined') {
        jsonld.documentLoaders.xhr = xhrLoader;
        // use xhr document loader by default
        jsonld.useDocumentLoader('xhr');
    }
};
/**
 * Setup browser globals.
 *
 * @param jsonld the jsonld api.
 */ api.setupGlobals = function(jsonld) {
    // setup browser global JsonLdProcessor
    if (typeof globalThis.JsonLdProcessor === 'undefined') Object.defineProperty(globalThis, 'JsonLdProcessor', {
        writable: true,
        enumerable: false,
        configurable: true,
        value: jsonld.JsonLdProcessor
    });
};

},{"./documentLoaders/xhr":"dMT3y"}],"dMT3y":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const { parseLinkHeader , buildHeaders  } = require('../util');
const { LINK_HEADER_CONTEXT  } = require('../constants');
const JsonLdError = require('../JsonLdError');
const RequestQueue = require('../RequestQueue');
const { prependBase  } = require('../url');
const REGEX_LINK_HEADER = /(^|(\r\n))link:/i;
/**
 * Creates a built-in XMLHttpRequest document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          headers: an object (map) of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *          [xhr]: the XMLHttpRequest API to use.
 *
 * @return the XMLHttpRequest document loader.
 */ module.exports = ({ secure , headers ={
} , xhr  } = {
    headers: {
    }
})=>{
    headers = buildHeaders(headers);
    const queue = new RequestQueue();
    async function loader(url) {
        if (url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
            throw new JsonLdError("URL could not be dereferenced; only \"http\" and \"https\" URLs are supported.", 'jsonld.InvalidUrl', {
                code: 'loading document failed',
                url
            });
        }
        if (secure && url.indexOf('https') !== 0) {
            throw new JsonLdError("URL could not be dereferenced; secure mode is enabled and the URL's scheme is not \"https\".", 'jsonld.InvalidUrl', {
                code: 'loading document failed',
                url
            });
        }
        let req;
        try {
            req = await _get(xhr, url, headers);
        } catch (e) {
            throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {
                code: 'loading document failed',
                url,
                cause: e
            });
        }
        if (req.status >= 400) {
            throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {
                code: 'loading document failed',
                url,
                httpStatusCode: req.status
            });
        }
        let doc = {
            contextUrl: null,
            documentUrl: url,
            document: req.response
        };
        let alternate = null;
        // handle Link Header (avoid unsafe header warning by existence testing)
        const contentType = req.getResponseHeader('Content-Type');
        let linkHeader;
        if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {
            linkHeader = req.getResponseHeader('Link');
        }
        if (linkHeader && contentType !== 'application/ld+json') {
            // only 1 related link header permitted
            const linkHeaders = parseLinkHeader(linkHeader);
            const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];
            if (Array.isArray(linkedContext)) {
                throw new JsonLdError("URL could not be dereferenced, it has more than one associated HTTP Link Header.", 'jsonld.InvalidUrl', {
                    code: 'multiple context link headers',
                    url
                });
            }
            if (linkedContext) {
                doc.contextUrl = linkedContext.target;
            }
            // "alternate" link header is a redirect
            alternate = linkHeaders['alternate'];
            if (alternate && alternate.type == 'application/ld+json' && !(contentType || '').match(/^application\/(\w*\+)?json$/)) {
                doc = await loader(prependBase(url, alternate.target));
            }
        }
        return doc;
    }
    return queue.wrapLoader(loader);
};
function _get(xhr, url, headers) {
    xhr = xhr || XMLHttpRequest;
    const req = new xhr();
    return new Promise((resolve, reject)=>{
        req.onload = ()=>resolve(req)
        ;
        req.onerror = (err)=>reject(err)
        ;
        req.open('GET', url, true);
        for(const k in headers)req.setRequestHeader(k, headers[k]);
        req.send();
    });
}

},{"../util":"ir9k4","../constants":"bST2R","../JsonLdError":"9sDAJ","../RequestQueue":"kaTq8","../url":"ifth8"}],"ir9k4":[function(require,module,exports) {
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const graphTypes = require('./graphTypes');
const types = require('./types');
// TODO: move `IdentifierIssuer` to its own package
const IdentifierIssuer = require('rdf-canonize').IdentifierIssuer;
const JsonLdError = require('./JsonLdError');
// constants
const REGEX_LINK_HEADERS = /(?:<[^>]*?>|"[^"]*?"|[^,])+/g;
const REGEX_LINK_HEADER = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
const REGEX_LINK_HEADER_PARAMS = /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
const DEFAULTS = {
    headers: {
        accept: 'application/ld+json, application/json'
    }
};
const api = {
};
module.exports = api;
api.IdentifierIssuer = IdentifierIssuer;
/**
 * Clones an object, array, Map, Set, or string/number. If a typed JavaScript
 * object is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */ api.clone = function(value) {
    if (value && typeof value === 'object') {
        let rval;
        if (types.isArray(value)) {
            rval = [];
            for(let i = 0; i < value.length; ++i)rval[i] = api.clone(value[i]);
        } else if (value instanceof Map) {
            rval = new Map();
            for (const [k, v] of value)rval.set(k, api.clone(v));
        } else if (value instanceof Set) {
            rval = new Set();
            for (const v of value)rval.add(api.clone(v));
        } else if (types.isObject(value)) {
            rval = {
            };
            for(const key in value)rval[key] = api.clone(value[key]);
        } else rval = value.toString();
        return rval;
    }
    return value;
};
/**
 * Ensure a value is an array. If the value is an array, it is returned.
 * Otherwise, it is wrapped in an array.
 *
 * @param value the value to return as an array.
 *
 * @return the value as an array.
 */ api.asArray = function(value) {
    return Array.isArray(value) ? value : [
        value
    ];
};
/**
 * Builds an HTTP headers object for making a JSON-LD request from custom
 * headers and asserts the `accept` header isn't overridden.
 *
 * @param headers an object of headers with keys as header names and values
 *          as header values.
 *
 * @return an object of headers with a valid `accept` header.
 */ api.buildHeaders = (headers = {
})=>{
    const hasAccept = Object.keys(headers).some((h)=>h.toLowerCase() === 'accept'
    );
    if (hasAccept) throw new RangeError('Accept header may not be specified; only "' + DEFAULTS.headers.accept + '" is supported.');
    return Object.assign({
        Accept: DEFAULTS.headers.accept
    }, headers);
};
/**
 * Parses a link header. The results will be key'd by the value of "rel".
 *
 * Link: <http://json-ld.org/contexts/person.jsonld>;
 * rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
 *
 * Parses as: {
 *   'http://www.w3.org/ns/json-ld#context': {
 *     target: http://json-ld.org/contexts/person.jsonld,
 *     type: 'application/ld+json'
 *   }
 * }
 *
 * If there is more than one "rel" with the same IRI, then entries in the
 * resulting map for that "rel" will be arrays.
 *
 * @param header the link header to parse.
 */ api.parseLinkHeader = (header)=>{
    const rval = {
    };
    // split on unbracketed/unquoted commas
    const entries = header.match(REGEX_LINK_HEADERS);
    for(let i = 0; i < entries.length; ++i){
        let match = entries[i].match(REGEX_LINK_HEADER);
        if (!match) continue;
        const result = {
            target: match[1]
        };
        const params = match[2];
        while(match = REGEX_LINK_HEADER_PARAMS.exec(params))result[match[1]] = match[2] === undefined ? match[3] : match[2];
        const rel = result['rel'] || '';
        if (Array.isArray(rval[rel])) rval[rel].push(result);
        else if (rval.hasOwnProperty(rel)) rval[rel] = [
            rval[rel],
            result
        ];
        else rval[rel] = result;
    }
    return rval;
};
/**
 * Throws an exception if the given value is not a valid @type value.
 *
 * @param v the value to check.
 */ api.validateTypeValue = (v, isFrame)=>{
    if (types.isString(v)) return;
    if (types.isArray(v) && v.every((vv)=>types.isString(vv)
    )) return;
    if (isFrame && types.isObject(v)) switch(Object.keys(v).length){
        case 0:
            // empty object is wildcard
            return;
        case 1:
            // default entry is all strings
            if ('@default' in v && api.asArray(v['@default']).every((vv)=>types.isString(vv)
            )) return;
    }
    throw new JsonLdError("Invalid JSON-LD syntax; \"@type\" value must a string, an array of strings, an empty object, or a default object.", 'jsonld.SyntaxError', {
        code: 'invalid type value',
        value: v
    });
};
/**
 * Returns true if the given subject has the given property.
 *
 * @param subject the subject to check.
 * @param property the property to look for.
 *
 * @return true if the subject has the given property, false if not.
 */ api.hasProperty = (subject, property)=>{
    if (subject.hasOwnProperty(property)) {
        const value = subject[property];
        return !types.isArray(value) || value.length > 0;
    }
    return false;
};
/**
 * Determines if the given value is a property of the given subject.
 *
 * @param subject the subject to check.
 * @param property the property to check.
 * @param value the value to check.
 *
 * @return true if the value exists, false if not.
 */ api.hasValue = (subject, property, value)=>{
    if (api.hasProperty(subject, property)) {
        let val = subject[property];
        const isList = graphTypes.isList(val);
        if (types.isArray(val) || isList) {
            if (isList) val = val['@list'];
            for(let i = 0; i < val.length; ++i){
                if (api.compareValues(value, val[i])) return true;
            }
        } else if (!types.isArray(value)) // avoid matching the set of values with an array value parameter
        return api.compareValues(value, val);
    }
    return false;
};
/**
 * Adds a value to a subject. If the value is an array, all values in the
 * array will be added.
 *
 * @param subject the subject to add the value to.
 * @param property the property that relates the value to the subject.
 * @param value the value to add.
 * @param [options] the options to use:
 *        [propertyIsArray] true if the property is always an array, false
 *          if not (default: false).
 *        [valueIsArray] true if the value to be added should be preserved as
 *          an array (lists) (default: false).
 *        [allowDuplicate] true to allow duplicates, false not to (uses a
 *          simple shallow comparison of subject ID or value) (default: true).
 *        [prependValue] false to prepend value to any existing values.
 *          (default: false)
 */ api.addValue = (subject, property, value, options)=>{
    options = options || {
    };
    if (!('propertyIsArray' in options)) options.propertyIsArray = false;
    if (!('valueIsArray' in options)) options.valueIsArray = false;
    if (!('allowDuplicate' in options)) options.allowDuplicate = true;
    if (!('prependValue' in options)) options.prependValue = false;
    if (options.valueIsArray) subject[property] = value;
    else if (types.isArray(value)) {
        if (value.length === 0 && options.propertyIsArray && !subject.hasOwnProperty(property)) subject[property] = [];
        if (options.prependValue) {
            value = value.concat(subject[property]);
            subject[property] = [];
        }
        for(let i = 0; i < value.length; ++i)api.addValue(subject, property, value[i], options);
    } else if (subject.hasOwnProperty(property)) {
        // check if subject already has value if duplicates not allowed
        const hasValue = !options.allowDuplicate && api.hasValue(subject, property, value);
        // make property an array if value not present or always an array
        if (!types.isArray(subject[property]) && (!hasValue || options.propertyIsArray)) subject[property] = [
            subject[property]
        ];
        // add new value
        if (!hasValue) {
            if (options.prependValue) subject[property].unshift(value);
            else subject[property].push(value);
        }
    } else // add new value as set or single value
    subject[property] = options.propertyIsArray ? [
        value
    ] : value;
};
/**
 * Gets all of the values for a subject's property as an array.
 *
 * @param subject the subject.
 * @param property the property.
 *
 * @return all of the values for a subject's property as an array.
 */ api.getValues = (subject, property)=>[].concat(subject[property] || [])
;
/**
 * Removes a property from a subject.
 *
 * @param subject the subject.
 * @param property the property.
 */ api.removeProperty = (subject, property)=>{
    delete subject[property];
};
/**
 * Removes a value from a subject.
 *
 * @param subject the subject.
 * @param property the property that relates the value to the subject.
 * @param value the value to remove.
 * @param [options] the options to use:
 *          [propertyIsArray] true if the property is always an array, false
 *            if not (default: false).
 */ api.removeValue = (subject, property, value, options)=>{
    options = options || {
    };
    if (!('propertyIsArray' in options)) options.propertyIsArray = false;
    // filter out value
    const values = api.getValues(subject, property).filter((e)=>!api.compareValues(e, value)
    );
    if (values.length === 0) api.removeProperty(subject, property);
    else if (values.length === 1 && !options.propertyIsArray) subject[property] = values[0];
    else subject[property] = values;
};
/**
 * Relabels all blank nodes in the given JSON-LD input.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [issuer] an IdentifierIssuer to use to label blank nodes.
 */ api.relabelBlankNodes = (input, options)=>{
    options = options || {
    };
    const issuer = options.issuer || new IdentifierIssuer('_:b');
    return _labelBlankNodes(issuer, input);
};
/**
 * Compares two JSON-LD values for equality. Two JSON-LD values will be
 * considered equal if:
 *
 * 1. They are both primitives of the same type and value.
 * 2. They are both @values with the same @value, @type, @language,
 *   and @index, OR
 * 3. They both have @ids they are the same.
 *
 * @param v1 the first value.
 * @param v2 the second value.
 *
 * @return true if v1 and v2 are considered equal, false if not.
 */ api.compareValues = (v1, v2)=>{
    // 1. equal primitives
    if (v1 === v2) return true;
    // 2. equal @values
    if (graphTypes.isValue(v1) && graphTypes.isValue(v2) && v1['@value'] === v2['@value'] && v1['@type'] === v2['@type'] && v1['@language'] === v2['@language'] && v1['@index'] === v2['@index']) return true;
    // 3. equal @ids
    if (types.isObject(v1) && '@id' in v1 && types.isObject(v2) && '@id' in v2) return v1['@id'] === v2['@id'];
    return false;
};
/**
 * Compares two strings first based on length and then lexicographically.
 *
 * @param a the first string.
 * @param b the second string.
 *
 * @return -1 if a < b, 1 if a > b, 0 if a === b.
 */ api.compareShortestLeast = (a, b)=>{
    if (a.length < b.length) return -1;
    if (b.length < a.length) return 1;
    if (a === b) return 0;
    return a < b ? -1 : 1;
};
/**
 * Labels the blank nodes in the given value using the given IdentifierIssuer.
 *
 * @param issuer the IdentifierIssuer to use.
 * @param element the element with blank nodes to rename.
 *
 * @return the element.
 */ function _labelBlankNodes(issuer, element) {
    if (types.isArray(element)) for(let i = 0; i < element.length; ++i)element[i] = _labelBlankNodes(issuer, element[i]);
    else if (graphTypes.isList(element)) element['@list'] = _labelBlankNodes(issuer, element['@list']);
    else if (types.isObject(element)) {
        // relabel blank node
        if (graphTypes.isBlankNode(element)) element['@id'] = issuer.getId(element['@id']);
        // recursively apply to all keys
        const keys = Object.keys(element).sort();
        for(let ki = 0; ki < keys.length; ++ki){
            const key = keys[ki];
            if (key !== '@id') element[key] = _labelBlankNodes(issuer, element[key]);
        }
    }
    return element;
}

},{"./graphTypes":"3hVN6","./types":"1u182","rdf-canonize":"630qL","./JsonLdError":"9sDAJ"}],"3hVN6":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const types = require('./types');
const api = {
};
module.exports = api;
/**
 * Returns true if the given value is a subject with properties.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject with properties, false if not.
 */ api.isSubject = (v)=>{
    // Note: A value is a subject if all of these hold true:
    // 1. It is an Object.
    // 2. It is not a @value, @set, or @list.
    // 3. It has more than 1 key OR any existing key is not @id.
    if (types.isObject(v) && !('@value' in v || '@set' in v || '@list' in v)) {
        const keyCount = Object.keys(v).length;
        return keyCount > 1 || !('@id' in v);
    }
    return false;
};
/**
 * Returns true if the given value is a subject reference.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject reference, false if not.
 */ api.isSubjectReference = (v)=>types.isObject(v) && Object.keys(v).length === 1 && '@id' in v
;
/**
 * Returns true if the given value is a @value.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @value, false if not.
 */ api.isValue = (v)=>// Note: A value is a @value if all of these hold true:
    // 1. It is an Object.
    // 2. It has the @value property.
    types.isObject(v) && '@value' in v
;
/**
 * Returns true if the given value is a @list.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @list, false if not.
 */ api.isList = (v)=>// Note: A value is a @list if all of these hold true:
    // 1. It is an Object.
    // 2. It has the @list property.
    types.isObject(v) && '@list' in v
;
/**
 * Returns true if the given value is a @graph.
 *
 * @return true if the value is a @graph, false if not.
 */ api.isGraph = (v)=>{
    // Note: A value is a graph if all of these hold true:
    // 1. It is an object.
    // 2. It has an `@graph` key.
    // 3. It may have '@id' or '@index'
    return types.isObject(v) && '@graph' in v && Object.keys(v).filter((key)=>key !== '@id' && key !== '@index'
    ).length === 1;
};
/**
 * Returns true if the given value is a simple @graph.
 *
 * @return true if the value is a simple @graph, false if not.
 */ api.isSimpleGraph = (v)=>{
    // Note: A value is a simple graph if all of these hold true:
    // 1. It is an object.
    // 2. It has an `@graph` key.
    // 3. It has only 1 key or 2 keys where one of them is `@index`.
    return api.isGraph(v) && !('@id' in v);
};
/**
 * Returns true if the given value is a blank node.
 *
 * @param v the value to check.
 *
 * @return true if the value is a blank node, false if not.
 */ api.isBlankNode = (v)=>{
    // Note: A value is a blank node if all of these hold true:
    // 1. It is an Object.
    // 2. If it has an @id key its value begins with '_:'.
    // 3. It has no keys OR is not a @value, @set, or @list.
    if (types.isObject(v)) {
        if ('@id' in v) return v['@id'].indexOf('_:') === 0;
        return Object.keys(v).length === 0 || !('@value' in v || '@set' in v || '@list' in v);
    }
    return false;
};

},{"./types":"1u182"}],"1u182":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const api = {
};
module.exports = api;
/**
 * Returns true if the given value is an Array.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Array, false if not.
 */ api.isArray = Array.isArray;
/**
 * Returns true if the given value is a Boolean.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Boolean, false if not.
 */ api.isBoolean = (v)=>typeof v === 'boolean' || Object.prototype.toString.call(v) === '[object Boolean]'
;
/**
 * Returns true if the given value is a double.
 *
 * @param v the value to check.
 *
 * @return true if the value is a double, false if not.
 */ api.isDouble = (v)=>api.isNumber(v) && (String(v).indexOf('.') !== -1 || Math.abs(v) >= 1000000000000000000000)
;
/**
 * Returns true if the given value is an empty Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an empty Object, false if not.
 */ api.isEmptyObject = (v)=>api.isObject(v) && Object.keys(v).length === 0
;
/**
 * Returns true if the given value is a Number.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Number, false if not.
 */ api.isNumber = (v)=>typeof v === 'number' || Object.prototype.toString.call(v) === '[object Number]'
;
/**
 * Returns true if the given value is numeric.
 *
 * @param v the value to check.
 *
 * @return true if the value is numeric, false if not.
 */ api.isNumeric = (v)=>!isNaN(parseFloat(v)) && isFinite(v)
;
/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */ api.isObject = (v)=>Object.prototype.toString.call(v) === '[object Object]'
;
/**
 * Returns true if the given value is a String.
 *
 * @param v the value to check.
 *
 * @return true if the value is a String, false if not.
 */ api.isString = (v)=>typeof v === 'string' || Object.prototype.toString.call(v) === '[object String]'
;
/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */ api.isUndefined = (v)=>typeof v === 'undefined'
;

},{}],"9sDAJ":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
module.exports = class JsonLdError extends Error {
    /**
   * Creates a JSON-LD Error.
   *
   * @param msg the error message.
   * @param type the error type.
   * @param details the error details.
   */ constructor(message = 'An unspecified JSON-LD error occurred.', name = 'jsonld.Error', details = {
    }){
        super(message);
        this.name = name;
        this.message = message;
        this.details = details;
    }
};

},{}],"bST2R":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const XSD = 'http://www.w3.org/2001/XMLSchema#';
module.exports = {
    // TODO: Deprecated and will be removed later. Use LINK_HEADER_CONTEXT.
    LINK_HEADER_REL: 'http://www.w3.org/ns/json-ld#context',
    LINK_HEADER_CONTEXT: 'http://www.w3.org/ns/json-ld#context',
    RDF,
    RDF_LIST: RDF + 'List',
    RDF_FIRST: RDF + 'first',
    RDF_REST: RDF + 'rest',
    RDF_NIL: RDF + 'nil',
    RDF_TYPE: RDF + 'type',
    RDF_PLAIN_LITERAL: RDF + 'PlainLiteral',
    RDF_XML_LITERAL: RDF + 'XMLLiteral',
    RDF_JSON_LITERAL: RDF + 'JSON',
    RDF_OBJECT: RDF + 'object',
    RDF_LANGSTRING: RDF + 'langString',
    XSD,
    XSD_BOOLEAN: XSD + 'boolean',
    XSD_DOUBLE: XSD + 'double',
    XSD_INTEGER: XSD + 'integer',
    XSD_STRING: XSD + 'string'
};

},{}],"kaTq8":[function(require,module,exports) {
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
module.exports = class RequestQueue {
    /**
   * Creates a simple queue for requesting documents.
   */ constructor(){
        this._requests = {
        };
    }
    wrapLoader(loader) {
        const self = this;
        self._loader = loader;
        return function() {
            return self.add.apply(self, arguments);
        };
    }
    async add(url) {
        let promise = this._requests[url];
        if (promise) // URL already queued, wait for it to load
        return Promise.resolve(promise);
        // queue URL and load it
        promise = this._requests[url] = this._loader(url);
        try {
            return await promise;
        } finally{
            delete this._requests[url];
        }
    }
};

},{}],"ifth8":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const types = require('./types');
const api = {
};
module.exports = api;
// define URL parser
// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
// with local jsonld.js modifications
api.parsers = {
    simple: {
        // RFC 3986 basic parts
        keys: [
            'href',
            'scheme',
            'authority',
            'path',
            'query',
            'fragment'
        ],
        /* eslint-disable-next-line max-len */ regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
    },
    full: {
        keys: [
            'href',
            'protocol',
            'scheme',
            'authority',
            'auth',
            'user',
            'password',
            'hostname',
            'port',
            'path',
            'directory',
            'file',
            'query',
            'fragment'
        ],
        /* eslint-disable-next-line max-len */ regex: /^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
};
api.parse = (str, parser)=>{
    const parsed = {
    };
    const o = api.parsers[parser || 'full'];
    const m = o.regex.exec(str);
    let i = o.keys.length;
    while(i--)parsed[o.keys[i]] = m[i] === undefined ? null : m[i];
    // remove default ports in found in URLs
    if (parsed.scheme === 'https' && parsed.port === '443' || parsed.scheme === 'http' && parsed.port === '80') {
        parsed.href = parsed.href.replace(':' + parsed.port, '');
        parsed.authority = parsed.authority.replace(':' + parsed.port, '');
        parsed.port = null;
    }
    parsed.normalizedPath = api.removeDotSegments(parsed.path);
    return parsed;
};
/**
 * Prepends a base IRI to the given relative IRI.
 *
 * @param base the base IRI.
 * @param iri the relative IRI.
 *
 * @return the absolute IRI.
 */ api.prependBase = (base, iri)=>{
    // skip IRI processing
    if (base === null) return iri;
    // already an absolute IRI
    if (api.isAbsolute(iri)) return iri;
    // parse base if it is a string
    if (!base || types.isString(base)) base = api.parse(base || '');
    // parse given IRI
    const rel = api.parse(iri);
    // per RFC3986 5.2.2
    const transform = {
        protocol: base.protocol || ''
    };
    if (rel.authority !== null) {
        transform.authority = rel.authority;
        transform.path = rel.path;
        transform.query = rel.query;
    } else {
        transform.authority = base.authority;
        if (rel.path === '') {
            transform.path = base.path;
            if (rel.query !== null) transform.query = rel.query;
            else transform.query = base.query;
        } else {
            if (rel.path.indexOf('/') === 0) // IRI represents an absolute path
            transform.path = rel.path;
            else {
                // merge paths
                let path = base.path;
                // append relative path to the end of the last directory from base
                path = path.substr(0, path.lastIndexOf('/') + 1);
                if ((path.length > 0 || base.authority) && path.substr(-1) !== '/') path += '/';
                path += rel.path;
                transform.path = path;
            }
            transform.query = rel.query;
        }
    }
    if (rel.path !== '') // remove slashes and dots in path
    transform.path = api.removeDotSegments(transform.path);
    // construct URL
    let rval = transform.protocol;
    if (transform.authority !== null) rval += '//' + transform.authority;
    rval += transform.path;
    if (transform.query !== null) rval += '?' + transform.query;
    if (rel.fragment !== null) rval += '#' + rel.fragment;
    // handle empty base
    if (rval === '') rval = './';
    return rval;
};
/**
 * Removes a base IRI from the given absolute IRI.
 *
 * @param base the base IRI.
 * @param iri the absolute IRI.
 *
 * @return the relative IRI if relative to base, otherwise the absolute IRI.
 */ api.removeBase = (base, iri)=>{
    // skip IRI processing
    if (base === null) return iri;
    if (!base || types.isString(base)) base = api.parse(base || '');
    // establish base root
    let root = '';
    if (base.href !== '') root += (base.protocol || '') + '//' + (base.authority || '');
    else if (iri.indexOf('//')) // support network-path reference with empty base
    root += '//';
    // IRI not relative to base
    if (iri.indexOf(root) !== 0) return iri;
    // remove root from IRI and parse remainder
    const rel = api.parse(iri.substr(root.length));
    // remove path segments that match (do not remove last segment unless there
    // is a hash or query)
    const baseSegments = base.normalizedPath.split('/');
    const iriSegments = rel.normalizedPath.split('/');
    const last = rel.fragment || rel.query ? 0 : 1;
    while(baseSegments.length > 0 && iriSegments.length > last){
        if (baseSegments[0] !== iriSegments[0]) break;
        baseSegments.shift();
        iriSegments.shift();
    }
    // use '../' for each non-matching base segment
    let rval = '';
    if (baseSegments.length > 0) {
        // don't count the last segment (if it ends with '/' last path doesn't
        // count and if it doesn't end with '/' it isn't a path)
        baseSegments.pop();
        for(let i = 0; i < baseSegments.length; ++i)rval += '../';
    }
    // prepend remaining segments
    rval += iriSegments.join('/');
    // add query and hash
    if (rel.query !== null) rval += '?' + rel.query;
    if (rel.fragment !== null) rval += '#' + rel.fragment;
    // handle empty base
    if (rval === '') rval = './';
    return rval;
};
/**
 * Removes dot segments from a URL path.
 *
 * @param path the path to remove dot segments from.
 */ api.removeDotSegments = (path)=>{
    // RFC 3986 5.2.4 (reworked)
    // empty path shortcut
    if (path.length === 0) return '';
    const input = path.split('/');
    const output = [];
    while(input.length > 0){
        const next = input.shift();
        const done = input.length === 0;
        if (next === '.') {
            if (done) // ensure output has trailing /
            output.push('');
            continue;
        }
        if (next === '..') {
            output.pop();
            if (done) // ensure output has trailing /
            output.push('');
            continue;
        }
        output.push(next);
    }
    // if path was absolute, ensure output has leading /
    if (path[0] === '/' && output.length > 0 && output[0] !== '') output.unshift('');
    if (output.length === 1 && output[0] === '') return '/';
    return output.join('/');
};
// TODO: time better isAbsolute/isRelative checks using full regexes:
// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html
// regex to check for absolute IRI (starting scheme and ':') or blank node IRI
const isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;
/**
 * Returns true if the given value is an absolute IRI or blank node IRI, false
 * if not.
 * Note: This weak check only checks for a correct starting scheme.
 *
 * @param v the value to check.
 *
 * @return true if the value is an absolute IRI, false if not.
 */ api.isAbsolute = (v)=>types.isString(v) && isAbsoluteRegex.test(v)
;
/**
 * Returns true if the given value is a relative IRI, false if not.
 * Note: this is a weak check.
 *
 * @param v the value to check.
 *
 * @return true if the value is a relative IRI, false if not.
 */ api.isRelative = (v)=>types.isString(v)
;

},{"./types":"1u182"}],"5OeWv":[function(require,module,exports) {
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const { isArray: _isArray , isObject: _isObject , isString: _isString ,  } = require('./types');
const { asArray: _asArray  } = require('./util');
const { prependBase  } = require('./url');
const JsonLdError = require('./JsonLdError');
const ResolvedContext = require('./ResolvedContext');
const MAX_CONTEXT_URLS = 10;
module.exports = class ContextResolver {
    /**
   * Creates a ContextResolver.
   *
   * @param sharedCache a shared LRU cache with `get` and `set` APIs.
   */ constructor({ sharedCache  }){
        this.perOpCache = new Map();
        this.sharedCache = sharedCache;
    }
    async resolve({ activeCtx , context , documentLoader , base , cycles =new Set()  }) {
        // process `@context`
        if (context && _isObject(context) && context['@context']) context = context['@context'];
        // context is one or more contexts
        context = _asArray(context);
        // resolve each context in the array
        const allResolved = [];
        for (const ctx of context){
            if (_isString(ctx)) {
                // see if `ctx` has been resolved before...
                let resolved = this._get(ctx);
                if (!resolved) // not resolved yet, resolve
                resolved = await this._resolveRemoteContext({
                    activeCtx,
                    url: ctx,
                    documentLoader,
                    base,
                    cycles
                });
                // add to output and continue
                if (_isArray(resolved)) allResolved.push(...resolved);
                else allResolved.push(resolved);
                continue;
            }
            if (ctx === null) {
                // handle `null` context, nothing to cache
                allResolved.push(new ResolvedContext({
                    document: null
                }));
                continue;
            }
            if (!_isObject(ctx)) _throwInvalidLocalContext(context);
            // context is an object, get/create `ResolvedContext` for it
            const key = JSON.stringify(ctx);
            let resolved = this._get(key);
            if (!resolved) {
                // create a new static `ResolvedContext` and cache it
                resolved = new ResolvedContext({
                    document: ctx
                });
                this._cacheResolvedContext({
                    key,
                    resolved,
                    tag: 'static'
                });
            }
            allResolved.push(resolved);
        }
        return allResolved;
    }
    _get(key) {
        // get key from per operation cache; no `tag` is used with this cache so
        // any retrieved context will always be the same during a single operation
        let resolved = this.perOpCache.get(key);
        if (!resolved) {
            // see if the shared cache has a `static` entry for this URL
            const tagMap = this.sharedCache.get(key);
            if (tagMap) {
                resolved = tagMap.get('static');
                if (resolved) this.perOpCache.set(key, resolved);
            }
        }
        return resolved;
    }
    _cacheResolvedContext({ key , resolved , tag  }) {
        this.perOpCache.set(key, resolved);
        if (tag !== undefined) {
            let tagMap = this.sharedCache.get(key);
            if (!tagMap) {
                tagMap = new Map();
                this.sharedCache.set(key, tagMap);
            }
            tagMap.set(tag, resolved);
        }
        return resolved;
    }
    async _resolveRemoteContext({ activeCtx , url , documentLoader , base , cycles  }) {
        // resolve relative URL and fetch context
        url = prependBase(base, url);
        const { context , remoteDoc  } = await this._fetchContext({
            activeCtx,
            url,
            documentLoader,
            cycles
        });
        // update base according to remote document and resolve any relative URLs
        base = remoteDoc.documentUrl || url;
        _resolveContextUrls({
            context,
            base
        });
        // resolve, cache, and return context
        const resolved = await this.resolve({
            activeCtx,
            context,
            documentLoader,
            base,
            cycles
        });
        this._cacheResolvedContext({
            key: url,
            resolved,
            tag: remoteDoc.tag
        });
        return resolved;
    }
    async _fetchContext({ activeCtx , url , documentLoader , cycles  }) {
        // check for max context URLs fetched during a resolve operation
        if (cycles.size > MAX_CONTEXT_URLS) throw new JsonLdError('Maximum number of @context URLs exceeded.', 'jsonld.ContextUrlError', {
            code: activeCtx.processingMode === 'json-ld-1.0' ? 'loading remote context failed' : 'context overflow',
            max: MAX_CONTEXT_URLS
        });
        // check for context URL cycle
        // shortcut to avoid extra work that would eventually hit the max above
        if (cycles.has(url)) throw new JsonLdError('Cyclical @context URLs detected.', 'jsonld.ContextUrlError', {
            code: activeCtx.processingMode === 'json-ld-1.0' ? 'recursive context inclusion' : 'context overflow',
            url
        });
        // track cycles
        cycles.add(url);
        let context;
        let remoteDoc;
        try {
            remoteDoc = await documentLoader(url);
            context = remoteDoc.document || null;
            // parse string context as JSON
            if (_isString(context)) context = JSON.parse(context);
        } catch (e) {
            throw new JsonLdError("Dereferencing a URL did not result in a valid JSON-LD object. Possible causes are an inaccessible URL perhaps due to a same-origin policy (ensure the server uses CORS if you are using client-side JavaScript), too many redirects, a non-JSON response, or more than one HTTP Link Header was provided for a remote context.", 'jsonld.InvalidUrl', {
                code: 'loading remote context failed',
                url,
                cause: e
            });
        }
        // ensure ctx is an object
        if (!_isObject(context)) throw new JsonLdError("Dereferencing a URL did not result in a JSON object. The response was valid JSON, but it was not a JSON object.", 'jsonld.InvalidUrl', {
            code: 'invalid remote context',
            url
        });
        // use empty context if no @context key is present
        if (!('@context' in context)) context = {
            '@context': {
            }
        };
        else context = {
            '@context': context['@context']
        };
        // append @context URL to context if given
        if (remoteDoc.contextUrl) {
            if (!_isArray(context['@context'])) context['@context'] = [
                context['@context']
            ];
            context['@context'].push(remoteDoc.contextUrl);
        }
        return {
            context,
            remoteDoc
        };
    }
};
function _throwInvalidLocalContext(ctx) {
    throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {
        code: 'invalid local context',
        context: ctx
    });
}
/**
 * Resolve all relative `@context` URLs in the given context by inline
 * replacing them with absolute URLs.
 *
 * @param context the context.
 * @param base the base IRI to use to resolve relative IRIs.
 */ function _resolveContextUrls({ context , base  }) {
    if (!context) return;
    const ctx = context['@context'];
    if (_isString(ctx)) {
        context['@context'] = prependBase(base, ctx);
        return;
    }
    if (_isArray(ctx)) {
        for(let i = 0; i < ctx.length; ++i){
            const element = ctx[i];
            if (_isString(element)) {
                ctx[i] = prependBase(base, element);
                continue;
            }
            if (_isObject(element)) _resolveContextUrls({
                context: {
                    '@context': element
                },
                base
            });
        }
        return;
    }
    if (!_isObject(ctx)) // no @context URLs can be found in non-object
    return;
    // ctx is an object, resolve any context URLs in terms
    for(const term in ctx)_resolveContextUrls({
        context: ctx[term],
        base
    });
}

},{"./types":"1u182","./util":"ir9k4","./url":"ifth8","./JsonLdError":"9sDAJ","./ResolvedContext":"c9fOj"}],"c9fOj":[function(require,module,exports) {
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const LRU = require('lru-cache');
const MAX_ACTIVE_CONTEXTS = 10;
module.exports = class ResolvedContext {
    /**
   * Creates a ResolvedContext.
   *
   * @param document the context document.
   */ constructor({ document  }){
        this.document = document;
        // TODO: enable customization of processed context cache
        // TODO: limit based on size of processed contexts vs. number of them
        this.cache = new LRU({
            max: MAX_ACTIVE_CONTEXTS
        });
    }
    getProcessed(activeCtx) {
        return this.cache.get(activeCtx);
    }
    setProcessed(activeCtx, processedCtx) {
        this.cache.set(activeCtx, processedCtx);
    }
};

},{"lru-cache":"26bTZ"}],"26bTZ":[function(require,module,exports) {
'use strict';
// A linked list to keep track of recently-used-ness
const Yallist = require('yallist');
const MAX = Symbol('max');
const LENGTH = Symbol('length');
const LENGTH_CALCULATOR = Symbol('lengthCalculator');
const ALLOW_STALE = Symbol('allowStale');
const MAX_AGE = Symbol('maxAge');
const DISPOSE = Symbol('dispose');
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
const LRU_LIST = Symbol('lruList');
const CACHE = Symbol('cache');
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');
const naiveLength = ()=>1
;
// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
    constructor(options){
        if (typeof options === 'number') options = {
            max: options
        };
        if (!options) options = {
        };
        if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number');
        // Kind of weird to have a default max of Infinity, but oh well.
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
        if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
        this[MAX] = mL || Infinity;
        trim(this);
    }
    get max() {
        return this[MAX];
    }
    set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
        return this[ALLOW_STALE];
    }
    set maxAge(mA) {
        if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
        this[MAX_AGE] = mA;
        trim(this);
    }
    get maxAge() {
        return this[MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
        if (typeof lC !== 'function') lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC;
            this[LENGTH] = 0;
            this[LRU_LIST].forEach((hit)=>{
                hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
                this[LENGTH] += hit.length;
            });
        }
        trim(this);
    }
    get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
    }
    get length() {
        return this[LENGTH];
    }
    get itemCount() {
        return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].tail; walker !== null;){
            const prev = walker.prev;
            forEachStep(this, fn, walker, thisp);
            walker = prev;
        }
    }
    forEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].head; walker !== null;){
            const next = walker.next;
            forEachStep(this, fn, walker, thisp);
            walker = next;
        }
    }
    keys() {
        return this[LRU_LIST].toArray().map((k)=>k.key
        );
    }
    values() {
        return this[LRU_LIST].toArray().map((k)=>k.value
        );
    }
    reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) this[LRU_LIST].forEach((hit)=>this[DISPOSE](hit.key, hit.value)
        );
        this[CACHE] = new Map() // hash of items by key
        ;
        this[LRU_LIST] = new Yallist() // list of items in order of use recency
        ;
        this[LENGTH] = 0 // length of items in the list
        ;
    }
    dump() {
        return this[LRU_LIST].map((hit)=>isStale(this, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
            }
        ).toArray().filter((h)=>h
        );
    }
    dumpLru() {
        return this[LRU_LIST];
    }
    set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
            if (len > this[MAX]) {
                del(this, this[CACHE].get(key));
                return false;
            }
            const node = this[CACHE].get(key);
            const item = node.value;
            // dispose of the old one before overwriting
            // split out into 2 ifs for better coverage tracking
            if (this[DISPOSE]) {
                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
            }
            item.now = now;
            item.maxAge = maxAge;
            item.value = value;
            this[LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            trim(this);
            return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        // oversized objects fall out of cache automatically.
        if (hit.length > this[MAX]) {
            if (this[DISPOSE]) this[DISPOSE](key, value);
            return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
    }
    has(key) {
        if (!this[CACHE].has(key)) return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
    }
    get(key) {
        return get(this, key, true);
    }
    peek(key) {
        return get(this, key, false);
    }
    pop() {
        const node = this[LRU_LIST].tail;
        if (!node) return null;
        del(this, node);
        return node.value;
    }
    del(key) {
        del(this, this[CACHE].get(key));
    }
    load(arr) {
        // reset the cache
        this.reset();
        const now = Date.now();
        // A previous serialized cache has the most recent items first
        for(let l = arr.length - 1; l >= 0; l--){
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0) // the item was created without expiration in a non aged cache
            this.set(hit.k, hit.v);
            else {
                const maxAge = expiresAt - now;
                // dont add already expired items
                if (maxAge > 0) this.set(hit.k, hit.v, maxAge);
            }
        }
    }
    prune() {
        this[CACHE].forEach((value, key)=>get(this, key, false)
        );
    }
}
const get = (self, key, doUse)=>{
    const node = self[CACHE].get(key);
    if (node) {
        const hit = node.value;
        if (isStale(self, hit)) {
            del(self, node);
            if (!self[ALLOW_STALE]) return undefined;
        } else if (doUse) {
            if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
            self[LRU_LIST].unshiftNode(node);
        }
        return hit.value;
    }
};
const isStale = (self, hit)=>{
    if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};
const trim = (self)=>{
    if (self[LENGTH] > self[MAX]) for(let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;){
        // We know that we're about to delete this one, and also
        // what the next least recently used key will be, so just
        // go ahead and set it now.
        const prev = walker.prev;
        del(self, walker);
        walker = prev;
    }
};
const del = (self, node)=>{
    if (node) {
        const hit = node.value;
        if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
        self[LENGTH] -= hit.length;
        self[CACHE].delete(hit.key);
        self[LRU_LIST].removeNode(node);
    }
};
class Entry {
    constructor(key, value, length, now, maxAge){
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
    }
}
const forEachStep = (self, fn, node, thisp)=>{
    let hit = node.value;
    if (isStale(self, hit)) {
        del(self, node);
        if (!self[ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
};
module.exports = LRUCache;

},{"yallist":"7m1YN"}],"7m1YN":[function(require,module,exports) {
'use strict';
module.exports = Yallist;
Yallist.Node = Node;
Yallist.create = Yallist;
function Yallist(list) {
    var self = this;
    if (!(self instanceof Yallist)) self = new Yallist();
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === 'function') list.forEach(function(item) {
        self.push(item);
    });
    else if (arguments.length > 0) for(var i = 0, l = arguments.length; i < l; i++)self.push(arguments[i]);
    return self;
}
Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) throw new Error('removing node which does not belong to this list');
    var next = node.next;
    var prev = node.prev;
    if (next) next.prev = prev;
    if (prev) prev.next = next;
    if (node === this.head) this.head = next;
    if (node === this.tail) this.tail = prev;
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
};
Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) return;
    if (node.list) node.list.removeNode(node);
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) head.prev = node;
    this.head = node;
    if (!this.tail) this.tail = node;
    this.length++;
};
Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) return;
    if (node.list) node.list.removeNode(node);
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) tail.next = node;
    this.tail = node;
    if (!this.head) this.head = node;
    this.length++;
};
Yallist.prototype.push = function() {
    for(var i = 0, l = arguments.length; i < l; i++)push(this, arguments[i]);
    return this.length;
};
Yallist.prototype.unshift = function() {
    for(var i = 0, l = arguments.length; i < l; i++)unshift(this, arguments[i]);
    return this.length;
};
Yallist.prototype.pop = function() {
    if (!this.tail) return undefined;
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) this.tail.next = null;
    else this.head = null;
    this.length--;
    return res;
};
Yallist.prototype.shift = function() {
    if (!this.head) return undefined;
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) this.head.prev = null;
    else this.tail = null;
    this.length--;
    return res;
};
Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.head, i = 0; walker !== null; i++){
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
    }
};
Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
    }
};
Yallist.prototype.get = function(n) {
    for(var i = 0, walker = this.head; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.next;
    if (i === n && walker !== null) return walker.value;
};
Yallist.prototype.getReverse = function(n) {
    for(var i = 0, walker = this.tail; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.prev;
    if (i === n && walker !== null) return walker.value;
};
Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.head; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
    }
    return res;
};
Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.tail; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
    }
    return res;
};
Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) acc = initial;
    else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
    } else throw new TypeError('Reduce of empty list with no initial value');
    for(var i = 0; walker !== null; i++){
        acc = fn(acc, walker.value, i);
        walker = walker.next;
    }
    return acc;
};
Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) acc = initial;
    else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
    } else throw new TypeError('Reduce of empty list with no initial value');
    for(var i = this.length - 1; walker !== null; i--){
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
    }
    return acc;
};
Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.head; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.next;
    }
    return arr;
};
Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.tail; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.prev;
    }
    return arr;
};
Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = 0, walker = this.head; walker !== null && i < from; i++)walker = walker.next;
    for(; walker !== null && i < to; i++, walker = walker.next)ret.push(walker.value);
    return ret;
};
Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--)walker = walker.prev;
    for(; walker !== null && i > from; i--, walker = walker.prev)ret.push(walker.value);
    return ret;
};
Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    if (start > this.length) start = this.length - 1;
    if (start < 0) start = this.length + start;
    for(var i = 0, walker = this.head; walker !== null && i < start; i++)walker = walker.next;
    var ret = [];
    for(var i = 0; walker && i < deleteCount; i++){
        ret.push(walker.value);
        walker = this.removeNode(walker);
    }
    if (walker === null) walker = this.tail;
    if (walker !== this.head && walker !== this.tail) walker = walker.prev;
    for(var i = 0; i < nodes.length; i++)walker = insert(this, walker, nodes[i]);
    return ret;
};
Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for(var walker = head; walker !== null; walker = walker.prev){
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
};
function insert(self, node, value) {
    var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);
    if (inserted.next === null) self.tail = inserted;
    if (inserted.prev === null) self.head = inserted;
    self.length++;
    return inserted;
}
function push(self, item) {
    self.tail = new Node(item, self.tail, null, self);
    if (!self.head) self.head = self.tail;
    self.length++;
}
function unshift(self, item) {
    self.head = new Node(item, null, self.head, self);
    if (!self.tail) self.tail = self.head;
    self.length++;
}
function Node(value, prev, next, list) {
    if (!(this instanceof Node)) return new Node(value, prev, next, list);
    this.list = list;
    this.value = value;
    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else this.prev = null;
    if (next) {
        next.prev = this;
        this.next = next;
    } else this.next = null;
}
try {
    // add if support for Symbol.iterator is present
    require('./iterator.js')(Yallist);
} catch (er) {
}

},{"./iterator.js":"8T9JN"}],"8T9JN":[function(require,module,exports) {
'use strict';
module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function*() {
        for(let walker = this.head; walker; walker = walker.next)yield walker.value;
    };
};

},{}],"2V4Z0":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
// TODO: move `NQuads` to its own package
module.exports = require('rdf-canonize').NQuads;

},{"rdf-canonize":"630qL"}],"8tE9j":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const JsonLdError = require('./JsonLdError');
const { isArray: _isArray , isObject: _isObject , isEmptyObject: _isEmptyObject , isString: _isString , isUndefined: _isUndefined  } = require('./types');
const { isList: _isList , isValue: _isValue , isGraph: _isGraph , isSubject: _isSubject  } = require('./graphTypes');
const { expandIri: _expandIri , getContextValue: _getContextValue , isKeyword: _isKeyword , process: _processContext , processingMode: _processingMode  } = require('./context');
const { isAbsolute: _isAbsoluteIri  } = require('./url');
const { addValue: _addValue , asArray: _asArray , getValues: _getValues , validateTypeValue: _validateTypeValue  } = require('./util');
const api = {
};
module.exports = api;
const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
/**
 * Recursively expands an element using the given context. Any context in
 * the element will be removed. All context URLs must have been retrieved
 * before calling this method.
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element, null for none.
 * @param element the element to expand.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param insideIndex true if the element is inside an index container,
 *          false if not.
 * @param typeScopedContext an optional type-scoped active context for
 *          expanding values of nodes that were expressed according to
 *          a type-scoped context.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 *
 * @return a Promise that resolves to the expanded value.
 */ api.expand = async ({ activeCtx , activeProperty =null , element , options ={
} , insideList =false , insideIndex =false , typeScopedContext =null , expansionMap =()=>undefined
  })=>{
    // nothing to expand
    if (element === null || element === undefined) return null;
    // disable framing if activeProperty is @default
    if (activeProperty === '@default') options = Object.assign({
    }, options, {
        isFrame: false
    });
    if (!_isArray(element) && !_isObject(element)) {
        // drop free-floating scalars that are not in lists unless custom mapped
        if (!insideList && (activeProperty === null || _expandIri(activeCtx, activeProperty, {
            vocab: true
        }, options) === '@graph')) {
            const mapped = await expansionMap({
                unmappedValue: element,
                activeCtx,
                activeProperty,
                options,
                insideList
            });
            if (mapped === undefined) return null;
            return mapped;
        }
        // expand element according to value expansion rules
        return _expandValue({
            activeCtx,
            activeProperty,
            value: element,
            options
        });
    }
    // recursively expand array
    if (_isArray(element)) {
        let rval = [];
        const container = _getContextValue(activeCtx, activeProperty, '@container') || [];
        insideList = insideList || container.includes('@list');
        for(let i = 0; i < element.length; ++i){
            // expand element
            let e = await api.expand({
                activeCtx,
                activeProperty,
                element: element[i],
                options,
                expansionMap,
                insideIndex,
                typeScopedContext
            });
            if (insideList && _isArray(e)) e = {
                '@list': e
            };
            if (e === null) {
                e = await expansionMap({
                    unmappedValue: element[i],
                    activeCtx,
                    activeProperty,
                    parent: element,
                    index: i,
                    options,
                    expandedParent: rval,
                    insideList
                });
                if (e === undefined) continue;
            }
            if (_isArray(e)) rval = rval.concat(e);
            else rval.push(e);
        }
        return rval;
    }
    // recursively expand object:
    // first, expand the active property
    const expandedActiveProperty = _expandIri(activeCtx, activeProperty, {
        vocab: true
    }, options);
    // Get any property-scoped context for activeProperty
    const propertyScopedCtx = _getContextValue(activeCtx, activeProperty, '@context');
    // second, determine if any type-scoped context should be reverted; it
    // should only be reverted when the following are all true:
    // 1. `element` is not a value or subject reference
    // 2. `insideIndex` is false
    typeScopedContext = typeScopedContext || (activeCtx.previousContext ? activeCtx : null);
    let keys = Object.keys(element).sort();
    let mustRevert = !insideIndex;
    if (mustRevert && typeScopedContext && keys.length <= 2 && !keys.includes('@context')) for (const key of keys){
        const expandedProperty = _expandIri(typeScopedContext, key, {
            vocab: true
        }, options);
        if (expandedProperty === '@value') {
            // value found, ensure type-scoped context is used to expand it
            mustRevert = false;
            activeCtx = typeScopedContext;
            break;
        }
        if (expandedProperty === '@id' && keys.length === 1) {
            // subject reference found, do not revert
            mustRevert = false;
            break;
        }
    }
    if (mustRevert) // revert type scoped context
    activeCtx = activeCtx.revertToPreviousContext();
    // apply property-scoped context after reverting term-scoped context
    if (!_isUndefined(propertyScopedCtx)) activeCtx = await _processContext({
        activeCtx,
        localCtx: propertyScopedCtx,
        propagate: true,
        overrideProtected: true,
        options
    });
    // if element has a context, process it
    if ('@context' in element) activeCtx = await _processContext({
        activeCtx,
        localCtx: element['@context'],
        options
    });
    // set the type-scoped context to the context on input, for use later
    typeScopedContext = activeCtx;
    // Remember the first key found expanding to @type
    let typeKey = null;
    // look for scoped contexts on `@type`
    for (const key1 of keys){
        const expandedProperty = _expandIri(activeCtx, key1, {
            vocab: true
        }, options);
        if (expandedProperty === '@type') {
            // set scoped contexts from @type
            // avoid sorting if possible
            typeKey = typeKey || key1;
            const value = element[key1];
            const types = Array.isArray(value) ? value.length > 1 ? value.slice().sort() : value : [
                value
            ];
            for (const type of types){
                const ctx = _getContextValue(typeScopedContext, type, '@context');
                if (!_isUndefined(ctx)) activeCtx = await _processContext({
                    activeCtx,
                    localCtx: ctx,
                    options,
                    propagate: false
                });
            }
        }
    }
    // process each key and value in element, ignoring @nest content
    let rval = {
    };
    await _expandObject({
        activeCtx,
        activeProperty,
        expandedActiveProperty,
        element,
        expandedParent: rval,
        options,
        insideList,
        typeKey,
        typeScopedContext,
        expansionMap
    });
    // get property count on expanded output
    keys = Object.keys(rval);
    let count = keys.length;
    if ('@value' in rval) {
        // @value must only have @language or @type
        if ('@type' in rval && ('@language' in rval || '@direction' in rval)) throw new JsonLdError("Invalid JSON-LD syntax; an element containing \"@value\" may not contain both \"@type\" and either \"@language\" or \"@direction\".", 'jsonld.SyntaxError', {
            code: 'invalid value object',
            element: rval
        });
        let validCount = count - 1;
        if ('@type' in rval) validCount -= 1;
        if ('@index' in rval) validCount -= 1;
        if ('@language' in rval) validCount -= 1;
        if ('@direction' in rval) validCount -= 1;
        if (validCount !== 0) throw new JsonLdError("Invalid JSON-LD syntax; an element containing \"@value\" may only have an \"@index\" property and either \"@type\" or either or both \"@language\" or \"@direction\".", 'jsonld.SyntaxError', {
            code: 'invalid value object',
            element: rval
        });
        const values = rval['@value'] === null ? [] : _asArray(rval['@value']);
        const types = _getValues(rval, '@type');
        // drop null @values unless custom mapped
        if (_processingMode(activeCtx, 1.1) && types.includes('@json') && types.length === 1) ;
        else if (values.length === 0) {
            const mapped = await expansionMap({
                unmappedValue: rval,
                activeCtx,
                activeProperty,
                element,
                options,
                insideList
            });
            if (mapped !== undefined) rval = mapped;
            else rval = null;
        } else if (!values.every((v)=>_isString(v) || _isEmptyObject(v)
        ) && '@language' in rval) // if @language is present, @value must be a string
        throw new JsonLdError('Invalid JSON-LD syntax; only strings may be language-tagged.', 'jsonld.SyntaxError', {
            code: 'invalid language-tagged value',
            element: rval
        });
        else if (!types.every((t)=>_isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) || _isEmptyObject(t)
        )) throw new JsonLdError("Invalid JSON-LD syntax; an element containing \"@value\" and \"@type\" must have an absolute IRI for the value of \"@type\".", 'jsonld.SyntaxError', {
            code: 'invalid typed value',
            element: rval
        });
    } else if ('@type' in rval && !_isArray(rval['@type'])) // convert @type to an array
    rval['@type'] = [
        rval['@type']
    ];
    else if ('@set' in rval || '@list' in rval) {
        // handle @set and @list
        if (count > 1 && !(count === 2 && '@index' in rval)) throw new JsonLdError("Invalid JSON-LD syntax; if an element has the property \"@set\" or \"@list\", then it can have at most one other property that is \"@index\".", 'jsonld.SyntaxError', {
            code: 'invalid set or list object',
            element: rval
        });
        // optimize away @set
        if ('@set' in rval) {
            rval = rval['@set'];
            keys = Object.keys(rval);
            count = keys.length;
        }
    } else if (count === 1 && '@language' in rval) {
        // drop objects with only @language unless custom mapped
        const mapped = await expansionMap(rval, {
            unmappedValue: rval,
            activeCtx,
            activeProperty,
            element,
            options,
            insideList
        });
        if (mapped !== undefined) rval = mapped;
        else rval = null;
    }
    // drop certain top-level objects that do not occur in lists, unless custom
    // mapped
    if (_isObject(rval) && !options.keepFreeFloatingNodes && !insideList && (activeProperty === null || expandedActiveProperty === '@graph')) // drop empty object, top-level @value/@list, or object with only @id
    {
        if (count === 0 || '@value' in rval || '@list' in rval || count === 1 && '@id' in rval) {
            const mapped = await expansionMap({
                unmappedValue: rval,
                activeCtx,
                activeProperty,
                element,
                options,
                insideList
            });
            if (mapped !== undefined) rval = mapped;
            else rval = null;
        }
    }
    return rval;
};
/**
 * Expand each key and value of element adding to result
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element.
 * @param expandedActiveProperty the expansion of activeProperty
 * @param element the element to expand.
 * @param expandedParent the expanded result into which to add values.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param typeKey first key found expanding to @type.
 * @param typeScopedContext the context before reverting.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 */ async function _expandObject({ activeCtx , activeProperty , expandedActiveProperty , element , expandedParent , options ={
} , insideList , typeKey , typeScopedContext , expansionMap  }) {
    const keys = Object.keys(element).sort();
    const nests = [];
    let unexpandedValue;
    // Figure out if this is the type for a JSON literal
    const isJsonType = element[typeKey] && _expandIri(activeCtx, _isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey], {
        vocab: true
    }, options) === '@json';
    for (const key3 of keys){
        let value = element[key3];
        let expandedValue;
        // skip @context
        if (key3 === '@context') continue;
        // expand property
        let expandedProperty = _expandIri(activeCtx, key3, {
            vocab: true
        }, options);
        // drop non-absolute IRI keys that aren't keywords unless custom mapped
        if (expandedProperty === null || !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {
            // TODO: use `await` to support async
            expandedProperty = expansionMap({
                unmappedProperty: key3,
                activeCtx,
                activeProperty,
                parent: element,
                options,
                insideList,
                value,
                expandedParent
            });
            if (expandedProperty === undefined) continue;
        }
        if (_isKeyword(expandedProperty)) {
            if (expandedActiveProperty === '@reverse') throw new JsonLdError("Invalid JSON-LD syntax; a keyword cannot be used as a @reverse property.", 'jsonld.SyntaxError', {
                code: 'invalid reverse property map',
                value
            });
            if (expandedProperty in expandedParent && expandedProperty !== '@included' && expandedProperty !== '@type') throw new JsonLdError('Invalid JSON-LD syntax; colliding keywords detected.', 'jsonld.SyntaxError', {
                code: 'colliding keywords',
                keyword: expandedProperty
            });
        }
        // syntax error if @id is not a string
        if (expandedProperty === '@id') {
            if (!_isString(value)) {
                if (!options.isFrame) throw new JsonLdError('Invalid JSON-LD syntax; "@id" value must a string.', 'jsonld.SyntaxError', {
                    code: 'invalid @id value',
                    value
                });
                if (_isObject(value)) {
                    // empty object is a wildcard
                    if (!_isEmptyObject(value)) throw new JsonLdError("Invalid JSON-LD syntax; \"@id\" value an empty object or array of strings, if framing", 'jsonld.SyntaxError', {
                        code: 'invalid @id value',
                        value
                    });
                } else if (_isArray(value)) {
                    if (!value.every((v)=>_isString(v)
                    )) throw new JsonLdError("Invalid JSON-LD syntax; \"@id\" value an empty object or array of strings, if framing", 'jsonld.SyntaxError', {
                        code: 'invalid @id value',
                        value
                    });
                } else throw new JsonLdError("Invalid JSON-LD syntax; \"@id\" value an empty object or array of strings, if framing", 'jsonld.SyntaxError', {
                    code: 'invalid @id value',
                    value
                });
            }
            _addValue(expandedParent, '@id', _asArray(value).map((v)=>_isString(v) ? _expandIri(activeCtx, v, {
                    base: true
                }, options) : v
            ), {
                propertyIsArray: options.isFrame
            });
            continue;
        }
        if (expandedProperty === '@type') {
            // if framing, can be a default object, but need to expand
            // key to determine that
            if (_isObject(value)) value = Object.fromEntries(Object.entries(value).map(([k, v])=>[
                    _expandIri(typeScopedContext, k, {
                        vocab: true
                    }),
                    _asArray(v).map((vv)=>_expandIri(typeScopedContext, vv, {
                            base: true,
                            vocab: true
                        })
                    )
                ]
            ));
            _validateTypeValue(value, options.isFrame);
            _addValue(expandedParent, '@type', _asArray(value).map((v)=>_isString(v) ? _expandIri(typeScopedContext, v, {
                    base: true,
                    vocab: true
                }, options) : v
            ), {
                propertyIsArray: options.isFrame
            });
            continue;
        }
        // Included blocks are treated as an array of separate object nodes sharing
        // the same referencing active_property.
        // For 1.0, it is skipped as are other unknown keywords
        if (expandedProperty === '@included' && _processingMode(activeCtx, 1.1)) {
            const includedResult = _asArray(await api.expand({
                activeCtx,
                activeProperty,
                element: value,
                options,
                expansionMap
            }));
            // Expanded values must be node objects
            if (!includedResult.every((v)=>_isSubject(v)
            )) throw new JsonLdError("Invalid JSON-LD syntax; values of @included must expand to node objects.", 'jsonld.SyntaxError', {
                code: 'invalid @included value',
                value
            });
            _addValue(expandedParent, '@included', includedResult, {
                propertyIsArray: true
            });
            continue;
        }
        // @graph must be an array or an object
        if (expandedProperty === '@graph' && !(_isObject(value) || _isArray(value))) throw new JsonLdError("Invalid JSON-LD syntax; \"@graph\" value must not be an object or an array.", 'jsonld.SyntaxError', {
            code: 'invalid @graph value',
            value
        });
        if (expandedProperty === '@value') {
            // capture value for later
            // "colliding keywords" check prevents this from being set twice
            unexpandedValue = value;
            if (isJsonType && _processingMode(activeCtx, 1.1)) // no coercion to array, and retain all values
            expandedParent['@value'] = value;
            else _addValue(expandedParent, '@value', value, {
                propertyIsArray: options.isFrame
            });
            continue;
        }
        // @language must be a string
        // it should match BCP47
        if (expandedProperty === '@language') {
            if (value === null) continue;
            if (!_isString(value) && !options.isFrame) throw new JsonLdError('Invalid JSON-LD syntax; "@language" value must be a string.', 'jsonld.SyntaxError', {
                code: 'invalid language-tagged string',
                value
            });
            // ensure language value is lowercase
            value = _asArray(value).map((v)=>_isString(v) ? v.toLowerCase() : v
            );
            // ensure language tag matches BCP47
            for (const lang of value)if (_isString(lang) && !lang.match(REGEX_BCP47)) console.warn(`@language must be valid BCP47: ${lang}`);
            _addValue(expandedParent, '@language', value, {
                propertyIsArray: options.isFrame
            });
            continue;
        }
        // @direction must be "ltr" or "rtl"
        if (expandedProperty === '@direction') {
            if (!_isString(value) && !options.isFrame) throw new JsonLdError('Invalid JSON-LD syntax; "@direction" value must be a string.', 'jsonld.SyntaxError', {
                code: 'invalid base direction',
                value
            });
            value = _asArray(value);
            // ensure direction is "ltr" or "rtl"
            for (const dir of value){
                if (_isString(dir) && dir !== 'ltr' && dir !== 'rtl') throw new JsonLdError('Invalid JSON-LD syntax; "@direction" must be "ltr" or "rtl".', 'jsonld.SyntaxError', {
                    code: 'invalid base direction',
                    value
                });
            }
            _addValue(expandedParent, '@direction', value, {
                propertyIsArray: options.isFrame
            });
            continue;
        }
        // @index must be a string
        if (expandedProperty === '@index') {
            if (!_isString(value)) throw new JsonLdError('Invalid JSON-LD syntax; "@index" value must be a string.', 'jsonld.SyntaxError', {
                code: 'invalid @index value',
                value
            });
            _addValue(expandedParent, '@index', value);
            continue;
        }
        // @reverse must be an object
        if (expandedProperty === '@reverse') {
            if (!_isObject(value)) throw new JsonLdError('Invalid JSON-LD syntax; "@reverse" value must be an object.', 'jsonld.SyntaxError', {
                code: 'invalid @reverse value',
                value
            });
            expandedValue = await api.expand({
                activeCtx,
                activeProperty: '@reverse',
                element: value,
                options,
                expansionMap
            });
            // properties double-reversed
            if ('@reverse' in expandedValue) for(const property in expandedValue['@reverse'])_addValue(expandedParent, property, expandedValue['@reverse'][property], {
                propertyIsArray: true
            });
            // FIXME: can this be merged with code below to simplify?
            // merge in all reversed properties
            let reverseMap = expandedParent['@reverse'] || null;
            for(const property1 in expandedValue){
                if (property1 === '@reverse') continue;
                if (reverseMap === null) reverseMap = expandedParent['@reverse'] = {
                };
                _addValue(reverseMap, property1, [], {
                    propertyIsArray: true
                });
                const items = expandedValue[property1];
                for(let ii = 0; ii < items.length; ++ii){
                    const item = items[ii];
                    if (_isValue(item) || _isList(item)) throw new JsonLdError("Invalid JSON-LD syntax; \"@reverse\" value must not be a @value or an @list.", 'jsonld.SyntaxError', {
                        code: 'invalid reverse property value',
                        value: expandedValue
                    });
                    _addValue(reverseMap, property1, item, {
                        propertyIsArray: true
                    });
                }
            }
            continue;
        }
        // nested keys
        if (expandedProperty === '@nest') {
            nests.push(key3);
            continue;
        }
        // use potential scoped context for key
        let termCtx = activeCtx;
        const ctx = _getContextValue(activeCtx, key3, '@context');
        if (!_isUndefined(ctx)) termCtx = await _processContext({
            activeCtx,
            localCtx: ctx,
            propagate: true,
            overrideProtected: true,
            options
        });
        const container = _getContextValue(termCtx, key3, '@container') || [];
        if (container.includes('@language') && _isObject(value)) {
            const direction = _getContextValue(termCtx, key3, '@direction');
            // handle language map container (skip if value is not an object)
            expandedValue = _expandLanguageMap(termCtx, value, direction, options);
        } else if (container.includes('@index') && _isObject(value)) {
            // handle index container (skip if value is not an object)
            const asGraph = container.includes('@graph');
            const indexKey = _getContextValue(termCtx, key3, '@index') || '@index';
            const propertyIndex = indexKey !== '@index' && _expandIri(activeCtx, indexKey, {
                vocab: true
            }, options);
            expandedValue = await _expandIndexMap({
                activeCtx: termCtx,
                options,
                activeProperty: key3,
                value,
                expansionMap,
                asGraph,
                indexKey,
                propertyIndex
            });
        } else if (container.includes('@id') && _isObject(value)) {
            // handle id container (skip if value is not an object)
            const asGraph = container.includes('@graph');
            expandedValue = await _expandIndexMap({
                activeCtx: termCtx,
                options,
                activeProperty: key3,
                value,
                expansionMap,
                asGraph,
                indexKey: '@id'
            });
        } else if (container.includes('@type') && _isObject(value)) // handle type container (skip if value is not an object)
        expandedValue = await _expandIndexMap({
            // since container is `@type`, revert type scoped context when expanding
            activeCtx: termCtx.revertToPreviousContext(),
            options,
            activeProperty: key3,
            value,
            expansionMap,
            asGraph: false,
            indexKey: '@type'
        });
        else {
            // recurse into @list or @set
            const isList = expandedProperty === '@list';
            if (isList || expandedProperty === '@set') {
                let nextActiveProperty = activeProperty;
                if (isList && expandedActiveProperty === '@graph') nextActiveProperty = null;
                expandedValue = await api.expand({
                    activeCtx: termCtx,
                    activeProperty: nextActiveProperty,
                    element: value,
                    options,
                    insideList: isList,
                    expansionMap
                });
            } else if (_getContextValue(activeCtx, key3, '@type') === '@json') expandedValue = {
                '@type': '@json',
                '@value': value
            };
            else // recursively expand value with key as new active property
            expandedValue = await api.expand({
                activeCtx: termCtx,
                activeProperty: key3,
                element: value,
                options,
                insideList: false,
                expansionMap
            });
        }
        // drop null values if property is not @value
        if (expandedValue === null && expandedProperty !== '@value') {
            // TODO: use `await` to support async
            expandedValue = expansionMap({
                unmappedValue: value,
                expandedProperty,
                activeCtx: termCtx,
                activeProperty,
                parent: element,
                options,
                insideList,
                key: key3,
                expandedParent
            });
            if (expandedValue === undefined) continue;
        }
        // convert expanded value to @list if container specifies it
        if (expandedProperty !== '@list' && !_isList(expandedValue) && container.includes('@list')) // ensure expanded value in @list is an array
        expandedValue = {
            '@list': _asArray(expandedValue)
        };
        // convert expanded value to @graph if container specifies it
        // and value is not, itself, a graph
        // index cases handled above
        if (container.includes('@graph') && !container.some((key)=>key === '@id' || key === '@index'
        )) // ensure expanded values are arrays
        expandedValue = _asArray(expandedValue).map((v)=>({
                '@graph': _asArray(v)
            })
        );
        // FIXME: can this be merged with code above to simplify?
        // merge in reverse properties
        if (termCtx.mappings.has(key3) && termCtx.mappings.get(key3).reverse) {
            const reverseMap = expandedParent['@reverse'] = expandedParent['@reverse'] || {
            };
            expandedValue = _asArray(expandedValue);
            for(let ii = 0; ii < expandedValue.length; ++ii){
                const item = expandedValue[ii];
                if (_isValue(item) || _isList(item)) throw new JsonLdError("Invalid JSON-LD syntax; \"@reverse\" value must not be a @value or an @list.", 'jsonld.SyntaxError', {
                    code: 'invalid reverse property value',
                    value: expandedValue
                });
                _addValue(reverseMap, expandedProperty, item, {
                    propertyIsArray: true
                });
            }
            continue;
        }
        // add value for property
        // special keywords handled above
        _addValue(expandedParent, expandedProperty, expandedValue, {
            propertyIsArray: true
        });
    }
    // @value must not be an object or an array (unless framing) or if @type is
    // @json
    if ('@value' in expandedParent) {
        if (expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1)) ;
        else if ((_isObject(unexpandedValue) || _isArray(unexpandedValue)) && !options.isFrame) throw new JsonLdError("Invalid JSON-LD syntax; \"@value\" value must not be an object or an array.", 'jsonld.SyntaxError', {
            code: 'invalid value object value',
            value: unexpandedValue
        });
    }
    // expand each nested key
    for (const key2 of nests){
        const nestedValues = _isArray(element[key2]) ? element[key2] : [
            element[key2]
        ];
        for (const nv of nestedValues){
            if (!_isObject(nv) || Object.keys(nv).some((k)=>_expandIri(activeCtx, k, {
                    vocab: true
                }, options) === '@value'
            )) throw new JsonLdError('Invalid JSON-LD syntax; nested value must be a node object.', 'jsonld.SyntaxError', {
                code: 'invalid @nest value',
                value: nv
            });
            await _expandObject({
                activeCtx,
                activeProperty,
                expandedActiveProperty,
                element: nv,
                expandedParent,
                options,
                insideList,
                typeScopedContext,
                typeKey,
                expansionMap
            });
        }
    }
}
/**
 * Expands the given value by using the coercion and keyword rules in the
 * given context.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the active property the value is associated with.
 * @param value the value to expand.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */ function _expandValue({ activeCtx , activeProperty , value , options  }) {
    // nothing to expand
    if (value === null || value === undefined) return null;
    // special-case expand @id and @type (skips '@id' expansion)
    const expandedProperty = _expandIri(activeCtx, activeProperty, {
        vocab: true
    }, options);
    if (expandedProperty === '@id') return _expandIri(activeCtx, value, {
        base: true
    }, options);
    else if (expandedProperty === '@type') return _expandIri(activeCtx, value, {
        vocab: true,
        base: true
    }, options);
    // get type definition from context
    const type = _getContextValue(activeCtx, activeProperty, '@type');
    // do @id expansion (automatic for @graph)
    if ((type === '@id' || expandedProperty === '@graph') && _isString(value)) return {
        '@id': _expandIri(activeCtx, value, {
            base: true
        }, options)
    };
    // do @id expansion w/vocab
    if (type === '@vocab' && _isString(value)) return {
        '@id': _expandIri(activeCtx, value, {
            vocab: true,
            base: true
        }, options)
    };
    // do not expand keyword values
    if (_isKeyword(expandedProperty)) return value;
    const rval = {
    };
    if (type && ![
        '@id',
        '@vocab',
        '@none'
    ].includes(type)) // other type
    rval['@type'] = type;
    else if (_isString(value)) {
        // check for language tagging for strings
        const language = _getContextValue(activeCtx, activeProperty, '@language');
        if (language !== null) rval['@language'] = language;
        const direction = _getContextValue(activeCtx, activeProperty, '@direction');
        if (direction !== null) rval['@direction'] = direction;
    }
    // do conversion of values that aren't basic JSON types to strings
    if (![
        'boolean',
        'number',
        'string'
    ].includes(typeof value)) value = value.toString();
    rval['@value'] = value;
    return rval;
}
/**
 * Expands a language map.
 *
 * @param activeCtx the active context to use.
 * @param languageMap the language map to expand.
 * @param direction the direction to apply to values.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded language map.
 */ function _expandLanguageMap(activeCtx, languageMap, direction, options) {
    const rval = [];
    const keys = Object.keys(languageMap).sort();
    for (const key of keys){
        const expandedKey = _expandIri(activeCtx, key, {
            vocab: true
        }, options);
        let val = languageMap[key];
        if (!_isArray(val)) val = [
            val
        ];
        for (const item of val){
            if (item === null) continue;
            if (!_isString(item)) throw new JsonLdError('Invalid JSON-LD syntax; language map values must be strings.', 'jsonld.SyntaxError', {
                code: 'invalid language map value',
                languageMap
            });
            const val = {
                '@value': item
            };
            if (expandedKey !== '@none') val['@language'] = key.toLowerCase();
            if (direction) val['@direction'] = direction;
            rval.push(val);
        }
    }
    return rval;
}
async function _expandIndexMap({ activeCtx , options , activeProperty , value , expansionMap , asGraph , indexKey , propertyIndex  }) {
    const rval = [];
    const keys = Object.keys(value).sort();
    const isTypeIndex = indexKey === '@type';
    for (let key of keys){
        // if indexKey is @type, there may be a context defined for it
        if (isTypeIndex) {
            const ctx = _getContextValue(activeCtx, key, '@context');
            if (!_isUndefined(ctx)) activeCtx = await _processContext({
                activeCtx,
                localCtx: ctx,
                propagate: false,
                options
            });
        }
        let val = value[key];
        if (!_isArray(val)) val = [
            val
        ];
        val = await api.expand({
            activeCtx,
            activeProperty,
            element: val,
            options,
            insideList: false,
            insideIndex: true,
            expansionMap
        });
        // expand for @type, but also for @none
        let expandedKey;
        if (propertyIndex) {
            if (key === '@none') expandedKey = '@none';
            else expandedKey = _expandValue({
                activeCtx,
                activeProperty: indexKey,
                value: key,
                options
            });
        } else expandedKey = _expandIri(activeCtx, key, {
            vocab: true
        }, options);
        if (indexKey === '@id') // expand document relative
        key = _expandIri(activeCtx, key, {
            base: true
        }, options);
        else if (isTypeIndex) key = expandedKey;
        for (let item of val){
            // If this is also a @graph container, turn items into graphs
            if (asGraph && !_isGraph(item)) item = {
                '@graph': [
                    item
                ]
            };
            if (indexKey === '@type') {
                if (expandedKey === '@none') ;
                else if (item['@type']) item['@type'] = [
                    key
                ].concat(item['@type']);
                else item['@type'] = [
                    key
                ];
            } else if (_isValue(item) && ![
                '@language',
                '@type',
                '@index'
            ].includes(indexKey)) throw new JsonLdError('Invalid JSON-LD syntax; Attempt to add illegal key to value ' + `object: "${indexKey}".`, 'jsonld.SyntaxError', {
                code: 'invalid value object',
                value: item
            });
            else if (propertyIndex) // index is a property to be expanded, and values interpreted for that
            // property
            {
                if (expandedKey !== '@none') // expand key as a value
                _addValue(item, propertyIndex, expandedKey, {
                    propertyIsArray: true,
                    prependValue: true
                });
            } else if (expandedKey !== '@none' && !(indexKey in item)) item[indexKey] = key;
            rval.push(item);
        }
    }
    return rval;
}

},{"./JsonLdError":"9sDAJ","./types":"1u182","./graphTypes":"3hVN6","./context":"1zTsA","./url":"ifth8","./util":"ir9k4"}],"1zTsA":[function(require,module,exports) {
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const util = require('./util');
const JsonLdError = require('./JsonLdError');
const { isArray: _isArray , isObject: _isObject , isString: _isString , isUndefined: _isUndefined  } = require('./types');
const { isAbsolute: _isAbsoluteIri , isRelative: _isRelativeIri , prependBase  } = require('./url');
const { asArray: _asArray , compareShortestLeast: _compareShortestLeast  } = require('./util');
const INITIAL_CONTEXT_CACHE = new Map();
const INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;
const KEYWORD_PATTERN = /^@[a-zA-Z]+$/;
const api = {
};
module.exports = api;
/**
 * Processes a local context and returns a new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param options the context processing options.
 * @param propagate `true` if `false`, retains any previously defined term,
 *   which can be rolled back when the descending into a new node object.
 * @param overrideProtected `false` allows protected terms to be modified.
 *
 * @return a Promise that resolves to the new active context.
 */ api.process = async ({ activeCtx , localCtx , options , propagate =true , overrideProtected =false , cycles =new Set()  })=>{
    // normalize local context to an array of @context objects
    if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) localCtx = localCtx['@context'];
    const ctxs = _asArray(localCtx);
    // no contexts in array, return current active context w/o changes
    if (ctxs.length === 0) return activeCtx;
    // resolve contexts
    const resolved = await options.contextResolver.resolve({
        activeCtx,
        context: localCtx,
        documentLoader: options.documentLoader,
        base: options.base
    });
    // override propagate if first resolved context has `@propagate`
    if (_isObject(resolved[0].document) && typeof resolved[0].document['@propagate'] === 'boolean') // retrieve early, error checking done later
    propagate = resolved[0].document['@propagate'];
    // process each context in order, update active context
    // on each iteration to ensure proper caching
    let rval = activeCtx;
    // track the previous context
    // if not propagating, make sure rval has a previous context
    if (!propagate && !rval.previousContext) {
        // clone `rval` context before updating
        rval = rval.clone();
        rval.previousContext = activeCtx;
    }
    for (const resolvedContext of resolved){
        let { document: ctx  } = resolvedContext;
        // update active context to one computed from last iteration
        activeCtx = rval;
        // reset to initial context
        if (ctx === null) {
            // We can't nullify if there are protected terms and we're
            // not allowing overrides (e.g. processing a property term scoped context)
            if (!overrideProtected && Object.keys(activeCtx.protected).length !== 0) {
                const protectedMode = options && options.protectedMode || 'error';
                if (protectedMode === 'error') throw new JsonLdError("Tried to nullify a context with protected terms outside of a term definition.", 'jsonld.SyntaxError', {
                    code: 'invalid context nullification'
                });
                else if (protectedMode === 'warn') {
                    // FIXME: remove logging and use a handler
                    console.warn('WARNING: invalid context nullification');
                    // get processed context from cache if available
                    const processed = resolvedContext.getProcessed(activeCtx);
                    if (processed) {
                        rval = activeCtx = processed;
                        continue;
                    }
                    const oldActiveCtx = activeCtx;
                    // copy all protected term definitions to fresh initial context
                    rval = activeCtx = api.getInitialContext(options).clone();
                    for (const [term, _protected] of Object.entries(oldActiveCtx.protected))if (_protected) activeCtx.mappings[term] = util.clone(oldActiveCtx.mappings[term]);
                    activeCtx.protected = util.clone(oldActiveCtx.protected);
                    // cache processed result
                    resolvedContext.setProcessed(oldActiveCtx, rval);
                    continue;
                }
                throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {
                    code: 'invalid protected mode',
                    context: localCtx,
                    protectedMode
                });
            }
            rval = activeCtx = api.getInitialContext(options).clone();
            continue;
        }
        // get processed context from cache if available
        const processed = resolvedContext.getProcessed(activeCtx);
        if (processed) {
            rval = activeCtx = processed;
            continue;
        }
        // dereference @context key if present
        if (_isObject(ctx) && '@context' in ctx) ctx = ctx['@context'];
        // context must be an object by now, all URLs retrieved before this call
        if (!_isObject(ctx)) throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {
            code: 'invalid local context',
            context: ctx
        });
        // TODO: there is likely a `previousContext` cloning optimization that
        // could be applied here (no need to copy it under certain conditions)
        // clone context before updating it
        rval = rval.clone();
        // define context mappings for keys in local context
        const defined = new Map();
        // handle @version
        if ('@version' in ctx) {
            if (ctx['@version'] !== 1.1) throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {
                code: 'invalid @version value',
                context: ctx
            });
            if (activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0') throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {
                code: 'processing mode conflict',
                context: ctx
            });
            rval.processingMode = 'json-ld-1.1';
            rval['@version'] = ctx['@version'];
            defined.set('@version', true);
        }
        // if not set explicitly, set processingMode to "json-ld-1.1"
        rval.processingMode = rval.processingMode || activeCtx.processingMode;
        // handle @base
        if ('@base' in ctx) {
            let base = ctx['@base'];
            if (base === null || _isAbsoluteIri(base)) ;
            else if (_isRelativeIri(base)) base = prependBase(rval['@base'], base);
            else throw new JsonLdError("Invalid JSON-LD syntax; the value of \"@base\" in a @context must be an absolute IRI, a relative IRI, or null.", 'jsonld.SyntaxError', {
                code: 'invalid base IRI',
                context: ctx
            });
            rval['@base'] = base;
            defined.set('@base', true);
        }
        // handle @vocab
        if ('@vocab' in ctx) {
            const value = ctx['@vocab'];
            if (value === null) delete rval['@vocab'];
            else if (!_isString(value)) throw new JsonLdError("Invalid JSON-LD syntax; the value of \"@vocab\" in a @context must be a string or null.", 'jsonld.SyntaxError', {
                code: 'invalid vocab mapping',
                context: ctx
            });
            else if (!_isAbsoluteIri(value) && api.processingMode(rval, 1)) throw new JsonLdError("Invalid JSON-LD syntax; the value of \"@vocab\" in a @context must be an absolute IRI.", 'jsonld.SyntaxError', {
                code: 'invalid vocab mapping',
                context: ctx
            });
            else rval['@vocab'] = _expandIri(rval, value, {
                vocab: true,
                base: true
            }, undefined, undefined, options);
            defined.set('@vocab', true);
        }
        // handle @language
        if ('@language' in ctx) {
            const value = ctx['@language'];
            if (value === null) delete rval['@language'];
            else if (!_isString(value)) throw new JsonLdError("Invalid JSON-LD syntax; the value of \"@language\" in a @context must be a string or null.", 'jsonld.SyntaxError', {
                code: 'invalid default language',
                context: ctx
            });
            else rval['@language'] = value.toLowerCase();
            defined.set('@language', true);
        }
        // handle @direction
        if ('@direction' in ctx) {
            const value = ctx['@direction'];
            if (activeCtx.processingMode === 'json-ld-1.0') throw new JsonLdError('Invalid JSON-LD syntax; @direction not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
                code: 'invalid context member',
                context: ctx
            });
            if (value === null) delete rval['@direction'];
            else if (value !== 'ltr' && value !== 'rtl') throw new JsonLdError("Invalid JSON-LD syntax; the value of \"@direction\" in a @context must be null, \"ltr\", or \"rtl\".", 'jsonld.SyntaxError', {
                code: 'invalid base direction',
                context: ctx
            });
            else rval['@direction'] = value;
            defined.set('@direction', true);
        }
        // handle @propagate
        // note: we've already extracted it, here we just do error checking
        if ('@propagate' in ctx) {
            const value = ctx['@propagate'];
            if (activeCtx.processingMode === 'json-ld-1.0') throw new JsonLdError('Invalid JSON-LD syntax; @propagate not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
                code: 'invalid context entry',
                context: ctx
            });
            if (typeof value !== 'boolean') throw new JsonLdError('Invalid JSON-LD syntax; @propagate value must be a boolean.', 'jsonld.SyntaxError', {
                code: 'invalid @propagate value',
                context: localCtx
            });
            defined.set('@propagate', true);
        }
        // handle @import
        if ('@import' in ctx) {
            const value = ctx['@import'];
            if (activeCtx.processingMode === 'json-ld-1.0') throw new JsonLdError('Invalid JSON-LD syntax; @import not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
                code: 'invalid context entry',
                context: ctx
            });
            if (!_isString(value)) throw new JsonLdError('Invalid JSON-LD syntax; @import must be a string.', 'jsonld.SyntaxError', {
                code: 'invalid @import value',
                context: localCtx
            });
            // resolve contexts
            const resolvedImport = await options.contextResolver.resolve({
                activeCtx,
                context: value,
                documentLoader: options.documentLoader,
                base: options.base
            });
            if (resolvedImport.length !== 1) throw new JsonLdError('Invalid JSON-LD syntax; @import must reference a single context.', 'jsonld.SyntaxError', {
                code: 'invalid remote context',
                context: localCtx
            });
            const processedImport = resolvedImport[0].getProcessed(activeCtx);
            if (processedImport) // Note: if the same context were used in this active context
            // as a reference context, then processed_input might not
            // be a dict.
            ctx = processedImport;
            else {
                const importCtx = resolvedImport[0].document;
                if ('@import' in importCtx) throw new JsonLdError("Invalid JSON-LD syntax: imported context must not include @import.", 'jsonld.SyntaxError', {
                    code: 'invalid context entry',
                    context: localCtx
                });
                // merge ctx into importCtx and replace rval with the result
                for(const key in importCtx)if (!ctx.hasOwnProperty(key)) ctx[key] = importCtx[key];
                // Note: this could potenially conflict if the import
                // were used in the same active context as a referenced
                // context and an import. In this case, we
                // could override the cached result, but seems unlikely.
                resolvedImport[0].setProcessed(activeCtx, ctx);
            }
            defined.set('@import', true);
        }
        // handle @protected; determine whether this sub-context is declaring
        // all its terms to be "protected" (exceptions can be made on a
        // per-definition basis)
        defined.set('@protected', ctx['@protected'] || false);
        // process all other keys
        for(const key in ctx){
            api.createTermDefinition({
                activeCtx: rval,
                localCtx: ctx,
                term: key,
                defined,
                options,
                overrideProtected
            });
            if (_isObject(ctx[key]) && '@context' in ctx[key]) {
                const keyCtx = ctx[key]['@context'];
                let process = true;
                if (_isString(keyCtx)) {
                    const url = prependBase(options.base, keyCtx);
                    // track processed contexts to avoid scoped context recursion
                    if (cycles.has(url)) process = false;
                    else cycles.add(url);
                }
                // parse context to validate
                if (process) try {
                    await api.process({
                        activeCtx: rval.clone(),
                        localCtx: ctx[key]['@context'],
                        overrideProtected: true,
                        options,
                        cycles
                    });
                } catch (e) {
                    throw new JsonLdError('Invalid JSON-LD syntax; invalid scoped context.', 'jsonld.SyntaxError', {
                        code: 'invalid scoped context',
                        context: ctx[key]['@context'],
                        term: key
                    });
                }
            }
        }
        // cache processed result
        resolvedContext.setProcessed(activeCtx, rval);
    }
    return rval;
};
/**
 * Creates a term definition during context processing.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context being processed.
 * @param term the term in the local context to define the mapping for.
 * @param defined a map of defining/defined keys to detect cycles and prevent
 *          double definitions.
 * @param {Object} [options] - creation options.
 * @param {string} [options.protectedMode="error"] - "error" to throw error
 *   on `@protected` constraint violation, "warn" to allow violations and
 *   signal a warning.
 * @param overrideProtected `false` allows protected terms to be modified.
 */ api.createTermDefinition = ({ activeCtx , localCtx , term , defined , options , overrideProtected =false ,  })=>{
    if (defined.has(term)) {
        // term already defined
        if (defined.get(term)) return;
        // cycle detected
        throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {
            code: 'cyclic IRI mapping',
            context: localCtx,
            term
        });
    }
    // now defining term
    defined.set(term, false);
    // get context term value
    let value;
    if (localCtx.hasOwnProperty(term)) value = localCtx[term];
    if (term === '@type' && _isObject(value) && (value['@container'] || '@set') === '@set' && api.processingMode(activeCtx, 1.1)) {
        const validKeys = [
            '@container',
            '@id',
            '@protected'
        ];
        const keys = Object.keys(value);
        if (keys.length === 0 || keys.some((k)=>!validKeys.includes(k)
        )) throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {
            code: 'keyword redefinition',
            context: localCtx,
            term
        });
    } else if (api.isKeyword(term)) throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {
        code: 'keyword redefinition',
        context: localCtx,
        term
    });
    else if (term.match(KEYWORD_PATTERN)) {
        // FIXME: remove logging and use a handler
        console.warn("WARNING: terms beginning with \"@\" are reserved for future use and ignored", {
            term
        });
        return;
    } else if (term === '') throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
    });
    // keep reference to previous mapping for potential `@protected` check
    const previousMapping = activeCtx.mappings.get(term);
    // remove old mapping
    if (activeCtx.mappings.has(term)) activeCtx.mappings.delete(term);
    // convert short-hand value to object w/@id
    let simpleTerm = false;
    if (_isString(value) || value === null) {
        simpleTerm = true;
        value = {
            '@id': value
        };
    }
    if (!_isObject(value)) throw new JsonLdError("Invalid JSON-LD syntax; @context term values must be strings or objects.", 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
    });
    // create new mapping
    const mapping = {
    };
    activeCtx.mappings.set(term, mapping);
    mapping.reverse = false;
    // make sure term definition only has expected keywords
    const validKeys = [
        '@container',
        '@id',
        '@language',
        '@reverse',
        '@type'
    ];
    // JSON-LD 1.1 support
    if (api.processingMode(activeCtx, 1.1)) validKeys.push('@context', '@direction', '@index', '@nest', '@prefix', '@protected');
    for(const kw in value){
        if (!validKeys.includes(kw)) throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {
            code: 'invalid term definition',
            context: localCtx
        });
    }
    // always compute whether term has a colon as an optimization for
    // _compactIri
    const colon = term.indexOf(':');
    mapping._termHasColon = colon > 0;
    if ('@reverse' in value) {
        if ('@id' in value) throw new JsonLdError("Invalid JSON-LD syntax; a @reverse term definition must not contain @id.", 'jsonld.SyntaxError', {
            code: 'invalid reverse property',
            context: localCtx
        });
        if ('@nest' in value) throw new JsonLdError("Invalid JSON-LD syntax; a @reverse term definition must not contain @nest.", 'jsonld.SyntaxError', {
            code: 'invalid reverse property',
            context: localCtx
        });
        const reverse = value['@reverse'];
        if (!_isString(reverse)) throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {
            code: 'invalid IRI mapping',
            context: localCtx
        });
        if (!api.isKeyword(reverse) && reverse.match(KEYWORD_PATTERN)) {
            // FIXME: remove logging and use a handler
            console.warn("WARNING: values beginning with \"@\" are reserved for future use and ignored", {
                reverse
            });
            if (previousMapping) activeCtx.mappings.set(term, previousMapping);
            else activeCtx.mappings.delete(term);
            return;
        }
        // expand and add @id mapping
        const id = _expandIri(activeCtx, reverse, {
            vocab: true,
            base: false
        }, localCtx, defined, options);
        if (!_isAbsoluteIri(id)) throw new JsonLdError("Invalid JSON-LD syntax; a @context @reverse value must be an absolute IRI or a blank node identifier.", 'jsonld.SyntaxError', {
            code: 'invalid IRI mapping',
            context: localCtx
        });
        mapping['@id'] = id;
        mapping.reverse = true;
    } else if ('@id' in value) {
        let id = value['@id'];
        if (id && !_isString(id)) throw new JsonLdError("Invalid JSON-LD syntax; a @context @id value must be an array of strings or a string.", 'jsonld.SyntaxError', {
            code: 'invalid IRI mapping',
            context: localCtx
        });
        if (id === null) // reserve a null term, which may be protected
        mapping['@id'] = null;
        else if (!api.isKeyword(id) && id.match(KEYWORD_PATTERN)) {
            // FIXME: remove logging and use a handler
            console.warn("WARNING: values beginning with \"@\" are reserved for future use and ignored", {
                id
            });
            if (previousMapping) activeCtx.mappings.set(term, previousMapping);
            else activeCtx.mappings.delete(term);
            return;
        } else if (id !== term) {
            // expand and add @id mapping
            id = _expandIri(activeCtx, id, {
                vocab: true,
                base: false
            }, localCtx, defined, options);
            if (!_isAbsoluteIri(id) && !api.isKeyword(id)) throw new JsonLdError("Invalid JSON-LD syntax; a @context @id value must be an absolute IRI, a blank node identifier, or a keyword.", 'jsonld.SyntaxError', {
                code: 'invalid IRI mapping',
                context: localCtx
            });
            // if term has the form of an IRI it must map the same
            if (term.match(/(?::[^:])|\//)) {
                const termDefined = new Map(defined).set(term, true);
                const termIri = _expandIri(activeCtx, term, {
                    vocab: true,
                    base: false
                }, localCtx, termDefined, options);
                if (termIri !== id) throw new JsonLdError("Invalid JSON-LD syntax; term in form of IRI must expand to definition.", 'jsonld.SyntaxError', {
                    code: 'invalid IRI mapping',
                    context: localCtx
                });
            }
            mapping['@id'] = id;
            // indicate if this term may be used as a compact IRI prefix
            mapping._prefix = simpleTerm && !mapping._termHasColon && id.match(/[:\/\?#\[\]@]$/);
        }
    }
    if (!('@id' in mapping)) {
        // see if the term has a prefix
        if (mapping._termHasColon) {
            const prefix = term.substr(0, colon);
            if (localCtx.hasOwnProperty(prefix)) // define parent prefix
            api.createTermDefinition({
                activeCtx,
                localCtx,
                term: prefix,
                defined,
                options
            });
            if (activeCtx.mappings.has(prefix)) {
                // set @id based on prefix parent
                const suffix = term.substr(colon + 1);
                mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;
            } else // term is an absolute IRI
            mapping['@id'] = term;
        } else if (term === '@type') // Special case, were we've previously determined that container is @set
        mapping['@id'] = term;
        else {
            // non-IRIs *must* define @ids if @vocab is not available
            if (!('@vocab' in activeCtx)) throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {
                code: 'invalid IRI mapping',
                context: localCtx,
                term
            });
            // prepend vocab to term
            mapping['@id'] = activeCtx['@vocab'] + term;
        }
    }
    // Handle term protection
    if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {
        activeCtx.protected[term] = true;
        mapping.protected = true;
    }
    // IRI mapping now defined
    defined.set(term, true);
    if ('@type' in value) {
        let type = value['@type'];
        if (!_isString(type)) throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {
            code: 'invalid type mapping',
            context: localCtx
        });
        if (type === '@json' || type === '@none') {
            if (api.processingMode(activeCtx, 1)) throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must not be ' + `"${type}" in JSON-LD 1.0 mode.`, 'jsonld.SyntaxError', {
                code: 'invalid type mapping',
                context: localCtx
            });
        } else if (type !== '@id' && type !== '@vocab') {
            // expand @type to full IRI
            type = _expandIri(activeCtx, type, {
                vocab: true,
                base: false
            }, localCtx, defined, options);
            if (!_isAbsoluteIri(type)) throw new JsonLdError("Invalid JSON-LD syntax; an @context @type value must be an absolute IRI.", 'jsonld.SyntaxError', {
                code: 'invalid type mapping',
                context: localCtx
            });
            if (type.indexOf('_:') === 0) throw new JsonLdError("Invalid JSON-LD syntax; an @context @type value must be an IRI, not a blank node identifier.", 'jsonld.SyntaxError', {
                code: 'invalid type mapping',
                context: localCtx
            });
        }
        // add @type to mapping
        mapping['@type'] = type;
    }
    if ('@container' in value) {
        // normalize container to an array form
        const container = _isString(value['@container']) ? [
            value['@container']
        ] : value['@container'] || [];
        const validContainers = [
            '@list',
            '@set',
            '@index',
            '@language'
        ];
        let isValid = true;
        const hasSet = container.includes('@set');
        // JSON-LD 1.1 support
        if (api.processingMode(activeCtx, 1.1)) {
            validContainers.push('@graph', '@id', '@type');
            // check container length
            if (container.includes('@list')) {
                if (container.length !== 1) throw new JsonLdError("Invalid JSON-LD syntax; @context @container with @list must have no other values", 'jsonld.SyntaxError', {
                    code: 'invalid container mapping',
                    context: localCtx
                });
            } else if (container.includes('@graph')) {
                if (container.some((key)=>key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set'
                )) throw new JsonLdError("Invalid JSON-LD syntax; @context @container with @graph must have no other values other than @id, @index, and @set", 'jsonld.SyntaxError', {
                    code: 'invalid container mapping',
                    context: localCtx
                });
            } else // otherwise, container may also include @set
            isValid &= container.length <= (hasSet ? 2 : 1);
            if (container.includes('@type')) {
                // If mapping does not have an @type,
                // set it to @id
                mapping['@type'] = mapping['@type'] || '@id';
                // type mapping must be either @id or @vocab
                if (![
                    '@id',
                    '@vocab'
                ].includes(mapping['@type'])) throw new JsonLdError("Invalid JSON-LD syntax; container: @type requires @type to be @id or @vocab.", 'jsonld.SyntaxError', {
                    code: 'invalid type mapping',
                    context: localCtx
                });
            }
        } else {
            // in JSON-LD 1.0, container must not be an array (it must be a string,
            // which is one of the validContainers)
            isValid &= !_isArray(value['@container']);
            // check container length
            isValid &= container.length <= 1;
        }
        // check against valid containers
        isValid &= container.every((c)=>validContainers.includes(c)
        );
        // @set not allowed with @list
        isValid &= !(hasSet && container.includes('@list'));
        if (!isValid) throw new JsonLdError("Invalid JSON-LD syntax; @context @container value must be one of the following: " + validContainers.join(', '), 'jsonld.SyntaxError', {
            code: 'invalid container mapping',
            context: localCtx
        });
        if (mapping.reverse && !container.every((c)=>[
                '@index',
                '@set'
            ].includes(c)
        )) throw new JsonLdError("Invalid JSON-LD syntax; @context @container value for a @reverse type definition must be @index or @set.", 'jsonld.SyntaxError', {
            code: 'invalid reverse property',
            context: localCtx
        });
        // add @container to mapping
        mapping['@container'] = container;
    }
    // property indexing
    if ('@index' in value) {
        if (!('@container' in value) || !mapping['@container'].includes('@index')) throw new JsonLdError('Invalid JSON-LD syntax; @index without @index in @container: ' + `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError', {
            code: 'invalid term definition',
            context: localCtx
        });
        if (!_isString(value['@index']) || value['@index'].indexOf('@') === 0) throw new JsonLdError('Invalid JSON-LD syntax; @index must expand to an IRI: ' + `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError', {
            code: 'invalid term definition',
            context: localCtx
        });
        mapping['@index'] = value['@index'];
    }
    // scoped contexts
    if ('@context' in value) mapping['@context'] = value['@context'];
    if ('@language' in value && !('@type' in value)) {
        let language = value['@language'];
        if (language !== null && !_isString(language)) throw new JsonLdError("Invalid JSON-LD syntax; @context @language value must be a string or null.", 'jsonld.SyntaxError', {
            code: 'invalid language mapping',
            context: localCtx
        });
        // add @language to mapping
        if (language !== null) language = language.toLowerCase();
        mapping['@language'] = language;
    }
    // term may be used as a prefix
    if ('@prefix' in value) {
        if (term.match(/:|\//)) throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {
            code: 'invalid term definition',
            context: localCtx
        });
        if (api.isKeyword(mapping['@id'])) throw new JsonLdError('Invalid JSON-LD syntax; keywords may not be used as prefixes', 'jsonld.SyntaxError', {
            code: 'invalid term definition',
            context: localCtx
        });
        if (typeof value['@prefix'] === 'boolean') mapping._prefix = value['@prefix'] === true;
        else throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {
            code: 'invalid @prefix value',
            context: localCtx
        });
    }
    if ('@direction' in value) {
        const direction = value['@direction'];
        if (direction !== null && direction !== 'ltr' && direction !== 'rtl') throw new JsonLdError("Invalid JSON-LD syntax; @direction value must be null, \"ltr\", or \"rtl\".", 'jsonld.SyntaxError', {
            code: 'invalid base direction',
            context: localCtx
        });
        mapping['@direction'] = direction;
    }
    if ('@nest' in value) {
        const nest = value['@nest'];
        if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) throw new JsonLdError("Invalid JSON-LD syntax; @context @nest value must be a string which is not a keyword other than @nest.", 'jsonld.SyntaxError', {
            code: 'invalid @nest value',
            context: localCtx
        });
        mapping['@nest'] = nest;
    }
    // disallow aliasing @context and @preserve
    const id = mapping['@id'];
    if (id === '@context' || id === '@preserve') throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {
        code: 'invalid keyword alias',
        context: localCtx
    });
    // Check for overriding protected terms
    if (previousMapping && previousMapping.protected && !overrideProtected) {
        // force new term to continue to be protected and see if the mappings would
        // be equal
        activeCtx.protected[term] = true;
        mapping.protected = true;
        if (!_deepCompare(previousMapping, mapping)) {
            const protectedMode = options && options.protectedMode || 'error';
            if (protectedMode === 'error') throw new JsonLdError(`Invalid JSON-LD syntax; tried to redefine "${term}" which is a ` + 'protected term.', 'jsonld.SyntaxError', {
                code: 'protected term redefinition',
                context: localCtx,
                term
            });
            else if (protectedMode === 'warn') {
                // FIXME: remove logging and use a handler
                console.warn('WARNING: protected term redefinition', {
                    term
                });
                return;
            }
            throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {
                code: 'invalid protected mode',
                context: localCtx,
                term,
                protectedMode
            });
        }
    }
};
/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */ api.expandIri = (activeCtx, value, relativeTo, options)=>{
    return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);
};
/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param localCtx the local context being processed (only given if called
 *          during context processing).
 * @param defined a map for tracking cycles in context definitions (only given
 *          if called during context processing).
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */ function _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {
    // already expanded
    if (value === null || !_isString(value) || api.isKeyword(value)) return value;
    // ignore non-keyword things that look like a keyword
    if (value.match(KEYWORD_PATTERN)) return null;
    // define term dependency if not defined
    if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) api.createTermDefinition({
        activeCtx,
        localCtx,
        term: value,
        defined,
        options
    });
    relativeTo = relativeTo || {
    };
    if (relativeTo.vocab) {
        const mapping = activeCtx.mappings.get(value);
        // value is explicitly ignored with a null mapping
        if (mapping === null) return null;
        if (_isObject(mapping) && '@id' in mapping) // value is a term
        return mapping['@id'];
    }
    // split value into prefix:suffix
    const colon = value.indexOf(':');
    if (colon > 0) {
        const prefix = value.substr(0, colon);
        const suffix = value.substr(colon + 1);
        // do not expand blank nodes (prefix of '_') or already-absolute
        // IRIs (suffix of '//')
        if (prefix === '_' || suffix.indexOf('//') === 0) return value;
        // prefix dependency not defined, define it
        if (localCtx && localCtx.hasOwnProperty(prefix)) api.createTermDefinition({
            activeCtx,
            localCtx,
            term: prefix,
            defined,
            options
        });
        // use mapping if prefix is defined
        const mapping = activeCtx.mappings.get(prefix);
        if (mapping && mapping._prefix) return mapping['@id'] + suffix;
        // already absolute IRI
        if (_isAbsoluteIri(value)) return value;
    }
    // prepend vocab
    if (relativeTo.vocab && '@vocab' in activeCtx) return activeCtx['@vocab'] + value;
    // prepend base
    if (relativeTo.base && '@base' in activeCtx) {
        if (activeCtx['@base']) // The null case preserves value as potentially relative
        return prependBase(prependBase(options.base, activeCtx['@base']), value);
    } else if (relativeTo.base) return prependBase(options.base, value);
    return value;
}
/**
 * Gets the initial context.
 *
 * @param options the options to use:
 *          [base] the document base IRI.
 *
 * @return the initial context.
 */ api.getInitialContext = (options)=>{
    const key1 = JSON.stringify({
        processingMode: options.processingMode
    });
    const cached = INITIAL_CONTEXT_CACHE.get(key1);
    if (cached) return cached;
    const initialContext = {
        processingMode: options.processingMode,
        mappings: new Map(),
        inverse: null,
        getInverse: _createInverseContext,
        clone: _cloneActiveContext,
        revertToPreviousContext: _revertToPreviousContext,
        protected: {
        }
    };
    // TODO: consider using LRU cache instead
    if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) // clear whole cache -- assumes scenario where the cache fills means
    // the cache isn't being used very efficiently anyway
    INITIAL_CONTEXT_CACHE.clear();
    INITIAL_CONTEXT_CACHE.set(key1, initialContext);
    /**
   * Generates an inverse context for use in the compaction algorithm, if
   * not already generated for the given active context.
   *
   * @return the inverse context.
   */ function _createInverseContext() {
        const activeCtx = this;
        // lazily create inverse
        if (activeCtx.inverse) {
            return activeCtx.inverse;
        }
        const inverse = activeCtx.inverse = {
        };
        // variables for building fast CURIE map
        const fastCurieMap = activeCtx.fastCurieMap = {
        };
        const irisToTerms = {
        };
        // handle default language
        const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase();
        // handle default direction
        const defaultDirection = activeCtx['@direction'];
        // create term selections for each mapping in the context, ordered by
        // shortest and then lexicographically least
        const mappings = activeCtx.mappings;
        const terms = [
            ...mappings.keys()
        ].sort(_compareShortestLeast);
        for (const term of terms){
            const mapping = mappings.get(term);
            if (mapping === null) {
                continue;
            }
            let container = mapping['@container'] || '@none';
            container = [].concat(container).sort().join('');
            if (mapping['@id'] === null) {
                continue;
            }
            // iterate over every IRI in the mapping
            const ids = _asArray(mapping['@id']);
            for (const iri of ids){
                let entry = inverse[iri];
                const isKeyword = api.isKeyword(iri);
                if (!entry) {
                    // initialize entry
                    inverse[iri] = entry = {
                    };
                    if (!isKeyword && !mapping._termHasColon) {
                        // init IRI to term map and fast CURIE prefixes
                        irisToTerms[iri] = [
                            term
                        ];
                        const fastCurieEntry = {
                            iri,
                            terms: irisToTerms[iri]
                        };
                        if (iri[0] in fastCurieMap) {
                            fastCurieMap[iri[0]].push(fastCurieEntry);
                        } else {
                            fastCurieMap[iri[0]] = [
                                fastCurieEntry
                            ];
                        }
                    }
                } else if (!isKeyword && !mapping._termHasColon) {
                    // add IRI to term match
                    irisToTerms[iri].push(term);
                }
                // add new entry
                if (!entry[container]) {
                    entry[container] = {
                        '@language': {
                        },
                        '@type': {
                        },
                        '@any': {
                        }
                    };
                }
                entry = entry[container];
                _addPreferredTerm(term, entry['@any'], '@none');
                if (mapping.reverse) {
                    // term is preferred for values using @reverse
                    _addPreferredTerm(term, entry['@type'], '@reverse');
                } else if (mapping['@type'] === '@none') {
                    _addPreferredTerm(term, entry['@any'], '@none');
                    _addPreferredTerm(term, entry['@language'], '@none');
                    _addPreferredTerm(term, entry['@type'], '@none');
                } else if ('@type' in mapping) {
                    // term is preferred for values using specific type
                    _addPreferredTerm(term, entry['@type'], mapping['@type']);
                } else if ('@language' in mapping && '@direction' in mapping) {
                    // term is preferred for values using specific language and direction
                    const language = mapping['@language'];
                    const direction = mapping['@direction'];
                    if (language && direction) {
                        _addPreferredTerm(term, entry['@language'], `${language}_${direction}`.toLowerCase());
                    } else if (language) {
                        _addPreferredTerm(term, entry['@language'], language.toLowerCase());
                    } else if (direction) {
                        _addPreferredTerm(term, entry['@language'], `_${direction}`);
                    } else {
                        _addPreferredTerm(term, entry['@language'], '@null');
                    }
                } else if ('@language' in mapping) {
                    _addPreferredTerm(term, entry['@language'], (mapping['@language'] || '@null').toLowerCase());
                } else if ('@direction' in mapping) {
                    if (mapping['@direction']) {
                        _addPreferredTerm(term, entry['@language'], `_${mapping['@direction']}`);
                    } else {
                        _addPreferredTerm(term, entry['@language'], '@none');
                    }
                } else if (defaultDirection) {
                    _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);
                    _addPreferredTerm(term, entry['@language'], '@none');
                    _addPreferredTerm(term, entry['@type'], '@none');
                } else {
                    // add entries for no type and no language
                    _addPreferredTerm(term, entry['@language'], defaultLanguage);
                    _addPreferredTerm(term, entry['@language'], '@none');
                    _addPreferredTerm(term, entry['@type'], '@none');
                }
            }
        }
        // build fast CURIE map
        for(const key in fastCurieMap){
            _buildIriMap(fastCurieMap, key, 1);
        }
        return inverse;
    }
    /**
   * Runs a recursive algorithm to build a lookup map for quickly finding
   * potential CURIEs.
   *
   * @param iriMap the map to build.
   * @param key the current key in the map to work on.
   * @param idx the index into the IRI to compare.
   */ function _buildIriMap(iriMap, key, idx) {
        const entries = iriMap[key];
        const next = iriMap[key] = {
        };
        let iri;
        let letter;
        for (const entry of entries){
            iri = entry.iri;
            if (idx >= iri.length) {
                letter = '';
            } else {
                letter = iri[idx];
            }
            if (letter in next) {
                next[letter].push(entry);
            } else {
                next[letter] = [
                    entry
                ];
            }
        }
        for(const key2 in next){
            if (key2 === '') {
                continue;
            }
            _buildIriMap(next, key2, idx + 1);
        }
    }
    /**
   * Adds the term for the given entry if not already added.
   *
   * @param term the term to add.
   * @param entry the inverse context typeOrLanguage entry to add to.
   * @param typeOrLanguageValue the key in the entry to add to.
   */ function _addPreferredTerm(term, entry, typeOrLanguageValue) {
        if (!entry.hasOwnProperty(typeOrLanguageValue)) {
            entry[typeOrLanguageValue] = term;
        }
    }
    /**
   * Clones an active context, creating a child active context.
   *
   * @return a clone (child) of the active context.
   */ function _cloneActiveContext() {
        const child = {
        };
        child.mappings = util.clone(this.mappings);
        child.clone = this.clone;
        child.inverse = null;
        child.getInverse = this.getInverse;
        child.protected = util.clone(this.protected);
        if (this.previousContext) {
            child.previousContext = this.previousContext.clone();
        }
        child.revertToPreviousContext = this.revertToPreviousContext;
        if ('@base' in this) {
            child['@base'] = this['@base'];
        }
        if ('@language' in this) {
            child['@language'] = this['@language'];
        }
        if ('@vocab' in this) {
            child['@vocab'] = this['@vocab'];
        }
        return child;
    }
    /**
   * Reverts any type-scoped context in this active context to the previous
   * context.
   */ function _revertToPreviousContext() {
        if (!this.previousContext) {
            return this;
        }
        return this.previousContext.clone();
    }
    return initialContext;
};
/**
 * Gets the value for the given active context key and type, null if none is
 * set or undefined if none is set and type is '@context'.
 *
 * @param ctx the active context.
 * @param key the context key.
 * @param [type] the type of value to get (eg: '@id', '@type'), if not
 *          specified gets the entire entry for a key, null if not found.
 *
 * @return the value, null, or undefined.
 */ api.getContextValue = (ctx, key, type)=>{
    // invalid key
    if (key === null) {
        if (type === '@context') return undefined;
        return null;
    }
    // get specific entry information
    if (ctx.mappings.has(key)) {
        const entry = ctx.mappings.get(key);
        if (_isUndefined(type)) // return whole entry
        return entry;
        if (entry.hasOwnProperty(type)) // return entry value for type
        return entry[type];
    }
    // get default language
    if (type === '@language' && type in ctx) return ctx[type];
    // get default direction
    if (type === '@direction' && type in ctx) return ctx[type];
    if (type === '@context') return undefined;
    return null;
};
/**
 * Processing Mode check.
 *
 * @param activeCtx the current active context.
 * @param version the string or numeric version to check.
 *
 * @return boolean.
 */ api.processingMode = (activeCtx, version)=>{
    if (version.toString() >= '1.1') return !activeCtx.processingMode || activeCtx.processingMode >= 'json-ld-' + version.toString();
    else return activeCtx.processingMode === 'json-ld-1.0';
};
/**
 * Returns whether or not the given value is a keyword.
 *
 * @param v the value to check.
 *
 * @return true if the value is a keyword, false if not.
 */ api.isKeyword = (v)=>{
    if (!_isString(v) || v[0] !== '@') return false;
    switch(v){
        case '@base':
        case '@container':
        case '@context':
        case '@default':
        case '@direction':
        case '@embed':
        case '@explicit':
        case '@graph':
        case '@id':
        case '@included':
        case '@index':
        case '@json':
        case '@language':
        case '@list':
        case '@nest':
        case '@none':
        case '@omitDefault':
        case '@prefix':
        case '@preserve':
        case '@protected':
        case '@requireAll':
        case '@reverse':
        case '@set':
        case '@type':
        case '@value':
        case '@version':
        case '@vocab':
            return true;
    }
    return false;
};
function _deepCompare(x1, x2) {
    // compare `null` or primitive types directly
    if (!(x1 && typeof x1 === 'object') || !(x2 && typeof x2 === 'object')) return x1 === x2;
    // x1 and x2 are objects (also potentially arrays)
    const x1Array = Array.isArray(x1);
    if (x1Array !== Array.isArray(x2)) return false;
    if (x1Array) {
        if (x1.length !== x2.length) return false;
        for(let i = 0; i < x1.length; ++i){
            if (!_deepCompare(x1[i], x2[i])) return false;
        }
        return true;
    }
    // x1 and x2 are non-array objects
    const k1s = Object.keys(x1);
    const k2s = Object.keys(x2);
    if (k1s.length !== k2s.length) return false;
    for(const k1 in x1){
        let v1 = x1[k1];
        let v2 = x2[k1];
        // special case: `@container` can be in any order
        if (k1 === '@container') {
            if (Array.isArray(v1) && Array.isArray(v2)) {
                v1 = v1.slice().sort();
                v2 = v2.slice().sort();
            }
        }
        if (!_deepCompare(v1, v2)) return false;
    }
    return true;
}

},{"./util":"ir9k4","./JsonLdError":"9sDAJ","./types":"1u182","./url":"ifth8"}],"7YikR":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const { isSubjectReference: _isSubjectReference  } = require('./graphTypes');
const { createMergedNodeMap: _createMergedNodeMap  } = require('./nodeMap');
const api = {
};
module.exports = api;
/**
 * Performs JSON-LD flattening.
 *
 * @param input the expanded JSON-LD to flatten.
 *
 * @return the flattened output.
 */ api.flatten = (input)=>{
    const defaultGraph = _createMergedNodeMap(input);
    // produce flattened output
    const flattened = [];
    const keys = Object.keys(defaultGraph).sort();
    for(let ki = 0; ki < keys.length; ++ki){
        const node = defaultGraph[keys[ki]];
        // only add full subjects to top-level
        if (!_isSubjectReference(node)) flattened.push(node);
    }
    return flattened;
};

},{"./graphTypes":"3hVN6","./nodeMap":"kKVUJ"}],"kKVUJ":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const { isKeyword  } = require('./context');
const graphTypes = require('./graphTypes');
const types = require('./types');
const util = require('./util');
const JsonLdError = require('./JsonLdError');
const api = {
};
module.exports = api;
/**
 * Creates a merged JSON-LD node map (node ID => node).
 *
 * @param input the expanded JSON-LD to create a node map of.
 * @param [options] the options to use:
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *
 * @return the node map.
 */ api.createMergedNodeMap = (input, options)=>{
    options = options || {
    };
    // produce a map of all subjects and name each bnode
    const issuer = options.issuer || new util.IdentifierIssuer('_:b');
    const graphs = {
        '@default': {
        }
    };
    api.createNodeMap(input, graphs, '@default', issuer);
    // add all non-default graphs to default graph
    return api.mergeNodeMaps(graphs);
};
/**
 * Recursively flattens the subjects in the given JSON-LD expanded input
 * into a node map.
 *
 * @param input the JSON-LD expanded input.
 * @param graphs a map of graph name to subject map.
 * @param graph the name of the current graph.
 * @param issuer the blank node identifier issuer.
 * @param name the name assigned to the current input if it is a bnode.
 * @param list the list to append to, null for none.
 */ api.createNodeMap = (input, graphs, graph, issuer, name, list)=>{
    // recurse through array
    if (types.isArray(input)) {
        for (const node of input)api.createNodeMap(node, graphs, graph, issuer, undefined, list);
        return;
    }
    // add non-object to list
    if (!types.isObject(input)) {
        if (list) list.push(input);
        return;
    }
    // add values to list
    if (graphTypes.isValue(input)) {
        if ('@type' in input) {
            let type = input['@type'];
            // rename @type blank node
            if (type.indexOf('_:') === 0) input['@type'] = type = issuer.getId(type);
        }
        if (list) list.push(input);
        return;
    } else if (list && graphTypes.isList(input)) {
        const _list = [];
        api.createNodeMap(input['@list'], graphs, graph, issuer, name, _list);
        list.push({
            '@list': _list
        });
        return;
    }
    // Note: At this point, input must be a subject.
    // spec requires @type to be named first, so assign names early
    if ('@type' in input) {
        const types1 = input['@type'];
        for (const type of types1)if (type.indexOf('_:') === 0) issuer.getId(type);
    }
    // get name for subject
    if (types.isUndefined(name)) name = graphTypes.isBlankNode(input) ? issuer.getId(input['@id']) : input['@id'];
    // add subject reference to list
    if (list) list.push({
        '@id': name
    });
    // create new subject or merge into existing one
    const subjects = graphs[graph];
    const subject = subjects[name] = subjects[name] || {
    };
    subject['@id'] = name;
    const properties = Object.keys(input).sort();
    for (let property of properties){
        // skip @id
        if (property === '@id') continue;
        // handle reverse properties
        if (property === '@reverse') {
            const referencedNode = {
                '@id': name
            };
            const reverseMap = input['@reverse'];
            for(const reverseProperty in reverseMap){
                const items = reverseMap[reverseProperty];
                for (const item of items){
                    let itemName = item['@id'];
                    if (graphTypes.isBlankNode(item)) itemName = issuer.getId(itemName);
                    api.createNodeMap(item, graphs, graph, issuer, itemName);
                    util.addValue(subjects[itemName], reverseProperty, referencedNode, {
                        propertyIsArray: true,
                        allowDuplicate: false
                    });
                }
            }
            continue;
        }
        // recurse into graph
        if (property === '@graph') {
            // add graph subjects map entry
            if (!(name in graphs)) graphs[name] = {
            };
            api.createNodeMap(input[property], graphs, name, issuer);
            continue;
        }
        // recurse into included
        if (property === '@included') {
            api.createNodeMap(input[property], graphs, graph, issuer);
            continue;
        }
        // copy non-@type keywords
        if (property !== '@type' && isKeyword(property)) {
            if (property === '@index' && property in subject && (input[property] !== subject[property] || input[property]['@id'] !== subject[property]['@id'])) throw new JsonLdError('Invalid JSON-LD syntax; conflicting @index property detected.', 'jsonld.SyntaxError', {
                code: 'conflicting indexes',
                subject
            });
            subject[property] = input[property];
            continue;
        }
        // iterate over objects
        const objects = input[property];
        // if property is a bnode, assign it a new id
        if (property.indexOf('_:') === 0) property = issuer.getId(property);
        // ensure property is added for empty arrays
        if (objects.length === 0) {
            util.addValue(subject, property, [], {
                propertyIsArray: true
            });
            continue;
        }
        for (let o of objects){
            if (property === '@type') // rename @type blank nodes
            o = o.indexOf('_:') === 0 ? issuer.getId(o) : o;
            // handle embedded subject or subject reference
            if (graphTypes.isSubject(o) || graphTypes.isSubjectReference(o)) {
                // skip null @id
                if ('@id' in o && !o['@id']) continue;
                // relabel blank node @id
                const id = graphTypes.isBlankNode(o) ? issuer.getId(o['@id']) : o['@id'];
                // add reference and recurse
                util.addValue(subject, property, {
                    '@id': id
                }, {
                    propertyIsArray: true,
                    allowDuplicate: false
                });
                api.createNodeMap(o, graphs, graph, issuer, id);
            } else if (graphTypes.isValue(o)) util.addValue(subject, property, o, {
                propertyIsArray: true,
                allowDuplicate: false
            });
            else if (graphTypes.isList(o)) {
                // handle @list
                const _list = [];
                api.createNodeMap(o['@list'], graphs, graph, issuer, name, _list);
                o = {
                    '@list': _list
                };
                util.addValue(subject, property, o, {
                    propertyIsArray: true,
                    allowDuplicate: false
                });
            } else {
                // handle @value
                api.createNodeMap(o, graphs, graph, issuer, name);
                util.addValue(subject, property, o, {
                    propertyIsArray: true,
                    allowDuplicate: false
                });
            }
        }
    }
};
/**
 * Merge separate named graphs into a single merged graph including
 * all nodes from the default graph and named graphs.
 *
 * @param graphs a map of graph name to subject map.
 *
 * @return the merged graph map.
 */ api.mergeNodeMapGraphs = (graphs)=>{
    const merged = {
    };
    for (const name of Object.keys(graphs).sort())for (const id of Object.keys(graphs[name]).sort()){
        const node = graphs[name][id];
        if (!(id in merged)) merged[id] = {
            '@id': id
        };
        const mergedNode = merged[id];
        for (const property of Object.keys(node).sort()){
            if (isKeyword(property) && property !== '@type') // copy keywords
            mergedNode[property] = util.clone(node[property]);
            else // merge objects
            for (const value of node[property])util.addValue(mergedNode, property, util.clone(value), {
                propertyIsArray: true,
                allowDuplicate: false
            });
        }
    }
    return merged;
};
api.mergeNodeMaps = (graphs)=>{
    // add all non-default graphs to default graph
    const defaultGraph = graphs['@default'];
    const graphNames = Object.keys(graphs).sort();
    for (const graphName of graphNames){
        if (graphName === '@default') continue;
        const nodeMap = graphs[graphName];
        let subject = defaultGraph[graphName];
        if (!subject) defaultGraph[graphName] = subject = {
            '@id': graphName,
            '@graph': []
        };
        else if (!('@graph' in subject)) subject['@graph'] = [];
        const graph = subject['@graph'];
        for (const id of Object.keys(nodeMap).sort()){
            const node = nodeMap[id];
            // only add full subjects
            if (!graphTypes.isSubjectReference(node)) graph.push(node);
        }
    }
    return defaultGraph;
};

},{"./context":"1zTsA","./graphTypes":"3hVN6","./types":"1u182","./util":"ir9k4","./JsonLdError":"9sDAJ"}],"ixnCb":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const JsonLdError = require('./JsonLdError');
const graphTypes = require('./graphTypes');
const types = require('./types');
const util = require('./util');
// constants
const { // RDF,
RDF_LIST , RDF_FIRST , RDF_REST , RDF_NIL , RDF_TYPE , // RDF_PLAIN_LITERAL,
// RDF_XML_LITERAL,
RDF_JSON_LITERAL , // RDF_OBJECT,
// RDF_LANGSTRING,
// XSD,
XSD_BOOLEAN , XSD_DOUBLE , XSD_INTEGER , XSD_STRING ,  } = require('./constants');
const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
const api = {
};
module.exports = api;
/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset the RDF dataset.
 * @param options the RDF serialization options.
 *
 * @return a Promise that resolves to the JSON-LD output.
 */ api.fromRDF = async (dataset, { useRdfType =false , useNativeTypes =false , rdfDirection =null  })=>{
    const defaultGraph = {
    };
    const graphMap = {
        '@default': defaultGraph
    };
    const referencedOnce = {
    };
    for (const quad of dataset){
        // TODO: change 'name' to 'graph'
        const name = quad.graph.termType === 'DefaultGraph' ? '@default' : quad.graph.value;
        if (!(name in graphMap)) graphMap[name] = {
        };
        if (name !== '@default' && !(name in defaultGraph)) defaultGraph[name] = {
            '@id': name
        };
        const nodeMap = graphMap[name];
        // get subject, predicate, object
        const s = quad.subject.value;
        const p = quad.predicate.value;
        const o = quad.object;
        if (!(s in nodeMap)) nodeMap[s] = {
            '@id': s
        };
        const node = nodeMap[s];
        const objectIsNode = o.termType.endsWith('Node');
        if (objectIsNode && !(o.value in nodeMap)) nodeMap[o.value] = {
            '@id': o.value
        };
        if (p === RDF_TYPE && !useRdfType && objectIsNode) {
            util.addValue(node, '@type', o.value, {
                propertyIsArray: true
            });
            continue;
        }
        const value = _RDFToObject(o, useNativeTypes, rdfDirection);
        util.addValue(node, p, value, {
            propertyIsArray: true
        });
        // object may be an RDF list/partial list node but we can't know easily
        // until all triples are read
        if (objectIsNode) {
            if (o.value === RDF_NIL) {
                // track rdf:nil uniquely per graph
                const object = nodeMap[o.value];
                if (!('usages' in object)) object.usages = [];
                object.usages.push({
                    node,
                    property: p,
                    value
                });
            } else if (o.value in referencedOnce) // object referenced more than once
            referencedOnce[o.value] = false;
            else // keep track of single reference
            referencedOnce[o.value] = {
                node,
                property: p,
                value
            };
        }
    }
    /*
  for(let name in dataset) {
    const graph = dataset[name];
    if(!(name in graphMap)) {
      graphMap[name] = {};
    }
    if(name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {'@id': name};
    }
    const nodeMap = graphMap[name];
    for(let ti = 0; ti < graph.length; ++ti) {
      const triple = graph[ti];

      // get subject, predicate, object
      const s = triple.subject.value;
      const p = triple.predicate.value;
      const o = triple.object;

      if(!(s in nodeMap)) {
        nodeMap[s] = {'@id': s};
      }
      const node = nodeMap[s];

      const objectIsId = (o.type === 'IRI' || o.type === 'blank node');
      if(objectIsId && !(o.value in nodeMap)) {
        nodeMap[o.value] = {'@id': o.value};
      }

      if(p === RDF_TYPE && !useRdfType && objectIsId) {
        util.addValue(node, '@type', o.value, {propertyIsArray: true});
        continue;
      }

      const value = _RDFToObject(o, useNativeTypes);
      util.addValue(node, p, value, {propertyIsArray: true});

      // object may be an RDF list/partial list node but we can't know easily
      // until all triples are read
      if(objectIsId) {
        if(o.value === RDF_NIL) {
          // track rdf:nil uniquely per graph
          const object = nodeMap[o.value];
          if(!('usages' in object)) {
            object.usages = [];
          }
          object.usages.push({
            node: node,
            property: p,
            value: value
          });
        } else if(o.value in referencedOnce) {
          // object referenced more than once
          referencedOnce[o.value] = false;
        } else {
          // keep track of single reference
          referencedOnce[o.value] = {
            node: node,
            property: p,
            value: value
          };
        }
      }
    }
  }*/ // convert linked lists to @list arrays
    for(const name in graphMap){
        const graphObject = graphMap[name];
        // no @lists to be converted, continue
        if (!(RDF_NIL in graphObject)) continue;
        // iterate backwards through each RDF list
        const nil = graphObject[RDF_NIL];
        if (!nil.usages) continue;
        for (let usage of nil.usages){
            let node = usage.node;
            let property = usage.property;
            let head = usage.value;
            const list = [];
            const listNodes = [];
            // ensure node is a well-formed list node; it must:
            // 1. Be referenced only once.
            // 2. Have an array for rdf:first that has 1 item.
            // 3. Have an array for rdf:rest that has 1 item.
            // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
            //   optionally, @type where the value is rdf:List.
            let nodeKeyCount = Object.keys(node).length;
            while(property === RDF_REST && types.isObject(referencedOnce[node['@id']]) && types.isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 && types.isArray(node[RDF_REST]) && node[RDF_REST].length === 1 && (nodeKeyCount === 3 || nodeKeyCount === 4 && types.isArray(node['@type']) && node['@type'].length === 1 && node['@type'][0] === RDF_LIST)){
                list.push(node[RDF_FIRST][0]);
                listNodes.push(node['@id']);
                // get next node, moving backwards through list
                usage = referencedOnce[node['@id']];
                node = usage.node;
                property = usage.property;
                head = usage.value;
                nodeKeyCount = Object.keys(node).length;
                // if node is not a blank node, then list head found
                if (!graphTypes.isBlankNode(node)) break;
            }
            // transform list into @list object
            delete head['@id'];
            head['@list'] = list.reverse();
            for (const listNode of listNodes)delete graphObject[listNode];
        }
        delete nil.usages;
    }
    const result = [];
    const subjects = Object.keys(defaultGraph).sort();
    for (const subject of subjects){
        const node = defaultGraph[subject];
        if (subject in graphMap) {
            const graph = node['@graph'] = [];
            const graphObject = graphMap[subject];
            const graphSubjects = Object.keys(graphObject).sort();
            for (const graphSubject of graphSubjects){
                const node = graphObject[graphSubject];
                // only add full subjects to top-level
                if (!graphTypes.isSubjectReference(node)) graph.push(node);
            }
        }
        // only add full subjects to top-level
        if (!graphTypes.isSubjectReference(node)) result.push(node);
    }
    return result;
};
/**
 * Converts an RDF triple object to a JSON-LD object.
 *
 * @param o the RDF triple object to convert.
 * @param useNativeTypes true to output native types, false not to.
 *
 * @return the JSON-LD object.
 */ function _RDFToObject(o, useNativeTypes, rdfDirection) {
    // convert NamedNode/BlankNode object to JSON-LD
    if (o.termType.endsWith('Node')) return {
        '@id': o.value
    };
    // convert literal to JSON-LD
    const rval = {
        '@value': o.value
    };
    // add language
    if (o.language) rval['@language'] = o.language;
    else {
        let type = o.datatype.value;
        if (!type) type = XSD_STRING;
        if (type === RDF_JSON_LITERAL) {
            type = '@json';
            try {
                rval['@value'] = JSON.parse(rval['@value']);
            } catch (e) {
                throw new JsonLdError('JSON literal could not be parsed.', 'jsonld.InvalidJsonLiteral', {
                    code: 'invalid JSON literal',
                    value: rval['@value'],
                    cause: e
                });
            }
        }
        // use native types for certain xsd types
        if (useNativeTypes) {
            if (type === XSD_BOOLEAN) {
                if (rval['@value'] === 'true') rval['@value'] = true;
                else if (rval['@value'] === 'false') rval['@value'] = false;
            } else if (types.isNumeric(rval['@value'])) {
                if (type === XSD_INTEGER) {
                    const i = parseInt(rval['@value'], 10);
                    if (i.toFixed(0) === rval['@value']) rval['@value'] = i;
                } else if (type === XSD_DOUBLE) rval['@value'] = parseFloat(rval['@value']);
            }
            // do not add native type
            if (![
                XSD_BOOLEAN,
                XSD_INTEGER,
                XSD_DOUBLE,
                XSD_STRING
            ].includes(type)) rval['@type'] = type;
        } else if (rdfDirection === 'i18n-datatype' && type.startsWith('https://www.w3.org/ns/i18n#')) {
            const [, language, direction] = type.split(/[#_]/);
            if (language.length > 0) {
                rval['@language'] = language;
                if (!language.match(REGEX_BCP47)) console.warn(`@language must be valid BCP47: ${language}`);
            }
            rval['@direction'] = direction;
        } else if (type !== XSD_STRING) rval['@type'] = type;
    }
    return rval;
}

},{"./JsonLdError":"9sDAJ","./graphTypes":"3hVN6","./types":"1u182","./util":"ir9k4","./constants":"bST2R"}],"4Be25":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const { createNodeMap  } = require('./nodeMap');
const { isKeyword  } = require('./context');
const graphTypes = require('./graphTypes');
const jsonCanonicalize = require('canonicalize');
const types = require('./types');
const util = require('./util');
const { // RDF,
// RDF_LIST,
RDF_FIRST , RDF_REST , RDF_NIL , RDF_TYPE , // RDF_PLAIN_LITERAL,
// RDF_XML_LITERAL,
RDF_JSON_LITERAL , // RDF_OBJECT,
RDF_LANGSTRING , // XSD,
XSD_BOOLEAN , XSD_DOUBLE , XSD_INTEGER , XSD_STRING ,  } = require('./constants');
const { isAbsolute: _isAbsoluteIri  } = require('./url');
const api = {
};
module.exports = api;
/**
 * Outputs an RDF dataset for the expanded JSON-LD input.
 *
 * @param input the expanded JSON-LD input.
 * @param options the RDF serialization options.
 *
 * @return the RDF dataset.
 */ api.toRDF = (input, options)=>{
    // create node map for default graph (and any named graphs)
    const issuer = new util.IdentifierIssuer('_:b');
    const nodeMap = {
        '@default': {
        }
    };
    createNodeMap(input, nodeMap, '@default', issuer);
    const dataset = [];
    const graphNames = Object.keys(nodeMap).sort();
    for (const graphName of graphNames){
        let graphTerm;
        if (graphName === '@default') graphTerm = {
            termType: 'DefaultGraph',
            value: ''
        };
        else if (_isAbsoluteIri(graphName)) {
            if (graphName.startsWith('_:')) graphTerm = {
                termType: 'BlankNode'
            };
            else graphTerm = {
                termType: 'NamedNode'
            };
            graphTerm.value = graphName;
        } else continue;
        _graphToRDF(dataset, nodeMap[graphName], graphTerm, issuer, options);
    }
    return dataset;
};
/**
 * Adds RDF quads for a particular graph to the given dataset.
 *
 * @param dataset the dataset to append RDF quads to.
 * @param graph the graph to create RDF quads for.
 * @param graphTerm the graph term for each quad.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param options the RDF serialization options.
 *
 * @return the array of RDF triples for the given graph.
 */ function _graphToRDF(dataset, graph, graphTerm, issuer, options) {
    const ids = Object.keys(graph).sort();
    for (const id of ids){
        const node = graph[id];
        const properties = Object.keys(node).sort();
        for (let property of properties){
            const items = node[property];
            if (property === '@type') property = RDF_TYPE;
            else if (isKeyword(property)) continue;
            for (const item of items){
                // RDF subject
                const subject = {
                    termType: id.startsWith('_:') ? 'BlankNode' : 'NamedNode',
                    value: id
                };
                // skip relative IRI subjects (not valid RDF)
                if (!_isAbsoluteIri(id)) continue;
                // RDF predicate
                const predicate = {
                    termType: property.startsWith('_:') ? 'BlankNode' : 'NamedNode',
                    value: property
                };
                // skip relative IRI predicates (not valid RDF)
                if (!_isAbsoluteIri(property)) continue;
                // skip blank node predicates unless producing generalized RDF
                if (predicate.termType === 'BlankNode' && !options.produceGeneralizedRdf) continue;
                // convert list, value or node object to triple
                const object = _objectToRDF(item, issuer, dataset, graphTerm, options.rdfDirection);
                // skip null objects (they are relative IRIs)
                if (object) dataset.push({
                    subject,
                    predicate,
                    object,
                    graph: graphTerm
                });
            }
        }
    }
}
/**
 * Converts a @list value into linked list of blank node RDF quads
 * (an RDF collection).
 *
 * @param list the @list value.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the array of quads to append to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the head of the list.
 */ function _listToRDF(list, issuer, dataset, graphTerm, rdfDirection) {
    const first = {
        termType: 'NamedNode',
        value: RDF_FIRST
    };
    const rest = {
        termType: 'NamedNode',
        value: RDF_REST
    };
    const nil = {
        termType: 'NamedNode',
        value: RDF_NIL
    };
    const last = list.pop();
    // Result is the head of the list
    const result = last ? {
        termType: 'BlankNode',
        value: issuer.getId()
    } : nil;
    let subject = result;
    for (const item of list){
        const object = _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection);
        const next = {
            termType: 'BlankNode',
            value: issuer.getId()
        };
        dataset.push({
            subject,
            predicate: first,
            object,
            graph: graphTerm
        });
        dataset.push({
            subject,
            predicate: rest,
            object: next,
            graph: graphTerm
        });
        subject = next;
    }
    // Tail of list
    if (last) {
        const object = _objectToRDF(last, issuer, dataset, graphTerm, rdfDirection);
        dataset.push({
            subject,
            predicate: first,
            object,
            graph: graphTerm
        });
        dataset.push({
            subject,
            predicate: rest,
            object: nil,
            graph: graphTerm
        });
    }
    return result;
}
/**
 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string,
 * node object to an RDF resource, or adds a list.
 *
 * @param item the JSON-LD value or node object.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the dataset to append RDF quads to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the RDF literal or RDF resource.
 */ function _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection) {
    const object = {
    };
    // convert value object to RDF
    if (graphTypes.isValue(item)) {
        object.termType = 'Literal';
        object.value = undefined;
        object.datatype = {
            termType: 'NamedNode'
        };
        let value = item['@value'];
        const datatype = item['@type'] || null;
        // convert to XSD/JSON datatypes as appropriate
        if (datatype === '@json') {
            object.value = jsonCanonicalize(value);
            object.datatype.value = RDF_JSON_LITERAL;
        } else if (types.isBoolean(value)) {
            object.value = value.toString();
            object.datatype.value = datatype || XSD_BOOLEAN;
        } else if (types.isDouble(value) || datatype === XSD_DOUBLE) {
            if (!types.isDouble(value)) value = parseFloat(value);
            // canonical double representation
            object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
            object.datatype.value = datatype || XSD_DOUBLE;
        } else if (types.isNumber(value)) {
            object.value = value.toFixed(0);
            object.datatype.value = datatype || XSD_INTEGER;
        } else if (rdfDirection === 'i18n-datatype' && '@direction' in item) {
            const datatype = 'https://www.w3.org/ns/i18n#' + (item['@language'] || '') + `_${item['@direction']}`;
            object.datatype.value = datatype;
            object.value = value;
        } else if ('@language' in item) {
            object.value = value;
            object.datatype.value = datatype || RDF_LANGSTRING;
            object.language = item['@language'];
        } else {
            object.value = value;
            object.datatype.value = datatype || XSD_STRING;
        }
    } else if (graphTypes.isList(item)) {
        const _list = _listToRDF(item['@list'], issuer, dataset, graphTerm, rdfDirection);
        object.termType = _list.termType;
        object.value = _list.value;
    } else {
        // convert string/node object to RDF
        const id = types.isObject(item) ? item['@id'] : item;
        object.termType = id.startsWith('_:') ? 'BlankNode' : 'NamedNode';
        object.value = id;
    }
    // skip relative IRIs, not valid RDF
    if (object.termType === 'NamedNode' && !_isAbsoluteIri(object.value)) return null;
    return object;
}

},{"./nodeMap":"kKVUJ","./context":"1zTsA","./graphTypes":"3hVN6","canonicalize":"6mgnS","./types":"1u182","./util":"ir9k4","./constants":"bST2R","./url":"ifth8"}],"6mgnS":[function(require,module,exports) {
/* jshint esversion: 6 */ /* jslint node: true */ 'use strict';
module.exports = function serialize(object) {
    if (object === null || typeof object !== 'object' || object.toJSON != null) return JSON.stringify(object);
    if (Array.isArray(object)) return '[' + object.reduce((t, cv, ci)=>{
        const comma = ci === 0 ? '' : ',';
        const value = cv === undefined || typeof cv === 'symbol' ? null : cv;
        return t + comma + serialize(value);
    }, '') + ']';
    return '{' + Object.keys(object).sort().reduce((t, cv, ci)=>{
        if (object[cv] === undefined || typeof object[cv] === 'symbol') return t;
        const comma = t.length === 0 ? '' : ',';
        return t + comma + serialize(cv) + ':' + serialize(object[cv]);
    }, '') + '}';
};

},{}],"iqUf2":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const { isKeyword  } = require('./context');
const graphTypes = require('./graphTypes');
const types = require('./types');
const util = require('./util');
const url = require('./url');
const JsonLdError = require('./JsonLdError');
const { createNodeMap: _createNodeMap , mergeNodeMapGraphs: _mergeNodeMapGraphs  } = require('./nodeMap');
const api = {
};
module.exports = api;
/**
 * Performs JSON-LD `merged` framing.
 *
 * @param input the expanded JSON-LD to frame.
 * @param frame the expanded JSON-LD frame to use.
 * @param options the framing options.
 *
 * @return the framed output.
 */ api.frameMergedOrDefault = (input, frame, options)=>{
    // create framing state
    const state = {
        options,
        embedded: false,
        graph: '@default',
        graphMap: {
            '@default': {
            }
        },
        subjectStack: [],
        link: {
        },
        bnodeMap: {
        }
    };
    // produce a map of all graphs and name each bnode
    // FIXME: currently uses subjects from @merged graph only
    const issuer = new util.IdentifierIssuer('_:b');
    _createNodeMap(input, state.graphMap, '@default', issuer);
    if (options.merged) {
        state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);
        state.graph = '@merged';
    }
    state.subjects = state.graphMap[state.graph];
    // frame the subjects
    const framed = [];
    api.frame(state, Object.keys(state.subjects).sort(), frame, framed);
    // If pruning blank nodes, find those to prune
    if (options.pruneBlankNodeIdentifiers) // remove all blank nodes appearing only once, done in compaction
    options.bnodesToClear = Object.keys(state.bnodeMap).filter((id)=>state.bnodeMap[id].length === 1
    );
    // remove @preserve from results
    options.link = {
    };
    return _cleanupPreserve(framed, options);
};
/**
 * Frames subjects according to the given frame.
 *
 * @param state the current framing state.
 * @param subjects the subjects to filter.
 * @param frame the frame.
 * @param parent the parent subject or top-level array.
 * @param property the parent property, initialized to null.
 */ api.frame = (state, subjects, frame, parent, property = null)=>{
    // validate the frame
    _validateFrame(frame);
    frame = frame[0];
    // get flags for current frame
    const options = state.options;
    const flags = {
        embed: _getFrameFlag(frame, options, 'embed'),
        explicit: _getFrameFlag(frame, options, 'explicit'),
        requireAll: _getFrameFlag(frame, options, 'requireAll')
    };
    // get link for current graph
    if (!state.link.hasOwnProperty(state.graph)) state.link[state.graph] = {
    };
    const link = state.link[state.graph];
    // filter out subjects that match the frame
    const matches = _filterSubjects(state, subjects, frame, flags);
    // add matches to output
    const ids = Object.keys(matches).sort();
    for (const id of ids){
        const subject = matches[id];
        /* Note: In order to treat each top-level match as a compartmentalized
    result, clear the unique embedded subjects map when the property is null,
    which only occurs at the top-level. */ if (property === null) state.uniqueEmbeds = {
            [state.graph]: {
            }
        };
        else state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {
        };
        if (flags.embed === '@link' && id in link) {
            // TODO: may want to also match an existing linked subject against
            // the current frame ... so different frames could produce different
            // subjects that are only shared in-memory when the frames are the same
            // add existing linked subject
            _addFrameOutput(parent, property, link[id]);
            continue;
        }
        // start output for subject
        const output = {
            '@id': id
        };
        if (id.indexOf('_:') === 0) util.addValue(state.bnodeMap, id, output, {
            propertyIsArray: true
        });
        link[id] = output;
        // validate @embed
        if ((flags.embed === '@first' || flags.embed === '@last') && state.is11) throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {
            code: 'invalid @embed value',
            frame
        });
        if (!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) continue;
        // if embed is @never or if a circular reference would be created by an
        // embed, the subject cannot be embedded, just add the reference;
        // note that a circular reference won't occur when the embed flag is
        // `@link` as the above check will short-circuit before reaching this point
        if (state.embedded && (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack))) {
            _addFrameOutput(parent, property, output);
            continue;
        }
        // if only the first (or once) should be embedded
        if (state.embedded && (flags.embed == '@first' || flags.embed == '@once') && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
            _addFrameOutput(parent, property, output);
            continue;
        }
        // if only the last match should be embedded
        if (flags.embed === '@last') // remove any existing embed
        {
            if (id in state.uniqueEmbeds[state.graph]) _removeEmbed(state, id);
        }
        state.uniqueEmbeds[state.graph][id] = {
            parent,
            property
        };
        // push matching subject onto stack to enable circular embed checks
        state.subjectStack.push({
            subject,
            graph: state.graph
        });
        // subject is also the name of a graph
        if (id in state.graphMap) {
            let recurse = false;
            let subframe = null;
            if (!('@graph' in frame)) {
                recurse = state.graph !== '@merged';
                subframe = {
                };
            } else {
                subframe = frame['@graph'][0];
                recurse = !(id === '@merged' || id === '@default');
                if (!types.isObject(subframe)) subframe = {
                };
            }
            if (recurse) // recurse into graph
            api.frame({
                ...state,
                graph: id,
                embedded: false
            }, Object.keys(state.graphMap[id]).sort(), [
                subframe
            ], output, '@graph');
        }
        // if frame has @included, recurse over its sub-frame
        if ('@included' in frame) api.frame({
            ...state,
            embedded: false
        }, subjects, frame['@included'], output, '@included');
        // iterate over subject properties
        for (const prop of Object.keys(subject).sort()){
            // copy keywords to output
            if (isKeyword(prop)) {
                output[prop] = util.clone(subject[prop]);
                if (prop === '@type') {
                    // count bnode values of @type
                    for (const type of subject['@type'])if (type.indexOf('_:') === 0) util.addValue(state.bnodeMap, type, output, {
                        propertyIsArray: true
                    });
                }
                continue;
            }
            // explicit is on and property isn't in the frame, skip processing
            if (flags.explicit && !(prop in frame)) continue;
            // add objects
            for (const o of subject[prop]){
                const subframe = prop in frame ? frame[prop] : _createImplicitFrame(flags);
                // recurse into list
                if (graphTypes.isList(o)) {
                    const subframe = frame[prop] && frame[prop][0] && frame[prop][0]['@list'] ? frame[prop][0]['@list'] : _createImplicitFrame(flags);
                    // add empty list
                    const list = {
                        '@list': []
                    };
                    _addFrameOutput(output, prop, list);
                    // add list objects
                    const src = o['@list'];
                    for (const oo of src)if (graphTypes.isSubjectReference(oo)) // recurse into subject reference
                    api.frame({
                        ...state,
                        embedded: true
                    }, [
                        oo['@id']
                    ], subframe, list, '@list');
                    else // include other values automatically
                    _addFrameOutput(list, '@list', util.clone(oo));
                } else if (graphTypes.isSubjectReference(o)) // recurse into subject reference
                api.frame({
                    ...state,
                    embedded: true
                }, [
                    o['@id']
                ], subframe, output, prop);
                else if (_valueMatch(subframe[0], o)) // include other values, if they match
                _addFrameOutput(output, prop, util.clone(o));
            }
        }
        // handle defaults
        for (const prop1 of Object.keys(frame).sort()){
            // skip keywords
            if (prop1 === '@type') {
                if (!types.isObject(frame[prop1][0]) || !('@default' in frame[prop1][0])) continue;
            // allow through default types
            } else if (isKeyword(prop1)) continue;
            // if omit default is off, then include default values for properties
            // that appear in the next frame but are not in the matching subject
            const next = frame[prop1][0] || {
            };
            const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');
            if (!omitDefaultOn && !(prop1 in output)) {
                let preserve = '@null';
                if ('@default' in next) preserve = util.clone(next['@default']);
                if (!types.isArray(preserve)) preserve = [
                    preserve
                ];
                output[prop1] = [
                    {
                        '@preserve': preserve
                    }
                ];
            }
        }
        // if embed reverse values by finding nodes having this subject as a value
        // of the associated property
        for (const reverseProp of Object.keys(frame['@reverse'] || {
        }).sort()){
            const subframe = frame['@reverse'][reverseProp];
            for (const subject of Object.keys(state.subjects)){
                const nodeValues = util.getValues(state.subjects[subject], reverseProp);
                if (nodeValues.some((v)=>v['@id'] === id
                )) {
                    // node has property referencing this subject, recurse
                    output['@reverse'] = output['@reverse'] || {
                    };
                    util.addValue(output['@reverse'], reverseProp, [], {
                        propertyIsArray: true
                    });
                    api.frame({
                        ...state,
                        embedded: true
                    }, [
                        subject
                    ], subframe, output['@reverse'][reverseProp], property);
                }
            }
        }
        // add output to parent
        _addFrameOutput(parent, property, output);
        // pop matching subject from circular ref-checking stack
        state.subjectStack.pop();
    }
};
/**
 * Replace `@null` with `null`, removing it from arrays.
 *
 * @param input the framed, compacted output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */ api.cleanupNull = (input, options)=>{
    // recurse through arrays
    if (types.isArray(input)) {
        const noNulls = input.map((v)=>api.cleanupNull(v, options)
        );
        return noNulls.filter((v)=>v
        ); // removes nulls from array
    }
    if (input === '@null') return null;
    if (types.isObject(input)) {
        // handle in-memory linked nodes
        if ('@id' in input) {
            const id = input['@id'];
            if (options.link.hasOwnProperty(id)) {
                const idx = options.link[id].indexOf(input);
                if (idx !== -1) // already visited
                return options.link[id][idx];
                // prevent circular visitation
                options.link[id].push(input);
            } else // prevent circular visitation
            options.link[id] = [
                input
            ];
        }
        for(const key in input)input[key] = api.cleanupNull(input[key], options);
    }
    return input;
};
/**
 * Creates an implicit frame when recursing through subject matches. If
 * a frame doesn't have an explicit frame for a particular property, then
 * a wildcard child frame will be created that uses the same flags that the
 * parent frame used.
 *
 * @param flags the current framing flags.
 *
 * @return the implicit frame.
 */ function _createImplicitFrame(flags) {
    const frame = {
    };
    for(const key in flags)if (flags[key] !== undefined) frame['@' + key] = [
        flags[key]
    ];
    return [
        frame
    ];
}
/**
 * Checks the current subject stack to see if embedding the given subject
 * would cause a circular reference.
 *
 * @param subjectToEmbed the subject to embed.
 * @param graph the graph the subject to embed is in.
 * @param subjectStack the current stack of subjects.
 *
 * @return true if a circular reference would be created, false if not.
 */ function _createsCircularReference(subjectToEmbed, graph, subjectStack) {
    for(let i = subjectStack.length - 1; i >= 0; --i){
        const subject = subjectStack[i];
        if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) return true;
    }
    return false;
}
/**
 * Gets the frame flag value for the given flag name.
 *
 * @param frame the frame.
 * @param options the framing options.
 * @param name the flag name.
 *
 * @return the flag value.
 */ function _getFrameFlag(frame, options, name) {
    const flag = '@' + name;
    let rval = flag in frame ? frame[flag][0] : options[name];
    if (name === 'embed') {
        // default is "@last"
        // backwards-compatibility support for "embed" maps:
        // true => "@last"
        // false => "@never"
        if (rval === true) rval = '@once';
        else if (rval === false) rval = '@never';
        else if (rval !== '@always' && rval !== '@never' && rval !== '@link' && rval !== '@first' && rval !== '@last' && rval !== '@once') throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {
            code: 'invalid @embed value',
            frame
        });
    }
    return rval;
}
/**
 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
 *
 * @param frame the frame to validate.
 */ function _validateFrame(frame) {
    if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {
        frame
    });
    if ('@id' in frame[0]) for (const id of util.asArray(frame[0]['@id'])){
        // @id must be wildcard or an IRI
        if (!(types.isObject(id) || url.isAbsolute(id)) || types.isString(id) && id.indexOf('_:') === 0) throw new JsonLdError('Invalid JSON-LD syntax; invalid @id in frame.', 'jsonld.SyntaxError', {
            code: 'invalid frame',
            frame
        });
    }
    if ('@type' in frame[0]) for (const type of util.asArray(frame[0]['@type'])){
        // @id must be wildcard or an IRI
        if (!(types.isObject(type) || url.isAbsolute(type)) || types.isString(type) && type.indexOf('_:') === 0) throw new JsonLdError('Invalid JSON-LD syntax; invalid @type in frame.', 'jsonld.SyntaxError', {
            code: 'invalid frame',
            frame
        });
    }
}
/**
 * Returns a map of all of the subjects that match a parsed frame.
 *
 * @param state the current framing state.
 * @param subjects the set of subjects to filter.
 * @param frame the parsed frame.
 * @param flags the frame flags.
 *
 * @return all of the matched subjects.
 */ function _filterSubjects(state, subjects, frame, flags) {
    // filter subjects in @id order
    const rval = {
    };
    for (const id of subjects){
        const subject = state.graphMap[state.graph][id];
        if (_filterSubject(state, subject, frame, flags)) rval[id] = subject;
    }
    return rval;
}
/**
 * Returns true if the given subject matches the given frame.
 *
 * Matches either based on explicit type inclusion where the node has any
 * type listed in the frame. If the frame has empty types defined matches
 * nodes not having a @type. If the frame has a type of {} defined matches
 * nodes having any type defined.
 *
 * Otherwise, does duck typing, where the node must have all of the
 * properties defined in the frame.
 *
 * @param state the current framing state.
 * @param subject the subject to check.
 * @param frame the frame to check.
 * @param flags the frame flags.
 *
 * @return true if the subject matches, false if not.
 */ function _filterSubject(state, subject, frame, flags) {
    // check ducktype
    let wildcard = true;
    let matchesSome = false;
    for(const key in frame){
        let matchThis = false;
        const nodeValues = util.getValues(subject, key);
        const isEmpty = util.getValues(frame, key).length === 0;
        if (key === '@id') {
            // match on no @id or any matching @id, including wildcard
            if (types.isEmptyObject(frame['@id'][0] || {
            })) matchThis = true;
            else if (frame['@id'].length >= 0) matchThis = frame['@id'].includes(nodeValues[0]);
            if (!flags.requireAll) return matchThis;
        } else if (key === '@type') {
            // check @type (object value means 'any' type,
            // fall through to ducktyping)
            wildcard = false;
            if (isEmpty) {
                if (nodeValues.length > 0) // don't match on no @type
                return false;
                matchThis = true;
            } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) // match on wildcard @type if there is a type
            matchThis = nodeValues.length > 0;
            else {
                // match on a specific @type
                for (const type of frame['@type'])if (types.isObject(type) && '@default' in type) // match on default object
                matchThis = true;
                else matchThis = matchThis || nodeValues.some((tt)=>tt === type
                );
            }
            if (!flags.requireAll) return matchThis;
        } else if (isKeyword(key)) continue;
        else {
            // Force a copy of this frame entry so it can be manipulated
            const thisFrame = util.getValues(frame, key)[0];
            let hasDefault = false;
            if (thisFrame) {
                _validateFrame([
                    thisFrame
                ]);
                hasDefault = '@default' in thisFrame;
            }
            // no longer a wildcard pattern if frame has any non-keyword properties
            wildcard = false;
            // skip, but allow match if node has no value for property, and frame has
            // a default value
            if (nodeValues.length === 0 && hasDefault) continue;
            // if frame value is empty, don't match if subject has any value
            if (nodeValues.length > 0 && isEmpty) return false;
            if (thisFrame === undefined) {
                // node does not match if values is not empty and the value of property
                // in frame is match none.
                if (nodeValues.length > 0) return false;
                matchThis = true;
            } else {
                if (graphTypes.isList(thisFrame)) {
                    const listValue = thisFrame['@list'][0];
                    if (graphTypes.isList(nodeValues[0])) {
                        const nodeListValues = nodeValues[0]['@list'];
                        if (graphTypes.isValue(listValue)) // match on any matching value
                        matchThis = nodeListValues.some((lv)=>_valueMatch(listValue, lv)
                        );
                        else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) matchThis = nodeListValues.some((lv)=>_nodeMatch(state, listValue, lv, flags)
                        );
                    }
                } else if (graphTypes.isValue(thisFrame)) matchThis = nodeValues.some((nv)=>_valueMatch(thisFrame, nv)
                );
                else if (graphTypes.isSubjectReference(thisFrame)) matchThis = nodeValues.some((nv)=>_nodeMatch(state, thisFrame, nv, flags)
                );
                else if (types.isObject(thisFrame)) matchThis = nodeValues.length > 0;
                else matchThis = false;
            }
        }
        // all non-defaulted values must match if requireAll is set
        if (!matchThis && flags.requireAll) return false;
        matchesSome = matchesSome || matchThis;
    }
    // return true if wildcard or subject matches some properties
    return wildcard || matchesSome;
}
/**
 * Removes an existing embed.
 *
 * @param state the current framing state.
 * @param id the @id of the embed to remove.
 */ function _removeEmbed(state, id1) {
    // get existing embed
    const embeds = state.uniqueEmbeds[state.graph];
    const embed = embeds[id1];
    const parent = embed.parent;
    const property = embed.property;
    // create reference to replace embed
    const subject = {
        '@id': id1
    };
    // remove existing embed
    if (types.isArray(parent)) {
        // replace subject with reference
        for(let i = 0; i < parent.length; ++i)if (util.compareValues(parent[i], subject)) {
            parent[i] = subject;
            break;
        }
    } else {
        // replace subject with reference
        const useArray = types.isArray(parent[property]);
        util.removeValue(parent, property, subject, {
            propertyIsArray: useArray
        });
        util.addValue(parent, property, subject, {
            propertyIsArray: useArray
        });
    }
    // recursively remove dependent dangling embeds
    const removeDependents = (id)=>{
        // get embed keys as a separate array to enable deleting keys in map
        const ids = Object.keys(embeds);
        for (const next of ids)if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {
            delete embeds[next];
            removeDependents(next);
        }
    };
    removeDependents(id1);
}
/**
 * Removes the @preserve keywords from expanded result of framing.
 *
 * @param input the framed, framed output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */ function _cleanupPreserve(input, options) {
    // recurse through arrays
    if (types.isArray(input)) return input.map((value)=>_cleanupPreserve(value, options)
    );
    if (types.isObject(input)) {
        // remove @preserve
        if ('@preserve' in input) return input['@preserve'][0];
        // skip @values
        if (graphTypes.isValue(input)) return input;
        // recurse through @lists
        if (graphTypes.isList(input)) {
            input['@list'] = _cleanupPreserve(input['@list'], options);
            return input;
        }
        // handle in-memory linked nodes
        if ('@id' in input) {
            const id = input['@id'];
            if (options.link.hasOwnProperty(id)) {
                const idx = options.link[id].indexOf(input);
                if (idx !== -1) // already visited
                return options.link[id][idx];
                // prevent circular visitation
                options.link[id].push(input);
            } else // prevent circular visitation
            options.link[id] = [
                input
            ];
        }
        // recurse through properties
        for(const prop in input){
            // potentially remove the id, if it is an unreference bnode
            if (prop === '@id' && options.bnodesToClear.includes(input[prop])) {
                delete input['@id'];
                continue;
            }
            input[prop] = _cleanupPreserve(input[prop], options);
        }
    }
    return input;
}
/**
 * Adds framing output to the given parent.
 *
 * @param parent the parent to add to.
 * @param property the parent property.
 * @param output the output to add.
 */ function _addFrameOutput(parent, property, output) {
    if (types.isObject(parent)) util.addValue(parent, property, output, {
        propertyIsArray: true
    });
    else parent.push(output);
}
/**
 * Node matches if it is a node, and matches the pattern as a frame.
 *
 * @param state the current framing state.
 * @param pattern used to match value
 * @param value to check
 * @param flags the frame flags.
 */ function _nodeMatch(state, pattern, value, flags) {
    if (!('@id' in value)) return false;
    const nodeObject = state.subjects[value['@id']];
    return nodeObject && _filterSubject(state, nodeObject, pattern, flags);
}
/**
 * Value matches if it is a value and matches the value pattern
 *
 * * `pattern` is empty
 * * @values are the same, or `pattern[@value]` is a wildcard, and
 * * @types are the same or `value[@type]` is not null
 *   and `pattern[@type]` is `{}`, or `value[@type]` is null
 *   and `pattern[@type]` is null or `[]`, and
 * * @languages are the same or `value[@language]` is not null
 *   and `pattern[@language]` is `{}`, or `value[@language]` is null
 *   and `pattern[@language]` is null or `[]`.
 *
 * @param pattern used to match value
 * @param value to check
 */ function _valueMatch(pattern, value) {
    const v1 = value['@value'];
    const t1 = value['@type'];
    const l1 = value['@language'];
    const v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [
        pattern['@value']
    ] : [];
    const t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [
        pattern['@type']
    ] : [];
    const l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [
        pattern['@language']
    ] : [];
    if (v2.length === 0 && t2.length === 0 && l2.length === 0) return true;
    if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) return false;
    if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) return false;
    if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) return false;
    return true;
}

},{"./context":"1zTsA","./graphTypes":"3hVN6","./types":"1u182","./util":"ir9k4","./url":"ifth8","./JsonLdError":"9sDAJ","./nodeMap":"kKVUJ"}],"7lEWa":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
const JsonLdError = require('./JsonLdError');
const { isArray: _isArray , isObject: _isObject , isString: _isString , isUndefined: _isUndefined  } = require('./types');
const { isList: _isList , isValue: _isValue , isGraph: _isGraph , isSimpleGraph: _isSimpleGraph , isSubjectReference: _isSubjectReference  } = require('./graphTypes');
const { expandIri: _expandIri , getContextValue: _getContextValue , isKeyword: _isKeyword , process: _processContext , processingMode: _processingMode  } = require('./context');
const { removeBase: _removeBase , prependBase: _prependBase  } = require('./url');
const { addValue: _addValue , asArray: _asArray , compareShortestLeast: _compareShortestLeast  } = require('./util');
const api = {
};
module.exports = api;
/**
 * Recursively compacts an element using the given active context. All values
 * must be in expanded form before this method is called.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the compacted property associated with the element
 *          to compact, null for none.
 * @param element the element to compact.
 * @param options the compaction options.
 * @param compactionMap the compaction map to use.
 *
 * @return a promise that resolves to the compacted value.
 */ api.compact = async ({ activeCtx , activeProperty =null , element , options ={
} , compactionMap =()=>undefined
  })=>{
    // recursively compact array
    if (_isArray(element)) {
        let rval = [];
        for(let i = 0; i < element.length; ++i){
            // compact, dropping any null values unless custom mapped
            let compacted = await api.compact({
                activeCtx,
                activeProperty,
                element: element[i],
                options,
                compactionMap
            });
            if (compacted === null) {
                compacted = await compactionMap({
                    unmappedValue: element[i],
                    activeCtx,
                    activeProperty,
                    parent: element,
                    index: i,
                    options
                });
                if (compacted === undefined) continue;
            }
            rval.push(compacted);
        }
        if (options.compactArrays && rval.length === 1) {
            // use single element if no container is specified
            const container = _getContextValue(activeCtx, activeProperty, '@container') || [];
            if (container.length === 0) rval = rval[0];
        }
        return rval;
    }
    // use any scoped context on activeProperty
    const ctx = _getContextValue(activeCtx, activeProperty, '@context');
    if (!_isUndefined(ctx)) activeCtx = await _processContext({
        activeCtx,
        localCtx: ctx,
        propagate: true,
        overrideProtected: true,
        options
    });
    // recursively compact object
    if (_isObject(element)) {
        if (options.link && '@id' in element && options.link.hasOwnProperty(element['@id'])) {
            // check for a linked element to reuse
            const linked = options.link[element['@id']];
            for(let i = 0; i < linked.length; ++i){
                if (linked[i].expanded === element) return linked[i].compacted;
            }
        }
        // do value compaction on @values and subject references
        if (_isValue(element) || _isSubjectReference(element)) {
            const rval = api.compactValue({
                activeCtx,
                activeProperty,
                value: element,
                options
            });
            if (options.link && _isSubjectReference(element)) {
                // store linked element
                if (!options.link.hasOwnProperty(element['@id'])) options.link[element['@id']] = [];
                options.link[element['@id']].push({
                    expanded: element,
                    compacted: rval
                });
            }
            return rval;
        }
        // if expanded property is @list and we're contained within a list
        // container, recursively compact this item to an array
        if (_isList(element)) {
            const container = _getContextValue(activeCtx, activeProperty, '@container') || [];
            if (container.includes('@list')) return api.compact({
                activeCtx,
                activeProperty,
                element: element['@list'],
                options,
                compactionMap
            });
        }
        // FIXME: avoid misuse of active property as an expanded property?
        const insideReverse = activeProperty === '@reverse';
        const rval = {
        };
        // original context before applying property-scoped and local contexts
        const inputCtx = activeCtx;
        // revert to previous context, if there is one,
        // and element is not a value object or a node reference
        if (!_isValue(element) && !_isSubjectReference(element)) activeCtx = activeCtx.revertToPreviousContext();
        // apply property-scoped context after reverting term-scoped context
        const propertyScopedCtx = _getContextValue(inputCtx, activeProperty, '@context');
        if (!_isUndefined(propertyScopedCtx)) activeCtx = await _processContext({
            activeCtx,
            localCtx: propertyScopedCtx,
            propagate: true,
            overrideProtected: true,
            options
        });
        if (options.link && '@id' in element) {
            // store linked element
            if (!options.link.hasOwnProperty(element['@id'])) options.link[element['@id']] = [];
            options.link[element['@id']].push({
                expanded: element,
                compacted: rval
            });
        }
        // apply any context defined on an alias of @type
        // if key is @type and any compacted value is a term having a local
        // context, overlay that context
        let types = element['@type'] || [];
        if (types.length > 1) types = Array.from(types).sort();
        // find all type-scoped contexts based on current context, prior to
        // updating it
        const typeContext = activeCtx;
        for (const type of types){
            const compactedType = api.compactIri({
                activeCtx: typeContext,
                iri: type,
                relativeTo: {
                    vocab: true
                }
            });
            // Use any type-scoped context defined on this value
            const ctx = _getContextValue(inputCtx, compactedType, '@context');
            if (!_isUndefined(ctx)) activeCtx = await _processContext({
                activeCtx,
                localCtx: ctx,
                options,
                propagate: false
            });
        }
        // process element keys in order
        const keys = Object.keys(element).sort();
        for (const expandedProperty of keys){
            const expandedValue = element[expandedProperty];
            // compact @id
            if (expandedProperty === '@id') {
                let compactedValue = _asArray(expandedValue).map((expandedIri)=>api.compactIri({
                        activeCtx,
                        iri: expandedIri,
                        relativeTo: {
                            vocab: false
                        },
                        base: options.base
                    })
                );
                if (compactedValue.length === 1) compactedValue = compactedValue[0];
                // use keyword alias and add value
                const alias = api.compactIri({
                    activeCtx,
                    iri: '@id',
                    relativeTo: {
                        vocab: true
                    }
                });
                rval[alias] = compactedValue;
                continue;
            }
            // compact @type(s)
            if (expandedProperty === '@type') {
                // resolve type values against previous context
                let compactedValue = _asArray(expandedValue).map((expandedIri)=>api.compactIri({
                        activeCtx: inputCtx,
                        iri: expandedIri,
                        relativeTo: {
                            vocab: true
                        }
                    })
                );
                if (compactedValue.length === 1) compactedValue = compactedValue[0];
                // use keyword alias and add value
                const alias = api.compactIri({
                    activeCtx,
                    iri: '@type',
                    relativeTo: {
                        vocab: true
                    }
                });
                const container = _getContextValue(activeCtx, alias, '@container') || [];
                // treat as array for @type if @container includes @set
                const typeAsSet = container.includes('@set') && _processingMode(activeCtx, 1.1);
                const isArray = typeAsSet || _isArray(compactedValue) && expandedValue.length === 0;
                _addValue(rval, alias, compactedValue, {
                    propertyIsArray: isArray
                });
                continue;
            }
            // handle @reverse
            if (expandedProperty === '@reverse') {
                // recursively compact expanded value
                const compactedValue = await api.compact({
                    activeCtx,
                    activeProperty: '@reverse',
                    element: expandedValue,
                    options,
                    compactionMap
                });
                // handle double-reversed properties
                for(const compactedProperty in compactedValue)if (activeCtx.mappings.has(compactedProperty) && activeCtx.mappings.get(compactedProperty).reverse) {
                    const value = compactedValue[compactedProperty];
                    const container = _getContextValue(activeCtx, compactedProperty, '@container') || [];
                    const useArray = container.includes('@set') || !options.compactArrays;
                    _addValue(rval, compactedProperty, value, {
                        propertyIsArray: useArray
                    });
                    delete compactedValue[compactedProperty];
                }
                if (Object.keys(compactedValue).length > 0) {
                    // use keyword alias and add value
                    const alias = api.compactIri({
                        activeCtx,
                        iri: expandedProperty,
                        relativeTo: {
                            vocab: true
                        }
                    });
                    _addValue(rval, alias, compactedValue);
                }
                continue;
            }
            if (expandedProperty === '@preserve') {
                // compact using activeProperty
                const compactedValue = await api.compact({
                    activeCtx,
                    activeProperty,
                    element: expandedValue,
                    options,
                    compactionMap
                });
                if (!(_isArray(compactedValue) && compactedValue.length === 0)) _addValue(rval, expandedProperty, compactedValue);
                continue;
            }
            // handle @index property
            if (expandedProperty === '@index') {
                // drop @index if inside an @index container
                const container = _getContextValue(activeCtx, activeProperty, '@container') || [];
                if (container.includes('@index')) continue;
                // use keyword alias and add value
                const alias = api.compactIri({
                    activeCtx,
                    iri: expandedProperty,
                    relativeTo: {
                        vocab: true
                    }
                });
                _addValue(rval, alias, expandedValue);
                continue;
            }
            // skip array processing for keywords that aren't
            // @graph, @list, or @included
            if (expandedProperty !== '@graph' && expandedProperty !== '@list' && expandedProperty !== '@included' && _isKeyword(expandedProperty)) {
                // use keyword alias and add value as is
                const alias = api.compactIri({
                    activeCtx,
                    iri: expandedProperty,
                    relativeTo: {
                        vocab: true
                    }
                });
                _addValue(rval, alias, expandedValue);
                continue;
            }
            // Note: expanded value must be an array due to expansion algorithm.
            if (!_isArray(expandedValue)) throw new JsonLdError('JSON-LD expansion error; expanded value must be an array.', 'jsonld.SyntaxError');
            // preserve empty arrays
            if (expandedValue.length === 0) {
                const itemActiveProperty = api.compactIri({
                    activeCtx,
                    iri: expandedProperty,
                    value: expandedValue,
                    relativeTo: {
                        vocab: true
                    },
                    reverse: insideReverse
                });
                const nestProperty = activeCtx.mappings.has(itemActiveProperty) ? activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
                let nestResult = rval;
                if (nestProperty) {
                    _checkNestProperty(activeCtx, nestProperty, options);
                    if (!_isObject(rval[nestProperty])) rval[nestProperty] = {
                    };
                    nestResult = rval[nestProperty];
                }
                _addValue(nestResult, itemActiveProperty, expandedValue, {
                    propertyIsArray: true
                });
            }
            // recusively process array values
            for (const expandedItem of expandedValue){
                // compact property and get container type
                const itemActiveProperty = api.compactIri({
                    activeCtx,
                    iri: expandedProperty,
                    value: expandedItem,
                    relativeTo: {
                        vocab: true
                    },
                    reverse: insideReverse
                });
                // if itemActiveProperty is a @nest property, add values to nestResult,
                // otherwise rval
                const nestProperty = activeCtx.mappings.has(itemActiveProperty) ? activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
                let nestResult = rval;
                if (nestProperty) {
                    _checkNestProperty(activeCtx, nestProperty, options);
                    if (!_isObject(rval[nestProperty])) rval[nestProperty] = {
                    };
                    nestResult = rval[nestProperty];
                }
                const container = _getContextValue(activeCtx, itemActiveProperty, '@container') || [];
                // get simple @graph or @list value if appropriate
                const isGraph = _isGraph(expandedItem);
                const isList = _isList(expandedItem);
                let inner;
                if (isList) inner = expandedItem['@list'];
                else if (isGraph) inner = expandedItem['@graph'];
                // recursively compact expanded item
                let compactedItem = await api.compact({
                    activeCtx,
                    activeProperty: itemActiveProperty,
                    element: isList || isGraph ? inner : expandedItem,
                    options,
                    compactionMap
                });
                // handle @list
                if (isList) {
                    // ensure @list value is an array
                    if (!_isArray(compactedItem)) compactedItem = [
                        compactedItem
                    ];
                    if (!container.includes('@list')) {
                        // wrap using @list alias
                        compactedItem = {
                            [api.compactIri({
                                activeCtx,
                                iri: '@list',
                                relativeTo: {
                                    vocab: true
                                }
                            })]: compactedItem
                        };
                        // include @index from expanded @list, if any
                        if ('@index' in expandedItem) compactedItem[api.compactIri({
                            activeCtx,
                            iri: '@index',
                            relativeTo: {
                                vocab: true
                            }
                        })] = expandedItem['@index'];
                    } else {
                        _addValue(nestResult, itemActiveProperty, compactedItem, {
                            valueIsArray: true,
                            allowDuplicate: true
                        });
                        continue;
                    }
                }
                // Graph object compaction cases
                if (isGraph) {
                    if (container.includes('@graph') && (container.includes('@id') || container.includes('@index') && _isSimpleGraph(expandedItem))) {
                        // get or create the map object
                        let mapObject;
                        if (nestResult.hasOwnProperty(itemActiveProperty)) mapObject = nestResult[itemActiveProperty];
                        else nestResult[itemActiveProperty] = mapObject = {
                        };
                        // index on @id or @index or alias of @none
                        const key = (container.includes('@id') ? expandedItem['@id'] : expandedItem['@index']) || api.compactIri({
                            activeCtx,
                            iri: '@none',
                            relativeTo: {
                                vocab: true
                            }
                        });
                        // add compactedItem to map, using value of `@id` or a new blank
                        // node identifier
                        _addValue(mapObject, key, compactedItem, {
                            propertyIsArray: !options.compactArrays || container.includes('@set')
                        });
                    } else if (container.includes('@graph') && _isSimpleGraph(expandedItem)) {
                        // container includes @graph but not @id or @index and value is a
                        // simple graph object add compact value
                        // if compactedItem contains multiple values, it is wrapped in
                        // `@included`
                        if (_isArray(compactedItem) && compactedItem.length > 1) compactedItem = {
                            '@included': compactedItem
                        };
                        _addValue(nestResult, itemActiveProperty, compactedItem, {
                            propertyIsArray: !options.compactArrays || container.includes('@set')
                        });
                    } else {
                        // wrap using @graph alias, remove array if only one item and
                        // compactArrays not set
                        if (_isArray(compactedItem) && compactedItem.length === 1 && options.compactArrays) compactedItem = compactedItem[0];
                        compactedItem = {
                            [api.compactIri({
                                activeCtx,
                                iri: '@graph',
                                relativeTo: {
                                    vocab: true
                                }
                            })]: compactedItem
                        };
                        // include @id from expanded graph, if any
                        if ('@id' in expandedItem) compactedItem[api.compactIri({
                            activeCtx,
                            iri: '@id',
                            relativeTo: {
                                vocab: true
                            }
                        })] = expandedItem['@id'];
                        // include @index from expanded graph, if any
                        if ('@index' in expandedItem) compactedItem[api.compactIri({
                            activeCtx,
                            iri: '@index',
                            relativeTo: {
                                vocab: true
                            }
                        })] = expandedItem['@index'];
                        _addValue(nestResult, itemActiveProperty, compactedItem, {
                            propertyIsArray: !options.compactArrays || container.includes('@set')
                        });
                    }
                } else if (container.includes('@language') || container.includes('@index') || container.includes('@id') || container.includes('@type')) {
                    // handle language and index maps
                    // get or create the map object
                    let mapObject;
                    if (nestResult.hasOwnProperty(itemActiveProperty)) mapObject = nestResult[itemActiveProperty];
                    else nestResult[itemActiveProperty] = mapObject = {
                    };
                    let key;
                    if (container.includes('@language')) {
                        // if container is a language map, simplify compacted value to
                        // a simple string
                        if (_isValue(compactedItem)) compactedItem = compactedItem['@value'];
                        key = expandedItem['@language'];
                    } else if (container.includes('@index')) {
                        const indexKey = _getContextValue(activeCtx, itemActiveProperty, '@index') || '@index';
                        const containerKey = api.compactIri({
                            activeCtx,
                            iri: indexKey,
                            relativeTo: {
                                vocab: true
                            }
                        });
                        if (indexKey === '@index') {
                            key = expandedItem['@index'];
                            delete compactedItem[containerKey];
                        } else {
                            let others;
                            [key, ...others] = _asArray(compactedItem[indexKey] || []);
                            if (!_isString(key)) // Will use @none if it isn't a string.
                            key = null;
                            else switch(others.length){
                                case 0:
                                    delete compactedItem[indexKey];
                                    break;
                                case 1:
                                    compactedItem[indexKey] = others[0];
                                    break;
                                default:
                                    compactedItem[indexKey] = others;
                                    break;
                            }
                        }
                    } else if (container.includes('@id')) {
                        const idKey = api.compactIri({
                            activeCtx,
                            iri: '@id',
                            relativeTo: {
                                vocab: true
                            }
                        });
                        key = compactedItem[idKey];
                        delete compactedItem[idKey];
                    } else if (container.includes('@type')) {
                        const typeKey = api.compactIri({
                            activeCtx,
                            iri: '@type',
                            relativeTo: {
                                vocab: true
                            }
                        });
                        let types;
                        [key, ...types] = _asArray(compactedItem[typeKey] || []);
                        switch(types.length){
                            case 0:
                                delete compactedItem[typeKey];
                                break;
                            case 1:
                                compactedItem[typeKey] = types[0];
                                break;
                            default:
                                compactedItem[typeKey] = types;
                                break;
                        }
                        // If compactedItem contains a single entry
                        // whose key maps to @id, recompact without @type
                        if (Object.keys(compactedItem).length === 1 && '@id' in expandedItem) compactedItem = await api.compact({
                            activeCtx,
                            activeProperty: itemActiveProperty,
                            element: {
                                '@id': expandedItem['@id']
                            },
                            options,
                            compactionMap
                        });
                    }
                    // if compacting this value which has no key, index on @none
                    if (!key) key = api.compactIri({
                        activeCtx,
                        iri: '@none',
                        relativeTo: {
                            vocab: true
                        }
                    });
                    // add compact value to map object using key from expanded value
                    // based on the container type
                    _addValue(mapObject, key, compactedItem, {
                        propertyIsArray: container.includes('@set')
                    });
                } else {
                    // use an array if: compactArrays flag is false,
                    // @container is @set or @list , value is an empty
                    // array, or key is @graph
                    const isArray = !options.compactArrays || container.includes('@set') || container.includes('@list') || _isArray(compactedItem) && compactedItem.length === 0 || expandedProperty === '@list' || expandedProperty === '@graph';
                    // add compact value
                    _addValue(nestResult, itemActiveProperty, compactedItem, {
                        propertyIsArray: isArray
                    });
                }
            }
        }
        return rval;
    }
    // only primitives remain which are already compact
    return element;
};
/**
 * Compacts an IRI or keyword into a term or prefix if it can be. If the
 * IRI has an associated value it may be passed.
 *
 * @param activeCtx the active context to use.
 * @param iri the IRI to compact.
 * @param value the value to check or null.
 * @param relativeTo options for how to compact IRIs:
 *          vocab: true to split after @vocab, false not to.
 * @param reverse true if a reverse property is being compacted, false if not.
 * @param base the absolute URL to use for compacting document-relative IRIs.
 *
 * @return the compacted term, prefix, keyword alias, or the original IRI.
 */ api.compactIri = ({ activeCtx , iri , value =null , relativeTo ={
    vocab: false
} , reverse =false , base =null  })=>{
    // can't compact null
    if (iri === null) return iri;
    // if context is from a property term scoped context composed with a
    // type-scoped context, then use the previous context instead
    if (activeCtx.isPropertyTermScoped && activeCtx.previousContext) activeCtx = activeCtx.previousContext;
    const inverseCtx = activeCtx.getInverse();
    // if term is a keyword, it may be compacted to a simple alias
    if (_isKeyword(iri) && iri in inverseCtx && '@none' in inverseCtx[iri] && '@type' in inverseCtx[iri]['@none'] && '@none' in inverseCtx[iri]['@none']['@type']) return inverseCtx[iri]['@none']['@type']['@none'];
    // use inverse context to pick a term if iri is relative to vocab
    if (relativeTo.vocab && iri in inverseCtx) {
        const defaultLanguage = activeCtx['@language'] || '@none';
        // prefer @index if available in value
        const containers = [];
        if (_isObject(value) && '@index' in value && !('@graph' in value)) containers.push('@index', '@index@set');
        // if value is a preserve object, use its value
        if (_isObject(value) && '@preserve' in value) value = value['@preserve'][0];
        // prefer most specific container including @graph, prefering @set
        // variations
        if (_isGraph(value)) {
            // favor indexmap if the graph is indexed
            if ('@index' in value) containers.push('@graph@index', '@graph@index@set', '@index', '@index@set');
            // favor idmap if the graph is has an @id
            if ('@id' in value) containers.push('@graph@id', '@graph@id@set');
            containers.push('@graph', '@graph@set', '@set');
            // allow indexmap if the graph is not indexed
            if (!('@index' in value)) containers.push('@graph@index', '@graph@index@set', '@index', '@index@set');
            // allow idmap if the graph does not have an @id
            if (!('@id' in value)) containers.push('@graph@id', '@graph@id@set');
        } else if (_isObject(value) && !_isValue(value)) containers.push('@id', '@id@set', '@type', '@set@type');
        // defaults for term selection based on type/language
        let typeOrLanguage = '@language';
        let typeOrLanguageValue = '@null';
        if (reverse) {
            typeOrLanguage = '@type';
            typeOrLanguageValue = '@reverse';
            containers.push('@set');
        } else if (_isList(value)) {
            // choose the most specific term that works for all elements in @list
            // only select @list containers if @index is NOT in value
            if (!('@index' in value)) containers.push('@list');
            const list = value['@list'];
            if (list.length === 0) {
                // any empty list can be matched against any term that uses the
                // @list container regardless of @type or @language
                typeOrLanguage = '@any';
                typeOrLanguageValue = '@none';
            } else {
                let commonLanguage = list.length === 0 ? defaultLanguage : null;
                let commonType = null;
                for(let i = 0; i < list.length; ++i){
                    const item = list[i];
                    let itemLanguage = '@none';
                    let itemType = '@none';
                    if (_isValue(item)) {
                        if ('@direction' in item) {
                            const lang = (item['@language'] || '').toLowerCase();
                            const dir = item['@direction'];
                            itemLanguage = `${lang}_${dir}`;
                        } else if ('@language' in item) itemLanguage = item['@language'].toLowerCase();
                        else if ('@type' in item) itemType = item['@type'];
                        else // plain literal
                        itemLanguage = '@null';
                    } else itemType = '@id';
                    if (commonLanguage === null) commonLanguage = itemLanguage;
                    else if (itemLanguage !== commonLanguage && _isValue(item)) commonLanguage = '@none';
                    if (commonType === null) commonType = itemType;
                    else if (itemType !== commonType) commonType = '@none';
                    // there are different languages and types in the list, so choose
                    // the most generic term, no need to keep iterating the list
                    if (commonLanguage === '@none' && commonType === '@none') break;
                }
                commonLanguage = commonLanguage || '@none';
                commonType = commonType || '@none';
                if (commonType !== '@none') {
                    typeOrLanguage = '@type';
                    typeOrLanguageValue = commonType;
                } else typeOrLanguageValue = commonLanguage;
            }
        } else {
            if (_isValue(value)) {
                if ('@language' in value && !('@index' in value)) {
                    containers.push('@language', '@language@set');
                    typeOrLanguageValue = value['@language'];
                    const dir = value['@direction'];
                    if (dir) typeOrLanguageValue = `${typeOrLanguageValue}_${dir}`;
                } else if ('@direction' in value && !('@index' in value)) typeOrLanguageValue = `_${value['@direction']}`;
                else if ('@type' in value) {
                    typeOrLanguage = '@type';
                    typeOrLanguageValue = value['@type'];
                }
            } else {
                typeOrLanguage = '@type';
                typeOrLanguageValue = '@id';
            }
            containers.push('@set');
        }
        // do term selection
        containers.push('@none');
        // an index map can be used to index values using @none, so add as a low
        // priority
        if (_isObject(value) && !('@index' in value)) // allow indexing even if no @index present
        containers.push('@index', '@index@set');
        // values without type or language can use @language map
        if (_isValue(value) && Object.keys(value).length === 1) // allow indexing even if no @index present
        containers.push('@language', '@language@set');
        const term = _selectTerm(activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);
        if (term !== null) return term;
    }
    // no term match, use @vocab if available
    if (relativeTo.vocab) {
        if ('@vocab' in activeCtx) {
            // determine if vocab is a prefix of the iri
            const vocab = activeCtx['@vocab'];
            if (iri.indexOf(vocab) === 0 && iri !== vocab) {
                // use suffix as relative iri if it is not a term in the active context
                const suffix = iri.substr(vocab.length);
                if (!activeCtx.mappings.has(suffix)) return suffix;
            }
        }
    }
    // no term or @vocab match, check for possible CURIEs
    let choice = null;
    // TODO: make FastCurieMap a class with a method to do this lookup
    const partialMatches = [];
    let iriMap = activeCtx.fastCurieMap;
    // check for partial matches of against `iri`, which means look until
    // iri.length - 1, not full length
    const maxPartialLength = iri.length - 1;
    for(let i = 0; i < maxPartialLength && (iri[i] in iriMap); ++i){
        iriMap = iriMap[iri[i]];
        if ('' in iriMap) partialMatches.push(iriMap[''][0]);
    }
    // check partial matches in reverse order to prefer longest ones first
    for(let i1 = partialMatches.length - 1; i1 >= 0; --i1){
        const entry = partialMatches[i1];
        const terms = entry.terms;
        for (const term of terms){
            // a CURIE is usable if:
            // 1. it has no mapping, OR
            // 2. value is null, which means we're not compacting an @value, AND
            //   the mapping matches the IRI
            const curie = term + ':' + iri.substr(entry.iri.length);
            const isUsableCurie = activeCtx.mappings.get(term)._prefix && (!activeCtx.mappings.has(curie) || value === null && activeCtx.mappings.get(curie)['@id'] === iri);
            // select curie if it is shorter or the same length but lexicographically
            // less than the current choice
            if (isUsableCurie && (choice === null || _compareShortestLeast(curie, choice) < 0)) choice = curie;
        }
    }
    // return chosen curie
    if (choice !== null) return choice;
    // If iri could be confused with a compact IRI using a term in this context,
    // signal an error
    for (const [term, td] of activeCtx.mappings){
        if (td && td._prefix && iri.startsWith(term + ':')) throw new JsonLdError(`Absolute IRI "${iri}" confused with prefix "${term}".`, 'jsonld.SyntaxError', {
            code: 'IRI confused with prefix',
            context: activeCtx
        });
    }
    // compact IRI relative to base
    if (!relativeTo.vocab) {
        if ('@base' in activeCtx) {
            if (!activeCtx['@base']) // The None case preserves rval as potentially relative
            return iri;
            else return _removeBase(_prependBase(base, activeCtx['@base']), iri);
        } else return _removeBase(base, iri);
    }
    // return IRI as is
    return iri;
};
/**
 * Performs value compaction on an object with '@value' or '@id' as the only
 * property.
 *
 * @param activeCtx the active context.
 * @param activeProperty the active property that points to the value.
 * @param value the value to compact.
 * @param {Object} [options] - processing options.
 *
 * @return the compaction result.
 */ api.compactValue = ({ activeCtx , activeProperty , value , options  })=>{
    // value is a @value
    if (_isValue(value)) {
        // get context rules
        const type = _getContextValue(activeCtx, activeProperty, '@type');
        const language = _getContextValue(activeCtx, activeProperty, '@language');
        const direction = _getContextValue(activeCtx, activeProperty, '@direction');
        const container = _getContextValue(activeCtx, activeProperty, '@container') || [];
        // whether or not the value has an @index that must be preserved
        const preserveIndex = '@index' in value && !container.includes('@index');
        // if there's no @index to preserve ...
        if (!preserveIndex && type !== '@none') {
            // matching @type or @language specified in context, compact value
            if (value['@type'] === type) return value['@value'];
            if ('@language' in value && value['@language'] === language && '@direction' in value && value['@direction'] === direction) return value['@value'];
            if ('@language' in value && value['@language'] === language) return value['@value'];
            if ('@direction' in value && value['@direction'] === direction) return value['@value'];
        }
        // return just the value of @value if all are true:
        // 1. @value is the only key or @index isn't being preserved
        // 2. there is no default language or @value is not a string or
        //   the key has a mapping with a null @language
        const keyCount = Object.keys(value).length;
        const isValueOnlyKey = keyCount === 1 || keyCount === 2 && '@index' in value && !preserveIndex;
        const hasDefaultLanguage = '@language' in activeCtx;
        const isValueString = _isString(value['@value']);
        const hasNullMapping = activeCtx.mappings.has(activeProperty) && activeCtx.mappings.get(activeProperty)['@language'] === null;
        if (isValueOnlyKey && type !== '@none' && (!hasDefaultLanguage || !isValueString || hasNullMapping)) return value['@value'];
        const rval = {
        };
        // preserve @index
        if (preserveIndex) rval[api.compactIri({
            activeCtx,
            iri: '@index',
            relativeTo: {
                vocab: true
            }
        })] = value['@index'];
        if ('@type' in value) // compact @type IRI
        rval[api.compactIri({
            activeCtx,
            iri: '@type',
            relativeTo: {
                vocab: true
            }
        })] = api.compactIri({
            activeCtx,
            iri: value['@type'],
            relativeTo: {
                vocab: true
            }
        });
        else if ('@language' in value) // alias @language
        rval[api.compactIri({
            activeCtx,
            iri: '@language',
            relativeTo: {
                vocab: true
            }
        })] = value['@language'];
        if ('@direction' in value) // alias @direction
        rval[api.compactIri({
            activeCtx,
            iri: '@direction',
            relativeTo: {
                vocab: true
            }
        })] = value['@direction'];
        // alias @value
        rval[api.compactIri({
            activeCtx,
            iri: '@value',
            relativeTo: {
                vocab: true
            }
        })] = value['@value'];
        return rval;
    }
    // value is a subject reference
    const expandedProperty = _expandIri(activeCtx, activeProperty, {
        vocab: true
    }, options);
    const type = _getContextValue(activeCtx, activeProperty, '@type');
    const compacted = api.compactIri({
        activeCtx,
        iri: value['@id'],
        relativeTo: {
            vocab: type === '@vocab'
        },
        base: options.base
    });
    // compact to scalar
    if (type === '@id' || type === '@vocab' || expandedProperty === '@graph') return compacted;
    return {
        [api.compactIri({
            activeCtx,
            iri: '@id',
            relativeTo: {
                vocab: true
            }
        })]: compacted
    };
};
/**
 * Picks the preferred compaction term from the given inverse context entry.
 *
 * @param activeCtx the active context.
 * @param iri the IRI to pick the term for.
 * @param value the value to pick the term for.
 * @param containers the preferred containers.
 * @param typeOrLanguage either '@type' or '@language'.
 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
 *
 * @return the preferred term.
 */ function _selectTerm(activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
    if (typeOrLanguageValue === null) typeOrLanguageValue = '@null';
    // preferences for the value of @type or @language
    const prefs = [];
    // determine prefs for @id based on whether or not value compacts to a term
    if ((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') && _isObject(value) && '@id' in value) {
        // prefer @reverse first
        if (typeOrLanguageValue === '@reverse') prefs.push('@reverse');
        // try to compact value to a term
        const term = api.compactIri({
            activeCtx,
            iri: value['@id'],
            relativeTo: {
                vocab: true
            }
        });
        if (activeCtx.mappings.has(term) && activeCtx.mappings.get(term) && activeCtx.mappings.get(term)['@id'] === value['@id']) // prefer @vocab
        prefs.push.apply(prefs, [
            '@vocab',
            '@id'
        ]);
        else // prefer @id
        prefs.push.apply(prefs, [
            '@id',
            '@vocab'
        ]);
    } else {
        prefs.push(typeOrLanguageValue);
        // consider direction only
        const langDir = prefs.find((el)=>el.includes('_')
        );
        if (langDir) // consider _dir portion
        prefs.push(langDir.replace(/^[^_]+_/, '_'));
    }
    prefs.push('@none');
    const containerMap = activeCtx.inverse[iri];
    for (const container of containers){
        // if container not available in the map, continue
        if (!(container in containerMap)) continue;
        const typeOrLanguageValueMap = containerMap[container][typeOrLanguage];
        for (const pref of prefs){
            // if type/language option not available in the map, continue
            if (!(pref in typeOrLanguageValueMap)) continue;
            // select term
            return typeOrLanguageValueMap[pref];
        }
    }
    return null;
}
/**
 * The value of `@nest` in the term definition must either be `@nest`, or a term
 * which resolves to `@nest`.
 *
 * @param activeCtx the active context.
 * @param nestProperty a term in the active context or `@nest`.
 * @param {Object} [options] - processing options.
 */ function _checkNestProperty(activeCtx, nestProperty, options) {
    if (_expandIri(activeCtx, nestProperty, {
        vocab: true
    }, options) !== '@nest') throw new JsonLdError("JSON-LD compact error; nested property must have an @nest value resolving to @nest.", 'jsonld.SyntaxError', {
        code: 'invalid @nest value'
    });
}

},{"./JsonLdError":"9sDAJ","./types":"1u182","./graphTypes":"3hVN6","./context":"1zTsA","./url":"ifth8","./util":"ir9k4"}],"1BSnh":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */ 'use strict';
module.exports = (jsonld)=>{
    class JsonLdProcessor {
        toString() {
            return '[object JsonLdProcessor]';
        }
    }
    Object.defineProperty(JsonLdProcessor, 'prototype', {
        writable: false,
        enumerable: false
    });
    Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
        writable: true,
        enumerable: false,
        configurable: true,
        value: JsonLdProcessor
    });
    // The Web IDL test harness will check the number of parameters defined in
    // the functions below. The number of parameters must exactly match the
    // required (non-optional) parameters of the JsonLdProcessor interface as
    // defined here:
    // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface
    JsonLdProcessor.compact = function(input, ctx) {
        if (arguments.length < 2) return Promise.reject(new TypeError('Could not compact, too few arguments.'));
        return jsonld.compact(input, ctx);
    };
    JsonLdProcessor.expand = function(input) {
        if (arguments.length < 1) return Promise.reject(new TypeError('Could not expand, too few arguments.'));
        return jsonld.expand(input);
    };
    JsonLdProcessor.flatten = function(input) {
        if (arguments.length < 1) return Promise.reject(new TypeError('Could not flatten, too few arguments.'));
        return jsonld.flatten(input);
    };
    return JsonLdProcessor;
};

},{}],"6eLdg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Named exports
parcelHelpers.export(exports, "Lexer", ()=>_n3LexerDefault.default
);
parcelHelpers.export(exports, "Parser", ()=>_n3ParserDefault.default
);
parcelHelpers.export(exports, "Writer", ()=>_n3WriterDefault.default
);
parcelHelpers.export(exports, "Store", ()=>_n3StoreDefault.default
);
parcelHelpers.export(exports, "StreamParser", ()=>_n3StreamParserDefault.default
);
parcelHelpers.export(exports, "StreamWriter", ()=>_n3StreamWriterDefault.default
);
parcelHelpers.export(exports, "Util", ()=>_n3Util
);
parcelHelpers.export(exports, "DataFactory", ()=>_n3DataFactoryDefault.default
);
parcelHelpers.export(exports, "Term", ()=>_n3DataFactory.Term
);
parcelHelpers.export(exports, "NamedNode", ()=>_n3DataFactory.NamedNode
);
parcelHelpers.export(exports, "Literal", ()=>_n3DataFactory.Literal
);
parcelHelpers.export(exports, "BlankNode", ()=>_n3DataFactory.BlankNode
);
parcelHelpers.export(exports, "Variable", ()=>_n3DataFactory.Variable
);
parcelHelpers.export(exports, "DefaultGraph", ()=>_n3DataFactory.DefaultGraph
);
parcelHelpers.export(exports, "Quad", ()=>_n3DataFactory.Quad
);
parcelHelpers.export(exports, "Triple", ()=>_n3DataFactory.Triple
);
parcelHelpers.export(exports, "termFromId", ()=>_n3DataFactory.termFromId
);
parcelHelpers.export(exports, "termToId", ()=>_n3DataFactory.termToId
);
var _n3Lexer = require("./N3Lexer");
var _n3LexerDefault = parcelHelpers.interopDefault(_n3Lexer);
var _n3Parser = require("./N3Parser");
var _n3ParserDefault = parcelHelpers.interopDefault(_n3Parser);
var _n3Writer = require("./N3Writer");
var _n3WriterDefault = parcelHelpers.interopDefault(_n3Writer);
var _n3Store = require("./N3Store");
var _n3StoreDefault = parcelHelpers.interopDefault(_n3Store);
var _n3StreamParser = require("./N3StreamParser");
var _n3StreamParserDefault = parcelHelpers.interopDefault(_n3StreamParser);
var _n3StreamWriter = require("./N3StreamWriter");
var _n3StreamWriterDefault = parcelHelpers.interopDefault(_n3StreamWriter);
var _n3Util = require("./N3Util");
var _n3DataFactory = require("./N3DataFactory");
var _n3DataFactoryDefault = parcelHelpers.interopDefault(_n3DataFactory);
exports.default = {
    Lexer: _n3LexerDefault.default,
    Parser: _n3ParserDefault.default,
    Writer: _n3WriterDefault.default,
    Store: _n3StoreDefault.default,
    StreamParser: _n3StreamParserDefault.default,
    StreamWriter: _n3StreamWriterDefault.default,
    Util: _n3Util,
    DataFactory: _n3DataFactoryDefault.default,
    Term: _n3DataFactory.Term,
    NamedNode: _n3DataFactory.NamedNode,
    Literal: _n3DataFactory.Literal,
    BlankNode: _n3DataFactory.BlankNode,
    Variable: _n3DataFactory.Variable,
    DefaultGraph: _n3DataFactory.DefaultGraph,
    Quad: _n3DataFactory.Quad,
    Triple: _n3DataFactory.Triple,
    termFromId: _n3DataFactory.termFromId,
    termToId: _n3DataFactory.termToId
};

},{"./N3Lexer":"hm7id","./N3Parser":"3HsNW","./N3Writer":"9F6q5","./N3Store":"etSNt","./N3StreamParser":"7tkYY","./N3StreamWriter":"5f80q","./N3Util":"1oZtI","./N3DataFactory":"bKXvf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hm7id":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// **N3Lexer** tokenizes N3 documents.
var _iris = require("./IRIs");
var _irisDefault = parcelHelpers.interopDefault(_iris);
var _queueMicrotask = require("queue-microtask");
var _queueMicrotaskDefault = parcelHelpers.interopDefault(_queueMicrotask);
var Buffer = require("buffer").Buffer;
const { xsd  } = _irisDefault.default;
// Regular expression and replacement string to escape N3 strings
const escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g;
const escapeReplacements = {
    '\\': '\\',
    "'": "'",
    '"': '"',
    'n': '\n',
    'r': '\r',
    't': '\t',
    'f': '\f',
    'b': '\b',
    '_': '_',
    '~': '~',
    '.': '.',
    '-': '-',
    '!': '!',
    '$': '$',
    '&': '&',
    '(': '(',
    ')': ')',
    '*': '*',
    '+': '+',
    ',': ',',
    ';': ';',
    '=': '=',
    '/': '/',
    '?': '?',
    '#': '#',
    '@': '@',
    '%': '%'
};
const illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;
const lineModeRegExps = {
    _iri: true,
    _unescapedIri: true,
    _simpleQuotedString: true,
    _langcode: true,
    _blank: true,
    _newline: true,
    _comment: true,
    _whitespace: true,
    _endOfFile: true
};
const invalidRegExp = /$0^/;
class N3Lexer {
    constructor(options){
        // ## Regular expressions
        // It's slightly faster to have these as properties than as in-scope variables
        this._iri = /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/; // IRI with escape sequences; needs sanity check after unescaping
        this._unescapedIri = /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/; // IRI without escape sequences; no unescaping
        this._simpleQuotedString = /^"([^"\\\r\n]*)"(?=[^"])/; // string without escape sequences
        this._simpleApostropheString = /^'([^'\\\r\n]*)'(?=[^'])/;
        this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;
        this._prefix = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;
        this._prefixed = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/;
        this._variable = /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/;
        this._blank = /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/;
        this._number = /^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/;
        this._boolean = /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/;
        this._keyword = /^@[a-z]+(?=[\s#<:])/i;
        this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;
        this._shortPredicates = /^a(?=[\s#()\[\]\{\}"'<>])/;
        this._newline = /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;
        this._comment = /#([^\n\r]*)/;
        this._whitespace = /^[ \t]+/;
        this._endOfFile = /^(?:#[^\n\r]*)?$/;
        options = options || {
        };
        // In line mode (N-Triples or N-Quads), only simple features may be parsed
        if (this._lineMode = !!options.lineMode) {
            this._n3Mode = false;
            // Don't tokenize special literals
            for(const key in this)if (!(key in lineModeRegExps) && this[key] instanceof RegExp) this[key] = invalidRegExp;
        } else this._n3Mode = options.n3 !== false;
        // Don't output comment tokens by default
        this._comments = !!options.comments;
        // Cache the last tested closing position of long literals
        this._literalClosingPos = 0;
    }
    // ## Private methods
    // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback
    _tokenizeToEnd(callback, inputFinished) {
        // Continue parsing as far as possible; the loop will return eventually
        let input = this._input;
        let currentLineLength = input.length;
        while(true){
            // Count and skip whitespace lines
            let whiteSpaceMatch, comment;
            while(whiteSpaceMatch = this._newline.exec(input)){
                // Try to find a comment
                if (this._comments && (comment = this._comment.exec(whiteSpaceMatch[0]))) emitToken('comment', comment[1], '', this._line, whiteSpaceMatch[0].length);
                // Advance the input
                input = input.substr(whiteSpaceMatch[0].length, input.length);
                currentLineLength = input.length;
                this._line++;
            }
            // Skip whitespace on current line
            if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input))) input = input.substr(whiteSpaceMatch[0].length, input.length);
            // Stop for now if we're at the end
            if (this._endOfFile.test(input)) {
                // If the input is finished, emit EOF
                if (inputFinished) {
                    // Try to find a final comment
                    if (this._comments && (comment = this._comment.exec(input))) emitToken('comment', comment[1], '', this._line, input.length);
                    input = null;
                    emitToken('eof', '', '', this._line, 0);
                }
                return this._input = input;
            }
            // Look for specific token types based on the first character
            const line = this._line, firstChar = input[0];
            let type = '', value = '', prefix = '', match = null, matchLength = 0, inconclusive = false;
            switch(firstChar){
                case '^':
                    // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed
                    if (input.length < 3) break;
                    else if (input[1] === '^') {
                        this._previousMarker = '^^';
                        // Move to type IRI or prefixed name
                        input = input.substr(2);
                        if (input[0] !== '<') {
                            inconclusive = true;
                            break;
                        }
                    } else {
                        if (this._n3Mode) {
                            matchLength = 1;
                            type = '^';
                        }
                        break;
                    }
                // Fall through in case the type is an IRI
                case '<':
                    // Try to find a full IRI without escape sequences
                    if (match = this._unescapedIri.exec(input)) type = 'IRI', value = match[1];
                    else if (match = this._iri.exec(input)) {
                        value = this._unescape(match[1]);
                        if (value === null || illegalIriChars.test(value)) return reportSyntaxError(this);
                        type = 'IRI';
                    } else if (input.length > 1 && input[1] === '<') type = '<<', matchLength = 2;
                    else if (this._n3Mode && input.length > 1 && input[1] === '=') type = 'inverse', matchLength = 2, value = '>';
                    break;
                case '>':
                    if (input.length > 1 && input[1] === '>') type = '>>', matchLength = 2;
                    break;
                case '_':
                    // Try to find a blank node. Since it can contain (but not end with) a dot,
                    // we always need a non-dot character before deciding it is a blank node.
                    // Therefore, try inserting a space if we're at the end of the input.
                    if ((match = this._blank.exec(input)) || inputFinished && (match = this._blank.exec(`${input} `))) type = 'blank', prefix = '_', value = match[1];
                    break;
                case '"':
                    // Try to find a literal without escape sequences
                    if (match = this._simpleQuotedString.exec(input)) value = match[1];
                    else {
                        ({ value , matchLength  } = this._parseLiteral(input));
                        if (value === null) return reportSyntaxError(this);
                    }
                    if (match !== null || matchLength !== 0) {
                        type = 'literal';
                        this._literalClosingPos = 0;
                    }
                    break;
                case "'":
                    if (!this._lineMode) {
                        // Try to find a literal without escape sequences
                        if (match = this._simpleApostropheString.exec(input)) value = match[1];
                        else {
                            ({ value , matchLength  } = this._parseLiteral(input));
                            if (value === null) return reportSyntaxError(this);
                        }
                        if (match !== null || matchLength !== 0) {
                            type = 'literal';
                            this._literalClosingPos = 0;
                        }
                    }
                    break;
                case '?':
                    // Try to find a variable
                    if (this._n3Mode && (match = this._variable.exec(input))) type = 'var', value = match[0];
                    break;
                case '@':
                    // Try to find a language code
                    if (this._previousMarker === 'literal' && (match = this._langcode.exec(input))) type = 'langcode', value = match[1];
                    else if (match = this._keyword.exec(input)) type = match[0];
                    break;
                case '.':
                    // Try to find a dot as punctuation
                    if (input.length === 1 ? inputFinished : input[1] < '0' || input[1] > '9') {
                        type = '.';
                        matchLength = 1;
                        break;
                    }
                // Fall through to numerical case (could be a decimal dot)
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case '+':
                case '-':
                    // Try to find a number. Since it can contain (but not end with) a dot,
                    // we always need a non-dot character before deciding it is a number.
                    // Therefore, try inserting a space if we're at the end of the input.
                    if (match = this._number.exec(input) || inputFinished && (match = this._number.exec(`${input} `))) {
                        type = 'literal', value = match[0];
                        prefix = typeof match[1] === 'string' ? xsd.double : typeof match[2] === 'string' ? xsd.decimal : xsd.integer;
                    }
                    break;
                case 'B':
                case 'b':
                case 'p':
                case 'P':
                case 'G':
                case 'g':
                    // Try to find a SPARQL-style keyword
                    if (match = this._sparqlKeyword.exec(input)) type = match[0].toUpperCase();
                    else inconclusive = true;
                    break;
                case 'f':
                case 't':
                    // Try to match a boolean
                    if (match = this._boolean.exec(input)) type = 'literal', value = match[0], prefix = xsd.boolean;
                    else inconclusive = true;
                    break;
                case 'a':
                    // Try to find an abbreviated predicate
                    if (match = this._shortPredicates.exec(input)) type = 'abbreviation', value = 'a';
                    else inconclusive = true;
                    break;
                case '=':
                    // Try to find an implication arrow or equals sign
                    if (this._n3Mode && input.length > 1) {
                        type = 'abbreviation';
                        if (input[1] !== '>') matchLength = 1, value = '=';
                        else matchLength = 2, value = '>';
                    }
                    break;
                case '!':
                    if (!this._n3Mode) break;
                case ',':
                case ';':
                case '[':
                case ']':
                case '(':
                case ')':
                case '{':
                case '}':
                    if (!this._lineMode) {
                        matchLength = 1;
                        type = firstChar;
                    }
                    break;
                default:
                    inconclusive = true;
            }
            // Some first characters do not allow an immediate decision, so inspect more
            if (inconclusive) {
                // Try to find a prefix
                if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') && (match = this._prefix.exec(input))) type = 'prefix', value = match[1] || '';
                else if ((match = this._prefixed.exec(input)) || inputFinished && (match = this._prefixed.exec(`${input} `))) type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
            }
            // A type token is special: it can only be emitted after an IRI or prefixed name is read
            if (this._previousMarker === '^^') switch(type){
                case 'prefixed':
                    type = 'type';
                    break;
                case 'IRI':
                    type = 'typeIRI';
                    break;
                default:
                    type = '';
            }
            // What if nothing of the above was found?
            if (!type) {
                // We could be in streaming mode, and then we just wait for more input to arrive.
                // Otherwise, a syntax error has occurred in the input.
                // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
                if (inputFinished || !/^'''|^"""/.test(input) && /\n|\r/.test(input)) return reportSyntaxError(this);
                else return this._input = input;
            }
            // Emit the parsed token
            const length = matchLength || match[0].length;
            const token = emitToken(type, value, prefix, line, length);
            this.previousToken = token;
            this._previousMarker = type;
            // Advance to next part to tokenize
            input = input.substr(length, input.length);
        }
        // Emits the token through the callback
        function emitToken(type, value, prefix, line, length) {
            const start = input ? currentLineLength - input.length : currentLineLength;
            const end = start + length;
            const token = {
                type,
                value,
                prefix,
                line,
                start,
                end
            };
            callback(null, token);
            return token;
        }
        // Signals the syntax error through the callback
        function reportSyntaxError(self) {
            callback(self._syntaxError(/^\S*/.exec(input)[0]));
        }
    }
    // ### `_unescape` replaces N3 escape codes by their corresponding characters
    _unescape(item) {
        let invalid = false;
        const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar)=>{
            // 4-digit unicode character
            if (typeof unicode4 === 'string') return String.fromCharCode(Number.parseInt(unicode4, 16));
            // 8-digit unicode character
            if (typeof unicode8 === 'string') {
                let charCode = Number.parseInt(unicode8, 16);
                return charCode <= 65535 ? String.fromCharCode(Number.parseInt(unicode8, 16)) : String.fromCharCode(55296 + ((charCode -= 65536) >> 10), 56320 + (charCode & 1023));
            }
            // fixed escape sequence
            if (escapedChar in escapeReplacements) return escapeReplacements[escapedChar];
            // invalid escape sequence
            invalid = true;
            return '';
        });
        return invalid ? null : replaced;
    }
    // ### `_parseLiteral` parses a literal into an unescaped value
    _parseLiteral(input) {
        // Ensure we have enough lookahead to identify triple-quoted strings
        if (input.length >= 3) {
            // Identify the opening quote(s)
            const opening = input.match(/^(?:"""|"|'''|'|)/)[0];
            const openingLength = opening.length;
            // Find the next candidate closing quotes
            let closingPos = Math.max(this._literalClosingPos, openingLength);
            while((closingPos = input.indexOf(opening, closingPos)) > 0){
                // Count backslashes right before the closing quotes
                let backslashCount = 0;
                while(input[closingPos - backslashCount - 1] === '\\')backslashCount++;
                // An even number of backslashes (in particular 0)
                // means these are actual, non-escaped closing quotes
                if (backslashCount % 2 === 0) {
                    // Extract and unescape the value
                    const raw = input.substring(openingLength, closingPos);
                    const lines = raw.split(/\r\n|\r|\n/).length - 1;
                    const matchLength = closingPos + openingLength;
                    // Only triple-quoted strings can be multi-line
                    if (openingLength === 1 && lines !== 0 || openingLength === 3 && this._lineMode) break;
                    this._line += lines;
                    return {
                        value: this._unescape(raw),
                        matchLength
                    };
                }
                closingPos++;
            }
            this._literalClosingPos = input.length - openingLength + 1;
        }
        return {
            value: '',
            matchLength: 0
        };
    }
    // ### `_syntaxError` creates a syntax error for the given issue
    _syntaxError(issue) {
        this._input = null;
        const err = new Error(`Unexpected "${issue}" on line ${this._line}.`);
        err.context = {
            token: undefined,
            line: this._line,
            previousToken: this.previousToken
        };
        return err;
    }
    // ### Strips off any starting UTF BOM mark.
    _readStartingBom(input) {
        return input.startsWith('\ufeff') ? input.substr(1) : input;
    }
    // ## Public methods
    // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
    // The input can be a string or a stream.
    tokenize(input, callback) {
        this._line = 1;
        // If the input is a string, continuously emit tokens through the callback until the end
        if (typeof input === 'string') {
            this._input = this._readStartingBom(input);
            // If a callback was passed, asynchronously call it
            if (typeof callback === 'function') _queueMicrotaskDefault.default(()=>this._tokenizeToEnd(callback, true)
            );
            else {
                const tokens = [];
                let error;
                this._tokenizeToEnd((e, t)=>e ? error = e : tokens.push(t)
                , true);
                if (error) throw error;
                return tokens;
            }
        } else {
            this._pendingBuffer = null;
            if (typeof input.setEncoding === 'function') input.setEncoding('utf8');
            // Adds the data chunk to the buffer and parses as far as possible
            input.on('data', (data)=>{
                if (this._input !== null && data.length !== 0) {
                    // Prepend any previous pending writes
                    if (this._pendingBuffer) {
                        data = Buffer.concat([
                            this._pendingBuffer,
                            data
                        ]);
                        this._pendingBuffer = null;
                    }
                    // Hold if the buffer ends in an incomplete unicode sequence
                    if (data[data.length - 1] & 128) this._pendingBuffer = data;
                    else {
                        // Only read a BOM at the start
                        if (typeof this._input === 'undefined') this._input = this._readStartingBom(typeof data === 'string' ? data : data.toString());
                        else this._input += data;
                        this._tokenizeToEnd(callback, false);
                    }
                }
            });
            // Parses until the end
            input.on('end', ()=>{
                if (typeof this._input === 'string') this._tokenizeToEnd(callback, true);
            });
            input.on('error', callback);
        }
    }
}
exports.default = N3Lexer;

},{"./IRIs":"bqHFW","queue-microtask":"fQqUJ","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqHFW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', XSD = 'http://www.w3.org/2001/XMLSchema#', SWAP = 'http://www.w3.org/2000/10/swap/';
exports.default = {
    xsd: {
        decimal: `${XSD}decimal`,
        boolean: `${XSD}boolean`,
        double: `${XSD}double`,
        integer: `${XSD}integer`,
        string: `${XSD}string`
    },
    rdf: {
        type: `${RDF}type`,
        nil: `${RDF}nil`,
        first: `${RDF}first`,
        rest: `${RDF}rest`,
        langString: `${RDF}langString`
    },
    owl: {
        sameAs: 'http://www.w3.org/2002/07/owl#sameAs'
    },
    r: {
        forSome: `${SWAP}reify#forSome`,
        forAll: `${SWAP}reify#forAll`
    },
    log: {
        implies: `${SWAP}log#implies`
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fQqUJ":[function(require,module,exports) {
var global = arguments[3];
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ let promise;
module.exports = typeof queueMicrotask === 'function' ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global) : (cb)=>(promise || (promise = Promise.resolve())).then(cb).catch((err)=>setTimeout(()=>{
            throw err;
        }, 0)
    )
;

},{}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
const base64 = require('base64-js');
const ieee754 = require('ieee754');
const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 2147483647;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = '';
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = '';
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 256))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24) // Overflow
    ;
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 255;
    while(++i < byteLength5 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength7 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {
};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, 'message', {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, 'code', {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E('ERR_OUT_OF_RANGE', function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === 'bigint') {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = '';
    let i = val.length;
    const start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== 'number') throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = '0123456789abcdef';
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"3HsNW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// **N3Parser** parses N3 documents.
var _n3Lexer = require("./N3Lexer");
var _n3LexerDefault = parcelHelpers.interopDefault(_n3Lexer);
var _n3DataFactory = require("./N3DataFactory");
var _n3DataFactoryDefault = parcelHelpers.interopDefault(_n3DataFactory);
var _iris = require("./IRIs");
var _irisDefault = parcelHelpers.interopDefault(_iris);
let blankNodePrefix = 0;
class N3Parser {
    constructor(options){
        this._contextStack = [];
        this._graph = null;
        // Set the document IRI
        options = options || {
        };
        this._setBase(options.baseIRI);
        options.factory && initDataFactory(this, options.factory);
        // Set supported features depending on the format
        const format = typeof options.format === 'string' ? options.format.match(/\w*$/)[0].toLowerCase() : '', isTurtle = /turtle/.test(format), isTriG = /trig/.test(format), isNTriples = /triple/.test(format), isNQuads = /quad/.test(format), isN3 = this._n3Mode = /n3/.test(format), isLineMode = isNTriples || isNQuads;
        if (!(this._supportsNamedGraphs = !(isTurtle || isN3))) this._readPredicateOrNamedGraph = this._readPredicate;
        // Support triples in other graphs
        this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);
        // Support nesting of triples
        this._supportsRDFStar = format === '' || /star|\*$/.test(format);
        // Disable relative IRIs in N-Triples or N-Quads mode
        if (isLineMode) this._resolveRelativeIRI = (iri)=>{
            return null;
        };
        this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' : options.blankNodePrefix.replace(/^(?!_:)/, '_:');
        this._lexer = options.lexer || new _n3LexerDefault.default({
            lineMode: isLineMode,
            n3: isN3
        });
        // Disable explicit quantifiers by default
        this._explicitQuantifiers = !!options.explicitQuantifiers;
    }
    // ## Static class methods
    // ### `_resetBlankNodePrefix` restarts blank node prefix identification
    static _resetBlankNodePrefix() {
        blankNodePrefix = 0;
    }
    // ## Private methods
    // ### `_setBase` sets the base IRI to resolve relative IRIs
    _setBase(baseIRI) {
        if (!baseIRI) {
            this._base = '';
            this._basePath = '';
        } else {
            // Remove fragment if present
            const fragmentPos = baseIRI.indexOf('#');
            if (fragmentPos >= 0) baseIRI = baseIRI.substr(0, fragmentPos);
            // Set base IRI and its components
            this._base = baseIRI;
            this._basePath = baseIRI.indexOf('/') < 0 ? baseIRI : baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
            baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);
            this._baseRoot = baseIRI[0];
            this._baseScheme = baseIRI[1];
        }
    }
    // ### `_saveContext` stores the current parsing context
    // when entering a new scope (list, blank node, formula)
    _saveContext(type, graph, subject, predicate, object) {
        const n3Mode = this._n3Mode;
        this._contextStack.push({
            type,
            subject,
            predicate,
            object,
            graph,
            inverse: n3Mode ? this._inversePredicate : false,
            blankPrefix: n3Mode ? this._prefixes._ : '',
            quantified: n3Mode ? this._quantified : null
        });
        // The settings below only apply to N3 streams
        if (n3Mode) {
            // Every new scope resets the predicate direction
            this._inversePredicate = false;
            // In N3, blank nodes are scoped to a formula
            // (using a dot as separator, as a blank node label cannot start with it)
            this._prefixes._ = this._graph ? `${this._graph.id.substr(2)}.` : '.';
            // Quantifiers are scoped to a formula
            this._quantified = Object.create(this._quantified);
        }
    }
    // ### `_restoreContext` restores the parent context
    // when leaving a scope (list, blank node, formula)
    _restoreContext(type, token) {
        // Obtain the previous context
        const context = this._contextStack.pop();
        if (!context || context.type !== type) return this._error(`Unexpected ${token.type}`, token);
        // Restore the quad of the previous context
        this._subject = context.subject;
        this._predicate = context.predicate;
        this._object = context.object;
        this._graph = context.graph;
        // Restore N3 context settings
        if (this._n3Mode) {
            this._inversePredicate = context.inverse;
            this._prefixes._ = context.blankPrefix;
            this._quantified = context.quantified;
        }
    }
    // ### `_readInTopContext` reads a token when in the top context
    _readInTopContext(token) {
        switch(token.type){
            // If an EOF token arrives in the top context, signal that we're done
            case 'eof':
                if (this._graph !== null) return this._error('Unclosed graph', token);
                delete this._prefixes._;
                return this._callback(null, null, this._prefixes);
            // It could be a prefix declaration
            case 'PREFIX':
                this._sparqlStyle = true;
            case '@prefix':
                return this._readPrefix;
            // It could be a base declaration
            case 'BASE':
                this._sparqlStyle = true;
            case '@base':
                return this._readBaseIRI;
            // It could be a graph
            case '{':
                if (this._supportsNamedGraphs) {
                    this._graph = '';
                    this._subject = null;
                    return this._readSubject;
                }
            case 'GRAPH':
                if (this._supportsNamedGraphs) return this._readNamedGraphLabel;
            // Otherwise, the next token must be a subject
            default:
                return this._readSubject(token);
        }
    }
    // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable
    _readEntity(token, quantifier) {
        let value;
        switch(token.type){
            // Read a relative or absolute IRI
            case 'IRI':
            case 'typeIRI':
                const iri = this._resolveIRI(token.value);
                if (iri === null) return this._error('Invalid IRI', token);
                value = this._namedNode(iri);
                break;
            // Read a prefixed name
            case 'type':
            case 'prefixed':
                const prefix = this._prefixes[token.prefix];
                if (prefix === undefined) return this._error(`Undefined prefix "${token.prefix}:"`, token);
                value = this._namedNode(prefix + token.value);
                break;
            // Read a blank node
            case 'blank':
                value = this._blankNode(this._prefixes[token.prefix] + token.value);
                break;
            // Read a variable
            case 'var':
                value = this._variable(token.value.substr(1));
                break;
            // Everything else is not an entity
            default:
                return this._error(`Expected entity but got ${token.type}`, token);
        }
        // In N3 mode, replace the entity if it is quantified
        if (!quantifier && this._n3Mode && value.id in this._quantified) value = this._quantified[value.id];
        return value;
    }
    // ### `_readSubject` reads a quad's subject
    _readSubject(token) {
        this._predicate = null;
        switch(token.type){
            case '[':
                // Start a new quad with a new blank node as subject
                this._saveContext('blank', this._graph, this._subject = this._blankNode(), null, null);
                return this._readBlankNodeHead;
            case '(':
                // Start a new list
                this._saveContext('list', this._graph, this.RDF_NIL, null, null);
                this._subject = null;
                return this._readListItem;
            case '{':
                // Start a new formula
                if (!this._n3Mode) return this._error('Unexpected graph', token);
                this._saveContext('formula', this._graph, this._graph = this._blankNode(), null, null);
                return this._readSubject;
            case '}':
                // No subject; the graph in which we are reading is closed instead
                return this._readPunctuation(token);
            case '@forSome':
                if (!this._n3Mode) return this._error('Unexpected "@forSome"', token);
                this._subject = null;
                this._predicate = this.N3_FORSOME;
                this._quantifier = this._blankNode;
                return this._readQuantifierList;
            case '@forAll':
                if (!this._n3Mode) return this._error('Unexpected "@forAll"', token);
                this._subject = null;
                this._predicate = this.N3_FORALL;
                this._quantifier = this._variable;
                return this._readQuantifierList;
            case 'literal':
                if (!this._n3Mode) return this._error('Unexpected literal', token);
                if (token.prefix.length === 0) {
                    this._literalValue = token.value;
                    return this._completeSubjectLiteral;
                } else this._subject = this._literal(token.value, this._namedNode(token.prefix));
                break;
            case '<<':
                if (!this._supportsRDFStar) return this._error('Unexpected RDF* syntax', token);
                this._saveContext('<<', this._graph, null, null, null);
                this._graph = null;
                return this._readSubject;
            default:
                // Read the subject entity
                if ((this._subject = this._readEntity(token)) === undefined) return;
                // In N3 mode, the subject might be a path
                if (this._n3Mode) return this._getPathReader(this._readPredicateOrNamedGraph);
        }
        // The next token must be a predicate,
        // or, if the subject was actually a graph IRI, a named graph
        return this._readPredicateOrNamedGraph;
    }
    // ### `_readPredicate` reads a quad's predicate
    _readPredicate(token) {
        const type = token.type;
        switch(type){
            case 'inverse':
                this._inversePredicate = true;
            case 'abbreviation':
                this._predicate = this.ABBREVIATIONS[token.value];
                break;
            case '.':
            case ']':
            case '}':
                // Expected predicate didn't come, must have been trailing semicolon
                if (this._predicate === null) return this._error(`Unexpected ${type}`, token);
                this._subject = null;
                return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);
            case ';':
                // Additional semicolons can be safely ignored
                return this._predicate !== null ? this._readPredicate : this._error('Expected predicate but got ;', token);
            case '[':
                if (this._n3Mode) {
                    // Start a new quad with a new blank node as subject
                    this._saveContext('blank', this._graph, this._subject, this._subject = this._blankNode(), null);
                    return this._readBlankNodeHead;
                }
            case 'blank':
                if (!this._n3Mode) return this._error('Disallowed blank node as predicate', token);
            default:
                if ((this._predicate = this._readEntity(token)) === undefined) return;
        }
        // The next token must be an object
        return this._readObject;
    }
    // ### `_readObject` reads a quad's object
    _readObject(token) {
        switch(token.type){
            case 'literal':
                // Regular literal, can still get a datatype or language
                if (token.prefix.length === 0) {
                    this._literalValue = token.value;
                    return this._readDataTypeOrLang;
                } else this._object = this._literal(token.value, this._namedNode(token.prefix));
                break;
            case '[':
                // Start a new quad with a new blank node as subject
                this._saveContext('blank', this._graph, this._subject, this._predicate, this._subject = this._blankNode());
                return this._readBlankNodeHead;
            case '(':
                // Start a new list
                this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);
                this._subject = null;
                return this._readListItem;
            case '{':
                // Start a new formula
                if (!this._n3Mode) return this._error('Unexpected graph', token);
                this._saveContext('formula', this._graph, this._subject, this._predicate, this._graph = this._blankNode());
                return this._readSubject;
            case '<<':
                if (!this._supportsRDFStar) return this._error('Unexpected RDF* syntax', token);
                this._saveContext('<<', this._graph, this._subject, this._predicate, null);
                this._graph = null;
                return this._readSubject;
            default:
                // Read the object entity
                if ((this._object = this._readEntity(token)) === undefined) return;
                // In N3 mode, the object might be a path
                if (this._n3Mode) return this._getPathReader(this._getContextEndReader());
        }
        return this._getContextEndReader();
    }
    // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph
    _readPredicateOrNamedGraph(token) {
        return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
    }
    // ### `_readGraph` reads a graph
    _readGraph(token) {
        if (token.type !== '{') return this._error(`Expected graph but got ${token.type}`, token);
        // The "subject" we read is actually the GRAPH's label
        this._graph = this._subject, this._subject = null;
        return this._readSubject;
    }
    // ### `_readBlankNodeHead` reads the head of a blank node
    _readBlankNodeHead(token) {
        if (token.type === ']') {
            this._subject = null;
            return this._readBlankNodeTail(token);
        } else {
            this._predicate = null;
            return this._readPredicate(token);
        }
    }
    // ### `_readBlankNodeTail` reads the end of a blank node
    _readBlankNodeTail(token) {
        if (token.type !== ']') return this._readBlankNodePunctuation(token);
        // Store blank node quad
        if (this._subject !== null) this._emit(this._subject, this._predicate, this._object, this._graph);
        // Restore the parent context containing this blank node
        const empty = this._predicate === null;
        this._restoreContext('blank', token);
        // If the blank node was the object, restore previous context and read punctuation
        if (this._object !== null) return this._getContextEndReader();
        else if (this._predicate !== null) return this._readObject;
        else // If the blank node was empty, it could be a named graph label
        return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;
    }
    // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node
    _readPredicateAfterBlank(token) {
        switch(token.type){
            case '.':
            case '}':
                // No predicate is coming if the triple is terminated here
                this._subject = null;
                return this._readPunctuation(token);
            default:
                return this._readPredicate(token);
        }
    }
    // ### `_readListItem` reads items from a list
    _readListItem(token) {
        let item = null, list = null, next = this._readListItem; // The next function to execute
        const previousList = this._subject, stack = this._contextStack, parent = stack[stack.length - 1]; // The parent containing the current list
        switch(token.type){
            case '[':
                // Stack the current list quad and start a new quad with a blank node as subject
                this._saveContext('blank', this._graph, list = this._blankNode(), this.RDF_FIRST, this._subject = item = this._blankNode());
                next = this._readBlankNodeHead;
                break;
            case '(':
                // Stack the current list quad and start a new list
                this._saveContext('list', this._graph, list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);
                this._subject = null;
                break;
            case ')':
                // Closing the list; restore the parent context
                this._restoreContext('list', token);
                // If this list is contained within a parent list, return the membership quad here.
                // This will be `<parent list element> rdf:first <this list>.`.
                if (stack.length !== 0 && stack[stack.length - 1].type === 'list') this._emit(this._subject, this._predicate, this._object, this._graph);
                // Was this list the parent's subject?
                if (this._predicate === null) {
                    // The next token is the predicate
                    next = this._readPredicate;
                    // No list tail if this was an empty list
                    if (this._subject === this.RDF_NIL) return next;
                } else {
                    next = this._getContextEndReader();
                    // No list tail if this was an empty list
                    if (this._object === this.RDF_NIL) return next;
                }
                // Close the list by making the head nil
                list = this.RDF_NIL;
                break;
            case 'literal':
                // Regular literal, can still get a datatype or language
                if (token.prefix.length === 0) {
                    this._literalValue = token.value;
                    next = this._readListItemDataTypeOrLang;
                } else {
                    item = this._literal(token.value, this._namedNode(token.prefix));
                    next = this._getContextEndReader();
                }
                break;
            case '{':
                // Start a new formula
                if (!this._n3Mode) return this._error('Unexpected graph', token);
                this._saveContext('formula', this._graph, this._subject, this._predicate, this._graph = this._blankNode());
                return this._readSubject;
            default:
                if ((item = this._readEntity(token)) === undefined) return;
        }
        // Create a new blank node if no item head was assigned yet
        if (list === null) this._subject = list = this._blankNode();
        // Is this the first element of the list?
        if (previousList === null) {
            // This list is either the subject or the object of its parent
            if (parent.predicate === null) parent.subject = list;
            else parent.object = list;
        } else // Continue the previous list with the current list
        this._emit(previousList, this.RDF_REST, list, this._graph);
        // If an item was read, add it to the list
        if (item !== null) {
            // In N3 mode, the item might be a path
            if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {
                // Create a new context to add the item's path
                this._saveContext('item', this._graph, list, this.RDF_FIRST, item);
                this._subject = item, this._predicate = null;
                // _readPath will restore the context and output the item
                return this._getPathReader(this._readListItem);
            }
            // Output the item
            this._emit(list, this.RDF_FIRST, item, this._graph);
        }
        return next;
    }
    // ### `_readDataTypeOrLang` reads an _optional_ datatype or language
    _readDataTypeOrLang(token) {
        return this._completeObjectLiteral(token, false);
    }
    // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list
    _readListItemDataTypeOrLang(token) {
        return this._completeObjectLiteral(token, true);
    }
    // ### `_completeLiteral` completes a literal with an optional datatype or language
    _completeLiteral(token) {
        // Create a simple string literal by default
        let literal = this._literal(this._literalValue);
        switch(token.type){
            // Create a datatyped literal
            case 'type':
            case 'typeIRI':
                const datatype = this._readEntity(token);
                if (datatype === undefined) return; // No datatype means an error occurred
                literal = this._literal(this._literalValue, datatype);
                token = null;
                break;
            // Create a language-tagged string
            case 'langcode':
                literal = this._literal(this._literalValue, token.value);
                token = null;
                break;
        }
        return {
            token,
            literal
        };
    }
    // Completes a literal in subject position
    _completeSubjectLiteral(token) {
        this._subject = this._completeLiteral(token).literal;
        return this._readPredicateOrNamedGraph;
    }
    // Completes a literal in object position
    _completeObjectLiteral(token, listItem) {
        const completed = this._completeLiteral(token);
        if (!completed) return;
        this._object = completed.literal;
        // If this literal was part of a list, write the item
        // (we could also check the context stack, but passing in a flag is faster)
        if (listItem) this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);
        // If the token was consumed, continue with the rest of the input
        if (completed.token === null) return this._getContextEndReader();
        else {
            this._readCallback = this._getContextEndReader();
            return this._readCallback(completed.token);
        }
    }
    // ### `_readFormulaTail` reads the end of a formula
    _readFormulaTail(token) {
        if (token.type !== '}') return this._readPunctuation(token);
        // Store the last quad of the formula
        if (this._subject !== null) this._emit(this._subject, this._predicate, this._object, this._graph);
        // Restore the parent context containing this formula
        this._restoreContext('formula', token);
        // If the formula was the subject, continue reading the predicate.
        // If the formula was the object, read punctuation.
        return this._object === null ? this._readPredicate : this._getContextEndReader();
    }
    // ### `_readPunctuation` reads punctuation between quads or quad parts
    _readPunctuation(token) {
        let next, graph = this._graph;
        const subject = this._subject, inversePredicate = this._inversePredicate;
        switch(token.type){
            // A closing brace ends a graph
            case '}':
                if (this._graph === null) return this._error('Unexpected graph closing', token);
                if (this._n3Mode) return this._readFormulaTail(token);
                this._graph = null;
            // A dot just ends the statement, without sharing anything with the next
            case '.':
                this._subject = null;
                next = this._contextStack.length ? this._readSubject : this._readInTopContext;
                if (inversePredicate) this._inversePredicate = false;
                break;
            // Semicolon means the subject is shared; predicate and object are different
            case ';':
                next = this._readPredicate;
                break;
            // Comma means both the subject and predicate are shared; the object is different
            case ',':
                next = this._readObject;
                break;
            default:
                // An entity means this is a quad (only allowed if not already inside a graph)
                if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {
                    next = this._readQuadPunctuation;
                    break;
                }
                return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
        }
        // A quad has been completed now, so return it
        if (subject !== null) {
            const predicate = this._predicate, object = this._object;
            if (!inversePredicate) this._emit(subject, predicate, object, graph);
            else this._emit(object, predicate, subject, graph);
        }
        return next;
    }
    // ### `_readBlankNodePunctuation` reads punctuation in a blank node
    _readBlankNodePunctuation(token) {
        let next;
        switch(token.type){
            // Semicolon means the subject is shared; predicate and object are different
            case ';':
                next = this._readPredicate;
                break;
            // Comma means both the subject and predicate are shared; the object is different
            case ',':
                next = this._readObject;
                break;
            default:
                return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
        }
        // A quad has been completed now, so return it
        this._emit(this._subject, this._predicate, this._object, this._graph);
        return next;
    }
    // ### `_readQuadPunctuation` reads punctuation after a quad
    _readQuadPunctuation(token) {
        if (token.type !== '.') return this._error('Expected dot to follow quad', token);
        return this._readInTopContext;
    }
    // ### `_readPrefix` reads the prefix of a prefix declaration
    _readPrefix(token) {
        if (token.type !== 'prefix') return this._error('Expected prefix to follow @prefix', token);
        this._prefix = token.value;
        return this._readPrefixIRI;
    }
    // ### `_readPrefixIRI` reads the IRI of a prefix declaration
    _readPrefixIRI(token) {
        if (token.type !== 'IRI') return this._error(`Expected IRI to follow prefix "${this._prefix}:"`, token);
        const prefixNode = this._readEntity(token);
        this._prefixes[this._prefix] = prefixNode.value;
        this._prefixCallback(this._prefix, prefixNode);
        return this._readDeclarationPunctuation;
    }
    // ### `_readBaseIRI` reads the IRI of a base declaration
    _readBaseIRI(token) {
        const iri = token.type === 'IRI' && this._resolveIRI(token.value);
        if (!iri) return this._error('Expected valid IRI to follow base declaration', token);
        this._setBase(iri);
        return this._readDeclarationPunctuation;
    }
    // ### `_readNamedGraphLabel` reads the label of a named graph
    _readNamedGraphLabel(token) {
        switch(token.type){
            case 'IRI':
            case 'blank':
            case 'prefixed':
                return this._readSubject(token), this._readGraph;
            case '[':
                return this._readNamedGraphBlankLabel;
            default:
                return this._error('Invalid graph label', token);
        }
    }
    // ### `_readNamedGraphLabel` reads a blank node label of a named graph
    _readNamedGraphBlankLabel(token) {
        if (token.type !== ']') return this._error('Invalid graph label', token);
        this._subject = this._blankNode();
        return this._readGraph;
    }
    // ### `_readDeclarationPunctuation` reads the punctuation of a declaration
    _readDeclarationPunctuation(token) {
        // SPARQL-style declarations don't have punctuation
        if (this._sparqlStyle) {
            this._sparqlStyle = false;
            return this._readInTopContext(token);
        }
        if (token.type !== '.') return this._error('Expected declaration to end with a dot', token);
        return this._readInTopContext;
    }
    // Reads a list of quantified symbols from a @forSome or @forAll statement
    _readQuantifierList(token) {
        let entity;
        switch(token.type){
            case 'IRI':
            case 'prefixed':
                if ((entity = this._readEntity(token, true)) !== undefined) break;
            default:
                return this._error(`Unexpected ${token.type}`, token);
        }
        // Without explicit quantifiers, map entities to a quantified entity
        if (!this._explicitQuantifiers) this._quantified[entity.id] = this._quantifier(this._blankNode().value);
        else {
            // If this is the first item, start a new quantifier list
            if (this._subject === null) this._emit(this._graph || this.DEFAULTGRAPH, this._predicate, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
            else this._emit(this._subject, this.RDF_REST, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
            // Output the list item
            this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);
        }
        return this._readQuantifierPunctuation;
    }
    // Reads punctuation from a @forSome or @forAll statement
    _readQuantifierPunctuation(token) {
        // Read more quantifiers
        if (token.type === ',') return this._readQuantifierList;
        else {
            // With explicit quantifiers, close the quantifier list
            if (this._explicitQuantifiers) {
                this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);
                this._subject = null;
            }
            // Read a dot
            this._readCallback = this._getContextEndReader();
            return this._readCallback(token);
        }
    }
    // ### `_getPathReader` reads a potential path and then resumes with the given function
    _getPathReader(afterPath) {
        this._afterPath = afterPath;
        return this._readPath;
    }
    // ### `_readPath` reads a potential path
    _readPath(token) {
        switch(token.type){
            // Forward path
            case '!':
                return this._readForwardPath;
            // Backward path
            case '^':
                return this._readBackwardPath;
            // Not a path; resume reading where we left off
            default:
                const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];
                // If we were reading a list item, we still need to output it
                if (parent && parent.type === 'item') {
                    // The list item is the remaining subejct after reading the path
                    const item = this._subject;
                    // Switch back to the context of the list
                    this._restoreContext('item', token);
                    // Output the list item
                    this._emit(this._subject, this.RDF_FIRST, item, this._graph);
                }
                return this._afterPath(token);
        }
    }
    // ### `_readForwardPath` reads a '!' path
    _readForwardPath(token) {
        let subject, predicate;
        const object = this._blankNode();
        // The next token is the predicate
        if ((predicate = this._readEntity(token)) === undefined) return;
        // If we were reading a subject, replace the subject by the path's object
        if (this._predicate === null) subject = this._subject, this._subject = object;
        else subject = this._object, this._object = object;
        // Emit the path's current quad and read its next section
        this._emit(subject, predicate, object, this._graph);
        return this._readPath;
    }
    // ### `_readBackwardPath` reads a '^' path
    _readBackwardPath(token) {
        const subject = this._blankNode();
        let predicate, object;
        // The next token is the predicate
        if ((predicate = this._readEntity(token)) === undefined) return;
        // If we were reading a subject, replace the subject by the path's subject
        if (this._predicate === null) object = this._subject, this._subject = subject;
        else object = this._object, this._object = subject;
        // Emit the path's current quad and read its next section
        this._emit(subject, predicate, object, this._graph);
        return this._readPath;
    }
    // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple
    _readRDFStarTailOrGraph(token) {
        if (token.type !== '>>') {
            // An entity means this is a quad (only allowed if not already inside a graph)
            if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined) return this._readRDFStarTail;
            return this._error(`Expected >> to follow "${this._object.id}"`, token);
        }
        return this._readRDFStarTail(token);
    }
    // ### `_readRDFStarTail` reads the end of a nested RDF* triple
    _readRDFStarTail(token) {
        if (token.type !== '>>') return this._error(`Expected >> but got ${token.type}`, token);
        // Read the quad and restore the previous context
        const quad = this._quad(this._subject, this._predicate, this._object, this._graph || this.DEFAULTGRAPH);
        this._restoreContext('<<', token);
        // If the triple was the subject, continue by reading the predicate.
        if (this._subject === null) {
            this._subject = quad;
            return this._readPredicate;
        } else {
            this._object = quad;
            return this._getContextEndReader();
        }
    }
    // ### `_getContextEndReader` gets the next reader function at the end of a context
    _getContextEndReader() {
        const contextStack = this._contextStack;
        if (!contextStack.length) return this._readPunctuation;
        switch(contextStack[contextStack.length - 1].type){
            case 'blank':
                return this._readBlankNodeTail;
            case 'list':
                return this._readListItem;
            case 'formula':
                return this._readFormulaTail;
            case '<<':
                return this._readRDFStarTailOrGraph;
        }
    }
    // ### `_emit` sends a quad through the callback
    _emit(subject, predicate, object, graph) {
        this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));
    }
    // ### `_error` emits an error message through the callback
    _error(message, token) {
        const err = new Error(`${message} on line ${token.line}.`);
        err.context = {
            token: token,
            line: token.line,
            previousToken: this._lexer.previousToken
        };
        this._callback(err);
        this._callback = noop;
    }
    // ### `_resolveIRI` resolves an IRI against the base path
    _resolveIRI(iri) {
        return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);
    }
    // ### `_resolveRelativeIRI` resolves an IRI against the base path,
    // assuming that a base path has been set and that the IRI is indeed relative
    _resolveRelativeIRI(iri) {
        // An empty relative IRI indicates the base IRI
        if (!iri.length) return this._base;
        // Decide resolving strategy based in the first character
        switch(iri[0]){
            // Resolve relative fragment IRIs against the base IRI
            case '#':
                return this._base + iri;
            // Resolve relative query string IRIs by replacing the query string
            case '?':
                return this._base.replace(/(?:\?.*)?$/, iri);
            // Resolve root-relative IRIs at the root of the base IRI
            case '/':
                // Resolve scheme-relative IRIs to the scheme
                return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
            // Resolve all other IRIs at the base IRI's path
            default:
                // Relative IRIs cannot contain a colon in the first path segment
                return /^[^/:]*:/.test(iri) ? null : this._removeDotSegments(this._basePath + iri);
        }
    }
    // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986
    _removeDotSegments(iri) {
        // Don't modify the IRI if it does not contain any dot segments
        if (!/(^|\/)\.\.?($|[/#?])/.test(iri)) return iri;
        // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
        const length = iri.length;
        let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';
        while(i < length){
            switch(next){
                // The path starts with the first slash after the authority
                case ':':
                    if (pathStart < 0) {
                        // Skip two slashes before the authority
                        if (iri[++i] === '/' && iri[++i] === '/') // Skip to slash after the authority
                        while((pathStart = i + 1) < length && iri[pathStart] !== '/')i = pathStart;
                    }
                    break;
                // Don't modify a query string or fragment
                case '?':
                case '#':
                    i = length;
                    break;
                // Handle '/.' or '/..' path segments
                case '/':
                    if (iri[i + 1] === '.') {
                        next = iri[++i + 1];
                        switch(next){
                            // Remove a '/.' segment
                            case '/':
                                result += iri.substring(segmentStart, i - 1);
                                segmentStart = i + 1;
                                break;
                            // Remove a trailing '/.' segment
                            case undefined:
                            case '?':
                            case '#':
                                return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
                            // Remove a '/..' segment
                            case '.':
                                next = iri[++i + 1];
                                if (next === undefined || next === '/' || next === '?' || next === '#') {
                                    result += iri.substring(segmentStart, i - 2);
                                    // Try to remove the parent path from result
                                    if ((segmentStart = result.lastIndexOf('/')) >= pathStart) result = result.substr(0, segmentStart);
                                    // Remove a trailing '/..' segment
                                    if (next !== '/') return `${result}/${iri.substr(i + 1)}`;
                                    segmentStart = i + 1;
                                }
                        }
                    }
            }
            next = iri[++i];
        }
        return result + iri.substring(segmentStart);
    }
    // ## Public methods
    // ### `parse` parses the N3 input and emits each parsed quad through the callback
    parse(input, quadCallback, prefixCallback) {
        // The read callback is the next function to be executed when a token arrives.
        // We start reading in the top context.
        this._readCallback = this._readInTopContext;
        this._sparqlStyle = false;
        this._prefixes = Object.create(null);
        this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2) : `b${blankNodePrefix++}_`;
        this._prefixCallback = prefixCallback || noop;
        this._inversePredicate = false;
        this._quantified = Object.create(null);
        // Parse synchronously if no quad callback is given
        if (!quadCallback) {
            const quads = [];
            let error;
            this._callback = (e, t)=>{
                e ? error = e : t && quads.push(t);
            };
            this._lexer.tokenize(input).every((token)=>{
                return this._readCallback = this._readCallback(token);
            });
            if (error) throw error;
            return quads;
        }
        // Parse asynchronously otherwise, executing the read callback when a token arrives
        this._callback = quadCallback;
        this._lexer.tokenize(input, (error, token)=>{
            if (error !== null) this._callback(error), this._callback = noop;
            else if (this._readCallback) this._readCallback = this._readCallback(token);
        });
    }
}
exports.default = N3Parser;
// The empty function
function noop() {
}
// Initializes the parser with the given data factory
function initDataFactory(parser, factory) {
    // Set factory methods
    const namedNode = factory.namedNode;
    parser._namedNode = namedNode;
    parser._blankNode = factory.blankNode;
    parser._literal = factory.literal;
    parser._variable = factory.variable;
    parser._quad = factory.quad;
    parser.DEFAULTGRAPH = factory.defaultGraph();
    // Set common named nodes
    parser.RDF_FIRST = namedNode(_irisDefault.default.rdf.first);
    parser.RDF_REST = namedNode(_irisDefault.default.rdf.rest);
    parser.RDF_NIL = namedNode(_irisDefault.default.rdf.nil);
    parser.N3_FORALL = namedNode(_irisDefault.default.r.forAll);
    parser.N3_FORSOME = namedNode(_irisDefault.default.r.forSome);
    parser.ABBREVIATIONS = {
        'a': namedNode(_irisDefault.default.rdf.type),
        '=': namedNode(_irisDefault.default.owl.sameAs),
        '>': namedNode(_irisDefault.default.log.implies)
    };
    parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');
}
initDataFactory(N3Parser.prototype, _n3DataFactoryDefault.default);

},{"./N3Lexer":"hm7id","./N3DataFactory":"bKXvf","./IRIs":"bqHFW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKXvf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// ## Term constructor
parcelHelpers.export(exports, "Term", ()=>Term
);
// ## NamedNode constructor
parcelHelpers.export(exports, "NamedNode", ()=>NamedNode
);
// ## Literal constructor
parcelHelpers.export(exports, "Literal", ()=>Literal
);
// ## BlankNode constructor
parcelHelpers.export(exports, "BlankNode", ()=>BlankNode
);
parcelHelpers.export(exports, "Variable", ()=>Variable
);
// ## DefaultGraph constructor
parcelHelpers.export(exports, "DefaultGraph", ()=>DefaultGraph
);
// ### Constructs a term from the given internal string ID
parcelHelpers.export(exports, "termFromId", ()=>termFromId
);
// ### Constructs an internal string ID from the given term or ID string
parcelHelpers.export(exports, "termToId", ()=>termToId
);
// ## Quad constructor
parcelHelpers.export(exports, "Quad", ()=>Quad
);
parcelHelpers.export(exports, "Triple", ()=>Quad
);
// ### Escapes the quotes within the given literal
parcelHelpers.export(exports, "escapeQuotes", ()=>escapeQuotes
);
// ### Unescapes the quotes within the given literal
parcelHelpers.export(exports, "unescapeQuotes", ()=>unescapeQuotes
);
// N3.js implementations of the RDF/JS core data types
// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md
var _iris = require("./IRIs");
var _irisDefault = parcelHelpers.interopDefault(_iris);
var _n3Util = require("./N3Util");
const { rdf , xsd  } = _irisDefault.default;
// eslint-disable-next-line prefer-const
let DEFAULTGRAPH;
let _blankNodeCounter = 0;
const escapedLiteral = /^"(.*".*)(?="[^"]*$)/;
const quadId = /^<<("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ?("(?:""|[^"])*"[^ ]*|[^ ]+)?>>$/;
// ## DataFactory singleton
const DataFactory = {
    namedNode,
    blankNode,
    variable,
    literal,
    defaultGraph,
    quad,
    triple: quad
};
exports.default = DataFactory;
class Term {
    constructor(id){
        this.id = id;
    }
    // ### The value of this term
    get value() {
        return this.id;
    }
    // ### Returns whether this object represents the same term as the other
    equals(other) {
        // If both terms were created by this library,
        // equality can be computed through ids
        if (other instanceof Term) return this.id === other.id;
        // Otherwise, compare term type and value
        return !!other && this.termType === other.termType && this.value === other.value;
    }
    // ### Implement hashCode for Immutable.js, since we implement `equals`
    // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()
    hashCode() {
        return 0;
    }
    // ### Returns a plain object representation of this term
    toJSON() {
        return {
            termType: this.termType,
            value: this.value
        };
    }
}
class NamedNode extends Term {
    // ### The term type of this term
    get termType() {
        return 'NamedNode';
    }
}
class Literal extends Term {
    // ### The term type of this term
    get termType() {
        return 'Literal';
    }
    // ### The text value of this literal
    get value() {
        return this.id.substring(1, this.id.lastIndexOf('"'));
    }
    // ### The language of this literal
    get language() {
        // Find the last quotation mark (e.g., '"abc"@en-us')
        const id = this.id;
        let atPos = id.lastIndexOf('"') + 1;
        // If "@" it follows, return the remaining substring; empty otherwise
        return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';
    }
    // ### The datatype IRI of this literal
    get datatype() {
        return new NamedNode(this.datatypeString);
    }
    // ### The datatype string of this literal
    get datatypeString() {
        // Find the last quotation mark (e.g., '"abc"^^http://ex.org/types#t')
        const id = this.id, dtPos = id.lastIndexOf('"') + 1;
        const char = dtPos < id.length ? id[dtPos] : '';
        // If "^" it follows, return the remaining substring
        return char === '^' ? id.substr(dtPos + 2) : char !== '@' ? xsd.string : rdf.langString;
    }
    // ### Returns whether this object represents the same term as the other
    equals(other) {
        // If both literals were created by this library,
        // equality can be computed through ids
        if (other instanceof Literal) return this.id === other.id;
        // Otherwise, compare term type, value, language, and datatype
        return !!other && !!other.datatype && this.termType === other.termType && this.value === other.value && this.language === other.language && this.datatype.value === other.datatype.value;
    }
    toJSON() {
        return {
            termType: this.termType,
            value: this.value,
            language: this.language,
            datatype: {
                termType: 'NamedNode',
                value: this.datatypeString
            }
        };
    }
}
class BlankNode extends Term {
    constructor(name){
        super(`_:${name}`);
    }
    // ### The term type of this term
    get termType() {
        return 'BlankNode';
    }
    // ### The name of this blank node
    get value() {
        return this.id.substr(2);
    }
}
class Variable extends Term {
    constructor(name){
        super(`?${name}`);
    }
    // ### The term type of this term
    get termType() {
        return 'Variable';
    }
    // ### The name of this variable
    get value() {
        return this.id.substr(1);
    }
}
class DefaultGraph extends Term {
    constructor(){
        super('');
        return DEFAULTGRAPH || this;
    }
    // ### The term type of this term
    get termType() {
        return 'DefaultGraph';
    }
    // ### Returns whether this object represents the same term as the other
    equals(other) {
        // If both terms were created by this library,
        // equality can be computed through strict equality;
        // otherwise, compare term types.
        return this === other || !!other && this.termType === other.termType;
    }
}
// ## DefaultGraph singleton
DEFAULTGRAPH = new DefaultGraph();
function termFromId(id, factory) {
    factory = factory || DataFactory;
    // Falsy value or empty string indicate the default graph
    if (!id) return factory.defaultGraph();
    // Identify the term type based on the first character
    switch(id[0]){
        case '?':
            return factory.variable(id.substr(1));
        case '_':
            return factory.blankNode(id.substr(2));
        case '"':
            // Shortcut for internal literals
            if (factory === DataFactory) return new Literal(id);
            // Literal without datatype or language
            if (id[id.length - 1] === '"') return factory.literal(id.substr(1, id.length - 2));
            // Literal with datatype or language
            const endPos = id.lastIndexOf('"', id.length - 1);
            return factory.literal(id.substr(1, endPos - 1), id[endPos + 1] === '@' ? id.substr(endPos + 2) : factory.namedNode(id.substr(endPos + 3)));
        case '<':
            const components = quadId.exec(id);
            return factory.quad(termFromId(unescapeQuotes(components[1]), factory), termFromId(unescapeQuotes(components[2]), factory), termFromId(unescapeQuotes(components[3]), factory), components[4] && termFromId(unescapeQuotes(components[4]), factory));
        default:
            return factory.namedNode(id);
    }
}
function termToId(term) {
    if (typeof term === 'string') return term;
    if (term instanceof Term && term.termType !== 'Quad') return term.id;
    if (!term) return DEFAULTGRAPH.id;
    // Term instantiated with another library
    switch(term.termType){
        case 'NamedNode':
            return term.value;
        case 'BlankNode':
            return `_:${term.value}`;
        case 'Variable':
            return `?${term.value}`;
        case 'DefaultGraph':
            return '';
        case 'Literal':
            return `"${term.value}"${term.language ? `@${term.language}` : term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : ''}`;
        case 'Quad':
            // To identify RDF* quad components, we escape quotes by doubling them.
            // This avoids the overhead of backslash parsing of Turtle-like syntaxes.
            return `<<${escapeQuotes(termToId(term.subject))} ${escapeQuotes(termToId(term.predicate))} ${escapeQuotes(termToId(term.object))}${_n3Util.isDefaultGraph(term.graph) ? '' : ` ${termToId(term.graph)}`}>>`;
        default:
            throw new Error(`Unexpected termType: ${term.termType}`);
    }
}
class Quad extends Term {
    constructor(subject, predicate, object, graph){
        super('');
        this._subject = subject;
        this._predicate = predicate;
        this._object = object;
        this._graph = graph || DEFAULTGRAPH;
    }
    // ### The term type of this term
    get termType() {
        return 'Quad';
    }
    get subject() {
        return this._subject;
    }
    get predicate() {
        return this._predicate;
    }
    get object() {
        return this._object;
    }
    get graph() {
        return this._graph;
    }
    // ### Returns a plain object representation of this quad
    toJSON() {
        return {
            termType: this.termType,
            subject: this._subject.toJSON(),
            predicate: this._predicate.toJSON(),
            object: this._object.toJSON(),
            graph: this._graph.toJSON()
        };
    }
    // ### Returns whether this object represents the same quad as the other
    equals(other) {
        return !!other && this._subject.equals(other.subject) && this._predicate.equals(other.predicate) && this._object.equals(other.object) && this._graph.equals(other.graph);
    }
}
function escapeQuotes(id) {
    return id.replace(escapedLiteral, (_, quoted)=>`"${quoted.replace(/"/g, '""')}`
    );
}
function unescapeQuotes(id) {
    return id.replace(escapedLiteral, (_, quoted)=>`"${quoted.replace(/""/g, '"')}`
    );
}
// ### Creates an IRI
function namedNode(iri) {
    return new NamedNode(iri);
}
// ### Creates a blank node
function blankNode(name) {
    return new BlankNode(name || `n3-${_blankNodeCounter++}`);
}
// ### Creates a literal
function literal(value, languageOrDataType) {
    // Create a language-tagged string
    if (typeof languageOrDataType === 'string') return new Literal(`"${value}"@${languageOrDataType.toLowerCase()}`);
    // Automatically determine datatype for booleans and numbers
    let datatype = languageOrDataType ? languageOrDataType.value : '';
    if (datatype === '') {
        // Convert a boolean
        if (typeof value === 'boolean') datatype = xsd.boolean;
        else if (typeof value === 'number') {
            if (Number.isFinite(value)) datatype = Number.isInteger(value) ? xsd.integer : xsd.double;
            else {
                datatype = xsd.double;
                if (!Number.isNaN(value)) value = value > 0 ? 'INF' : '-INF';
            }
        }
    }
    // Create a datatyped literal
    return datatype === '' || datatype === xsd.string ? new Literal(`"${value}"`) : new Literal(`"${value}"^^${datatype}`);
}
// ### Creates a variable
function variable(name) {
    return new Variable(name);
}
// ### Returns the default graph
function defaultGraph() {
    return DEFAULTGRAPH;
}
// ### Creates a quad
function quad(subject, predicate, object, graph) {
    return new Quad(subject, predicate, object, graph);
}

},{"./IRIs":"bqHFW","./N3Util":"1oZtI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oZtI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Tests whether the given term represents an IRI
parcelHelpers.export(exports, "isNamedNode", ()=>isNamedNode
);
// Tests whether the given term represents a blank node
parcelHelpers.export(exports, "isBlankNode", ()=>isBlankNode
);
// Tests whether the given term represents a literal
parcelHelpers.export(exports, "isLiteral", ()=>isLiteral
);
// Tests whether the given term represents a variable
parcelHelpers.export(exports, "isVariable", ()=>isVariable
);
// Tests whether the given term represents the default graph
parcelHelpers.export(exports, "isDefaultGraph", ()=>isDefaultGraph
);
// Tests whether the given quad is in the default graph
parcelHelpers.export(exports, "inDefaultGraph", ()=>inDefaultGraph
);
// Creates a function that prepends the given IRI to a local name
parcelHelpers.export(exports, "prefix", ()=>prefix
);
// Creates a function that allows registering and expanding prefixes
parcelHelpers.export(exports, "prefixes", ()=>prefixes
);
// **N3Util** provides N3 utility functions.
var _n3DataFactory = require("./N3DataFactory");
var _n3DataFactoryDefault = parcelHelpers.interopDefault(_n3DataFactory);
function isNamedNode(term) {
    return !!term && term.termType === 'NamedNode';
}
function isBlankNode(term) {
    return !!term && term.termType === 'BlankNode';
}
function isLiteral(term) {
    return !!term && term.termType === 'Literal';
}
function isVariable(term) {
    return !!term && term.termType === 'Variable';
}
function isDefaultGraph(term) {
    return !!term && term.termType === 'DefaultGraph';
}
function inDefaultGraph(quad) {
    return isDefaultGraph(quad.graph);
}
function prefix(iri, factory) {
    return prefixes({
        '': iri.value || iri
    }, factory)('');
}
function prefixes(defaultPrefixes, factory) {
    // Add all of the default prefixes
    const prefixes1 = Object.create(null);
    for(const prefix1 in defaultPrefixes)processPrefix(prefix1, defaultPrefixes[prefix1]);
    // Set the default factory if none was specified
    factory = factory || _n3DataFactoryDefault.default;
    // Registers a new prefix (if an IRI was specified)
    // or retrieves a function that expands an existing prefix (if no IRI was specified)
    function processPrefix(prefix2, iri) {
        // Create a new prefix if an IRI is specified or the prefix doesn't exist
        if (typeof iri === 'string') {
            // Create a function that expands the prefix
            const cache = Object.create(null);
            prefixes1[prefix2] = (local)=>{
                return cache[local] || (cache[local] = factory.namedNode(iri + local));
            };
        } else if (!(prefix2 in prefixes1)) throw new Error(`Unknown prefix: ${prefix2}`);
        return prefixes1[prefix2];
    }
    return processPrefix;
}

},{"./N3DataFactory":"bKXvf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9F6q5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// **N3Writer** writes N3 documents.
var _iris = require("./IRIs");
var _irisDefault = parcelHelpers.interopDefault(_iris);
var _n3DataFactory = require("./N3DataFactory");
var _n3DataFactoryDefault = parcelHelpers.interopDefault(_n3DataFactory);
var _n3Util = require("./N3Util");
const DEFAULTGRAPH = _n3DataFactoryDefault.default.defaultGraph();
const { rdf , xsd  } = _irisDefault.default;
// Characters in literals that require escaping
const escape = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/, escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g, escapedCharacters = {
    '\\': '\\\\',
    '"': '\\"',
    '\t': '\\t',
    '\n': '\\n',
    '\r': '\\r',
    '\b': '\\b',
    '\f': '\\f'
};
// ## Placeholder class to represent already pretty-printed terms
class SerializedTerm extends _n3DataFactory.Term {
    // Pretty-printed nodes are not equal to any other node
    // (e.g., [] does not equal [])
    equals() {
        return false;
    }
}
class N3Writer {
    constructor(outputStream, options){
        // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
        this._prefixRegex = /$0^/;
        // Shift arguments if the first argument is not a stream
        if (outputStream && typeof outputStream.write !== 'function') options = outputStream, outputStream = null;
        options = options || {
        };
        this._lists = options.lists;
        // If no output stream given, send the output as string through the end callback
        if (!outputStream) {
            let output = '';
            this._outputStream = {
                write (chunk, encoding, done) {
                    output += chunk;
                    done && done();
                },
                end: (done)=>{
                    done && done(null, output);
                }
            };
            this._endStream = true;
        } else {
            this._outputStream = outputStream;
            this._endStream = options.end === undefined ? true : !!options.end;
        }
        // Initialize writer, depending on the format
        this._subject = null;
        if (!/triple|quad/i.test(options.format)) {
            this._lineMode = false;
            this._graph = DEFAULTGRAPH;
            this._prefixIRIs = Object.create(null);
            options.prefixes && this.addPrefixes(options.prefixes);
            if (options.baseIRI) {
                this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)}${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);
                this._baseLength = options.baseIRI.length;
            }
        } else {
            this._lineMode = true;
            this._writeQuad = this._writeQuadLine;
        }
    }
    // ## Private methods
    // ### Whether the current graph is the default graph
    get _inDefaultGraph() {
        return DEFAULTGRAPH.equals(this._graph);
    }
    // ### `_write` writes the argument to the output stream
    _write(string, callback) {
        this._outputStream.write(string, 'utf8', callback);
    }
    // ### `_writeQuad` writes the quad to the output stream
    _writeQuad(subject, predicate, object, graph, done) {
        try {
            // Write the graph's label if it has changed
            if (!graph.equals(this._graph)) {
                // Close the previous graph and start the new one
                this._write((this._subject === null ? '' : this._inDefaultGraph ? '.\n' : '\n}\n') + (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\n`));
                this._graph = graph;
                this._subject = null;
            }
            // Don't repeat the subject if it's the same
            if (subject.equals(this._subject)) {
                // Don't repeat the predicate if it's the same
                if (predicate.equals(this._predicate)) this._write(`, ${this._encodeObject(object)}`, done);
                else this._write(`;\n    ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
            } else this._write(`${(this._subject === null ? '' : '.\n') + this._encodeSubject(this._subject = subject)} ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
        } catch (error) {
            done && done(error);
        }
    }
    // ### `_writeQuadLine` writes the quad to the output stream as a single line
    _writeQuadLine(subject, predicate, object, graph, done) {
        // Write the quad without prefixes
        delete this._prefixMatch;
        this._write(this.quadToString(subject, predicate, object, graph), done);
    }
    // ### `quadToString` serializes a quad as a string
    quadToString(subject, predicate, object, graph) {
        return `${this._encodeSubject(subject)} ${this._encodeIriOrBlank(predicate)} ${this._encodeObject(object)}${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\n` : ' .\n'}`;
    }
    // ### `quadsToString` serializes an array of quads as a string
    quadsToString(quads) {
        return quads.map((t)=>{
            return this.quadToString(t.subject, t.predicate, t.object, t.graph);
        }).join('');
    }
    // ### `_encodeSubject` represents a subject
    _encodeSubject(entity) {
        return entity.termType === 'Quad' ? this._encodeQuad(entity) : this._encodeIriOrBlank(entity);
    }
    // ### `_encodeIriOrBlank` represents an IRI or blank node
    _encodeIriOrBlank(entity) {
        // A blank node or list is represented as-is
        if (entity.termType !== 'NamedNode') {
            // If it is a list head, pretty-print it
            if (this._lists && entity.value in this._lists) entity = this.list(this._lists[entity.value]);
            return 'id' in entity ? entity.id : `_:${entity.value}`;
        }
        let iri = entity.value;
        // Use relative IRIs if requested and possible
        if (this._baseMatcher && this._baseMatcher.test(iri)) iri = iri.substr(this._baseLength);
        // Escape special characters
        if (escape.test(iri)) iri = iri.replace(escapeAll, characterReplacer);
        // Try to represent the IRI as prefixed name
        const prefixMatch = this._prefixRegex.exec(iri);
        return !prefixMatch ? `<${iri}>` : !prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2];
    }
    // ### `_encodeLiteral` represents a literal
    _encodeLiteral(literal) {
        // Escape special characters
        let value = literal.value;
        if (escape.test(value)) value = value.replace(escapeAll, characterReplacer);
        // Write a language-tagged literal
        if (literal.language) return `"${value}"@${literal.language}`;
        // Write dedicated literals per data type
        if (this._lineMode) {
            // Only abbreviate strings in N-Triples or N-Quads
            if (literal.datatype.value === xsd.string) return `"${value}"`;
        } else // Use common datatype abbreviations in Turtle or TriG
        switch(literal.datatype.value){
            case xsd.string:
                return `"${value}"`;
            case xsd.boolean:
                if (value === 'true' || value === 'false') return value;
                break;
            case xsd.integer:
                if (/^[+-]?\d+$/.test(value)) return value;
                break;
            case xsd.decimal:
                if (/^[+-]?\d*\.\d+$/.test(value)) return value;
                break;
            case xsd.double:
                if (/^[+-]?(?:\d+\.\d*|\.?\d+)[eE][+-]?\d+$/.test(value)) return value;
                break;
        }
        // Write a regular datatyped literal
        return `"${value}"^^${this._encodeIriOrBlank(literal.datatype)}`;
    }
    // ### `_encodePredicate` represents a predicate
    _encodePredicate(predicate) {
        return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);
    }
    // ### `_encodeObject` represents an object
    _encodeObject(object) {
        switch(object.termType){
            case 'Quad':
                return this._encodeQuad(object);
            case 'Literal':
                return this._encodeLiteral(object);
            default:
                return this._encodeIriOrBlank(object);
        }
    }
    // ### `_encodeQuad` encodes an RDF* quad
    _encodeQuad({ subject , predicate , object , graph  }) {
        return `<<${this._encodeSubject(subject)} ${this._encodePredicate(predicate)} ${this._encodeObject(object)}${_n3Util.isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;
    }
    // ### `_blockedWrite` replaces `_write` after the writer has been closed
    _blockedWrite() {
        throw new Error('Cannot write because the writer has been closed.');
    }
    // ### `addQuad` adds the quad to the output stream
    addQuad(subject, predicate, object, graph, done) {
        // The quad was given as an object, so shift parameters
        if (object === undefined) this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);
        else if (typeof graph === 'function') this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);
        else this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);
    }
    // ### `addQuads` adds the quads to the output stream
    addQuads(quads) {
        for(let i = 0; i < quads.length; i++)this.addQuad(quads[i]);
    }
    // ### `addPrefix` adds the prefix to the output stream
    addPrefix(prefix, iri, done) {
        const prefixes = {
        };
        prefixes[prefix] = iri;
        this.addPrefixes(prefixes, done);
    }
    // ### `addPrefixes` adds the prefixes to the output stream
    addPrefixes(prefixes, done) {
        // Ignore prefixes if not supported by the serialization
        if (!this._prefixIRIs) return done && done();
        // Write all new prefixes
        let hasPrefixes = false;
        for(let prefix in prefixes){
            let iri = prefixes[prefix];
            if (typeof iri !== 'string') iri = iri.value;
            hasPrefixes = true;
            // Finish a possible pending quad
            if (this._subject !== null) {
                this._write(this._inDefaultGraph ? '.\n' : '\n}\n');
                this._subject = null, this._graph = '';
            }
            // Store and write the prefix
            this._prefixIRIs[iri] = prefix += ':';
            this._write(`@prefix ${prefix} <${iri}>.\n`);
        }
        // Recreate the prefix matcher
        if (hasPrefixes) {
            let IRIlist = '', prefixList = '';
            for(const prefixIRI in this._prefixIRIs){
                IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;
                prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];
            }
            IRIlist = escapeRegex(IRIlist, /[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
            this._prefixRegex = new RegExp(`^(?:${prefixList})[^\/]*$|` + `^(${IRIlist})([a-zA-Z][\\-_a-zA-Z0-9]*)$`);
        }
        // End a prefix block with a newline
        this._write(hasPrefixes ? '\n' : '', done);
    }
    // ### `blank` creates a blank node with the given content
    blank(predicate, object) {
        let children = predicate, child, length;
        // Empty blank node
        if (predicate === undefined) children = [];
        else if (predicate.termType) children = [
            {
                predicate: predicate,
                object: object
            }
        ];
        else if (!('length' in predicate)) children = [
            predicate
        ];
        switch(length = children.length){
            // Generate an empty blank node
            case 0:
                return new SerializedTerm('[]');
            // Generate a non-nested one-triple blank node
            case 1:
                child = children[0];
                if (!(child.object instanceof SerializedTerm)) return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)} ]`);
            // Generate a multi-triple or nested blank node
            default:
                let contents = '[';
                // Write all triples in order
                for(let i = 0; i < length; i++){
                    child = children[i];
                    // Write only the object is the predicate is the same as the previous
                    if (child.predicate.equals(predicate)) contents += `, ${this._encodeObject(child.object)}`;
                    else {
                        contents += `${(i ? ';\n  ' : '\n  ') + this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)}`;
                        predicate = child.predicate;
                    }
                }
                return new SerializedTerm(`${contents}\n]`);
        }
    }
    // ### `list` creates a list node with the given content
    list(elements) {
        const length = elements && elements.length || 0, contents = new Array(length);
        for(let i = 0; i < length; i++)contents[i] = this._encodeObject(elements[i]);
        return new SerializedTerm(`(${contents.join(' ')})`);
    }
    // ### `end` signals the end of the output stream
    end(done) {
        // Finish a possible pending quad
        if (this._subject !== null) {
            this._write(this._inDefaultGraph ? '.\n' : '\n}\n');
            this._subject = null;
        }
        // Disallow further writing
        this._write = this._blockedWrite;
        // Try to end the underlying stream, ensuring done is called exactly one time
        let singleDone = done && ((error, result)=>{
            singleDone = null, done(error, result);
        });
        if (this._endStream) try {
            return this._outputStream.end(singleDone);
        } catch (error) {
        }
        singleDone && singleDone();
    }
}
exports.default = N3Writer;
// Replaces a character by its escaped version
function characterReplacer(character) {
    // Replace a single character by its escaped version
    let result = escapedCharacters[character];
    if (result === undefined) {
        // Replace a single character with its 4-bit unicode escape sequence
        if (character.length === 1) {
            result = character.charCodeAt(0).toString(16);
            result = '\\u0000'.substr(0, 6 - result.length) + result;
        } else {
            result = ((character.charCodeAt(0) - 55296) * 1024 + character.charCodeAt(1) + 9216).toString(16);
            result = '\\U00000000'.substr(0, 10 - result.length) + result;
        }
    }
    return result;
}
function escapeRegex(regex) {
    return regex.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
}

},{"./IRIs":"bqHFW","./N3DataFactory":"bKXvf","./N3Util":"1oZtI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etSNt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// **N3Store** objects store N3 quads by graph in memory.
var _n3DataFactory = require("./N3DataFactory");
var _n3DataFactoryDefault = parcelHelpers.interopDefault(_n3DataFactory);
var _readableStream = require("readable-stream");
var _iris = require("./IRIs");
var _irisDefault = parcelHelpers.interopDefault(_iris);
class N3Store {
    constructor(quads, options){
        // The number of quads is initially zero
        this._size = 0;
        // `_graphs` contains subject, predicate, and object indexes per graph
        this._graphs = Object.create(null);
        // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
        // saving memory by using only numbers as keys in `_graphs`
        this._id = 0;
        this._ids = Object.create(null);
        this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero
        this._entities = Object.create(null); // inverse of `_ids`
        // `_blankNodeIndex` is the index of the last automatically named blank node
        this._blankNodeIndex = 0;
        // Shift parameters if `quads` is not given
        if (!options && quads && !quads[0]) options = quads, quads = null;
        options = options || {
        };
        this._factory = options.factory || _n3DataFactoryDefault.default;
        // Add quads if passed
        if (quads) this.addQuads(quads);
    }
    // ## Public properties
    // ### `size` returns the number of quads in the store
    get size() {
        // Return the quad count if if was cached
        let size = this._size;
        if (size !== null) return size;
        // Calculate the number of quads by counting to the deepest level
        size = 0;
        const graphs = this._graphs;
        let subjects, subject;
        for(const graphKey in graphs)for(const subjectKey in subjects = graphs[graphKey].subjects)for(const predicateKey in subject = subjects[subjectKey])size += Object.keys(subject[predicateKey]).length;
        return this._size = size;
    }
    // ## Private methods
    // ### `_addToIndex` adds a quad to a three-layered index.
    // Returns if the index has changed, if the entry did not already exist.
    _addToIndex(index0, key0, key1, key2) {
        // Create layers as necessary
        const index1 = index0[key0] || (index0[key0] = {
        });
        const index2 = index1[key1] || (index1[key1] = {
        });
        // Setting the key to _any_ value signals the presence of the quad
        const existed = key2 in index2;
        if (!existed) index2[key2] = null;
        return !existed;
    }
    // ### `_removeFromIndex` removes a quad from a three-layered index
    _removeFromIndex(index0, key0, key1, key2) {
        // Remove the quad from the index
        const index1 = index0[key0], index2 = index1[key1];
        delete index2[key2];
        // Remove intermediary index layers if they are empty
        for(const key in index2)return;
        delete index1[key1];
        for(const key3 in index1)return;
        delete index0[key0];
    }
    // ### `_findInIndex` finds a set of quads in a three-layered index.
    // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
    // Any of these keys can be undefined, which is interpreted as a wildcard.
    // `name0`, `name1`, and `name2` are the names of the keys at each level,
    // used when reconstructing the resulting quad
    // (for instance: _subject_, _predicate_, and _object_).
    // Finally, `graphId` will be the graph of the created quads.
    *_findInIndex(index0, key0, key1, key2, name0, name1, name2, graphId) {
        let tmp, index1, index2;
        const entityKeys = this._entities;
        const graph = _n3DataFactory.termFromId(graphId, this._factory);
        const parts = {
            subject: null,
            predicate: null,
            object: null
        };
        // If a key is specified, use only that part of index 0.
        if (key0) (tmp = index0, index0 = {
        })[key0] = tmp[key0];
        for(const value0 in index0)if (index1 = index0[value0]) {
            parts[name0] = _n3DataFactory.termFromId(entityKeys[value0], this._factory);
            // If a key is specified, use only that part of index 1.
            if (key1) (tmp = index1, index1 = {
            })[key1] = tmp[key1];
            for(const value1 in index1)if (index2 = index1[value1]) {
                parts[name1] = _n3DataFactory.termFromId(entityKeys[value1], this._factory);
                // If a key is specified, use only that part of index 2, if it exists.
                const values = key2 ? key2 in index2 ? [
                    key2
                ] : [] : Object.keys(index2);
                // Create quads for all items found in index 2.
                for(let l = 0; l < values.length; l++){
                    parts[name2] = _n3DataFactory.termFromId(entityKeys[values[l]], this._factory);
                    yield this._factory.quad(parts.subject, parts.predicate, parts.object, graph);
                }
            }
        }
    }
    // ### `_loop` executes the callback on all keys of index 0
    _loop(index0, callback) {
        for(const key0 in index0)callback(key0);
    }
    // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0
    _loopByKey0(index0, key0, callback) {
        let index1, key1;
        if (index1 = index0[key0]) for(key1 in index1)callback(key1);
    }
    // ### `_loopByKey1` executes the callback on given keys of all entries in index 0
    _loopByKey1(index0, key1, callback) {
        let key0, index1;
        for(key0 in index0){
            index1 = index0[key0];
            if (index1[key1]) callback(key0);
        }
    }
    // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2
    _loopBy2Keys(index0, key0, key1, callback) {
        let index1, index2, key2;
        if ((index1 = index0[key0]) && (index2 = index1[key1])) for(key2 in index2)callback(key2);
    }
    // ### `_countInIndex` counts matching quads in a three-layered index.
    // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
    // Any of these keys can be undefined, which is interpreted as a wildcard.
    _countInIndex(index0, key0, key1, key2) {
        let count = 0, tmp, index1, index2;
        // If a key is specified, count only that part of index 0
        if (key0) (tmp = index0, index0 = {
        })[key0] = tmp[key0];
        for(const value0 in index0)if (index1 = index0[value0]) {
            // If a key is specified, count only that part of index 1
            if (key1) (tmp = index1, index1 = {
            })[key1] = tmp[key1];
            for(const value1 in index1)if (index2 = index1[value1]) {
                // If a key is specified, count the quad if it exists
                if (key2) key2 in index2 && count++;
                else count += Object.keys(index2).length;
            }
        }
        return count;
    }
    // ### `_getGraphs` returns an array with the given graph,
    // or all graphs if the argument is null or undefined.
    _getGraphs(graph) {
        if (!isString(graph)) return this._graphs;
        const graphs = {
        };
        graphs[graph] = this._graphs[graph];
        return graphs;
    }
    // ### `_uniqueEntities` returns a function that accepts an entity ID
    // and passes the corresponding entity to callback if it hasn't occurred before.
    _uniqueEntities(callback) {
        const uniqueIds = Object.create(null);
        return (id)=>{
            if (!(id in uniqueIds)) {
                uniqueIds[id] = true;
                callback(_n3DataFactory.termFromId(this._entities[id], this._factory));
            }
        };
    }
    // ## Public methods
    // ### `add` adds the specified quad to the dataset.
    // Returns the dataset instance it was called on.
    // Existing quads, as defined in Quad.equals, will be ignored.
    add(quad) {
        this.addQuad(quad);
        return this;
    }
    // ### `addQuad` adds a new quad to the store.
    // Returns if the quad index has changed, if the quad did not already exist.
    addQuad(subject, predicate, object, graph) {
        // Shift arguments if a quad object is given instead of components
        if (!predicate) graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject;
        // Convert terms to internal string representation
        subject = _n3DataFactory.termToId(subject);
        predicate = _n3DataFactory.termToId(predicate);
        object = _n3DataFactory.termToId(object);
        graph = _n3DataFactory.termToId(graph);
        // Find the graph that will contain the triple
        let graphItem = this._graphs[graph];
        // Create the graph if it doesn't exist yet
        if (!graphItem) {
            graphItem = this._graphs[graph] = {
                subjects: {
                },
                predicates: {
                },
                objects: {
                }
            };
            // Freezing a graph helps subsequent `add` performance,
            // and properties will never be modified anyway
            Object.freeze(graphItem);
        }
        // Since entities can often be long IRIs, we avoid storing them in every index.
        // Instead, we have a separate index that maps entities to numbers,
        // which are then used as keys in the other indexes.
        const ids = this._ids;
        const entities = this._entities;
        subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id);
        predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
        object = ids[object] || (ids[entities[++this._id] = object] = this._id);
        const changed = this._addToIndex(graphItem.subjects, subject, predicate, object);
        this._addToIndex(graphItem.predicates, predicate, object, subject);
        this._addToIndex(graphItem.objects, object, subject, predicate);
        // The cached quad count is now invalid
        this._size = null;
        return changed;
    }
    // ### `addQuads` adds multiple quads to the store
    addQuads(quads) {
        for(let i = 0; i < quads.length; i++)this.addQuad(quads[i]);
    }
    // ### `delete` removes the specified quad from the dataset.
    // Returns the dataset instance it was called on.
    delete(quad) {
        this.removeQuad(quad);
        return this;
    }
    // ### `has` determines whether a dataset includes a certain quad or quad pattern.
    has(subjectOrQuad, predicate, object, graph) {
        if (subjectOrQuad && subjectOrQuad.subject) ({ subject: subjectOrQuad , predicate , object , graph  } = subjectOrQuad);
        return !this.readQuads(subjectOrQuad, predicate, object, graph).next().done;
    }
    // ### `import` adds a stream of quads to the store
    import(stream) {
        stream.on('data', (quad)=>{
            this.addQuad(quad);
        });
        return stream;
    }
    // ### `removeQuad` removes a quad from the store if it exists
    removeQuad(subject, predicate, object, graph) {
        // Shift arguments if a quad object is given instead of components
        if (!predicate) graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject;
        // Convert terms to internal string representation
        subject = _n3DataFactory.termToId(subject);
        predicate = _n3DataFactory.termToId(predicate);
        object = _n3DataFactory.termToId(object);
        graph = _n3DataFactory.termToId(graph);
        // Find internal identifiers for all components
        // and verify the quad exists.
        const ids = this._ids, graphs = this._graphs;
        let graphItem, subjects, predicates;
        if (!(subject = ids[subject]) || !(predicate = ids[predicate]) || !(object = ids[object]) || !(graphItem = graphs[graph]) || !(subjects = graphItem.subjects[subject]) || !(predicates = subjects[predicate]) || !(object in predicates)) return false;
        // Remove it from all indexes
        this._removeFromIndex(graphItem.subjects, subject, predicate, object);
        this._removeFromIndex(graphItem.predicates, predicate, object, subject);
        this._removeFromIndex(graphItem.objects, object, subject, predicate);
        if (this._size !== null) this._size--;
        // Remove the graph if it is empty
        for(subject in graphItem.subjects)return true;
        delete graphs[graph];
        return true;
    }
    // ### `removeQuads` removes multiple quads from the store
    removeQuads(quads) {
        for(let i = 0; i < quads.length; i++)this.removeQuad(quads[i]);
    }
    // ### `remove` removes a stream of quads from the store
    remove(stream) {
        stream.on('data', (quad)=>{
            this.removeQuad(quad);
        });
        return stream;
    }
    // ### `removeMatches` removes all matching quads from the store
    // Setting any field to `undefined` or `null` indicates a wildcard.
    removeMatches(subject, predicate, object, graph) {
        const stream = new _readableStream.Readable({
            objectMode: true
        });
        stream._read = ()=>{
            for (const quad of this.readQuads(subject, predicate, object, graph))stream.push(quad);
            stream.push(null);
        };
        return this.remove(stream);
    }
    // ### `deleteGraph` removes all triples with the given graph from the store
    deleteGraph(graph) {
        return this.removeMatches(null, null, null, graph);
    }
    // ### `getQuads` returns an array of quads matching a pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    getQuads(subject, predicate, object, graph) {
        return [
            ...this.readQuads(subject, predicate, object, graph)
        ];
    }
    // ### `readQuads` returns an generator of quads matching a pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    *readQuads(subject, predicate, object, graph) {
        // Convert terms to internal string representation
        subject = subject && _n3DataFactory.termToId(subject);
        predicate = predicate && _n3DataFactory.termToId(predicate);
        object = object && _n3DataFactory.termToId(object);
        graph = graph && _n3DataFactory.termToId(graph);
        const graphs = this._getGraphs(graph), ids = this._ids;
        let content, subjectId, predicateId, objectId;
        // Translate IRIs to internal index keys.
        if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return;
        for(const graphId in graphs)// Only if the specified graph contains triples, there can be results
        if (content = graphs[graphId]) {
            // Choose the optimal index, based on what fields are present
            if (subjectId) {
                if (objectId) // If subject and object are given, the object index will be the fastest
                yield* this._findInIndex(content.objects, objectId, subjectId, predicateId, 'object', 'subject', 'predicate', graphId);
                else // If only subject and possibly predicate are given, the subject index will be the fastest
                yield* this._findInIndex(content.subjects, subjectId, predicateId, null, 'subject', 'predicate', 'object', graphId);
            } else if (predicateId) // If only predicate and possibly object are given, the predicate index will be the fastest
            yield* this._findInIndex(content.predicates, predicateId, objectId, null, 'predicate', 'object', 'subject', graphId);
            else if (objectId) // If only object is given, the object index will be the fastest
            yield* this._findInIndex(content.objects, objectId, null, null, 'object', 'subject', 'predicate', graphId);
            else // If nothing is given, iterate subjects and predicates first
            yield* this._findInIndex(content.subjects, null, null, null, 'subject', 'predicate', 'object', graphId);
        }
    }
    // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.
    // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.
    // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.
    // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    // For backwards compatibility, the object return also implements the Readable stream interface.
    match(subject, predicate, object, graph) {
        return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);
    }
    // ### `countQuads` returns the number of quads matching a pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    countQuads(subject, predicate, object, graph) {
        // Convert terms to internal string representation
        subject = subject && _n3DataFactory.termToId(subject);
        predicate = predicate && _n3DataFactory.termToId(predicate);
        object = object && _n3DataFactory.termToId(object);
        graph = graph && _n3DataFactory.termToId(graph);
        const graphs = this._getGraphs(graph), ids = this._ids;
        let count = 0, content, subjectId, predicateId, objectId;
        // Translate IRIs to internal index keys.
        if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return 0;
        for(const graphId in graphs)// Only if the specified graph contains triples, there can be results
        if (content = graphs[graphId]) {
            // Choose the optimal index, based on what fields are present
            if (subject) {
                if (object) // If subject and object are given, the object index will be the fastest
                count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
                else // If only subject and possibly predicate are given, the subject index will be the fastest
                count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
            } else if (predicate) // If only predicate and possibly object are given, the predicate index will be the fastest
            count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
            else // If only object is possibly given, the object index will be the fastest
            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
        }
        return count;
    }
    // ### `forEach` executes the callback on all quads.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    forEach(callback, subject, predicate, object, graph) {
        this.some((quad)=>{
            callback(quad);
            return false;
        }, subject, predicate, object, graph);
    }
    // ### `every` executes the callback on all quads,
    // and returns `true` if it returns truthy for all them.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    every(callback, subject, predicate, object, graph) {
        let some = false;
        const every = !this.some((quad)=>{
            some = true;
            return !callback(quad);
        }, subject, predicate, object, graph);
        return some && every;
    }
    // ### `some` executes the callback on all quads,
    // and returns `true` if it returns truthy for any of them.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    some(callback, subject, predicate, object, graph) {
        for (const quad of this.readQuads(subject, predicate, object, graph))if (callback(quad)) return true;
        return false;
    }
    // ### `getSubjects` returns all subjects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    getSubjects(predicate, object, graph) {
        const results = [];
        this.forSubjects((s)=>{
            results.push(s);
        }, predicate, object, graph);
        return results;
    }
    // ### `forSubjects` executes the callback on all subjects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    forSubjects(callback, predicate, object, graph) {
        // Convert terms to internal string representation
        predicate = predicate && _n3DataFactory.termToId(predicate);
        object = object && _n3DataFactory.termToId(object);
        graph = graph && _n3DataFactory.termToId(graph);
        const ids = this._ids, graphs = this._getGraphs(graph);
        let content, predicateId, objectId;
        callback = this._uniqueEntities(callback);
        // Translate IRIs to internal index keys.
        if (isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return;
        for(graph in graphs)// Only if the specified graph contains triples, there can be results
        if (content = graphs[graph]) {
            // Choose optimal index based on which fields are wildcards
            if (predicateId) {
                if (objectId) // If predicate and object are given, the POS index is best.
                this._loopBy2Keys(content.predicates, predicateId, objectId, callback);
                else // If only predicate is given, the SPO index is best.
                this._loopByKey1(content.subjects, predicateId, callback);
            } else if (objectId) // If only object is given, the OSP index is best.
            this._loopByKey0(content.objects, objectId, callback);
            else // If no params given, iterate all the subjects
            this._loop(content.subjects, callback);
        }
    }
    // ### `getPredicates` returns all predicates that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    getPredicates(subject, object, graph) {
        const results = [];
        this.forPredicates((p)=>{
            results.push(p);
        }, subject, object, graph);
        return results;
    }
    // ### `forPredicates` executes the callback on all predicates that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    forPredicates(callback, subject, object, graph) {
        // Convert terms to internal string representation
        subject = subject && _n3DataFactory.termToId(subject);
        object = object && _n3DataFactory.termToId(object);
        graph = graph && _n3DataFactory.termToId(graph);
        const ids = this._ids, graphs = this._getGraphs(graph);
        let content, subjectId, objectId;
        callback = this._uniqueEntities(callback);
        // Translate IRIs to internal index keys.
        if (isString(subject) && !(subjectId = ids[subject]) || isString(object) && !(objectId = ids[object])) return;
        for(graph in graphs)// Only if the specified graph contains triples, there can be results
        if (content = graphs[graph]) {
            // Choose optimal index based on which fields are wildcards
            if (subjectId) {
                if (objectId) // If subject and object are given, the OSP index is best.
                this._loopBy2Keys(content.objects, objectId, subjectId, callback);
                else // If only subject is given, the SPO index is best.
                this._loopByKey0(content.subjects, subjectId, callback);
            } else if (objectId) // If only object is given, the POS index is best.
            this._loopByKey1(content.predicates, objectId, callback);
            else // If no params given, iterate all the predicates.
            this._loop(content.predicates, callback);
        }
    }
    // ### `getObjects` returns all objects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    getObjects(subject, predicate, graph) {
        const results = [];
        this.forObjects((o)=>{
            results.push(o);
        }, subject, predicate, graph);
        return results;
    }
    // ### `forObjects` executes the callback on all objects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    forObjects(callback, subject, predicate, graph) {
        // Convert terms to internal string representation
        subject = subject && _n3DataFactory.termToId(subject);
        predicate = predicate && _n3DataFactory.termToId(predicate);
        graph = graph && _n3DataFactory.termToId(graph);
        const ids = this._ids, graphs = this._getGraphs(graph);
        let content, subjectId, predicateId;
        callback = this._uniqueEntities(callback);
        // Translate IRIs to internal index keys.
        if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate])) return;
        for(graph in graphs)// Only if the specified graph contains triples, there can be results
        if (content = graphs[graph]) {
            // Choose optimal index based on which fields are wildcards
            if (subjectId) {
                if (predicateId) // If subject and predicate are given, the SPO index is best.
                this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);
                else // If only subject is given, the OSP index is best.
                this._loopByKey1(content.objects, subjectId, callback);
            } else if (predicateId) // If only predicate is given, the POS index is best.
            this._loopByKey0(content.predicates, predicateId, callback);
            else // If no params given, iterate all the objects.
            this._loop(content.objects, callback);
        }
    }
    // ### `getGraphs` returns all graphs that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    getGraphs(subject, predicate, object) {
        const results = [];
        this.forGraphs((g)=>{
            results.push(g);
        }, subject, predicate, object);
        return results;
    }
    // ### `forGraphs` executes the callback on all graphs that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.
    forGraphs(callback, subject, predicate, object) {
        for(const graph in this._graphs)this.some((quad)=>{
            callback(quad.graph);
            return true; // Halt iteration of some()
        }, subject, predicate, object, graph);
    }
    // ### `createBlankNode` creates a new blank node, returning its name
    createBlankNode(suggestedName) {
        let name, index;
        // Generate a name based on the suggested name
        if (suggestedName) {
            name = suggestedName = `_:${suggestedName}`, index = 1;
            while(this._ids[name])name = suggestedName + index++;
        } else do name = `_:b${this._blankNodeIndex++}`;
        while (this._ids[name])
        // Add the blank node to the entities, avoiding the generation of duplicates
        this._ids[name] = ++this._id;
        this._entities[this._id] = name;
        return this._factory.blankNode(name.substr(2));
    }
    // ### `extractLists` finds and removes all list triples
    // and returns the items per list.
    extractLists({ remove =false , ignoreErrors =false  } = {
    }) {
        const lists = {
        }; // has scalar keys so could be a simple Object
        const onError = ignoreErrors ? ()=>true
         : (node, message)=>{
            throw new Error(`${node.value} ${message}`);
        };
        // Traverse each list from its tail
        const tails = this.getQuads(null, _irisDefault.default.rdf.rest, _irisDefault.default.rdf.nil, null);
        const toRemove = remove ? [
            ...tails
        ] : [];
        tails.forEach((tailQuad)=>{
            const items = []; // the members found as objects of rdf:first quads
            let malformed = false; // signals whether the current list is malformed
            let head; // the head of the list (_:b1 in above example)
            let headPos; // set to subject or object when head is set
            const graph = tailQuad.graph; // make sure list is in exactly one graph
            // Traverse the list from tail to end
            let current = tailQuad.subject;
            while(current && !malformed){
                const objectQuads = this.getQuads(null, null, current, null);
                const subjectQuads = this.getQuads(current, null, null, null);
                let quad, first = null, rest = null, parent = null;
                // Find the first and rest of this list node
                for(let i = 0; i < subjectQuads.length && !malformed; i++){
                    quad = subjectQuads[i];
                    if (!quad.graph.equals(graph)) malformed = onError(current, 'not confined to single graph');
                    else if (head) malformed = onError(current, 'has non-list arcs out');
                    else if (quad.predicate.value === _irisDefault.default.rdf.first) {
                        if (first) malformed = onError(current, 'has multiple rdf:first arcs');
                        else toRemove.push(first = quad);
                    } else if (quad.predicate.value === _irisDefault.default.rdf.rest) {
                        if (rest) malformed = onError(current, 'has multiple rdf:rest arcs');
                        else toRemove.push(rest = quad);
                    } else if (objectQuads.length) malformed = onError(current, 'can\'t be subject and object');
                    else {
                        head = quad; // e.g. { (1 2 3) :p :o }
                        headPos = 'subject';
                    }
                }
                // { :s :p (1 2) } arrives here with no head
                // { (1 2) :p :o } arrives here with head set to the list.
                for(let i1 = 0; i1 < objectQuads.length && !malformed; ++i1){
                    quad = objectQuads[i1];
                    if (head) malformed = onError(current, 'can\'t have coreferences');
                    else if (quad.predicate.value === _irisDefault.default.rdf.rest) {
                        if (parent) malformed = onError(current, 'has incoming rdf:rest arcs');
                        else parent = quad;
                    } else {
                        head = quad; // e.g. { :s :p (1 2) }
                        headPos = 'object';
                    }
                }
                // Store the list item and continue with parent
                if (!first) malformed = onError(current, 'has no list head');
                else items.unshift(first.object);
                current = parent && parent.subject;
            }
            // Don't remove any quads if the list is malformed
            if (malformed) remove = false;
            else if (head) lists[head[headPos].value] = items;
        });
        // Remove list quads if requested
        if (remove) this.removeQuads(toRemove);
        return lists;
    }
    // ### Store is an iterable.
    // Can be used where iterables are expected: for...of loops, array spread operator,
    // `yield*`, and destructuring assignment (order is not guaranteed).
    *[Symbol.iterator]() {
        yield* this.readQuads();
    }
}
exports.default = N3Store;
// Determines whether the argument is a string
function isString(s) {
    return typeof s === 'string' || s instanceof String;
}
/**
 * A class that implements both DatasetCore and Readable.
 */ class DatasetCoreAndReadableStream extends _readableStream.Readable {
    constructor(n3Store, subject, predicate, object, graph){
        super({
            objectMode: true
        });
        Object.assign(this, {
            n3Store,
            subject,
            predicate,
            object,
            graph
        });
    }
    get filtered() {
        if (!this._filtered) {
            const { n3Store , graph , object , predicate , subject  } = this;
            const newStore = this._filtered = new N3Store({
                factory: n3Store._factory
            });
            for (const quad of n3Store.readQuads(subject, predicate, object, graph))newStore.addQuad(quad);
        }
        return this._filtered;
    }
    get size() {
        return this.filtered.size;
    }
    _read() {
        for (const quad of this)this.push(quad);
        this.push(null);
    }
    add(quad) {
        return this.filtered.add(quad);
    }
    delete(quad) {
        return this.filtered.delete(quad);
    }
    has(quad) {
        return this.filtered.has(quad);
    }
    match(subject, predicate, object, graph) {
        return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);
    }
    *[Symbol.iterator]() {
        yield* this._filtered || this.n3Store.readQuads(this.subject, this.predicate, this.object, this.graph);
    }
}

},{"./N3DataFactory":"bKXvf","readable-stream":"jXNWE","./IRIs":"bqHFW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jXNWE":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_readable.js":"6NdbQ","./lib/_stream_writable.js":"gTkcq","./lib/_stream_duplex.js":"kKNA3","./lib/_stream_transform.js":"ba8Mr","./lib/_stream_passthrough.js":"2xP98","./lib/internal/streams/end-of-stream.js":"aOMy2","./lib/internal/streams/pipeline.js":"fyp4t"}],"6NdbQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var process = require("process");
var global = arguments[3];
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function debug() {
};
/*</replacement>*/ var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require('./_stream_duplex');
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 1073741824;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug('on readable', state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < kProxyEvents.length; n1++)stream.on(kProxyEvents[n1], this.emit.bind(this, kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === 'function') Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === 'function') Readable.from = function(iterable, opts) {
    if (from === undefined) from = require('./internal/streams/from');
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"d5jf4","events":"1VQLm","./internal/streams/stream":"60BLS","buffer":"fCgem","util":"jhUEF","./internal/streams/buffer_list":"hf3P2","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3","string_decoder/":"3vmkr","./internal/streams/async_iterator":"k019Y","./internal/streams/from":"ak0YH"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"60BLS":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"1VQLm"}],"hf3P2":[function(require,module,exports) {
'use strict';
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require('buffer'), Buffer = _require.Buffer;
var _require2 = require('util'), inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

},{"buffer":"fCgem","util":"jhUEF"}],"YI8DF":[function(require,module,exports) {
'use strict'; // undocumented cb() API, needed for core, not for public API
var process = require("process");
function destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"d5jf4"}],"61BRN":[function(require,module,exports) {
'use strict';
var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"aJlwj"}],"aJlwj":[function(require,module,exports) {
'use strict';
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {
};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if (endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"kKNA3":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys1 = [];
    for(var key in obj)keys1.push(key);
    return keys1;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"d5jf4","./_stream_readable":"6NdbQ","./_stream_writable":"gTkcq","inherits":"bRL3M"}],"gTkcq":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
var global = arguments[3];
var process = require("process");
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require('util-deprecate')
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {
}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"d5jf4","util-deprecate":"j92NQ","./internal/streams/stream":"60BLS","buffer":"fCgem","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3"}],"j92NQ":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config('throwDeprecation')) throw new Error(msg);
            else if (config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/ var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

},{"safe-buffer":"eW7r9"}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require('buffer');
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"buffer":"fCgem"}],"k019Y":[function(require,module,exports) {
'use strict';
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"d5jf4","./end-of-stream":"aOMy2"}],"aOMy2":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = eos;

},{"../../../errors":"aJlwj"}],"ak0YH":[function(require,module,exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

},{}],"ba8Mr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require('../errors').codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"aJlwj","./_stream_duplex":"kKNA3","inherits":"bRL3M"}],"2xP98":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"ba8Mr","inherits":"bRL3M"}],"fyp4t":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require('../../../errors').codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if (eos === undefined) eos = require('./end-of-stream');
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"aJlwj","./end-of-stream":"aOMy2"}],"7tkYY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// **N3StreamParser** parses a text stream into a quad stream.
var _n3Parser = require("./N3Parser");
var _n3ParserDefault = parcelHelpers.interopDefault(_n3Parser);
var _readableStream = require("readable-stream");
class N3StreamParser extends _readableStream.Transform {
    constructor(options){
        super({
            decodeStrings: true
        });
        this._readableState.objectMode = true;
        // Set up parser with dummy stream to obtain `data` and `end` callbacks
        const parser = new _n3ParserDefault.default(options);
        let onData, onEnd;
        parser.parse({
            on: (event, callback)=>{
                switch(event){
                    case 'data':
                        onData = callback;
                        break;
                    case 'end':
                        onEnd = callback;
                        break;
                }
            }
        }, // Handle quads by pushing them down the pipeline
        (error, quad)=>{
            error && this.emit('error', error) || quad && this.push(quad);
        }, // Emit prefixes through the `prefix` event
        (prefix, uri)=>{
            this.emit('prefix', prefix, uri);
        });
        // Implement Transform methods through parser callbacks
        this._transform = (chunk, encoding, done)=>{
            onData(chunk);
            done();
        };
        this._flush = (done)=>{
            onEnd();
            done();
        };
    }
    // ### Parses a stream of strings
    import(stream) {
        stream.on('data', (chunk)=>{
            this.write(chunk);
        });
        stream.on('end', ()=>{
            this.end();
        });
        stream.on('error', (error)=>{
            this.emit('error', error);
        });
        return this;
    }
}
exports.default = N3StreamParser;

},{"./N3Parser":"3HsNW","readable-stream":"jXNWE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5f80q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// **N3StreamWriter** serializes a quad stream into a text stream.
var _readableStream = require("readable-stream");
var _n3Writer = require("./N3Writer");
var _n3WriterDefault = parcelHelpers.interopDefault(_n3Writer);
class N3StreamWriter extends _readableStream.Transform {
    constructor(options){
        super({
            encoding: 'utf8',
            writableObjectMode: true
        });
        // Set up writer with a dummy stream object
        const writer = this._writer = new _n3WriterDefault.default({
            write: (quad, encoding, callback)=>{
                this.push(quad);
                callback && callback();
            },
            end: (callback)=>{
                this.push(null);
                callback && callback();
            }
        }, options);
        // Implement Transform methods on top of writer
        this._transform = (quad, encoding, done)=>{
            writer.addQuad(quad, done);
        };
        this._flush = (done)=>{
            writer.end(done);
        };
    }
    // ### Serializes a stream of quads
    import(stream) {
        stream.on('data', (quad)=>{
            this.write(quad);
        });
        stream.on('end', ()=>{
            this.end();
        });
        stream.on('error', (error)=>{
            this.emit('error', error);
        });
        stream.on('prefix', (prefix, iri)=>{
            this._writer.addPrefix(prefix, iri);
        });
        return this;
    }
}
exports.default = N3StreamWriter;

},{"readable-stream":"jXNWE","./N3Writer":"9F6q5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dJJED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Empty
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
* An empty node
*/ var Empty = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(Empty1, _Node);
    var _super = _createSuper(Empty1);
    function Empty1() {
        var _this;
        _classCallCheckDefault.default(this, Empty1);
        _this = _super.call(this, '');
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.EmptyTermType);
        return _this;
    }
    _createClassDefault.default(Empty1, [
        {
            key: "toString",
            value: function toString() {
                return '()';
            }
        }
    ]);
    return Empty1;
}(_nodeInternalDefault.default);

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./node-internal":"kZc6I","./types":"hXMiD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i4UAw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Fetcher
);
var _asyncToGenerator = require("@babel/runtime/helpers/asyncToGenerator");
var _asyncToGeneratorDefault = parcelHelpers.interopDefault(_asyncToGenerator);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _regenerator = require("@babel/runtime/regenerator");
var _regeneratorDefault = parcelHelpers.interopDefault(_regenerator);
/* global $SolidTestEnvironment */ /**
 *
 * Project: rdflib.js
 *
 * @file: fetcher.js
 *
 * Description: contains functions for requesting/fetching/retracting
 *  This implements quite a lot of the web architecture.
 * A fetcher is bound to a specific quad store, into which
 * it loads stuff and into which it writes its metadata
 * @@ The metadata could be optionally a separate graph
 *
 * - implements semantics of HTTP headers, Internet Content Types
 * - selects parsers for rdf/xml, n3, rdfa, grddl
 *
 * TO do:
 * - Implement a runtime registry for parsers and serializers
 * -
 */ /**
 * Things to test: callbacks on request, refresh, retract
 *   loading from HTTP, HTTPS, FTP, FILE, others?
 * To do:
 * Firing up a mail client for mid:  (message:) URLs
 */ var _store = require("./store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _n3Parser = require("./n3parser");
var _n3ParserDefault = parcelHelpers.interopDefault(_n3Parser);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
var _parse = require("./parse");
var _parseDefault = parcelHelpers.interopDefault(_parse);
var _rdfaparser = require("./rdfaparser");
var _rdfxmlparser = require("./rdfxmlparser");
var _rdfxmlparserDefault = parcelHelpers.interopDefault(_rdfxmlparser);
var _uri = require("./uri");
var _terms = require("./utils/terms");
var _utilsJs = require("./utils-js");
var _serialize = require("./serialize");
var _serializeDefault = parcelHelpers.interopDefault(_serialize);
var _crossFetch = require("cross-fetch");
var _crossFetchDefault = parcelHelpers.interopDefault(_crossFetch);
var _types = require("./types");
var _termValue = require("./utils/termValue");
var _jsonldparser = require("./jsonldparser");
var _jsonldparserDefault = parcelHelpers.interopDefault(_jsonldparser);
var global = arguments[3];
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
var Parsable = {
    'text/n3': true,
    'text/turtle': true,
    'application/rdf+xml': true,
    'application/xhtml+xml': true,
    'text/html': true,
    'application/ld+json': true
}; // This is a minimal set to allow the use of damaged servers if necessary
var CONTENT_TYPE_BY_EXT = {
    'rdf': _types.RDFXMLContentType,
    'owl': _types.RDFXMLContentType,
    'n3': 'text/n3',
    'ttl': 'text/turtle',
    'nt': 'text/n3',
    'acl': 'text/n3',
    'html': 'text/html',
    'xml': 'text/xml'
}; // Convenience namespaces needed in this module.
// These are deliberately not exported as the user application should
// make its own list and not rely on the prefixes used here,
// and not be tempted to add to them, and them clash with those of another
// application.
var getNS = function getNS(factory) {
    return {
        link: _namespaceDefault.default('http://www.w3.org/2007/ont/link#', factory),
        http: _namespaceDefault.default('http://www.w3.org/2007/ont/http#', factory),
        httph: _namespaceDefault.default('http://www.w3.org/2007/ont/httph#', factory),
        // headers
        rdf: _namespaceDefault.default('http://www.w3.org/1999/02/22-rdf-syntax-ns#', factory),
        rdfs: _namespaceDefault.default('http://www.w3.org/2000/01/rdf-schema#', factory),
        dc: _namespaceDefault.default('http://purl.org/dc/elements/1.1/', factory),
        ldp: _namespaceDefault.default('http://www.w3.org/ns/ldp#', factory)
    };
};
var ns = getNS();
var Handler = /*#__PURE__*/ _createClassDefault.default(// TODO: Document, type
function Handler1(response, dom) {
    _classCallCheckDefault.default(this, Handler1);
    _definePropertyDefault.default(this, "response", void 0);
    _definePropertyDefault.default(this, "dom", void 0);
    this.response = response; // The type assertion operator here might need to be removed.
    this.dom = dom;
});
_definePropertyDefault.default(Handler, "pattern", void 0);
var RDFXMLHandler = /*#__PURE__*/ function(_Handler) {
    _inheritsDefault.default(RDFXMLHandler1, _Handler);
    var _super = _createSuper(RDFXMLHandler1);
    function RDFXMLHandler1() {
        _classCallCheckDefault.default(this, RDFXMLHandler1);
        return _super.apply(this, arguments);
    }
    _createClassDefault.default(RDFXMLHandler1, [
        {
            key: "parse",
            value: function parse(fetcher, /** An XML String */ responseText, /** Requires .original */ options) {
                var kb = fetcher.store;
                if (!this.dom) this.dom = _utilsJs.parseXML(responseText);
                var root = this.dom.documentElement;
                if (root.nodeName === 'parsererror') // Mozilla only See issue/issue110
                // have to fail the request
                return fetcher.failFetch(options, 'Badly formed XML in ' + options.resource.value, 'parse_error');
                var parser = new _rdfxmlparserDefault.default(kb);
                try {
                    parser.parse(this.dom, options.original.value, options.original);
                } catch (err) {
                    return fetcher.failFetch(options, 'Syntax error parsing RDF/XML! ' + err, 'parse_error');
                }
                if (!options.noMeta) kb.add(options.original, ns.rdf('type'), ns.link('RDFDocument'), fetcher.appNode);
                return fetcher.doneFetch(options, this.response);
            }
        }
    ], [
        {
            key: "toString",
            value: function toString() {
                return 'RDFXMLHandler';
            }
        },
        {
            key: "register",
            value: function register(fetcher) {
                fetcher.mediatypes[_types.RDFXMLContentType] = {
                    'q': 0.9
                };
            }
        }
    ]);
    return RDFXMLHandler1;
}(Handler);
RDFXMLHandler.pattern = new RegExp('application/rdf\\+xml');
var XHTMLHandler = /*#__PURE__*/ function(_Handler2) {
    _inheritsDefault.default(XHTMLHandler1, _Handler2);
    var _super2 = _createSuper(XHTMLHandler1);
    function XHTMLHandler1() {
        _classCallCheckDefault.default(this, XHTMLHandler1);
        return _super2.apply(this, arguments);
    }
    _createClassDefault.default(XHTMLHandler1, [
        {
            key: "parse",
            value: function parse(fetcher, responseText, options) {
                var relation, reverse;
                if (!this.dom) this.dom = _utilsJs.parseXML(responseText);
                var kb = fetcher.store; // dc:title
                var title = this.dom.getElementsByTagName('title');
                if (title.length > 0) kb.add(options.resource, ns.dc('title'), kb.rdfFactory.literal(title[0].textContent), options.resource); // log.info("Inferring title of " + xhr.resource)
                 // link rel
                var links = this.dom.getElementsByTagName('link');
                for(var x = links.length - 1; x >= 0; x--){
                    // @@ rev
                    relation = links[x].getAttribute('rel');
                    reverse = false;
                    if (!relation) {
                        relation = links[x].getAttribute('rev');
                        reverse = true;
                    }
                    if (relation) fetcher.linkData(options.original, relation, links[x].getAttribute('href'), options.resource, reverse);
                } // Data Islands
                var scripts = this.dom.getElementsByTagName('script');
                for(var i = 0; i < scripts.length; i++){
                    var contentType = scripts[i].getAttribute('type');
                    if (Parsable[contentType]) {
                        // @ts-ignore incompatibility between Store.add and Formula.add
                        _parseDefault.default(scripts[i].textContent, kb, options.original.value, contentType); // @ts-ignore incompatibility between Store.add and Formula.add
                        _parseDefault.default(scripts[i].textContent, kb, options.original.value, contentType);
                    }
                }
                if (!options.noMeta) kb.add(options.resource, ns.rdf('type'), ns.link('WebPage'), fetcher.appNode);
                if (!options.noRDFa && _rdfaparser.parseRDFaDOM) // enable by default
                try {
                    _rdfaparser.parseRDFaDOM(this.dom, kb, options.original.value);
                } catch (err) {
                    // @ts-ignore
                    var msg = 'Error trying to parse ' + options.resource + ' as RDFa:\n' + err + ':\n' + err.stack;
                    return fetcher.failFetch(options, msg, 'parse_error');
                }
                return fetcher.doneFetch(options, this.response);
            }
        }
    ], [
        {
            key: "toString",
            value: function toString() {
                return 'XHTMLHandler';
            }
        },
        {
            key: "register",
            value: function register(fetcher) {
                fetcher.mediatypes[_types.XHTMLContentType] = {
                };
            }
        }
    ]);
    return XHTMLHandler1;
}(Handler);
XHTMLHandler.pattern = new RegExp('application/xhtml');
var XMLHandler = /*#__PURE__*/ function(_Handler3) {
    _inheritsDefault.default(XMLHandler1, _Handler3);
    var _super3 = _createSuper(XMLHandler1);
    function XMLHandler1() {
        _classCallCheckDefault.default(this, XMLHandler1);
        return _super3.apply(this, arguments);
    }
    _createClassDefault.default(XMLHandler1, [
        {
            key: "parse",
            value: function parse(fetcher, responseText, options) {
                var dom = _utilsJs.parseXML(responseText); // XML Semantics defined by root element namespace
                // figure out the root element
                for(var c = 0; c < dom.childNodes.length; c++){
                    var node = dom.childNodes[c]; // is this node an element?
                    if (XMLHandler1.isElement(node)) {
                        // We've found the first element, it's the root
                        var _ns = node.namespaceURI; // Is it RDF/XML?
                        if (_ns && _ns === _ns['rdf']) {
                            fetcher.addStatus(options.req, 'Has XML root element in the RDF namespace, so assume RDF/XML.');
                            var rdfHandler = new RDFXMLHandler(this.response, dom);
                            return rdfHandler.parse(fetcher, responseText, options);
                        }
                        break;
                    }
                } // Or it could be XHTML?
                // Maybe it has an XHTML DOCTYPE?
                if (dom.doctype) // log.info("We found a DOCTYPE in " + xhr.resource)
                {
                    if (dom.doctype.name === 'html' && dom.doctype.publicId.match(/^-\/\/W3C\/\/DTD XHTML/) && dom.doctype.systemId.match(/http:\/\/www.w3.org\/TR\/xhtml/)) {
                        fetcher.addStatus(options.req, 'Has XHTML DOCTYPE. Switching to XHTML Handler.\n');
                        var xhtmlHandler = new XHTMLHandler(this.response, dom);
                        return xhtmlHandler.parse(fetcher, responseText, options);
                    }
                } // Or what about an XHTML namespace?
                var html = dom.getElementsByTagName('html')[0];
                if (html) {
                    var xmlns = html.getAttribute('xmlns');
                    if (xmlns && xmlns.match(/^http:\/\/www.w3.org\/1999\/xhtml/)) {
                        fetcher.addStatus(options.req, "Has a default namespace for XHTML. Switching to XHTMLHandler.\n");
                        var _xhtmlHandler = new XHTMLHandler(this.response, dom);
                        return _xhtmlHandler.parse(fetcher, responseText, options);
                    }
                } // At this point we should check the namespace document (cache it!) and
                // look for a GRDDL transform
                // @@  Get namespace document <n>, parse it, look for  <n> grddl:namespaceTransform ?y
                // Apply ?y to   dom
                // We give up. What dialect is this?
                return fetcher.failFetch(options, 'Unsupported dialect of XML: not RDF or XHTML namespace, etc.\n' + responseText.slice(0, 80), 901);
            }
        }
    ], [
        {
            key: "toString",
            value: function toString() {
                return 'XMLHandler';
            }
        },
        {
            key: "register",
            value: function register(fetcher) {
                fetcher.mediatypes['text/xml'] = {
                    'q': 0.5
                };
                fetcher.mediatypes['application/xml'] = {
                    'q': 0.5
                };
            }
        },
        {
            key: "isElement",
            value: function isElement(node) {
                return node.nodeType === Node.ELEMENT_NODE;
            }
        }
    ]);
    return XMLHandler1;
}(Handler);
XMLHandler.pattern = new RegExp('(text|application)/(.*)xml');
var HTMLHandler = /*#__PURE__*/ function(_Handler4) {
    _inheritsDefault.default(HTMLHandler1, _Handler4);
    var _super4 = _createSuper(HTMLHandler1);
    function HTMLHandler1() {
        _classCallCheckDefault.default(this, HTMLHandler1);
        return _super4.apply(this, arguments);
    }
    _createClassDefault.default(HTMLHandler1, [
        {
            key: "parse",
            value: function parse(fetcher, responseText, options) {
                var kb = fetcher.store; // We only handle XHTML so we have to figure out if this is XML
                // log.info("Sniffing HTML " + xhr.resource + " for XHTML.")
                if (isXML(responseText)) {
                    fetcher.addStatus(options.req, "Has an XML declaration. We'll assume it's XHTML as the content-type was text/html.\n");
                    var xhtmlHandler = new XHTMLHandler(this.response);
                    return xhtmlHandler.parse(fetcher, responseText, options);
                } // DOCTYPE html
                if (isXHTML(responseText)) {
                    fetcher.addStatus(options.req, 'Has XHTML DOCTYPE. Switching to XHTMLHandler.\n');
                    var _xhtmlHandler2 = new XHTMLHandler(this.response);
                    return _xhtmlHandler2.parse(fetcher, responseText, options);
                } // xmlns
                if (isXMLNS(responseText)) {
                    fetcher.addStatus(options.req, 'Has default namespace for XHTML, so switching to XHTMLHandler.\n');
                    var _xhtmlHandler3 = new XHTMLHandler(this.response);
                    return _xhtmlHandler3.parse(fetcher, responseText, options);
                } // dc:title
                // no need to escape '/' here
                var titleMatch = new RegExp('<title>([\\s\\S]+?)</title>', 'im').exec(responseText);
                if (titleMatch) kb.add(options.resource, ns.dc('title'), kb.rdfFactory.literal(titleMatch[1]), options.resource); // think about xml:lang later
                kb.add(options.resource, ns.rdf('type'), ns.link('WebPage'), fetcher.appNode);
                fetcher.addStatus(options.req, 'non-XML HTML document, not parsed for data.');
                return fetcher.doneFetch(options, this.response);
            }
        }
    ], [
        {
            key: "toString",
            value: function toString() {
                return 'HTMLHandler';
            }
        },
        {
            key: "register",
            value: function register(fetcher) {
                fetcher.mediatypes['text/html'] = {
                    'q': 0.9
                };
            }
        }
    ]);
    return HTMLHandler1;
}(Handler);
HTMLHandler.pattern = new RegExp('text/html');
var JsonLdHandler = /*#__PURE__*/ function(_Handler5) {
    _inheritsDefault.default(JsonLdHandler1, _Handler5);
    var _super5 = _createSuper(JsonLdHandler1);
    function JsonLdHandler1() {
        _classCallCheckDefault.default(this, JsonLdHandler1);
        return _super5.apply(this, arguments);
    }
    _createClassDefault.default(JsonLdHandler1, [
        {
            key: "parse",
            value: function parse(fetcher, responseText, options, response) {
                var kb = fetcher.store;
                return new Promise(function(resolve, reject) {
                    try {
                        _jsonldparserDefault.default(responseText, kb, options.original.value, function() {
                            resolve(fetcher.doneFetch(options, response));
                        });
                    } catch (err) {
                        var msg = 'Error trying to parse ' + options.resource + ' as JSON-LD:\n' + err; // not err.stack -- irrelevant
                        resolve(fetcher.failFetch(options, msg, 'parse_error', response));
                    }
                });
            }
        }
    ], [
        {
            key: "toString",
            value: function toString() {
                return 'JsonLdHandler';
            }
        },
        {
            key: "register",
            value: function register(fetcher) {
                fetcher.mediatypes['application/ld+json'] = {
                    'q': 0.9
                };
            }
        }
    ]);
    return JsonLdHandler1;
}(Handler);
JsonLdHandler.pattern = /application\/ld\+json/;
var TextHandler = /*#__PURE__*/ function(_Handler6) {
    _inheritsDefault.default(TextHandler1, _Handler6);
    var _super6 = _createSuper(TextHandler1);
    function TextHandler1() {
        _classCallCheckDefault.default(this, TextHandler1);
        return _super6.apply(this, arguments);
    }
    _createClassDefault.default(TextHandler1, [
        {
            key: "parse",
            value: function parse(fetcher, responseText, options) {
                // We only speak dialects of XML right now. Is this XML?
                // Look for an XML declaration
                if (isXML(responseText)) {
                    fetcher.addStatus(options.req, 'Warning: ' + options.resource + " has an XML declaration. We'll assume " + "it's XML but its content-type wasn't XML.\n");
                    var xmlHandler = new XMLHandler(this.response);
                    return xmlHandler.parse(fetcher, responseText, options);
                } // Look for an XML declaration
                if (responseText.slice(0, 500).match(/xmlns:/)) {
                    fetcher.addStatus(options.req, "May have an XML namespace. We'll assume it's XML but its content-type wasn't XML.\n");
                    var _xmlHandler = new XMLHandler(this.response);
                    return _xmlHandler.parse(fetcher, responseText, options);
                } // We give up finding semantics - this is not an error, just no data
                fetcher.addStatus(options.req, 'Plain text document, no known RDF semantics.');
                return fetcher.doneFetch(options, this.response);
            }
        }
    ], [
        {
            key: "toString",
            value: function toString() {
                return 'TextHandler';
            }
        },
        {
            key: "register",
            value: function register(fetcher) {
                fetcher.mediatypes['text/plain'] = {
                    'q': 0.5
                };
            }
        }
    ]);
    return TextHandler1;
}(Handler);
TextHandler.pattern = new RegExp('text/plain');
var N3Handler = /*#__PURE__*/ function(_Handler7) {
    _inheritsDefault.default(N3Handler1, _Handler7);
    var _super7 = _createSuper(N3Handler1);
    function N3Handler1() {
        _classCallCheckDefault.default(this, N3Handler1);
        return _super7.apply(this, arguments);
    }
    _createClassDefault.default(N3Handler1, [
        {
            key: "parse",
            value: function parse(fetcher, responseText, options, response) {
                // Parse the text of this N3 file
                var kb = fetcher.store;
                var p = _n3ParserDefault.default(kb, kb, options.original.value, options.original.value, null, null, '', null); //                p.loadBuf(xhr.responseText)
                try {
                    p.loadBuf(responseText);
                } catch (err) {
                    var msg = 'Error trying to parse ' + options.resource + ' as Notation3:\n' + err; // not err.stack -- irrelevant
                    return fetcher.failFetch(options, msg, 'parse_error', response);
                }
                fetcher.addStatus(options.req, 'N3 parsed: ' + p.statementCount + ' triples in ' + p.lines + ' lines.');
                fetcher.store.add(options.original, ns.rdf('type'), ns.link('RDFDocument'), fetcher.appNode);
                return fetcher.doneFetch(options, this.response);
            }
        }
    ], [
        {
            key: "toString",
            value: function toString() {
                return 'N3Handler';
            }
        },
        {
            key: "register",
            value: function register(fetcher) {
                fetcher.mediatypes['text/n3'] = {
                    'q': '1.0'
                }; // as per 2008 spec
                /*
       fetcher.mediatypes['application/x-turtle'] = {
       'q': 1.0
       } // pre 2008
       */ fetcher.mediatypes['text/turtle'] = {
                    'q': 1
                }; // post 2008
            }
        }
    ]);
    return N3Handler1;
}(Handler);
N3Handler.pattern = new RegExp('(application|text)/(x-)?(rdf\\+)?(n3|turtle)');
var defaultHandlers = {
    RDFXMLHandler: RDFXMLHandler,
    XHTMLHandler: XHTMLHandler,
    XMLHandler: XMLHandler,
    HTMLHandler: HTMLHandler,
    TextHandler: TextHandler,
    N3Handler: N3Handler,
    JsonLdHandler: JsonLdHandler
};
function isXHTML(responseText) {
    var docTypeStart = responseText.indexOf('<!DOCTYPE html');
    var docTypeEnd = responseText.indexOf('>');
    if (docTypeStart === -1 || docTypeEnd === -1 || docTypeStart > docTypeEnd) return false;
    return responseText.substr(docTypeStart, docTypeEnd - docTypeStart).indexOf('XHTML') !== -1;
}
function isXML(responseText) {
    var match = responseText.match(/\s*<\?xml\s+version\s*=[^<>]+\?>/);
    return !!match;
}
function isXMLNS(responseText) {
    var match = responseText.match(/[^(<html)]*<html\s+[^<]*xmlns=['"]http:\/\/www.w3.org\/1999\/xhtml["'][^<]*>/);
    return !!match;
}
/** Fetcher
 *
 * The Fetcher object is a helper object for a quadstore
 * which turns it from an offline store to an online store.
 * The fetcher deals with loading data files rom the web,
  * figuring how to parse them.  It will also refresh, remove, the data
  * and put back the data to the web.
 */ var Fetcher = /*#__PURE__*/ function() {
    /** Denoting this session */ /**
   * this.requested[uri] states:
   * undefined     no record of web access or records reset
   * true          has been requested, fetch in progress
   * 'done'        received, Ok
   * 401           Not logged in
   * 403           HTTP status unauthorized
   * 404           Resource does not exist. Can be created etc.
   * 'redirected'  In attempt to counter CORS problems retried.
   * 'parse_error' Parse error
   * 'unsupported_protocol'  URI is not a protocol Fetcher can deal with
   * other strings mean various other errors.
   */ /** List of timeouts associated with a requested URL */ /** Redirected from *key uri* to *value uri* */ /** fetchCallbacks[uri].push(callback) */ /** Keep track of explicit 404s -> we can overwrite etc */ // TODO: Document this
    /** Methods added by calling Util.callbackify in the constructor*/ function Fetcher1(store) {
        var _this = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        _classCallCheckDefault.default(this, Fetcher1);
        _definePropertyDefault.default(this, "store", void 0);
        _definePropertyDefault.default(this, "timeout", void 0);
        _definePropertyDefault.default(this, "_fetch", void 0);
        _definePropertyDefault.default(this, "mediatypes", void 0);
        _definePropertyDefault.default(this, "appNode", void 0);
        _definePropertyDefault.default(this, "requested", void 0);
        _definePropertyDefault.default(this, "timeouts", void 0);
        _definePropertyDefault.default(this, "redirectedTo", void 0);
        _definePropertyDefault.default(this, "fetchQueue", void 0);
        _definePropertyDefault.default(this, "fetchCallbacks", void 0);
        _definePropertyDefault.default(this, "nonexistent", void 0);
        _definePropertyDefault.default(this, "lookedUp", void 0);
        _definePropertyDefault.default(this, "handlers", void 0);
        _definePropertyDefault.default(this, "ns", void 0);
        _definePropertyDefault.default(this, "fireCallbacks", void 0);
        this.store = store || new _storeDefault.default();
        this.ns = getNS(this.store.rdfFactory);
        this.timeout = options.timeout || 30000; // solidFetcher is deprecated
        this._fetch = options.fetch || typeof global !== 'undefined' && (global.solidFetcher || global.solidFetch) || typeof window !== 'undefined' && (window.solidFetcher || window.solidFetch) || _crossFetchDefault.default;
        if (!this._fetch) throw new Error('No _fetch function available for Fetcher');
        this.appNode = this.store.rdfFactory.blankNode();
        this.store.fetcher = this; // Bi-linked
        this.requested = {
        };
        this.timeouts = {
        };
        this.redirectedTo = {
        };
        this.fetchQueue = {
        };
        this.fetchCallbacks = {
        };
        this.nonexistent = {
        };
        this.lookedUp = {
        };
        this.handlers = [];
        this.mediatypes = {
            'image/*': {
                'q': 0.9
            },
            '*/*': {
                'q': 0.1
            } // Must allow access to random content
        }; // Util.callbackify(this, ['request', 'recv', 'headers', 'load', 'fail',
        //   'refresh', 'retract', 'done'])
        // In switching to fetch(), 'recv', 'headers' and 'load' do not make sense
        _utilsJs.callbackify(this, [
            'request',
            'fail',
            'refresh',
            'retract',
            'done'
        ]);
        Object.keys(options.handlers || defaultHandlers).map(function(key) {
            return _this.addHandler(defaultHandlers[key]);
        });
    }
    _createClassDefault.default(Fetcher1, [
        {
            key: "load",
            value: /**
     * Promise-based load function
     *
     * Loads a web resource or resources into the store.
     *
     * A resource may be given as NamedNode object, or as a plain URI.
     * an array of resources will be given, in which they will be fetched in parallel.
     * By default, the HTTP headers are recorded also, in the same store, in a separate graph.
     * This allows code like editable() for example to test things about the resource.
     *
     * @param uri {Array<RDFlibNamedNode>|Array<string>|RDFlibNamedNode|string}
     *
     * @param [options={}] {Object}
     *
     * @param [options.fetch] {Function}
     *
     * @param [options.referringTerm] {RDFlibNamedNode} Referring term, the resource which
     *   referred to this (for tracking bad links)
     *
     * @param [options.contentType] {string} Provided content type (for writes)
     *
     * @param [options.forceContentType] {string} Override the incoming header to
     *   force the data to be treated as this content-type (for reads)
     *
     * @param [options.force] {boolean} Load the data even if loaded before.
     *   Also sets the `Cache-Control:` header to `no-cache`
     *
     * @param [options.baseURI=docuri] {Node|string} Original uri to preserve
     *   through proxying etc (`xhr.original`).
     *
     * @param [options.proxyUsed] {boolean} Whether this request is a retry via
     *   a proxy (generally done from an error handler)
     *
     * @param [options.withCredentials] {boolean} flag for XHR/CORS etc
     *
     * @param [options.clearPreviousData] {boolean} Before we parse new data,
     *   clear old, but only on status 200 responses
     *
     * @param [options.noMeta] {boolean} Prevents the addition of various metadata
     *   triples (about the fetch request) to the store
     *
     * @param [options.noRDFa] {boolean}
     *
     * @returns {Promise<Result>}
     */ function load(uri) {
                var _this2 = this;
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                };
                options = Object.assign({
                }, options); // Take a copy as we add stuff to the options!!
                if (uri instanceof Array) return Promise.all(uri.map(function(x) {
                    return _this2.load(x, Object.assign({
                    }, options));
                }));
                var uriIn = uri;
                var docuri = _termValue.termValue(uriIn);
                docuri = docuri.split('#')[0];
                options = this.initFetchOptions(docuri, options);
                var initialisedOptions = this.initFetchOptions(docuri, options);
                return this.pendingFetchPromise(docuri, initialisedOptions.baseURI, initialisedOptions);
            }
        },
        {
            key: "pendingFetchPromise",
            value: function pendingFetchPromise(uri, originalUri, options) {
                var _this3 = this;
                var pendingPromise; // Check to see if some request is already dealing with this uri
                if (!options.force && this.fetchQueue[originalUri]) pendingPromise = this.fetchQueue[originalUri];
                else {
                    pendingPromise = Promise.race([
                        this.setRequestTimeout(uri, options),
                        this.fetchUri(uri, options)
                    ]);
                    this.fetchQueue[originalUri] = pendingPromise; // Clean up the queued promise after a time, if it's resolved
                    this.cleanupFetchRequest(originalUri, undefined, this.timeout);
                }
                return pendingPromise.then(function(x) {
                    if (uri in _this3.timeouts) {
                        _this3.timeouts[uri].forEach(clearTimeout);
                        delete _this3.timeouts[uri];
                    }
                    return x;
                });
            }
        },
        {
            key: "cleanupFetchRequest",
            value: function cleanupFetchRequest(originalUri, _options, timeout) {
                var _this4 = this;
                if (_options !== undefined) console.warn("_options is deprecated");
                this.timeouts[originalUri] = (this.timeouts[originalUri] || []).concat(setTimeout(function() {
                    if (!_this4.isPending(originalUri)) delete _this4.fetchQueue[originalUri];
                }, timeout));
            }
        },
        {
            key: "initFetchOptions",
            value: function initFetchOptions(uri, options) {
                var kb = this.store;
                var isGet = !options.method || options.method.toUpperCase() === 'GET';
                if (!isGet) options.force = true;
                options.resource = kb.rdfFactory.namedNode(uri); // This might be proxified
                options.baseURI = options.baseURI || uri; // Preserve though proxying etc
                options.original = kb.rdfFactory.namedNode(options.baseURI);
                options.req = kb.bnode();
                options.headers = options.headers || new _crossFetch.Headers();
                if (options.contentType) // @ts-ignore
                options.headers['content-type'] = options.contentType;
                if (options.force) options.cache = 'no-cache';
                var acceptString = this.acceptString(); // @ts-ignore
                options.headers['accept'] = acceptString;
                var requestedURI = Fetcher1.offlineOverride(uri);
                options.requestedURI = requestedURI;
                Fetcher1.setCredentials(requestedURI, options);
                var actualProxyURI = Fetcher1.proxyIfNecessary(requestedURI);
                if (requestedURI !== actualProxyURI) options.proxyUsed = true;
                options.actualProxyURI = actualProxyURI;
                return options;
            }
        },
        {
            key: "fetchUri",
            value: function fetchUri(docuri, options) {
                var _this5 = this;
                if (!docuri) return Promise.reject(new Error('Cannot fetch an empty uri'));
                if (Fetcher1.unsupportedProtocol(docuri)) return this.failFetch(options, 'fetcher: Unsupported protocol', 'unsupported_protocol');
                var state = this.getState(docuri);
                if (!options.force) {
                    if (state === 'fetched') // URI already fetched and added to store
                    return Promise.resolve(this.doneFetch(options, {
                        status: 200,
                        ok: true,
                        statusText: 'Already loaded into quadstore.'
                    }));
                    if (state === 'failed' && this.requested[docuri] === 404) {
                        // Remember nonexistence
                        var _message = 'Previously failed: ' + this.requested[docuri]; // @ts-ignore This is not a valid response object
                        var dummyResponse = {
                            url: docuri,
                            // This does not comply to Fetch spec, it can be a string value in rdflib
                            status: this.requested[docuri],
                            statusText: _message,
                            responseText: _message,
                            headers: new _crossFetch.Headers(),
                            // Headers() ???
                            ok: false,
                            body: null,
                            bodyUsed: false,
                            size: 0,
                            timeout: 0
                        };
                        return this.failFetch(options, _message, this.requested[docuri], dummyResponse);
                    }
                } else // options.force == true
                delete this.nonexistent[docuri];
                this.fireCallbacks('request', [
                    docuri
                ]);
                this.requested[docuri] = true; // mark this uri as 'requested'
                if (!options.noMeta) this.saveRequestMetadata(docuri, options);
                var actualProxyURI = options.actualProxyURI; // Map might get mistakenly added into headers
                // error TS2339: Property 'map' does not exist on type 'Headers'.
                /* let map
      if (options.headers && map in options.headers) {
        delete options.headers.map
      } */ return this._fetch(actualProxyURI, options).then(function(response) {
                    return _this5.handleResponse(response, docuri, options);
                }, function(error) {
                    // @@ handleError?
                    // @ts-ignore Invalid response object
                    var dummyResponse = {
                        url: actualProxyURI,
                        status: 999,
                        // @@ what number/string should fetch failures report?
                        statusText: (error.name || 'network failure') + ': ' + (error.errno || error.code || error.type),
                        responseText: error.message,
                        headers: new _crossFetch.Headers(),
                        // Headers() ???
                        ok: false,
                        body: null,
                        bodyUsed: false,
                        size: 0,
                        timeout: 0
                    };
                    console.log('Fetcher: <' + actualProxyURI + '> Non-HTTP fetch exception: ' + error);
                    return _this5.handleError(dummyResponse, docuri, options); // possible credentials retry
                // return this.failFetch(options, 'fetch failed: ' + error, 999, dummyResponse) // Fake status code: fetch exception
                // handleError expects a response so we fake some important bits.
                /*
        this.handleError(, docuri, options)
        */ });
            }
        },
        {
            key: "nowOrWhenFetched",
            value: function nowOrWhenFetched(uriIn, p2, userCallback) {
                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
                };
                var uri = _termValue.termValue(uriIn);
                if (typeof p2 === 'function') // nowOrWhenFetched (uri, userCallback)
                userCallback = p2;
                else if (typeof p2 === 'undefined') ;
                else if (_terms.isNamedNode(p2)) // referringTerm = p2
                options.referringTerm = p2;
                else // nowOrWhenFetched (uri, options, userCallback)
                options = p2;
                this.load(uri, options).then(function(fetchResponse) {
                    if (userCallback) {
                        if (fetchResponse) {
                            if (fetchResponse.ok) userCallback(true, 'OK', fetchResponse);
                            else {
                                // console.log('@@@ fetcher.js Should not take this path !!!!!!!!!!!!')
                                var oops = 'HTTP error: Status ' + fetchResponse.status + ' (' + fetchResponse.statusText + ')';
                                if (fetchResponse.responseText) oops += ' ' + fetchResponse.responseText; // not in 404, dns error, nock failure
                                console.log(oops + ' fetching ' + uri);
                                userCallback(false, oops, fetchResponse);
                            }
                        } else {
                            var _oops = '@@ nowOrWhenFetched:  no response object!';
                            console.log(_oops);
                            userCallback(false, _oops);
                        }
                    }
                }, function(err) {
                    var message = err.message || err.statusText;
                    message = 'Failed to load  <' + uri + '> ' + message;
                    console.log(message);
                    if (err.response && err.response.status) message += ' status: ' + err.response.status;
                    userCallback(false, message, err.response);
                });
            }
        },
        {
            key: "addStatus",
            value: function addStatus(req, statusMessage) {
                // <Debug about="parsePerformance">
                var now = new Date();
                statusMessage = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '.' + now.getMilliseconds() + '] ' + statusMessage; // </Debug>
                var kb = this.store;
                var statusNode = kb.the(req, this.ns.link('status'));
                if (_terms.isCollection(statusNode)) statusNode.append(kb.rdfFactory.literal(statusMessage));
                else _logDefault.default.warn('web.js: No list to add to: ' + statusNode + ',' + statusMessage);
            }
        },
        {
            key: "failFetch",
            value: function failFetch(options, errorMessage, statusCode, response) {
                this.addStatus(options.req, errorMessage);
                if (!options.noMeta) this.store.add(options.original, this.ns.link('error'), this.store.rdfFactory.literal(errorMessage));
                var meth = (options.method || 'GET').toUpperCase();
                var isGet = meth === 'GET' || meth === 'HEAD';
                if (isGet) {
                    options.resource.equals(options.original);
                    this.requested[_uri.docpart(options.original.value)] = statusCode;
                    this.fireCallbacks('fail', [
                        options.original.value,
                        errorMessage
                    ]);
                }
                var err = new Error('Fetcher: ' + errorMessage); // err.ok = false // Is taken as a response, will work too @@ phase out?
                err.status = statusCode;
                err.statusText = errorMessage;
                err.response = response;
                return Promise.reject(err);
            } // in the why part of the quad distinguish between HTML and HTTP header
        },
        {
            key: "linkData",
            value: function linkData(originalUri, rel, uri, why, reverse) {
                if (!uri) return;
                var kb = this.store;
                var predicate; // See http://www.w3.org/TR/powder-dr/#httplink for describedby 2008-12-10
                var obj = kb.rdfFactory.namedNode(_uri.join(uri, originalUri.value));
                if (rel === 'alternate' || rel === 'seeAlso' || rel === 'meta' || rel === 'describedby') {
                    if (obj.value === originalUri.value) return;
                    predicate = this.ns.rdfs('seeAlso');
                } else if (rel === 'type') predicate = kb.rdfFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');
                else // See https://www.iana.org/assignments/link-relations/link-relations.xml
                // Alas not yet in RDF yet for each predicate
                // encode space in e.g. rel="shortcut icon"
                predicate = kb.rdfFactory.namedNode(_uri.join(encodeURIComponent(rel), 'http://www.iana.org/assignments/link-relations/'));
                if (reverse) kb.add(obj, predicate, originalUri, why);
                else kb.add(originalUri, predicate, obj, why);
            }
        },
        {
            key: "parseLinkHeader",
            value: function parseLinkHeader(linkHeader, originalUri, reqNode) {
                if (!linkHeader) return;
                 // const linkexp = /<[^>]*>\s*(\s*;\s*[^()<>@,;:"/[\]?={} \t]+=(([^()<>@,;:"/[]?={} \t]+)|("[^"]*")))*(,|$)/g
                // const paramexp = /[^()<>@,;:"/[]?={} \t]+=(([^()<>@,;:"/[]?={} \t]+)|("[^"]*"))/g
                // From https://www.dcode.fr/regular-expression-simplificator:
                // const linkexp = /<[^>]*>\s*(\s*;\s*[^()<>@,;:"/[\]?={} t]+=["]))*[,$]/g
                // const paramexp = /[^\\<>@,;:"\/\[\]?={} \t]+=["])/g
                // Original:
                var linkexp = /<[^>]*>\s*(\s*;\s*[^()<>@,;:"/[\]?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g;
                var paramexp = /[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g;
                var matches = linkHeader.match(linkexp);
                if (matches == null) return;
                for(var i = 0; i < matches.length; i++){
                    var split = matches[i].split('>');
                    var href = split[0].substring(1);
                    var ps = split[1];
                    var s = ps.match(paramexp);
                    if (s == null) return;
                    for(var j = 0; j < s.length; j++){
                        var p = s[j];
                        var paramsplit = p.split('='); // var name = paramsplit[0]
                        var rel = paramsplit[1].replace(/["']/g, ''); // '"
                        this.linkData(originalUri, rel, href, reqNode);
                    }
                }
            }
        },
        {
            key: "doneFetch",
            value: function doneFetch(options, response) {
                this.addStatus(options.req, 'Done.');
                this.requested[options.original.value] = 'done';
                this.fireCallbacks('done', [
                    options.original.value
                ]);
                response.req = options.req; // Set the request meta blank node
                return response;
            }
        },
        {
            key: "nowKnownAs",
            value: function nowKnownAs(was, now) {
                if (this.lookedUp[was.value]) // Transfer userCallback
                {
                    if (!this.lookedUp[now.value]) this.lookUpThing(now, was);
                } else if (this.lookedUp[now.value]) {
                    if (!this.lookedUp[was.value]) this.lookUpThing(was, now);
                }
            }
        },
        {
            key: "putBack",
            value: function putBack(uri) {
                var _this6 = this;
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                };
                var uriSting = _termValue.termValue(uri);
                var doc = new _namedNodeDefault.default(uriSting).doc(); // strip off #
                options.contentType = options["content-type"] || options["Content-Type"] || options.contentType || _types.TurtleContentType;
                if (options.contentType === 'application/ld+json') return new Promise(function(resolve, reject) {
                    _serializeDefault.default(doc, _this6.store, doc.uri, options.contentType, function(err, jsonString) {
                        if (err) reject(err);
                        else {
                            // @ts-ignore
                            options.data = jsonString;
                            _this6.webOperation('PUT', uri, options).then(function(res) {
                                return resolve(res);
                            }).catch(function(error) {
                                return reject(error);
                            });
                        }
                    });
                });
                options.data = _serializeDefault.default(doc, this.store, doc.value, options.contentType);
                return this.webOperation('PUT', uriSting, options);
            }
        },
        {
            key: "webCopy",
            value: function webCopy(here, there, contentType) {
                var _this7 = this;
                return this.webOperation('GET', here).then(function(result) {
                    return _this7.webOperation('PUT', there, {
                        data: result.responseText,
                        contentType: contentType
                    });
                });
            }
        },
        {
            key: "delete",
            value: function _delete(uri, options) {
                var _this8 = this;
                return this.webOperation('DELETE', uri, options).then(function(response) {
                    _this8.requested[uri] = 404;
                    _this8.nonexistent[uri] = true;
                    _this8.unload(_this8.store.rdfFactory.namedNode(uri));
                    return response;
                });
            }
        },
        {
            key: "createIfNotExists",
            value: function() {
                var _createIfNotExists = _asyncToGeneratorDefault.default(/*#__PURE__*/ _regeneratorDefault.default.mark(function _callee(doc) {
                    var contentType, data, fetcher, response, _args = arguments;
                    return _regeneratorDefault.default.wrap(function _callee$(_context) {
                        while(true)switch(_context.prev = _context.next){
                            case 0:
                                contentType = _args.length > 1 && _args[1] !== undefined ? _args[1] : _types.TurtleContentType;
                                data = _args.length > 2 && _args[2] !== undefined ? _args[2] : '';
                                fetcher = this;
                                _context.prev = 3;
                                _context.next = 6;
                                return fetcher.load(doc);
                            case 6:
                                response = _context.sent;
                                _context.next = 29;
                                break;
                            case 9:
                                _context.prev = 9;
                                _context.t0 = _context["catch"](3);
                                if (!(_context.t0.response.status === 404)) {
                                    _context.next = 27;
                                    break;
                                }
                                console.log('createIfNotExists: doc does NOT exist, will create... ' + doc);
                                _context.prev = 13;
                                _context.next = 16;
                                return fetcher.webOperation('PUT', doc.value, {
                                    data: data,
                                    contentType: contentType
                                });
                            case 16:
                                response = _context.sent;
                                _context.next = 23;
                                break;
                            case 19:
                                _context.prev = 19;
                                _context.t1 = _context["catch"](13);
                                console.log('createIfNotExists doc FAILED: ' + doc + ': ' + _context.t1);
                                throw _context.t1;
                            case 23:
                                delete fetcher.requested[doc.value]; // delete cached 404 error
                                // console.log('createIfNotExists doc created ok ' + doc)
                                return _context.abrupt("return", response);
                            case 27:
                                console.log('createIfNotExists doc load error NOT 404:  ' + doc + ': ' + _context.t0);
                                throw _context.t0;
                            case 29:
                                return _context.abrupt("return", response);
                            case 30:
                            case "end":
                                return _context.stop();
                        }
                    }, _callee, this, [
                        [
                            3,
                            9
                        ],
                        [
                            13,
                            19
                        ]
                    ]);
                }));
                function createIfNotExists(_x) {
                    return _createIfNotExists.apply(this, arguments);
                }
                return createIfNotExists;
            }()
        },
        {
            key: "createContainer",
            value: function createContainer(parentURI, folderName, data) {
                var headers = {
                    // Force the right mime type for containers
                    'content-type': _types.TurtleContentType,
                    'link': this.ns.ldp('BasicContainer') + '; rel="type"'
                };
                if (folderName) headers['slug'] = folderName;
                 // @ts-ignore These headers lack some of the required operators.
                var options = {
                    headers: headers
                };
                if (data) options.body = data;
                return this.webOperation('POST', parentURI, options);
            }
        },
        {
            key: "invalidateCache",
            value: function invalidateCache(iri) {
                var uri = _termValue.termValue(iri);
                var fetcher = this; // @ts-ignore
                if (fetcher.fetchQueue && fetcher.fetchQueue[uri]) {
                    console.log('Internal error - fetchQueue exists ' + uri);
                    var promise = fetcher.fetchQueue[uri];
                    if (promise['PromiseStatus'] === 'resolved') delete fetcher.fetchQueue[uri];
                    else {
                        // pending
                        delete fetcher.fetchQueue[uri];
                        console.log('*** Fetcher: pending fetchQueue deleted ' + uri);
                    }
                }
                if (fetcher.requested[uri] && fetcher.requested[uri] !== 'done' && fetcher.requested[uri] !== 'failed' && fetcher.requested[uri] !== 404) {
                    var msg = "Rdflib: fetcher: Destructive operation on <".concat(fetcher.requested[uri], "> file being fetched! ") + uri;
                    console.error(msg); // alert(msg)
                } else {
                    delete fetcher.requested[uri]; // invalidate read cache -- @@ messes up logic if request in progress ??
                    delete fetcher.nonexistent[uri];
                }
            }
        },
        {
            key: "webOperation",
            value: function webOperation(method, uriIn) {
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
                };
                var uri = _termValue.termValue(uriIn);
                options.method = method;
                options.body = options.data || options.body;
                options.force = true;
                var fetcher = this;
                if (options.body && !options.contentType) throw new Error('Web operation sending data must have a defined contentType.');
                if (options.contentType) {
                    options.headers = options.headers || {
                    };
                    options.headers['content-type'] = options.contentType;
                }
                Fetcher1.setCredentials(uri, options);
                return new Promise(function(resolve, reject) {
                    fetcher._fetch(uri, options).then(function(response) {
                        if (response.ok) {
                            if (method === 'PUT' || method === 'PATCH' || method === 'POST' || method === 'DELETE') fetcher.invalidateCache(uri);
                             // response.body with Chrome can't be relied on
                            if (response.text) // Was: response.body https://github.com/linkeddata/rdflib.js/issues/506
                            response.text().then(function(data) {
                                response.responseText = data;
                                resolve(response);
                            });
                            else resolve(response);
                        } else {
                            var msg = 'Web error: ' + response.status;
                            if (response.statusText) msg += ' (' + response.statusText + ')';
                            msg += ' on ' + method + ' of <' + uri + '>';
                            if (response.responseText) msg += ': ' + response.responseText;
                            var e2 = new Error(msg);
                            e2.response = response;
                            reject(e2);
                        }
                    }, function(err) {
                        var msg = 'Fetch error for ' + method + ' of <' + uri + '>:' + err;
                        reject(new Error(msg));
                    });
                });
            }
        },
        {
            key: "lookUpThing",
            value: function lookUpThing(term, rterm) {
                var _this9 = this;
                var uris = this.store.uris(term); // Get all URIs
                uris = uris.map(function(u) {
                    return _uri.docpart(u);
                }); // Drop hash fragments
                uris.forEach(function(u) {
                    _this9.lookedUp[u] = true;
                }); // @ts-ignore Recursive type
                return this.load(uris, {
                    referringTerm: rterm
                });
            }
        },
        {
            key: "getHeader",
            value: function getHeader(doc, header) {
                var kb = this.store; // look for the URI (AS A STRING NOT A NODE) for a stored request
                var docuri = doc.value;
                var requests = kb.each(undefined, this.ns.link('requestedURI'), kb.rdfFactory.literal(docuri));
                for(var r = 0; r < requests.length; r++){
                    var request = requests[r];
                    if (request !== undefined) {
                        var _response = kb.any(request, this.ns.link('response'));
                        if (_response !== undefined && kb.anyValue(_response, this.ns.http('status')) && kb.anyValue(_response, this.ns.http('status')).startsWith('2')) {
                            // Only look at success returns - not 401 error messagess etc
                            var results = kb.each(_response, this.ns.httph(header.toLowerCase()));
                            if (results.length) return results.map(function(v) {
                                return v.value;
                            });
                            return [];
                        }
                    }
                }
                return undefined;
            }
        },
        {
            key: "saveRequestMetadata",
            value: function saveRequestMetadata(docuri, options) {
                var req = options.req;
                var kb = this.store;
                var rterm = options.referringTerm;
                this.addStatus(options.req, 'Accept: ' + options.headers['accept']);
                if (_terms.isNamedNode(rterm)) kb.add(kb.rdfFactory.namedNode(docuri), this.ns.link('requestedBy'), rterm, this.appNode);
                if (options.original && options.original.value !== docuri) kb.add(req, this.ns.link('orginalURI'), kb.rdfFactory.literal(options.original.value), this.appNode);
                var now = new Date();
                var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] ';
                kb.add(req, this.ns.rdfs('label'), kb.rdfFactory.literal(timeNow + ' Request for ' + docuri), this.appNode); // We store the docuri as a string, not as a node,
                // see https://github.com/linkeddata/rdflib.js/pull/427#pullrequestreview-447910061
                kb.add(req, this.ns.link('requestedURI'), kb.rdfFactory.literal(docuri), this.appNode);
                kb.add(req, this.ns.link('status'), kb.collection(), this.appNode);
            }
        },
        {
            key: "saveResponseMetadata",
            value: function saveResponseMetadata(response, options) {
                var _this10 = this;
                var kb = this.store;
                var responseNode = kb.bnode();
                kb.add(options.req, this.ns.link('response'), responseNode, responseNode);
                kb.add(responseNode, this.ns.http('status'), kb.rdfFactory.literal(response.status), responseNode);
                kb.add(responseNode, this.ns.http('statusText'), kb.rdfFactory.literal(response.statusText), responseNode); // Save the response headers
                response.headers.forEach(function(value, header) {
                    kb.add(responseNode, _this10.ns.httph(header), _this10.store.rdfFactory.literal(value), responseNode);
                    if (header === 'content-type') kb.add(options.resource, _this10.ns.rdf('type'), kb.rdfFactory.namedNode(_utilsJs.mediaTypeClass(value).value), responseNode);
                });
                return responseNode;
            }
        },
        {
            key: "objectRefresh",
            value: function objectRefresh(term) {
                var uris = this.store.uris(term); // Get all URIs
                if (typeof uris !== 'undefined') for(var i = 0; i < uris.length; i++)this.refresh(this.store.rdfFactory.namedNode(_uri.docpart(uris[i]))); // what about rterm?
            }
        },
        {
            key: "refresh",
            value: function refresh(term, userCallback) {
                // sources_refresh
                this.fireCallbacks('refresh', arguments);
                this.nowOrWhenFetched(term, {
                    force: true,
                    clearPreviousData: true
                }, userCallback);
            }
        },
        {
            key: "refreshIfExpired",
            value: function refreshIfExpired(term, userCallback) {
                var exp = this.getHeader(term, 'Expires');
                if (!exp || new Date(exp[0]).getTime() <= new Date().getTime()) this.refresh(term, userCallback);
                else userCallback(true, 'Not expired', {
                });
            }
        },
        {
            key: "retract",
            value: function retract(term) {
                // sources_retract
                this.store.removeMany(undefined, undefined, undefined, term);
                if (term.value) delete this.requested[_uri.docpart(term.value)];
                this.fireCallbacks('retract', arguments);
            }
        },
        {
            key: "getState",
            value: function getState(docuri) {
                if (typeof this.requested[docuri] === 'undefined') return 'unrequested';
                else if (this.requested[docuri] === true) return 'requested';
                else if (this.requested[docuri] === 'done') return 'fetched';
                else if (this.requested[docuri] === 'redirected') return this.getState(this.redirectedTo[docuri]);
                else // An non-200 HTTP error status
                return 'failed';
            }
        },
        {
            key: "isPending",
            value: function isPending(docuri) {
                // sources_pending
                // doing anyStatementMatching is wasting time
                // if it's not pending: false -> flailed
                //   'done' -> done 'redirected' -> redirected
                return this.requested[docuri] === true;
            }
        },
        {
            key: "unload",
            value: function unload(term) {
                this.store.removeDocument(term);
                delete this.requested[term.value]; // So it can be load2ed again
            }
        },
        {
            key: "addHandler",
            value: function addHandler(handler) {
                this.handlers.push(handler);
                handler.register(this);
            }
        },
        {
            key: "retryNoCredentials",
            value: function retryNoCredentials(docuri, options) {
                console.log('Fetcher: CORS: RETRYING with NO CREDENTIALS for ' + options.resource);
                options.retriedWithNoCredentials = true; // protect against being called twice
                delete this.requested[docuri]; // forget the original request happened
                delete this.fetchQueue[docuri]; // Note: XHR property was withCredentials, but fetch property is just credentials
                var newOptions = Object.assign({
                }, options, {
                    credentials: 'omit'
                });
                this.addStatus(options.req, 'Abort: Will retry with credentials SUPPRESSED to see if that helps');
                return this.load(docuri, newOptions);
            }
        },
        {
            key: "isCrossSite",
            value: function isCrossSite(uri) {
                // Mashup situation, not node etc
                if (typeof document === 'undefined' || !document.location) return false;
                var hostpart = _uri.hostpart;
                var here = '' + document.location;
                return (hostpart(here) && hostpart(uri) && hostpart(here)) !== hostpart(uri);
            }
        },
        {
            key: "handleError",
            value: function handleError(response, docuri, options) {
                if (this.isCrossSite(docuri)) {
                    // Make sure we haven't retried already
                    if (options.credentials && options.credentials === 'include' && !options.retriedWithNoCredentials) return this.retryNoCredentials(docuri, options);
                     // Now attempt retry via proxy
                    var proxyUri = Fetcher1.crossSiteProxy(docuri);
                    if (proxyUri && !options.proxyUsed) {
                        console.log('web: Direct failed so trying proxy ' + proxyUri);
                        return this.redirectToProxy(proxyUri, options);
                    }
                }
                var message;
                if (response instanceof Error) message = 'Fetch error: ' + response.message;
                else {
                    message = response.statusText;
                    if (response.responseText) message += " ".concat(response.responseText);
                } // This is either not a CORS error, or retries have been made
                return this.failFetch(options, message, response.status || 998, response);
            } // deduce some things from the HTTP transaction
        },
        {
            key: "addType",
            value: function addType(rdfType, req, kb, locURI) {
                // add type to all redirected resources too
                var prev = req;
                if (locURI) {
                    var reqURI = kb.any(prev, this.ns.link('requestedURI'));
                    if (reqURI && reqURI.value !== locURI) kb.add(kb.rdfFactory.namedNode(locURI), this.ns.rdf('type'), rdfType, this.appNode);
                }
                for(;;){
                    var doc = kb.any(prev, this.ns.link('requestedURI'));
                    if (doc && doc.value) kb.add(kb.rdfFactory.namedNode(doc.value), this.ns.rdf('type'), rdfType, this.appNode);
                     // convert Literal
                    prev = kb.any(undefined, kb.rdfFactory.namedNode('http://www.w3.org/2007/ont/link#redirectedRequest'), prev);
                    if (!prev) break;
                    var response = kb.any(prev, kb.rdfFactory.namedNode('http://www.w3.org/2007/ont/link#response'));
                    if (!response) break;
                    var redirection = kb.any(response, kb.rdfFactory.namedNode('http://www.w3.org/2007/ont/http#status'));
                    if (!redirection) break;
                     // @ts-ignore always true?
                    if (redirection !== '301' && redirection !== '302') break;
                }
            }
        },
        {
            key: "handleResponse",
            value: function handleResponse(response, docuri, options) {
                var _this11 = this;
                var kb = this.store;
                var headers = response.headers;
                var reqNode = options.req;
                var responseNode = this.saveResponseMetadata(response, options);
                var contentType = this.normalizedContentType(options, headers) || '';
                var contentLocation = headers.get('content-location'); // this.fireCallbacks('recv', xhr.args)
                // this.fireCallbacks('headers', [{uri: docuri, headers: xhr.headers}])
                // Check for masked errors (CORS, etc)
                if (response.status === 0) {
                    console.log('Masked error - status 0 for ' + docuri);
                    return this.handleError(response, docuri, options);
                }
                if (response.status >= 400) {
                    if (response.status === 404) {
                        this.nonexistent[options.original.value] = true;
                        this.nonexistent[docuri] = true;
                    }
                    return this.saveErrorResponse(response, responseNode).then(function() {
                        var errorMessage = options.resource + ' ' + response.statusText;
                        return _this11.failFetch(options, errorMessage, response.status, response);
                    });
                }
                var diffLocation = null;
                var absContentLocation = null;
                if (contentLocation) {
                    absContentLocation = _uri.join(contentLocation, docuri);
                    if (absContentLocation !== docuri) diffLocation = absContentLocation;
                }
                if (response.status === 200) {
                    this.addType(this.ns.link('Document'), reqNode, kb, docuri);
                    if (diffLocation) this.addType(this.ns.link('Document'), reqNode, kb, diffLocation);
                     // Before we parse new data clear old but only on 200
                    if (options.clearPreviousData) kb.removeDocument(options.resource);
                    var isImage = contentType.includes('image/') || contentType.includes('application/pdf');
                    if (contentType && isImage) {
                        this.addType(kb.rdfFactory.namedNode('http://purl.org/dc/terms/Image'), reqNode, kb, docuri);
                        if (diffLocation) this.addType(kb.rdfFactory.namedNode('http://purl.org/dc/terms/Image'), reqNode, kb, diffLocation);
                    }
                } // If we have already got the thing at this location, abort
                if (contentLocation) {
                    if (!options.force && diffLocation && this.requested[absContentLocation] === 'done') // we have already fetched this
                    // should we smush too?
                    // log.info("HTTP headers indicate we have already" + " retrieved " +
                    // xhr.resource + " as " + absContentLocation + ". Aborting.")
                    return this.doneFetch(options, response);
                    this.requested[absContentLocation] = true;
                }
                this.parseLinkHeader(headers.get('link'), options.original, reqNode);
                var handler = this.handlerForContentType(contentType, response);
                if (!handler) {
                    //  Not a problem, we just don't extract data
                    this.addStatus(reqNode, 'Fetch over. No data handled.');
                    return this.doneFetch(options, response);
                }
                return response.text() // @ts-ignore Types seem right
                .then(function(responseText) {
                    response.responseText = responseText;
                    return handler.parse(_this11, responseText, options, response);
                });
            }
        },
        {
            key: "saveErrorResponse",
            value: function saveErrorResponse(response, responseNode) {
                var _this12 = this;
                var kb = this.store;
                return response.text().then(function(content) {
                    if (content.length > 10) kb.add(responseNode, _this12.ns.http('content'), kb.rdfFactory.literal(content), responseNode);
                });
            }
        },
        {
            key: "handlerForContentType",
            value: function handlerForContentType(contentType, response) {
                if (!contentType) return null;
                var Handler2 = this.handlers.find(function(handler) {
                    return contentType.match(handler.pattern);
                }); // @ts-ignore in practice all Handlers have constructors.
                return Handler2 ? new Handler2(response) : null;
            }
        },
        {
            key: "guessContentType",
            value: function guessContentType(uri) {
                return CONTENT_TYPE_BY_EXT[uri.split('.').pop()];
            }
        },
        {
            key: "normalizedContentType",
            value: function normalizedContentType(options, headers) {
                if (options.forceContentType) return options.forceContentType;
                var contentType = headers.get('content-type');
                if (!contentType || contentType.includes('application/octet-stream')) {
                    var guess = this.guessContentType(options.resource.value);
                    if (guess) return guess;
                }
                var protocol = _uri.protocol(options.resource.value);
                if (!contentType && [
                    'file',
                    'chrome'
                ].includes(protocol)) return 'text/xml';
                return contentType;
            }
        },
        {
            key: "redirectToProxy",
            value: function redirectToProxy(newURI, options) {
                var _this13 = this;
                this.addStatus(options.req, 'BLOCKED -> Cross-site Proxy to <' + newURI + '>');
                options.proxyUsed = true;
                var kb = this.store;
                var oldReq = options.req; // request metadata blank node
                if (!options.noMeta) {
                    kb.add(oldReq, this.ns.link('redirectedTo'), kb.rdfFactory.namedNode(newURI), oldReq);
                    this.addStatus(oldReq, 'redirected to new request'); // why
                }
                this.requested[options.resource.value] = 'redirected';
                this.redirectedTo[options.resource.value] = newURI;
                var newOptions = Object.assign({
                }, options);
                newOptions.baseURI = options.resource.value;
                return this.fetchUri(newURI, newOptions).then(function(response) {
                    if (!newOptions.noMeta) kb.add(oldReq, _this13.ns.link('redirectedRequest'), newOptions.req, _this13.appNode);
                    return response;
                });
            }
        },
        {
            key: "setRequestTimeout",
            value: function setRequestTimeout(uri, options) {
                var _this14 = this;
                return new Promise(function(resolve) {
                    _this14.timeouts[uri] = (_this14.timeouts[uri] || []).concat(setTimeout(function() {
                        if (_this14.isPending(uri) && !options.retriedWithNoCredentials && !options.proxyUsed) resolve(_this14.failFetch(options, "Request to ".concat(uri, " timed out"), 'timeout'));
                    }, _this14.timeout));
                });
            }
        },
        {
            key: "addFetchCallback",
            value: function addFetchCallback(uri, callback) {
                if (!this.fetchCallbacks[uri]) this.fetchCallbacks[uri] = [
                    callback
                ];
                else this.fetchCallbacks[uri].push(callback);
            }
        },
        {
            key: "acceptString",
            value: function acceptString() {
                var acceptstring = '';
                for(var mediaType in this.mediatypes){
                    if (acceptstring !== '') acceptstring += ', ';
                    acceptstring += mediaType;
                    for(var property in this.mediatypes[mediaType])acceptstring += ';' + property + '=' + this.mediatypes[mediaType][property];
                }
                return acceptstring;
            } // var updatesVia = new $rdf.UpdatesVia(this) // Subscribe to headers
        }
    ], [
        {
            key: "crossSiteProxy",
            value: function crossSiteProxy(uri) {
                if (Fetcher1.crossSiteProxyTemplate) return Fetcher1.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri));
                else return undefined;
            }
        },
        {
            key: "offlineOverride",
            value: function offlineOverride(uri) {
                // Map the URI to a localhost proxy if we are running on localhost
                // This is used for working offline, e.g. on planes.
                // Is the script itself is running in localhost, then access all
                //   data in a localhost mirror.
                // Do not remove without checking with TimBL
                var requestedURI = uri;
                var UI;
                if (typeof window !== 'undefined' && window.panes && (UI = window.panes.UI) && UI.preferences && UI.preferences.get('offlineModeUsingLocalhost')) {
                    if (requestedURI.slice(0, 7) === 'http://' && requestedURI.slice(7, 17) !== 'localhost/') {
                        requestedURI = 'http://localhost/' + requestedURI.slice(7);
                        _logDefault.default.warn('Localhost kludge for offline use: actually getting <' + requestedURI + '>');
                    }
                }
                return requestedURI;
            }
        },
        {
            key: "proxyIfNecessary",
            value: function proxyIfNecessary(uri) {
                var UI;
                if (typeof window !== 'undefined' && window.panes && (UI = window.panes.UI) && UI.isExtension) return uri;
                 // Extension does not need proxy
                if (typeof $SolidTestEnvironment !== 'undefined' && $SolidTestEnvironment.localSiteMap) {
                    // nested dictionaries of URI parts from origin down
                    var hostpath = uri.split('/').slice(2); // the bit after the //
                    var lookup1 = function lookup(parts, index) {
                        var z = index[parts.shift()];
                        if (!z) return null;
                        if (typeof z === 'string') return z + parts.join('/');
                        if (!parts) return null;
                        return lookup(parts, z);
                    };
                    var y = lookup1(hostpath, $SolidTestEnvironment.localSiteMap);
                    if (y) return y;
                } // browser does 2014 on as https browser script not trusted
                // If the web app origin is https: then the mixed content rules
                // prevent it loading insecure http: stuff so we need proxy.
                if (Fetcher1.crossSiteProxyTemplate && typeof document !== 'undefined' && document.location && ('' + document.location).slice(0, 6) === 'https:' && uri.slice(0, 5) === 'http:') // requested data is not
                return Fetcher1.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri));
                return uri;
            }
        },
        {
            key: "unsupportedProtocol",
            value: function unsupportedProtocol(uri) {
                var pcol = _uri.protocol(uri);
                return pcol === 'tel' || pcol === 'mailto' || pcol === 'urn';
            }
        },
        {
            key: "setCredentials",
            value: function setCredentials(requestedURI) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                };
                // 2014 CORS problem:
                // XMLHttpRequest cannot load http://www.w3.org/People/Berners-Lee/card.
                // A wildcard '*' cannot be used in the 'Access-Control-Allow-Origin'
                //   header when the credentials flag is true.
                // @ Many ontology files under http: and need CORS wildcard ->
                //   can't have credentials
                if (options.credentials === undefined) {
                    // Caller using new fetch convention
                    if (options.withCredentials !== undefined) // XHR style is what Fetcher specified before
                    options.credentials = options.withCredentials ? 'include' : 'omit';
                    else options.credentials = 'include'; // default is to be logged on
                }
            }
        }
    ]);
    return Fetcher1;
}();
_definePropertyDefault.default(Fetcher, "HANDLERS", void 0);
_definePropertyDefault.default(Fetcher, "CONTENT_TYPE_BY_EXT", void 0);
_definePropertyDefault.default(Fetcher, "crossSiteProxyTemplate", void 0);
Fetcher.HANDLERS = defaultHandlers;
Fetcher.CONTENT_TYPE_BY_EXT = CONTENT_TYPE_BY_EXT;

},{"@babel/runtime/helpers/asyncToGenerator":"jxKg8","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/defineProperty":"4x6r7","@babel/runtime/regenerator":"5nQUq","./store":"8JtW2","./log":"44B5t","./n3parser":"f4bGR","./named-node":"imvOa","./namespace":"iFtHC","./parse":"aLUnk","./rdfaparser":"4L3yv","./rdfxmlparser":"5j1sr","./uri":"cwuSF","./utils/terms":"cHcdt","./utils-js":"2DMBx","./serialize":"aht3D","cross-fetch":"j4ah4","./types":"hXMiD","./utils/termValue":"cjlpq","./jsonldparser":"ad9Kd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jxKg8":[function(require,module,exports) {
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"5nQUq":[function(require,module,exports) {
// TODO(Babel 8): Remove this file.
var runtime = require("../helpers/regeneratorRuntime")();
module.exports = runtime;
// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    if (typeof globalThis === "object") globalThis.regeneratorRuntime = runtime;
    else Function("r", "regeneratorRuntime = r")(runtime);
}

},{"../helpers/regeneratorRuntime":"cIfWd"}],"cIfWd":[function(require,module,exports) {
var _typeof = require("./typeof.js")["default"];
function _regeneratorRuntime() {
    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    var exports = {
    }, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {
    }, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }), obj[key];
    }
    try {
        define({
        }, "");
    } catch (err1) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn1, outerFn, self1, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context1 = new Context(tryLocsList || []);
        return generator._invoke = (function(innerFn, self, context) {
            var state = "suspendedStart";
            return function(method, arg) {
                if ("executing" === state) throw new Error("Generator is already running");
                if ("completed" === state) {
                    if ("throw" === method) throw arg;
                    return doneResult();
                }
                for(context.method = method, context.arg = arg;;){
                    var delegate = context.delegate;
                    if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);
                        if (delegateResult) {
                            if (delegateResult === ContinueSentinel) continue;
                            return delegateResult;
                        }
                    }
                    if ("next" === context.method) context.sent = context._sent = context.arg;
                    else if ("throw" === context.method) {
                        if ("suspendedStart" === state) throw state = "completed", context.arg;
                        context.dispatchException(context.arg);
                    } else "return" === context.method && context.abrupt("return", context.arg);
                    state = "executing";
                    var record = tryCatch(innerFn, self, context);
                    if ("normal" === record.type) {
                        if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                        return {
                            value: record.arg,
                            done: context.done
                        };
                    }
                    "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
                }
            };
        })(innerFn1, self1, context1), generator;
    }
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {
    };
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var IteratorPrototype = {
    };
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
                var result = record.arg, value1 = result.value;
                return value1 && "object" == _typeof(value1) && hasOwn.call(value1, "__await") ? PromiseImpl.resolve(value1.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                }) : PromiseImpl.resolve(value1).then(function(unwrapped) {
                    result.value = unwrapped, resolve(result);
                }, function(error) {
                    return invoke("throw", error, resolve, reject);
                });
            }
            reject(record.arg);
        }
        var previousPromise;
        this._invoke = function(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
    }
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (undefined === method) {
            if (context.delegate = null, "throw" === context.method) {
                if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
                context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {
        };
        record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next) return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next1 = function next() {
                    for(; ++i < iterable.length;){
                        if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                    }
                    return next.value = undefined, next.done = !0, next;
                };
                return next1.next = next1;
            }
        }
        return {
            next: doneResult
        };
    }
    function doneResult() {
        return {
            value: undefined,
            done: !0
        };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function(arg) {
        return {
            __await: arg
        };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
    }), define(Gp, "toString", function() {
        return "[object Generator]";
    }), exports.keys = function(object) {
        var keys = [];
        for(var key1 in object)keys.push(key1);
        return keys.reverse(), function next() {
            for(; keys.length;){
                var key = keys.pop();
                if (key in object) return next.value = key, next.done = !1, next;
            }
            return next.done = !0, next;
        };
    }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for(var name in this)"t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
        },
        stop: function stop() {
            this.done = !0;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type) throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i], record = entry.completion;
                if ("root" === entry.tryLoc) return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                    } else {
                        if (!hasFinally) throw new Error("try statement without catch or finally");
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    }
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {
            };
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if ("throw" === record.type) throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
        },
        "catch": function _catch(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if ("throw" === record.type) {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
    }, exports;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./typeof.js":"jgQjt"}],"8JtW2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultGraphURI", ()=>_canonicalDataFactory.defaultGraphURI
) // var link_ns = 'http://www.w3.org/2007/ont/link#'
;
parcelHelpers.export(exports, "default", ()=>IndexedFormula
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
/*  Identity management and indexing for RDF
 *
 * This file provides  IndexedFormula a formula (set of triples) which
 * indexed by predicate, subject and object.
 *
 * It "smushes"  (merges into a single node) things which are identical
 * according to owl:sameAs or an owl:InverseFunctionalProperty
 * or an owl:FunctionalProperty
 *
 *
 *  2005-10 Written Tim Berners-Lee
 *  2007    Changed so as not to munge statements from documents when smushing
 *  2019    Converted to typescript
 *
 *
*/ /** @module store */ var _classOrder = require("./class-order");
var _classOrderDefault = parcelHelpers.interopDefault(_classOrder);
var _canonicalDataFactory = require("./factories/canonical-data-factory");
var _formula = require("./formula");
var _formulaDefault = parcelHelpers.interopDefault(_formula);
var _utils = require("./utils");
var _utilsJs = require("./utils-js");
var _terms = require("./utils/terms");
var _node = require("./node");
var _nodeDefault = parcelHelpers.interopDefault(_node);
var _variable = require("./variable");
var _variableDefault = parcelHelpers.interopDefault(_variable);
var _query = require("./query");
var _types = require("./types");
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _index = require("./index");
var _serialize = require("./serialize");
var _serializeDefault = parcelHelpers.interopDefault(_serialize);
var _blankNode = require("./blank-node");
var _blankNodeDefault = parcelHelpers.interopDefault(_blankNode);
var _defaultGraph = require("./default-graph");
var _defaultGraphDefault = parcelHelpers.interopDefault(_defaultGraph);
var _literal = require("./literal");
var _literalDefault = parcelHelpers.interopDefault(_literal);
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {
        };
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _definePropertyDefault.default(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
var owlNamespaceURI = 'http://www.w3.org/2002/07/owl#';
// Handle Functional Property
function handleFP(formula, subj, pred, obj) {
    var o1 = formula.any(subj, pred, undefined);
    if (!o1) return false; // First time with this value
     // log.warn("Equating "+o1.uri+" and "+obj.uri + " because FP "+pred.uri);  //@@
    formula.equate(o1, obj);
    return true;
} // handleFP
// Handle Inverse Functional Property
function handleIFP(formula, subj, pred, obj) {
    var s1 = formula.any(undefined, pred, obj);
    if (!s1) return false; // First time with this value
     // log.warn("Equating "+s1.uri+" and "+subj.uri + " because IFP "+pred.uri);  //@@
    formula.equate(s1, subj);
    return true;
} // handleIFP
function handleRDFType(formula, subj, pred, obj, why) {
    //@ts-ignore this method does not seem to exist in this library
    if (formula.typeCallback) formula.typeCallback(formula, obj, why);
    var x = formula.classActions[formula.id(obj)];
    var done = false;
    if (x) for(var i = 0; i < x.length; i++)done = done || x[i](formula, subj, pred, obj, why);
    return done; // statement given is not needed if true
}
/**
 * Indexed Formula aka Store
 */ var IndexedFormula = /*#__PURE__*/ function(_Formula) {
    _inheritsDefault.default(IndexedFormula1, _Formula);
    var _super = _createSuper(IndexedFormula1);
    // IN future - allow pass array of statements to constructor
    /**
   * An UpdateManager initialised to this store
   */ /**
   * Dictionary of namespace prefixes
   */ /** Map of iri predicates to functions to call when adding { s type X } */ /** Map of iri predicates to functions to call when getting statement with {s X o} */ /** Redirect to lexically smaller equivalent symbol */ /** Reverse mapping to redirection: aliases for this */ /** Redirections we got from HTTP */ /** Array of statements with this X as subject */ /** Array of statements with this X as predicate */ /** Array of statements with this X as object */ /** Array of statements with X as provenance */ /** Function to remove quads from the store arrays with */ /** Callbacks which are triggered after a statement has been added to the store */ /**
   * Creates a new formula
   * @param features - What sort of automatic processing to do? Array of string
   * @param features.sameAs - Smush together A and B nodes whenever { A sameAs B }
   * @param opts
   * @param [opts.rdfFactory] - The data factory that should be used by the store
   * @param [opts.rdfArrayRemove] - Function which removes statements from the store
   * @param [opts.dataCallback] - Callback when a statement is added to the store, will not trigger when adding duplicates
   */ function IndexedFormula1(features) {
        var _this;
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        _classCallCheckDefault.default(this, IndexedFormula1);
        _this = _super.call(this, undefined, undefined, undefined, undefined, opts);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "updater", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "namespaces", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "classActions", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "propertyActions", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "redirections", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "aliases", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "HTTPRedirects", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "subjectIndex", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "predicateIndex", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "objectIndex", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "whyIndex", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "index", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "features", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "_universalVariables", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "_existentialVariables", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "rdfArrayRemove", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "dataCallbacks", void 0);
        _this.propertyActions = {
        };
        _this.classActions = {
        };
        _this.redirections = [];
        _this.aliases = [];
        _this.HTTPRedirects = [];
        _this.subjectIndex = [];
        _this.predicateIndex = [];
        _this.objectIndex = [];
        _this.whyIndex = [];
        _this.index = [
            _this.subjectIndex,
            _this.predicateIndex,
            _this.objectIndex,
            _this.whyIndex
        ];
        _this.namespaces = {
        }; // Dictionary of namespace prefixes
        _this.features = features || [];
        _this.rdfArrayRemove = opts.rdfArrayRemove || _utilsJs.RDFArrayRemove;
        if (opts.dataCallback) _this.dataCallbacks = [
            opts.dataCallback
        ];
        _this.initPropertyActions(_this.features);
        return _this;
    }
    /**
   * Gets the URI of the default graph
   */ _createClassDefault.default(IndexedFormula1, [
        {
            key: "substitute",
            value: /**
     * Gets this graph with the bindings substituted
     * @param bindings The bindings
     */ function substitute(bindings) {
                var statementsCopy = this.statements.map(function(ea) {
                    return ea.substitute(bindings);
                });
                var y = new IndexedFormula1();
                y.add(statementsCopy);
                return y;
            }
        },
        {
            key: "addDataCallback",
            value: function addDataCallback(cb) {
                if (!this.dataCallbacks) this.dataCallbacks = [];
                this.dataCallbacks.push(cb);
            }
        },
        {
            key: "applyPatch",
            value: function applyPatch(patch, target, patchCallback) {
                var targetKB = this;
                var ds;
                var binding1 = null;
                function doPatch(onDonePatch) {
                    if (patch['delete']) {
                        ds = patch['delete']; // console.log(bindingDebug(binding))
                        // console.log('ds before substitute: ' + ds)
                        if (binding1) ds = ds.substitute(binding1); // console.log('applyPatch: delete: ' + ds)
                        ds = ds.statements;
                        var bad = [];
                        var ds2 = ds.map(function(st) {
                            // Find the actual statements in the store
                            var sts = targetKB.statementsMatching(st.subject, st.predicate, st.object, target);
                            if (sts.length === 0) {
                                // log.info("NOT FOUND deletable " + st)
                                bad.push(st);
                                return null;
                            } else // log.info("Found deletable " + st)
                            return sts[0];
                        });
                        if (bad.length) // console.log('Could not find to delete ' + bad.length + 'statements')
                        // console.log('despite ' + targetKB.statementsMatching(bad[0].subject, bad[0].predicate)[0])
                        return patchCallback('Could not find to delete: ' + bad.join('\n or '));
                        ds2.map(function(st) {
                            targetKB.remove(st);
                        });
                    }
                    if (patch['insert']) {
                        // log.info("doPatch insert "+patch['insert'])
                        ds = patch['insert'];
                        if (binding1) ds = ds.substitute(binding1);
                        ds = ds.statements;
                        ds.map(function(st) {
                            st.graph = target;
                            targetKB.add(st.subject, st.predicate, st.object, st.graph);
                        });
                    }
                    onDonePatch();
                }
                if (patch.where) {
                    // log.info("Processing WHERE: " + patch.where + '\n')
                    var query = new _query.Query('patch');
                    query.pat = patch.where;
                    query.pat.statements.map(function(st) {
                        st.graph = _index.namedNode(target.value);
                    }); //@ts-ignore TODO: add sync property to Query when converting Query to typescript
                    query.sync = true;
                    var bindingsFound = [];
                    targetKB.query(query, function onBinding(binding) {
                        bindingsFound.push(binding); // console.log('   got a binding: ' + bindingDebug(binding))
                    }, targetKB.fetcher, function onDone() {
                        if (bindingsFound.length === 0) return patchCallback('No match found to be patched:' + patch.where);
                        if (bindingsFound.length > 1) return patchCallback('Patch ambiguous. No patch done.');
                        binding1 = bindingsFound[0];
                        doPatch(patchCallback);
                    });
                } else doPatch(patchCallback);
            }
        },
        {
            key: "declareExistential",
            value: function declareExistential(x) {
                if (!this._existentialVariables) this._existentialVariables = [];
                this._existentialVariables.push(x);
                return x;
            }
        },
        {
            key: "initPropertyActions",
            value: function initPropertyActions(features) {
                // If the predicate is #type, use handleRDFType to create a typeCallback on the object
                this.propertyActions[this.rdfFactory.id(this.rdfFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'))] = [
                    handleRDFType
                ]; // Assumption: these terms are not redirected @@fixme
                if (_utils.ArrayIndexOf(features, 'sameAs') >= 0) this.propertyActions[this.rdfFactory.id(this.rdfFactory.namedNode("".concat(owlNamespaceURI, "sameAs")))] = [
                    function(formula, subj, pred, obj, why) {
                        // log.warn("Equating "+subj.uri+" sameAs "+obj.uri);  //@@
                        formula.equate(subj, obj);
                        return true; // true if statement given is NOT needed in the store
                    }
                ]; // sameAs -> equate & don't add to index
                if (_utils.ArrayIndexOf(features, 'InverseFunctionalProperty') >= 0) this.classActions[this.rdfFactory.id(this.rdfFactory.namedNode("".concat(owlNamespaceURI, "InverseFunctionalProperty")))] = [
                    function(formula, subj, pred, obj, addFn) {
                        // yes subj not pred!
                        return formula.newPropertyAction(subj, handleIFP);
                    }
                ]; // IFP -> handleIFP, do add to index
                if (_utils.ArrayIndexOf(features, 'FunctionalProperty') >= 0) this.classActions[this.rdfFactory.id(this.rdfFactory.namedNode("".concat(owlNamespaceURI, "FunctionalProperty")))] = [
                    function(formula, subj, proj, obj, addFn) {
                        return formula.newPropertyAction(subj, handleFP);
                    }
                ]; // FP => handleFP, do add to index
            }
        },
        {
            key: "addStatement",
            value: function addStatement(st) {
                this.add(st.subject, st.predicate, st.object, st.graph);
                return this.statements.length;
            }
        },
        {
            key: "add",
            value: function add(subj, pred, obj, why) {
                var i;
                if (arguments.length === 1) {
                    if (subj instanceof Array) for(i = 0; i < subj.length; i++)this.add(subj[i]);
                    else if (_terms.isQuad(subj)) this.add(subj.subject, subj.predicate, subj.object, subj.graph);
                    else if (_terms.isStore(subj)) this.add(subj.statements);
                    return this;
                }
                var actions;
                var st;
                if (!why) // system generated
                why = this.fetcher ? this.fetcher.appNode : this.rdfFactory.defaultGraph();
                if (typeof subj == 'string') subj = this.rdfFactory.namedNode(subj);
                pred = _nodeDefault.default.fromValue(pred);
                var objNode = _nodeDefault.default.fromValue(obj);
                why = _nodeDefault.default.fromValue(why);
                if (!_terms.isSubject(subj)) throw new Error('Subject is not a subject type');
                if (!_terms.isPredicate(pred)) throw new Error("Predicate ".concat(pred, " is not a predicate type"));
                if (!_terms.isRDFlibObject(objNode)) throw new Error("Object ".concat(objNode, " is not an object type"));
                if (!_terms.isGraph(why)) throw new Error("Why is not a graph type");
                 //@ts-ignore This is not used internally
                if (this.predicateCallback) //@ts-ignore This is not used internally
                this.predicateCallback(this, pred, why);
                 // Action return true if the statement does not need to be added
                var predHash = this.id(this.canon(pred));
                actions = this.propertyActions[predHash]; // Predicate hash
                var done = false;
                if (actions) // alert('type: '+typeof actions +' @@ actions='+actions)
                for(i = 0; i < actions.length; i++)done = done || actions[i](this, subj, pred, objNode, why);
                if (this.holds(subj, pred, objNode, why)) // Takes time but saves duplicates
                // console.log('rdflib: Ignoring dup! {' + subj + ' ' + pred + ' ' + obj + ' ' + why + '}')
                return null; // @@better to return self in all cases?
                 // If we are tracking provenance, every thing should be loaded into the store
                // if (done) return this.rdfFactory.quad(subj, pred, obj, why)
                // Don't put it in the store
                // still return this statement for owl:sameAs input
                var hash = [
                    this.id(this.canon(subj)),
                    predHash,
                    this.id(this.canon(objNode)),
                    this.id(this.canon(why))
                ]; // @ts-ignore this will fail if you pass a collection and the factory does not allow Collections
                st = this.rdfFactory.quad(subj, pred, objNode, why);
                for(i = 0; i < 4; i++){
                    var ix = this.index[i];
                    var h = hash[i];
                    if (!ix[h]) ix[h] = [];
                    ix[h].push(st); // Set of things with this as subject, etc
                } // log.debug("ADDING    {"+subj+" "+pred+" "+objNode+"} "+why)
                this.statements.push(st);
                if (this.dataCallbacks) {
                    var _iterator = _createForOfIteratorHelper(this.dataCallbacks), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var callback = _step.value;
                            callback(st);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                }
                return st;
            }
        },
        {
            key: "canon",
            value: function canon(term) {
                if (!term) // @@ TODO Should improve this to return proper value - doing this to keep it backward compatible
                return term;
                var y = this.redirections[this.id(term)];
                if (y) return y;
                switch(term.termType){
                    case _types.BlankNodeTermType:
                        return new _blankNodeDefault.default(term.value);
                    case _types.CollectionTermType:
                        return term;
                    // non-RDF/JS type, should just need to cast
                    case _types.DefaultGraphTermType:
                        return new _defaultGraphDefault.default();
                    case _types.EmptyTermType:
                        // non-RDF/JS type, should just need to cast
                        return term;
                    case _types.GraphTermType:
                        // non-RDF/JS type, should just need to cast
                        return term;
                    case _types.LiteralTermType:
                        return new _literalDefault.default(term.value, term.language, term.datatype);
                    case _types.NamedNodeTermType:
                        return new _namedNodeDefault.default(term.value);
                    case _types.VariableTermType:
                        return new _variableDefault.default(term.value);
                    default:
                        throw new Error("Term Type not recognized for canonization: ".concat(term.termType));
                }
            }
        },
        {
            key: "check",
            value: function check() {
                this.checkStatementList(this.statements);
                for(var p = 0; p < 4; p++){
                    var ix = this.index[p];
                    for(var key in ix)if (ix.hasOwnProperty(key)) // @ts-ignore should this pass an array or a single statement? checkStateMentsList expects an array.
                    this.checkStatementList(ix[key], p);
                }
            }
        },
        {
            key: "checkStatementList",
            value: function checkStatementList(sts, from) {
                if (from === undefined) from = 0;
                var names = [
                    'subject',
                    'predicate',
                    'object',
                    'why'
                ];
                var origin = ' found in ' + names[from] + ' index.';
                var st;
                for(var j = 0; j < sts.length; j++){
                    st = sts[j];
                    var term = [
                        st.subject,
                        st.predicate,
                        st.object,
                        st.graph
                    ];
                    var arrayContains = function arrayContains(a, x) {
                        for(var i = 0; i < a.length; i++){
                            if (a[i].subject.equals(x.subject) && a[i].predicate.equals(x.predicate) && a[i].object.equals(x.object) && a[i].why.equals(x.graph)) return true;
                        }
                    };
                    for(var p = 0; p < 4; p++){
                        var c = this.canon(term[p]);
                        var h = this.id(c);
                        if (!this.index[p][h]) ;
                        else arrayContains(this.index[p][h], st);
                    }
                    if (!arrayContains(this.statements, st)) throw new Error('Statement list does not statement ' + st + '@' + st.graph + origin);
                }
            }
        },
        {
            key: "close",
            value: function close() {
                return this;
            }
        },
        {
            key: "compareTerms",
            value: function compareTerms(u1, u2) {
                // Keep compatibility with downstream classOrder changes
                if (Object.prototype.hasOwnProperty.call(u1, "compareTerm")) return u1.compareTerm(u2);
                if (_classOrderDefault.default[u1.termType] < _classOrderDefault.default[u2.termType]) return -1;
                if (_classOrderDefault.default[u1.termType] > _classOrderDefault.default[u2.termType]) return 1;
                if (u1.value < u2.value) return -1;
                if (u1.value > u2.value) return 1;
                return 0;
            }
        },
        {
            key: "copyTo",
            value: function copyTo(template, target, flags) {
                if (!flags) flags = [];
                var statList = this.statementsMatching(template);
                if (_utils.ArrayIndexOf(flags, 'two-direction') !== -1) statList.concat(this.statementsMatching(undefined, undefined, template));
                for(var i = 0; i < statList.length; i++){
                    var st = statList[i];
                    switch(st.object.termType){
                        case 'NamedNode':
                            this.add(target, st.predicate, st.object);
                            break;
                        case 'Literal':
                        case 'BlankNode':
                        case 'Collection':
                            // @ts-ignore Possible bug: copy is not available on Collections
                            this.add(target, st.predicate, st.object.copy(this));
                    }
                    if (_utils.ArrayIndexOf(flags, 'delete') !== -1) this.remove(st);
                }
            }
        },
        {
            key: "equate",
            value: function equate(u1in, u2in) {
                // log.warn("Equating "+u1+" and "+u2); // @@
                // @@JAMBO Must canonicalize the uris to prevent errors from a=b=c
                // 03-21-2010
                var u1 = this.canon(u1in);
                var u2 = this.canon(u2in);
                var d = this.compareTerms(u1, u2);
                if (!d) return true; // No information in {a = a}
                 // var big
                // var small
                if (d < 0) // u1 less than u2
                return this.replaceWith(u2, u1);
                else return this.replaceWith(u1, u2);
            }
        },
        {
            key: "formula",
            value: function formula(features) {
                return new IndexedFormula1(features);
            }
        },
        {
            key: "length",
            get: function get() {
                return this.statements.length;
            }
        },
        {
            key: "match",
            value: function match(subject, predicate, object, graph) {
                return this.statementsMatching(_nodeDefault.default.fromValue(subject), _nodeDefault.default.fromValue(predicate), _nodeDefault.default.fromValue(object), _nodeDefault.default.fromValue(graph));
            }
        },
        {
            key: "mentionsURI",
            value: function mentionsURI(uri) {
                var hash = '<' + uri + '>';
                return !!this.subjectIndex[hash] || !!this.objectIndex[hash] || !!this.predicateIndex[hash];
            }
        },
        {
            key: "newExistential",
            value: function newExistential(uri) {
                if (!uri) return this.bnode();
                var x = this.sym(uri); // @ts-ignore x should be blanknode, but is namedNode.
                return this.declareExistential(x);
            }
        },
        {
            key: "newPropertyAction",
            value: function newPropertyAction(pred, action) {
                // log.debug("newPropertyAction:  "+pred)
                var hash = this.id(pred);
                if (!this.propertyActions[hash]) this.propertyActions[hash] = [];
                this.propertyActions[hash].push(action); // Now apply the function to to statements already in the store
                var toBeFixed = this.statementsMatching(undefined, pred, undefined);
                var done = false;
                for(var i = 0; i < toBeFixed.length; i++)// NOT optimized - sort toBeFixed etc
                done = done || action(this, toBeFixed[i].subject, pred, toBeFixed[i].object);
                return done;
            }
        },
        {
            key: "newUniversal",
            value: function newUniversal(uri) {
                var x = this.sym(uri);
                if (!this._universalVariables) this._universalVariables = [];
                this._universalVariables.push(x);
                return x;
            } // convenience function used by N3 parser
        },
        {
            key: "variable",
            value: function variable(name) {
                return new _variableDefault.default(name);
            }
        },
        {
            key: "nextSymbol",
            value: function nextSymbol(doc) {
                for(var i = 0;; i++){
                    var uri = doc.value + '#n' + i;
                    if (!this.mentionsURI(uri)) return this.sym(uri);
                }
            }
        },
        {
            key: "query",
            value: function query(myQuery, callback, fetcher, onDone) {
                return _query.indexedFormulaQuery.call(this, myQuery, callback, fetcher, onDone);
            }
        },
        {
            key: "querySync",
            value: function querySync(myQuery) {
                var results = [];
                function saveBinginds(bindings) {
                    results.push(bindings);
                }
                function onDone() {
                    done = true;
                }
                var done = false; // @ts-ignore TODO: Add .sync to Query
                myQuery.sync = true;
                _query.indexedFormulaQuery.call(this, myQuery, saveBinginds, null, onDone);
                if (!done) throw new Error('Sync query should have called done function');
                return results;
            }
        },
        {
            key: "remove",
            value: function remove(st) {
                if (st instanceof Array) {
                    for(var i = 0; i < st.length; i++)this.remove(st[i]);
                    return this;
                }
                if (_terms.isStore(st)) return this.remove(st.statements);
                var sts = this.statementsMatching(st.subject, st.predicate, st.object, st.graph);
                if (!sts.length) throw new Error('Statement to be removed is not on store: ' + st);
                this.removeStatement(sts[0]);
                return this;
            }
        },
        {
            key: "removeDocument",
            value: function removeDocument(doc) {
                var sts = this.statementsMatching(undefined, undefined, undefined, doc).slice(); // Take a copy as this is the actual index
                for(var i = 0; i < sts.length; i++)this.removeStatement(sts[i]);
                return this;
            }
        },
        {
            key: "removeMany",
            value: function removeMany(subj, pred, obj, why, limit) {
                // log.debug("entering removeMany w/ subj,pred,obj,why,limit = " + subj +", "+ pred+", " + obj+", " + why+", " + limit)
                var sts = this.statementsMatching(subj, pred, obj, why, false); // This is a subtle bug that occurred in updateCenter.js too.
                // The fact is, this.statementsMatching returns this.whyIndex instead of a copy of it
                // but for perfromance consideration, it's better to just do that
                // so make a copy here.
                var statements = [];
                for(var i = 0; i < sts.length; i++)statements.push(sts[i]);
                if (limit) statements = statements.slice(0, limit);
                for(i = 0; i < statements.length; i++)this.remove(statements[i]);
            }
        },
        {
            key: "removeMatches",
            value: function removeMatches(subject, predicate, object, graph) {
                this.removeStatements(this.statementsMatching(subject, predicate, object, graph));
                return this;
            }
        },
        {
            key: "removeStatement",
            value: function removeStatement(st) {
                // log.debug("entering remove w/ st=" + st)
                var term = [
                    st.subject,
                    st.predicate,
                    st.object,
                    st.graph
                ];
                for(var p = 0; p < 4; p++){
                    var c = this.canon(term[p]);
                    var h = this.id(c);
                    if (!this.index[p][h]) ;
                    else this.rdfArrayRemove(this.index[p][h], st);
                }
                this.rdfArrayRemove(this.statements, st);
                return this;
            }
        },
        {
            key: "removeStatements",
            value: function removeStatements(sts) {
                for(var i = 0; i < sts.length; i++)this.remove(sts[i]);
                return this;
            }
        },
        {
            key: "replaceWith",
            value: function replaceWith(big, small) {
                // log.debug("Replacing "+big+" with "+small) // this.id(@@
                var oldhash = this.id(big);
                var newhash = this.id(small);
                var moveIndex = function moveIndex(ix) {
                    var oldlist = ix[oldhash];
                    if (!oldlist) return; // none to move
                    var newlist = ix[newhash];
                    if (!newlist) ix[newhash] = oldlist;
                    else ix[newhash] = oldlist.concat(newlist);
                    delete ix[oldhash];
                }; // the canonical one carries all the indexes
                for(var i = 0; i < 4; i++)moveIndex(this.index[i]);
                this.redirections[oldhash] = small;
                if (big.value) {
                    // @@JAMBO: must update redirections,aliases from sub-items, too.
                    if (!this.aliases[newhash]) this.aliases[newhash] = [];
                    this.aliases[newhash].push(big); // Back link
                    if (this.aliases[oldhash]) for(i = 0; i < this.aliases[oldhash].length; i++){
                        this.redirections[this.id(this.aliases[oldhash][i])] = small;
                        this.aliases[newhash].push(this.aliases[oldhash][i]);
                    }
                    this.add(small, this.sym('http://www.w3.org/2007/ont/link#uri'), big); // If two things are equal, and one is requested, we should request the other.
                    if (this.fetcher) this.fetcher.nowKnownAs(big, small);
                }
                moveIndex(this.classActions);
                moveIndex(this.propertyActions); // log.debug("Equate done. "+big+" to be known as "+small)
                return true; // true means the statement does not need to be put in
            }
        },
        {
            key: "allAliases",
            value: function allAliases(x) {
                var a = this.aliases[this.id(this.canon(x))] || [];
                a.push(this.canon(x));
                return a;
            }
        },
        {
            key: "sameThings",
            value: function sameThings(x, y) {
                if (x.equals(y)) return true;
                var x1 = this.canon(x); //    alert('x1='+x1)
                if (!x1) return false;
                var y1 = this.canon(y); //    alert('y1='+y1); //@@
                if (!y1) return false;
                return x1.value === y1.value;
            }
        },
        {
            key: "setPrefixForURI",
            value: function setPrefixForURI(prefix, nsuri) {
                // TODO: This is a hack for our own issues, which ought to be fixed
                // post-release
                // See http://dig.csail.mit.edu/cgi-bin/roundup.cgi/$rdf/issue227
                if (prefix === 'tab' && this.namespaces['tab']) return;
                 // There are files around with long badly generated prefixes like this
                if (prefix.slice(0, 2) === 'ns' || prefix.slice(0, 7) === 'default') return;
                 // remove any prefix that currently targets nsuri
                for(var existingPrefix in this.namespaces)if (this.namespaces[existingPrefix] == nsuri) delete this.namespaces[existingPrefix];
                this.namespaces[prefix] = nsuri;
            }
        },
        {
            key: "statementsMatching",
            value: function statementsMatching(subj, pred, obj, why, justOne) {
                // log.debug("Matching {"+subj+" "+pred+" "+obj+"}")
                var pat = [
                    subj,
                    pred,
                    obj,
                    why
                ];
                var pattern = [];
                var hash = [];
                var wild = []; // wildcards
                var given = []; // Not wild
                var p;
                var list;
                for(p = 0; p < 4; p++){
                    pattern[p] = this.canon(_nodeDefault.default.fromValue(pat[p]));
                    if (!pattern[p]) wild.push(p);
                    else {
                        given.push(p);
                        hash[p] = this.id(pattern[p]);
                    }
                }
                if (given.length === 0) return this.statements;
                if (given.length === 1) {
                    // Easy too, we have an index for that
                    p = given[0];
                    list = this.index[p][hash[p]];
                    if (list && justOne) {
                        if (list.length > 1) list = list.slice(0, 1);
                    }
                    list = list || [];
                    return list;
                } // Now given.length is 2, 3 or 4.
                // We hope that the scale-free nature of the data will mean we tend to get
                // a short index in there somewhere!
                var best = 10000000000; // really bad
                var iBest;
                var i;
                for(i = 0; i < given.length; i++){
                    p = given[i]; // Which part we are dealing with
                    list = this.index[p][hash[p]];
                    if (!list) return []; // No occurrences
                    if (list.length < best) {
                        best = list.length;
                        iBest = i; // (not p!)
                    }
                } // Ok, we have picked the shortest index but now we have to filter it
                var pBest = given[iBest];
                var possibles = this.index[pBest][hash[pBest]];
                var check = given.slice(0, iBest).concat(given.slice(iBest + 1)); // remove iBest
                var results = [];
                var parts = [
                    'subject',
                    'predicate',
                    'object',
                    'why'
                ];
                for(var j = 0; j < possibles.length; j++){
                    var st = possibles[j];
                    for(i = 0; i < check.length; i++){
                        // for each position to be checked
                        p = check[i];
                        if (!this.canon(st[parts[p]]).equals(pattern[p])) {
                            st = null;
                            break;
                        }
                    }
                    if (st != null) {
                        results.push(st);
                        if (justOne) break;
                    }
                }
                return results;
            }
        },
        {
            key: "uris",
            value: function uris(term) {
                var cterm = this.canon(term);
                var terms = this.aliases[this.id(cterm)];
                if (!cterm.value) return [];
                var res = [
                    cterm.value
                ];
                if (terms) for(var i = 0; i < terms.length; i++)res.push(terms[i].uri);
                return res;
            }
        },
        {
            key: "serialize",
            value: function serialize(base, contentType, provenance, options) {
                var _options;
                // override Formula.serialize to force the serializer namespace prefixes
                // to those of this IndexedFormula
                // if namespaces are explicitly passed in options, let them override the existing namespaces in this formula
                var namespaces = (_options = options) !== null && _options !== void 0 && _options.namespaces ? _objectSpread(_objectSpread({
                }, this.namespaces), options.namespaces) : _objectSpread({
                }, this.namespaces);
                options = _objectSpread(_objectSpread({
                }, options || {
                }), {
                }, {
                    namespaces: namespaces
                });
                return _serializeDefault.default(provenance, this, base, contentType, undefined, options);
            }
        }
    ], [
        {
            key: "defaultGraphURI",
            get: function get() {
                return _canonicalDataFactory.defaultGraphURI;
            }
        }
    ]);
    return IndexedFormula1;
}(_formulaDefault.default);
_definePropertyDefault.default(IndexedFormula, "handleRDFType", void 0);
IndexedFormula.handleRDFType = handleRDFType;

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./class-order":"5Vmqo","./factories/canonical-data-factory":"ijj5A","./formula":"8etYk","./utils":"2V7vH","./utils-js":"2DMBx","./utils/terms":"cHcdt","./node":"fLCeO","./variable":"hxAV4","./query":"1LIOf","./types":"hXMiD","./named-node":"imvOa","./index":"j1nKW","./serialize":"aht3D","./blank-node":"8EviO","./default-graph":"7Uugn","./literal":"8jO2p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijj5A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultGraphURI", ()=>_defaultGraphUri.defaultGraphURI
);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _blankNode = require("../blank-node");
var _blankNodeDefault = parcelHelpers.interopDefault(_blankNode);
var _literal = require("../literal");
var _literalDefault = parcelHelpers.interopDefault(_literal);
var _namedNode = require("../named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _statement = require("../statement");
var _statementDefault = parcelHelpers.interopDefault(_statement);
var _variable = require("../variable");
var _variableDefault = parcelHelpers.interopDefault(_variable);
var _types = require("../types");
var _defaultGraph = require("../default-graph");
var _defaultGraphDefault = parcelHelpers.interopDefault(_defaultGraph);
var _factoryTypes = require("./factory-types");
var _terms = require("../utils/terms");
var _defaultGraphUri = require("../utils/default-graph-uri");
var _supports;
/**
 * Gets the default graph
 */ var _defaultGraph1 = new _defaultGraphDefault.default();
/** A basic internal RDFlib datafactory, which does not support Collections  */ var CanonicalDataFactory = {
    supports: (_supports = {
    }, _definePropertyDefault.default(_supports, _factoryTypes.Feature.collections, false), _definePropertyDefault.default(_supports, _factoryTypes.Feature.defaultGraphType, false), _definePropertyDefault.default(_supports, _factoryTypes.Feature.equalsMethod, true), _definePropertyDefault.default(_supports, _factoryTypes.Feature.identity, false), _definePropertyDefault.default(_supports, _factoryTypes.Feature.id, true), _definePropertyDefault.default(_supports, _factoryTypes.Feature.reversibleId, false), _definePropertyDefault.default(_supports, _factoryTypes.Feature.variableType, true), _supports),
    /**
   * Creates a new blank node
   * @param value - The blank node's identifier
   */ blankNode: function blankNode(value) {
        return new _blankNodeDefault.default(value);
    },
    defaultGraph: function defaultGraph() {
        return _defaultGraph1;
    },
    /**
   * Compares to (rdf) objects for equality.
   */ equals: function equals(a, b) {
        if (a === b || !a || !b) return true;
        if (_terms.isQuad(a) || _terms.isQuad(b)) {
            if (_terms.isQuad(a) && _terms.isQuad(b)) return this.equals(a.subject, b.subject) && this.equals(a.predicate, b.predicate) && this.equals(a.object, b.object) && this.equals(a.graph, b.graph);
            return false;
        }
        if (_terms.isTerm(a) && _terms.isTerm(b)) return this.id(a) === this.id(b);
        return false;
    },
    /**
   * Generates a uniquely identifiably *idempotent* string for the given {term}.
   *
   * Equivalent to [[Term.hashString]]
   *
   * @example Use this to associate data with a term in an object
   *   { obj[id(term)] = "myData" }
   */ id: function id(term) {
        if (!term) return 'undefined';
        if (_terms.isQuad(term)) return this.quadToNQ(term);
        switch(term.termType){
            case _types.DefaultGraphTermType:
                return 'defaultGraph';
            case _types.VariableTermType:
                return _variableDefault.default.toString(term);
            default:
                var nq = this.termToNQ(term);
                if (nq) return nq;
                throw new Error("Can't id term with type '".concat(term.termType, "'"));
        }
    },
    isQuad: function isQuad(obj) {
        return obj instanceof _statementDefault.default;
    },
    /**
   * Creates a new literal node. Does some JS literal parsing for ease of use.
   * @param value - The lexical value
   * @param languageOrDatatype - Either the language or the datatype
   */ literal: function literal(value, languageOrDatatype) {
        if (typeof value !== "string" && !languageOrDatatype) return _literalDefault.default.fromValue(value);
        var strValue = typeof value === 'string' ? value : '' + value;
        if (typeof languageOrDatatype === 'string') {
            if (languageOrDatatype.indexOf(':') === -1) return new _literalDefault.default(strValue, languageOrDatatype);
            else return new _literalDefault.default(strValue, null, this.namedNode(languageOrDatatype));
        } else return new _literalDefault.default(strValue, null, languageOrDatatype);
    },
    /**
   * Creates a new named node
   * @param value - The new named node
   */ namedNode: function namedNode(value) {
        return new _namedNodeDefault.default(value);
    },
    /**
   * Creates a new statement
   * @param subject - The subject
   * @param predicate - The predicate
   * @param object - The object
   * @param graph - The containing graph
   */ quad: function quad(subject, predicate, object, graph) {
        return new _statementDefault.default(subject, predicate, object, graph || _defaultGraph1);
    },
    /**
   * Creates a new statement
   * @param subject - The subject
   * @param predicate - The predicate
   * @param object - The object
   * @param graph - The containing graph
   */ triple: function triple(subject, predicate, object, graph) {
        return this.quad(subject, predicate, object, graph);
    },
    quadToNQ: function quadToNQ(q) {
        return "".concat(this.termToNQ(q.subject), " ").concat(this.termToNQ(q.predicate), " ").concat(this.termToNQ(q.object), " ").concat(this.termToNQ(q.graph), " .");
    },
    /** Stringify a {term} to n-quads serialization. */ termToNQ: function termToNQ(term) {
        var _this = this;
        switch(term.termType){
            case _types.BlankNodeTermType:
                return '_:' + term.value;
            case _types.DefaultGraphTermType:
                return '';
            case _types.EmptyTermType:
                return '<http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>';
            case _types.LiteralTermType:
                return _literalDefault.default.toNT(term);
            case _types.GraphTermType:
            case _types.NamedNodeTermType:
                return '<' + term.value + '>';
            case _types.CollectionTermType:
                return '(' + term.elements.map(function(t) {
                    return _this.termToNQ(t);
                }).join(' ') + ')';
            default:
                throw new Error("Can't serialize nonstandard term type (was '".concat(term.termType, "')"));
        }
    },
    /** Convert an rdf object (term or quad) to n-quads serialization. */ toNQ: function toNQ(term) {
        if (this.isQuad(term)) return this.quadToNQ(term);
        return this.termToNQ(term);
    },
    /**
   * Creates a new variable
   * @param name - The name for the variable
   */ variable: function variable(name) {
        return new _variableDefault.default(name);
    }
};
exports.default = CanonicalDataFactory;

},{"@babel/runtime/helpers/defineProperty":"4x6r7","../blank-node":"8EviO","../literal":"8jO2p","../named-node":"imvOa","../statement":"e8Diy","../variable":"hxAV4","../types":"hXMiD","../default-graph":"7Uugn","./factory-types":"j4Sya","../utils/terms":"cHcdt","../utils/default-graph-uri":"eia2J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e8Diy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Statement
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
var _defaultGraph = require("./default-graph");
var _defaultGraphDefault = parcelHelpers.interopDefault(_defaultGraph);
var defaultGraph = new _defaultGraphDefault.default();
/** A Statement represents an RDF Triple or Quad. */ var Statement = /*#__PURE__*/ function() {
    /** The subject of the triple.  What the Statement is about. */ /** The relationship which is asserted between the subject and object */ /** The thing or data value which is asserted to be related to the subject */ /**
   * The graph param is a named node of the document in which the triple when
   *  it is stored on the web.
   */ /**
   * Construct a new statement
   *
   * @param subject - The subject of the triple.  What the fact is about
   * @param predicate - The relationship which is asserted between the subject and object
   * @param object - The thing or data value which is asserted to be related to the subject
   * @param {NamedNode} graph - The document where the triple is or was or will be stored on the web.
   *
   * The graph param is a named node of the document in which the triple when it is stored
   *  on the web. It exists because when you have read data from various places in the web,
   *  the “graph” tells you _why_ you have the triple. (At the moment, it is just the
   *  document, in future it could be an inference step)
   *
   * When you do UpdateManager.update() then the graph’s of all the statements must be the same,
   *  and give the document you are patching. In future, we may have a more
   *  powerful update() which can update more than one document.
   */ function Statement1(subject, predicate, object, graph) {
        _classCallCheckDefault.default(this, Statement1);
        _definePropertyDefault.default(this, "subject", void 0);
        _definePropertyDefault.default(this, "predicate", void 0);
        _definePropertyDefault.default(this, "object", void 0);
        _definePropertyDefault.default(this, "graph", void 0);
        this.subject = _nodeInternalDefault.default.fromValue(subject);
        this.predicate = _nodeInternalDefault.default.fromValue(predicate);
        this.object = _nodeInternalDefault.default.fromValue(object);
        this.graph = graph == undefined ? defaultGraph : _nodeInternalDefault.default.fromValue(graph); // property currently used by rdflib
    }
    /** Alias for graph, favored by Tim */ _createClassDefault.default(Statement1, [
        {
            key: "why",
            get: function get() {
                return this.graph;
            },
            set: function set(g) {
                this.graph = g;
            }
        },
        {
            key: "equals",
            value: function equals(other) {
                return other.subject.equals(this.subject) && other.predicate.equals(this.predicate) && other.object.equals(this.object) && other.graph.equals(this.graph);
            }
        },
        {
            key: "substitute",
            value: function substitute(bindings) {
                var y = new Statement1(this.subject.substitute(bindings), this.predicate.substitute(bindings), this.object.substitute(bindings), _defaultGraph.isDefaultGraph(this.graph) ? this.graph : this.graph.substitute(bindings)); // 2016
                console.log('@@@ statement substitute:' + y);
                return y;
            }
        },
        {
            key: "toCanonical",
            value: function toCanonical() {
                var terms = [
                    this.subject.toCanonical(),
                    this.predicate.toCanonical(),
                    this.object.toCanonical()
                ];
                if (this.graph && this.graph.termType !== _types.DefaultGraphTermType) terms.push(this.graph.toCanonical());
                return terms.join(' ') + ' .';
            }
        },
        {
            key: "toNT",
            value: function toNT() {
                return [
                    this.subject.toNT(),
                    this.predicate.toNT(),
                    this.object.toNT()
                ].join(' ') + ' .';
            }
        },
        {
            key: "toNQ",
            value: function toNQ() {
                return [
                    this.subject.toNT(),
                    this.predicate.toNT(),
                    this.object.toNT(),
                    _defaultGraph.isDefaultGraph(this.graph) ? '' : this.graph.toNT()
                ].join(' ') + ' .';
            }
        },
        {
            key: "toString",
            value: function toString() {
                return this.toNT();
            }
        }
    ]);
    return Statement1;
}();

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/defineProperty":"4x6r7","./node-internal":"kZc6I","./types":"hXMiD","./default-graph":"7Uugn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Uugn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>DefaultGraph
);
parcelHelpers.export(exports, "isDefaultGraph", ()=>isDefaultGraph
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
var _defaultGraphUri = require("./utils/default-graph-uri");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/** The RDF default graph */ var DefaultGraph = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(DefaultGraph1, _Node);
    var _super = _createSuper(DefaultGraph1);
    function DefaultGraph1() {
        var _this;
        _classCallCheckDefault.default(this, DefaultGraph1);
        _this = _super.call(this, '');
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "value", '');
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.DefaultGraphTermType);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "uri", _defaultGraphUri.defaultGraphURI);
        return _this;
    }
    _createClassDefault.default(DefaultGraph1, [
        {
            key: "toCanonical",
            value: function toCanonical() {
                return this.value;
            }
        },
        {
            key: "toString",
            value: function toString() {
                return 'DefaultGraph';
            }
        }
    ]);
    return DefaultGraph1;
}(_nodeInternalDefault.default);
function isDefaultGraph(object) {
    return !!object && object.termType === _types.DefaultGraphTermType;
}

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./node-internal":"kZc6I","./types":"hXMiD","./utils/default-graph-uri":"eia2J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eia2J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultGraphURI", ()=>defaultGraphURI
);
parcelHelpers.export(exports, "defaultGraphNode", ()=>defaultGraphNode
);
// Prevents circular dependencies between data-factory-internal and statement
var _namedNode = require("../named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var defaultGraphURI = 'chrome:theSession';
var defaultGraphNode = new _namedNodeDefault.default(defaultGraphURI);

},{"../named-node":"imvOa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxAV4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Variable
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _classOrder = require("./class-order");
var _classOrderDefault = parcelHelpers.interopDefault(_classOrder);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _types = require("./types");
var _uri = require("./uri");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
* Variables are placeholders used in patterns to be matched.
* In cwm they are symbols which are the formula's list of quantified variables.
* In sparql they are not visibly URIs.  Here we compromise, by having
* a common special base URI for variables. Their names are uris,
* but the ? notation has an implicit base uri of 'varid:'
*/ var Variable = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(Variable1, _Node);
    var _super = _createSuper(Variable1);
    /** The base string for a variable's name */ /** The unique identifier of this variable */ /**
   * Initializes this variable
   * @param name The variable's name
   */ function Variable1() {
        var _this;
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        _classCallCheckDefault.default(this, Variable1);
        _this = _super.call(this, name);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.VariableTermType);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "base", 'varid:');
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "classOrder", _classOrderDefault.default.Variable);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "isVar", 1);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "uri", void 0);
        _this.base = 'varid:';
        _this.uri = _uri.join(name, _this.base);
        return _this;
    }
    _createClassDefault.default(Variable1, [
        {
            key: "equals",
            value: function equals(other) {
                if (!other) return false;
                return this.termType === other.termType && this.value === other.value;
            }
        },
        {
            key: "hashString",
            value: function hashString() {
                return this.toString();
            }
        },
        {
            key: "substitute",
            value: function substitute(bindings) {
                var ref;
                return (ref = bindings[this.toNT()]) != null ? ref : this;
            }
        },
        {
            key: "toString",
            value: function toString() {
                return Variable1.toString(this);
            }
        }
    ], [
        {
            key: "toString",
            value: function toString(variable) {
                if (variable.uri.slice(0, variable.base.length) === variable.base) return "?".concat(variable.uri.slice(variable.base.length));
                return "?".concat(variable.uri);
            }
        }
    ]);
    return Variable1;
}(_nodeInternalDefault.default);

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./class-order":"5Vmqo","./node-internal":"kZc6I","./types":"hXMiD","./uri":"cwuSF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwuSF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the document part of an URI
 * @param uri The URI
 */ parcelHelpers.export(exports, "docpart", ()=>docpart
);
/**
 * Gets the document part of an URI as a named node
 * @param x - The URI
 */ parcelHelpers.export(exports, "document", ()=>document
);
/**
 * Gets the hostname in an URI
 * @param u The URI
 */ parcelHelpers.export(exports, "hostpart", ()=>hostpart
);
/**
 * Joins an URI with a base
 * @param given - The relative part
 * @param base - The base URI
 */ parcelHelpers.export(exports, "join", ()=>join
);
/**
 * Gets the protocol part of an URI
 * @param uri The URI
 */ parcelHelpers.export(exports, "protocol", ()=>protocol
);
/**
 * Gets a relative uri
 * @param base The base URI
 * @param uri The absolute URI
 */ parcelHelpers.export(exports, "refTo", ()=>refTo
);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
/*
 * Implements URI-specific functions
 *
 * See RFC 2386
 *
 * See also:
 *   http://www.w3.org/2005/10/ajaw/uri.js
 *   http://www.w3.org/2000/10/swap/uripath.py
 *
 */ var alert = alert || console.log;
function docpart(uri) {
    var i;
    i = uri.indexOf('#');
    if (i < 0) return uri;
    else return uri.slice(0, i);
}
function document(x) {
    return new _namedNodeDefault.default(docpart(x));
}
function hostpart(u) {
    var m = /[^\/]*\/\/([^\/]*)\//.exec(u);
    if (m) return m[1];
    else return '';
}
function join(given, base) {
    var baseColon, baseScheme, baseSingle;
    var colon, lastSlash, path;
    var baseHash = base.indexOf('#');
    if (baseHash > 0) base = base.slice(0, baseHash);
    if (given.length === 0) return base;
    if (given.indexOf('#') === 0) return base + given;
    colon = given.indexOf(':');
    if (colon >= 0) return given;
    baseColon = base.indexOf(':');
    if (base.length === 0) return given;
    if (baseColon < 0) {
        alert('Invalid base: ' + base + ' in join with given: ' + given);
        return given;
    }
    baseScheme = base.slice(0, +baseColon + 1 || 9000000000);
    if (given.indexOf('//') === 0) return baseScheme + given;
    if (base.indexOf('//', baseColon) === baseColon + 1) {
        baseSingle = base.indexOf('/', baseColon + 3);
        if (baseSingle < 0) {
            if (base.length - baseColon - 3 > 0) return base + '/' + given;
            else return baseScheme + given;
        }
    } else {
        baseSingle = base.indexOf('/', baseColon + 1);
        if (baseSingle < 0) {
            if (base.length - baseColon - 1 > 0) return base + '/' + given;
            else return baseScheme + given;
        }
    }
    if (given.indexOf('/') === 0) return base.slice(0, baseSingle) + given;
    path = base.slice(baseSingle);
    lastSlash = path.lastIndexOf('/');
    if (lastSlash < 0) return baseScheme + given;
    if (lastSlash >= 0 && lastSlash < path.length - 1) path = path.slice(0, +lastSlash + 1 || 9000000000);
    path += given;
    while(path.match(/[^\/]*\/\.\.\//))path = path.replace(/[^\/]*\/\.\.\//, '');
    path = path.replace(/\.\//g, '');
    path = path.replace(/\/\.$/, '/');
    return base.slice(0, baseSingle) + path;
}
function protocol(uri) {
    var i = uri.indexOf(':');
    if (i < 0) return null;
    else return uri.slice(0, i);
}
function refTo(base, uri) {
    var c, i, k, l, len, len1, n, o, p, q, ref, ref1, s;
    var commonHost = new RegExp('^[-_a-zA-Z0-9.]+:(//[^/]*)?/[^/]*$');
    if (!base) return uri;
    if (base === uri) return '';
    for(i = o = 0, len = uri.length; o < len; i = ++o){
        var _c = uri[i];
        if (_c !== base[i]) break;
    }
    if (base.slice(0, i).match(commonHost)) {
        k = uri.indexOf('//');
        if (k < 0) k = -2;
        l = uri.indexOf('/', k + 2);
        if (uri[l + 1] !== '/' && base[l + 1] !== '/' && uri.slice(0, l) === base.slice(0, l)) return uri.slice(l);
    }
    if (uri[i] === '#' && base.length === i) return uri.slice(i);
    while(i > 0 && uri[i - 1] !== '/')i--;
    if (i < 3) return uri;
    if (base.indexOf('//', i - 2) > 0 || uri.indexOf('//', i - 2) > 0) return uri;
    if (base.indexOf(':', i) > 0) return uri;
    n = 0;
    ref = base.slice(i);
    for(p = 0, len1 = ref.length; p < len1; p++){
        c = ref[p];
        if (c === '/') n++;
    }
    if (n === 0 && i < uri.length && uri[i] === '#') return './' + uri.slice(i);
    if (n === 0 && i === uri.length) return './';
    s = '';
    if (n > 0) for(q = 1, ref1 = n; ref1 >= 1 ? q <= ref1 : q >= ref1; ref1 >= 1 ? ++q : --q)s += '../';
    return s + uri.slice(i);
}

},{"./named-node":"imvOa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4Sya":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Feature", ()=>Feature
);
var Feature;
/**
 * Defines a DataFactory as used in rdflib, based on the RDF/JS: Data model specification,
 * but with additional extensions
 *
 * bnIndex is optional but useful.
 */ (function(Feature1) {
    Feature1["collections"] = "COLLECTIONS";
    Feature1["defaultGraphType"] = "DEFAULT_GRAPH_TYPE";
    Feature1["equalsMethod"] = "EQUALS_METHOD";
    Feature1["id"] = "ID";
    Feature1["identity"] = "IDENTITY";
    Feature1["reversibleId"] = "REVERSIBLE_ID";
    Feature1["variableType"] = "VARIABLE_TYPE";
})(Feature || (Feature = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8etYk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Formula
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _classOrder = require("./class-order");
var _classOrderDefault = parcelHelpers.interopDefault(_classOrder);
var _collection = require("./collection");
var _collectionDefault = parcelHelpers.interopDefault(_collection);
var _canonicalDataFactory = require("./factories/canonical-data-factory");
var _canonicalDataFactoryDefault = parcelHelpers.interopDefault(_canonicalDataFactory);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _serialize = require("./serialize");
var _serializeDefault = parcelHelpers.interopDefault(_serialize);
var _types = require("./types");
var _terms = require("./utils/terms");
var _variable = require("./variable");
var _variableDefault = parcelHelpers.interopDefault(_variable);
var _utils = require("./utils");
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnDefault.default(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * A formula, or store of RDF statements
 */ var Formula = /*#__PURE__*/ function(_Node) {
    _inheritsDefault.default(Formula1, _Node);
    var _super = _createSuper(Formula1);
    /**
   * The accompanying fetcher instance.
   *
   * Is set by the fetcher when initialized.
   */ /**
   * A namespace for the specified namespace's URI
   * @param nsuri The URI for the namespace
   */ /** The factory used to generate statements and terms */ /**
   * Initializes this formula
   * @constructor
   * @param statements - Initial array of statements
   * @param constraints - initial array of constraints
   * @param initBindings - initial bindings used in Query
   * @param optional - optional
   * @param opts
   * @param opts.rdfFactory - The rdf factory that should be used by the store
  */ function Formula1() {
        var _this;
        var statements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var initBindings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var optional = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
        var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        };
        _classCallCheckDefault.default(this, Formula1);
        _this = _super.call(this, '');
        _this.statements = statements;
        _this.constraints = constraints;
        _this.initBindings = initBindings;
        _this.optional = optional;
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "termType", _types.GraphTermType);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "classOrder", _classOrderDefault.default.Graph);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "fetcher", void 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "isVar", 0);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "ns", _namespaceDefault.default);
        _definePropertyDefault.default(_assertThisInitializedDefault.default(_this), "rdfFactory", void 0);
        _this.rdfFactory = opts && opts.rdfFactory || _canonicalDataFactoryDefault.default; // Enable default factory methods on this while preserving factory context.
        var _iterator = _createForOfIteratorHelper(_utils.appliedFactoryMethods), _step;
        try {
            var _loop = function _loop() {
                var factoryMethod = _step.value;
                _this[factoryMethod] = function() {
                    var _this$rdfFactory;
                    return (_this$rdfFactory = _this.rdfFactory)[factoryMethod].apply(_this$rdfFactory, arguments);
                };
            };
            for(_iterator.s(); !(_step = _iterator.n()).done;)_loop();
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return _this;
    }
    /** Add a statement from its parts
   * @param subject - the first part of the statement
   * @param predicate - the second part of the statement
   * @param object - the third part of the statement
   * @param graph - the last part of the statement
   */ _createClassDefault.default(Formula1, [
        {
            key: "add",
            value: function add(subject, predicate, object, graph) {
                var _this2 = this;
                if (arguments.length === 1) subject.forEach(function(st) {
                    return _this2.add(st.subject, st.predicate, st.object, st.graph);
                });
                return this.statements.push(this.rdfFactory.quad(subject, predicate, object, graph));
            }
        },
        {
            key: "addStatement",
            value: function addStatement(statement) {
                return this.add(statement);
            }
        },
        {
            key: "bnode",
            value: function bnode(id) {
                return this.rdfFactory.blankNode(id);
            }
        },
        {
            key: "addAll",
            value: function addAll(statements) {
                var _this3 = this;
                statements.forEach(function(quad) {
                    _this3.add(quad.subject, quad.predicate, quad.object, quad.graph);
                });
            }
        },
        {
            key: "any",
            value: function any(s, p, o, g) {
                var st = this.anyStatementMatching(s, p, o, g);
                if (st == null) return null;
                else if (s == null) return st.subject;
                else if (p == null) return st.predicate;
                else if (o == null) return st.object;
                return null;
            }
        },
        {
            key: "anyValue",
            value: function anyValue(s, p, o, g) {
                var y = this.any(s, p, o, g);
                return y ? y.value : void 0;
            }
        },
        {
            key: "anyJS",
            value: function anyJS(s, p, o, g) {
                var y = this.any(s, p, o, g);
                return y ? _nodeInternalDefault.default.toJS(y) : void 0;
            }
        },
        {
            key: "anyStatementMatching",
            value: function anyStatementMatching(s, p, o, g) {
                var x = this.statementsMatching(s, p, o, g, true);
                if (!x || x.length === 0) return undefined;
                return x[0];
            }
        },
        {
            key: "id",
            value: function id(term) {
                return this.rdfFactory.id(term);
            }
        },
        {
            key: "statementsMatching",
            value: function statementsMatching(s, p, o, g, justOne) {
                var sts = this.statements.filter(function(st) {
                    return (!s || s.equals(st.subject)) && (!p || p.equals(st.predicate)) && (!o || o.equals(st.object)) && (!g || g.equals(st.graph));
                });
                if (justOne) return sts.length === 0 ? [] : [
                    sts[0]
                ];
                return sts;
            }
        },
        {
            key: "bottomTypeURIs",
            value: function bottomTypeURIs(types) {
                var bots;
                var bottom;
                var elt;
                var i;
                var len;
                var ref;
                var subs;
                var v;
                bots = [];
                for(var _k in types){
                    if (!types.hasOwnProperty(_k)) continue;
                    v = types[_k];
                    subs = this.each(void 0, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), this.rdfFactory.namedNode(_k));
                    bottom = true;
                    i = 0;
                    for(len = subs.length; i < len; i++){
                        elt = subs[i];
                        ref = elt.uri;
                        if (ref in types) {
                            // the subclass is one we know
                            bottom = false;
                            break;
                        }
                    }
                    if (bottom) bots[_k] = v;
                }
                return bots;
            }
        },
        {
            key: "collection",
            value: function collection() {
                return new _collectionDefault.default();
            }
        },
        {
            key: "each",
            value: function each(s, p, o, g) {
                var results = [];
                var sts = this.statementsMatching(s, p, o, g, false);
                if (s == null) for(var i = 0, len = sts.length; i < len; i++)results.push(sts[i].subject);
                else if (p == null) for(var l = 0, len1 = sts.length; l < len1; l++)results.push(sts[l].predicate);
                else if (o == null) for(var m = 0, len2 = sts.length; m < len2; m++)results.push(sts[m].object);
                else if (g == null) for(var _q = 0, len3 = sts.length; _q < len3; _q++)results.push(new _namedNodeDefault.default(sts[_q].graph.value));
                return results;
            }
        },
        {
            key: "equals",
            value: function equals(other) {
                if (!other) return false;
                return this.hashString() === other.hashString();
            }
        },
        {
            key: "findMembersNT",
            value: function findMembersNT(thisClass) {
                var len2;
                var len4;
                var m;
                var members;
                var pred;
                var ref;
                var ref1;
                var ref2;
                var ref3;
                var ref4;
                var ref5;
                var seeds;
                var st;
                var u;
                seeds = {
                };
                seeds[thisClass.toNT()] = true;
                members = {
                };
                ref = this.transitiveClosure(seeds, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true);
                for(var t in ref){
                    if (!ref.hasOwnProperty(t)) continue;
                    ref1 = this.statementsMatching(void 0, this.rdfFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), this.fromNT(t));
                    for(var i = 0, len = ref1.length; i < len; i++){
                        st = ref1[i];
                        members[st.subject.toNT()] = st;
                    }
                    ref2 = this.each(void 0, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), this.fromNT(t));
                    for(var l = 0, len1 = ref2.length; l < len1; l++){
                        pred = ref2[l];
                        ref3 = this.statementsMatching(void 0, pred);
                        for(m = 0, len2 = ref3.length; m < len2; m++){
                            st = ref3[m];
                            members[st.subject.toNT()] = st;
                        }
                    }
                    ref4 = this.each(void 0, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), this.fromNT(t));
                    for(var _q2 = 0, len3 = ref4.length; _q2 < len3; _q2++){
                        pred = ref4[_q2];
                        ref5 = this.statementsMatching(void 0, pred);
                        for(u = 0, len4 = ref5.length; u < len4; u++){
                            st = ref5[u];
                            members[st.object.toNT()] = st;
                        }
                    }
                }
                return members;
            }
        },
        {
            key: "findMemberURIs",
            value: function findMemberURIs(subject) {
                return this.NTtoURI(this.findMembersNT(subject));
            }
        },
        {
            key: "findSubClassesNT",
            value: function findSubClassesNT(subject) {
                var types = {
                };
                types[subject.toNT()] = true;
                return this.transitiveClosure(types, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true);
            }
        },
        {
            key: "findSuperClassesNT",
            value: function findSuperClassesNT(subject) {
                var types = {
                };
                types[subject.toNT()] = true;
                return this.transitiveClosure(types, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false);
            }
        },
        {
            key: "findTypesNT",
            value: function findTypesNT(subject) {
                var domain;
                var range;
                var rdftype;
                var ref;
                var ref1;
                var ref2;
                var ref3;
                var st;
                var types;
                rdftype = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
                types = [];
                ref = this.statementsMatching(subject, void 0, void 0);
                for(var i = 0, len = ref.length; i < len; i++){
                    st = ref[i];
                    if (st.predicate.uri === rdftype) types[st.object.toNT()] = st;
                    else {
                        ref1 = this.each(st.predicate, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'));
                        for(var l = 0, len1 = ref1.length; l < len1; l++){
                            range = ref1[l];
                            types[range.toNT()] = st;
                        }
                    }
                }
                ref2 = this.statementsMatching(void 0, void 0, subject);
                for(var m = 0, len2 = ref2.length; m < len2; m++){
                    st = ref2[m];
                    ref3 = this.each(st.predicate, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'));
                    for(var _q3 = 0, len3 = ref3.length; _q3 < len3; _q3++){
                        domain = ref3[_q3];
                        types[domain.toNT()] = st;
                    }
                }
                return this.transitiveClosure(types, this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false);
            }
        },
        {
            key: "findTypeURIs",
            value: function findTypeURIs(subject) {
                return this.NTtoURI(this.findTypesNT(subject));
            }
        },
        {
            key: "connectedStatements",
            value: function connectedStatements(subject, doc, excludePredicateURIs) {
                excludePredicateURIs = excludePredicateURIs || [];
                var todo = [
                    subject
                ];
                var done = {
                };
                var doneArcs = {
                };
                var result = [];
                var self = this;
                var follow = function follow(x1) {
                    var queue = function queue(x) {
                        if (x.termType === 'BlankNode' && !done[x.value]) {
                            done[x.value] = true;
                            todo.push(x);
                        }
                    };
                    var sts = self.statementsMatching(null, null, x1, doc).concat(self.statementsMatching(x1, null, null, doc));
                    sts = sts.filter(function(st) {
                        if (excludePredicateURIs[st.predicate.value]) return false;
                        var hash = st.toNT();
                        if (doneArcs[hash]) return false;
                        doneArcs[hash] = true;
                        return true;
                    });
                    sts.forEach(function(st) {
                        queue(st.subject);
                        queue(st.object);
                    });
                    result = result.concat(sts);
                };
                while(todo.length)follow(todo.shift());
                 // console.log('' + result.length + ' statements about ' + subject)
                return result;
            }
        },
        {
            key: "formula",
            value: function formula(_features) {
                return new Formula1();
            }
        },
        {
            key: "fromNT",
            value: function fromNT(str) {
                var dt, k, lang;
                switch(str[0]){
                    case '<':
                        return this.sym(str.slice(1, -1));
                    case '"':
                        lang = void 0;
                        dt = void 0;
                        k = str.lastIndexOf('"');
                        if (k < str.length - 1) {
                            if (str[k + 1] === '@') lang = str.slice(k + 2);
                            else if (str.slice(k + 1, k + 3) === '^^') dt = this.fromNT(str.slice(k + 3));
                            else throw new Error("Can't convert string from NT: " + str);
                        }
                        str = str.slice(1, k);
                        str = str.replace(/\\"/g, '"');
                        str = str.replace(/\\n/g, '\n');
                        str = str.replace(/\\\\/g, '\\');
                        return this.rdfFactory.literal(str, lang || dt);
                    case '_':
                        return this.rdfFactory.blankNode(str.slice(2));
                    case '?':
                        return new _variableDefault.default(str.slice(1));
                }
                throw new Error("Can't convert from NT: " + str);
            }
        },
        {
            key: "holds",
            value: function holds(s, p, o, g) {
                var i;
                if (arguments.length === 1) {
                    if (!s) return true;
                    if (s instanceof Array) {
                        for(i = 0; i < s.length; i++){
                            if (!this.holds(s[i])) return false;
                        }
                        return true;
                    } else if (_terms.isStatement(s)) return this.holds(s.subject, s.predicate, s.object, s.graph);
                    else if (s.statements) return this.holds(s.statements);
                }
                var st = this.anyStatementMatching(s, p, o, g);
                return st != null;
            }
        },
        {
            key: "holdsStatement",
            value: function holdsStatement(statement) {
                return this.holds(statement.subject, statement.predicate, statement.object, statement.graph);
            }
        },
        {
            key: "list",
            value: function list(values, context) {
                if (context.rdfFactory.supports["COLLECTIONS"]) {
                    var collection = context.rdfFactory.collection();
                    values.forEach(function(val) {
                        collection.append(val);
                    });
                    return collection;
                } else {
                    var node = context.rdfFactory.blankNode();
                    var _statements = _utils.arrayToStatements(context.rdfFactory, node, values);
                    context.addAll(_statements);
                    return node;
                }
            }
        },
        {
            key: "NTtoURI",
            value: function NTtoURI(t) {
                var k, v;
                var uris = {
                };
                for(k in t){
                    if (!t.hasOwnProperty(k)) continue;
                    v = t[k];
                    if (k[0] === '<') uris[k.slice(1, -1)] = v;
                }
                return uris;
            }
        },
        {
            key: "serialize",
            value: function serialize(base, contentType, provenance, options) {
                // delegate the graph serialization to the implementation in ./serialize
                return _serializeDefault.default(provenance, this, base, contentType, undefined, options);
            }
        },
        {
            key: "substitute",
            value: function substitute(bindings) {
                var statementsCopy = this.statements.map(function(ea) {
                    return ea.substitute(bindings);
                });
                console.log('Formula subs statmnts:' + statementsCopy);
                var y = new Formula1();
                y.addAll(statementsCopy);
                console.log('indexed-form subs formula:' + y);
                return y;
            }
        },
        {
            key: "sym",
            value: function sym(uri, name) {
                if (name) throw new Error('This feature (kb.sym with 2 args) is removed. Do not assume prefix mappings.');
                return this.rdfFactory.namedNode(uri);
            }
        },
        {
            key: "the",
            value: function the(s, p, o, g) {
                var x = this.any(s, p, o, g);
                if (x == null) _logDefault.default.error('No value found for the() {' + s + ' ' + p + ' ' + o + '}.');
                return x;
            }
        },
        {
            key: "transitiveClosure",
            value: function transitiveClosure(seeds, predicate, inverse) {
                var elt, i, len, s, sups, t;
                var agenda = {
                };
                Object.assign(agenda, seeds); // make a copy
                var done = {
                }; // classes we have looked up
                while(true){
                    t = (function() {
                        for(var p in agenda){
                            if (!agenda.hasOwnProperty(p)) continue;
                            return p;
                        }
                    })();
                    if (t == null) return done;
                    sups = inverse ? this.each(void 0, predicate, this.fromNT(t)) : this.each(this.fromNT(t), predicate);
                    for(i = 0, len = sups.length; i < len; i++){
                        elt = sups[i];
                        s = elt.toNT();
                        if (s in done) continue;
                        if (s in agenda) continue;
                        agenda[s] = agenda[t];
                    }
                    done[t] = agenda[t];
                    delete agenda[t];
                }
            }
        },
        {
            key: "topTypeURIs",
            value: function topTypeURIs(types) {
                var i;
                var j;
                var k;
                var len;
                var n;
                var ref;
                var tops;
                var v;
                tops = [];
                for(k in types){
                    if (!types.hasOwnProperty(k)) continue;
                    v = types[k];
                    n = 0;
                    ref = this.each(this.rdfFactory.namedNode(k), this.rdfFactory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'));
                    for(i = 0, len = ref.length; i < len; i++){
                        j = ref[i];
                        if (j.uri !== 'http://www.w3.org/2000/01/rdf-schema#Resource') {
                            n++;
                            break;
                        }
                    }
                    if (!n) tops[k] = v;
                }
                if (tops['http://www.w3.org/2000/01/rdf-schema#Resource']) delete tops['http://www.w3.org/2000/01/rdf-schema#Resource'];
                if (tops['http://www.w3.org/2002/07/owl#Thing']) delete tops['http://www.w3.org/2002/07/owl#Thing'];
                return tops;
            }
        },
        {
            key: "toString",
            value: function toString() {
                return '{' + this.statements.join('\n') + '}';
            }
        },
        {
            key: "variable",
            value: function variable(name) {
                return new _variableDefault.default(name);
            }
        },
        {
            key: "whether",
            value: function whether(s, p, o, g) {
                return this.statementsMatching(s, p, o, g, false).length;
            }
        }
    ]);
    return Formula1;
}(_nodeInternalDefault.default);

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/assertThisInitialized":"1mVba","@babel/runtime/helpers/inherits":"bYd1U","@babel/runtime/helpers/possibleConstructorReturn":"cW3L5","@babel/runtime/helpers/getPrototypeOf":"gWrBy","@babel/runtime/helpers/defineProperty":"4x6r7","./class-order":"5Vmqo","./collection":"hfkNS","./factories/canonical-data-factory":"ijj5A","./log":"44B5t","./namespace":"iFtHC","./node-internal":"kZc6I","./serialize":"aht3D","./types":"hXMiD","./utils/terms":"cHcdt","./variable":"hxAV4","./utils":"2V7vH","./named-node":"imvOa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44B5t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A Dummy log
 * @module log
 */ var log = {
    debug: function debug(x) {
    },
    warn: function warn(x) {
    },
    info: function info(x) {
    },
    error: function error(x) {
    },
    success: function success(x) {
    },
    msg: function msg(x) {
    }
};
exports.default = log;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iFtHC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
function Namespace(nsuri, factory) {
    var dataFactory = factory || {
        namedNode: function namedNode(value) {
            return new _namedNodeDefault.default(value);
        }
    };
    return function(ln) {
        return dataFactory.namedNode(nsuri + (ln || ''));
    };
}
exports.default = Namespace;

},{"./named-node":"imvOa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aht3D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _convert = require("./convert");
var _serializer = require("./serializer");
var _serializerDefault = parcelHelpers.interopDefault(_serializer);
var _types = require("./types");
function serialize(/** The graph or nodes that should be serialized */ target, /** The store */ kb, base, /**
 * The mime type.
 * Defaults to Turtle.
 */ contentType, callback, options) {
    base = base || (target === null || target === void 0 ? void 0 : target.value);
    var opts = options || {
    };
    contentType = contentType || _types.TurtleContentType; // text/n3 if complex?
    var documentString = undefined;
    try {
        var sz = _serializerDefault.default(kb);
        if (opts.flags) sz.setFlags(opts.flags);
        var newSts = kb.statementsMatching(undefined, undefined, undefined, target);
        var n3String; // If an IndexedFormula, use the namespaces from the given graph as suggestions
        if ('namespaces' in kb) sz.suggestNamespaces(kb.namespaces);
         // use the provided options.namespaces are mandatory prefixes
        if (opts.namespaces) sz.setNamespaces(opts.namespaces);
        sz.setBase(base);
        switch(contentType){
            case _types.RDFXMLContentType:
                documentString = sz.statementsToXML(newSts);
                return executeCallback(null, documentString);
            case _types.N3ContentType:
            case _types.N3LegacyContentType:
                documentString = sz.statementsToN3(newSts);
                return executeCallback(null, documentString);
            case _types.TurtleContentType:
            case _types.TurtleLegacyContentType:
                sz.setFlags('si'); // Suppress = for sameAs and => for implies
                documentString = sz.statementsToN3(newSts);
                return executeCallback(null, documentString);
            case _types.NTriplesContentType:
                sz.setFlags('deinprstux'); // Suppress nice parts of N3 to make ntriples
                documentString = sz.statementsToNTriples(newSts);
                return executeCallback(null, documentString);
            case _types.JSONLDContentType:
                sz.setFlags('deinprstux'); // Use adapters to connect to incmpatible parser
                n3String = sz.statementsToNTriples(newSts); // n3String = sz.statementsToN3(newSts)
                _convert.convertToJson(n3String, callback);
                break;
            case _types.NQuadsContentType:
            case _types.NQuadsAltContentType:
                // @@@ just outpout the quads? Does not work for collections
                sz.setFlags('deinprstux q'); // Suppress nice parts of N3 to make ntriples
                documentString = sz.statementsToNTriples(newSts); // q in flag means actually quads
                return executeCallback(null, documentString);
            // n3String = sz.statementsToN3(newSts)
            // documentString = convert.convertToNQuads(n3String, callback)
            // break
            default:
                throw new Error('Serialize: Content-type ' + contentType + ' not supported for data write.');
        }
    } catch (err1) {
        if (callback) // @ts-ignore
        return callback(err1, undefined);
        throw err1; // Don't hide problems from caller in sync mode
    }
    function executeCallback(err, result) {
        if (callback) {
            callback(err, result);
            return;
        } else return result;
    }
}
exports.default = serialize;

},{"./convert":"6cbc9","./serializer":"cnscC","./types":"hXMiD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnscC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Serializer", ()=>Serializer
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
/*      Serialization of RDF Graphs
**
** Tim Berners-Lee 2006
** This is was http://dig.csail.mit.edu/2005/ajar/ajaw/js/rdf/serialize.js
** This is or was https://github.com/linkeddata/rdflib.js/blob/main/src/serializer.js
** Licence: MIT
*/ var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _blankNode = require("./blank-node");
var _blankNodeDefault = parcelHelpers.interopDefault(_blankNode);
var _uri = require("./uri");
var _utilsJs = require("./utils-js");
var _canonicalDataFactory = require("./factories/canonical-data-factory");
var _canonicalDataFactoryDefault = parcelHelpers.interopDefault(_canonicalDataFactory);
var _xsd = require("./xsd");
var _solidNamespace = require("solid-namespace");
var _solidNamespaceDefault = parcelHelpers.interopDefault(_solidNamespace);
function createSerializer(store) {
    return new Serializer(store);
}
exports.default = createSerializer;
var Serializer = /*#__PURE__*/ function() {
    function Serializer1(store) {
        _classCallCheckDefault.default(this, Serializer1);
        _definePropertyDefault.default(this, "_notQNameChars", '\t\r\n !"#$%&\'()*.,+/;<=>?@[\\]^`{|}~');
        _definePropertyDefault.default(this, "_notNameChars", this._notQNameChars + ':');
        _definePropertyDefault.default(this, "validPrefix", new RegExp(/^[a-zA-Z][a-zA-Z0-9]*$/));
        _definePropertyDefault.default(this, "forbidden1", new RegExp(/[\\"\b\f\r\v\t\n\u0080-\uffff]/gm));
        _definePropertyDefault.default(this, "forbidden3", new RegExp(/[\\"\b\f\r\v\u0080-\uffff]/gm));
        this.flags = '';
        this.base = null;
        this.prefixes = []; // suggested prefixes
        this.namespaces = []; // complementary
        var nsKeys = Object.keys(_solidNamespaceDefault.default());
        for(var i in nsKeys){
            var uri = _solidNamespaceDefault.default()[nsKeys[i]]('');
            var prefix = nsKeys[i];
            this.prefixes[uri] = prefix;
            this.namespaces[prefix] = uri;
        }
        this.suggestPrefix('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'); // XML code assumes this!
        this.suggestPrefix('xml', 'reserved:reservedForFutureUse'); // XML reserves xml: in the spec.
        this.namespacesUsed = []; // Count actually used and so needed in @prefixes
        this.keywords = [
            'a'
        ]; // The only one we generate at the moment
        this.prefixchars = 'abcdefghijklmnopqustuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        this.incoming = null; // Array not calculated yet
        this.formulas = []; // remebering original formulae from hashes
        this.store = store;
        this.rdfFactory = store.rdfFactory || _canonicalDataFactoryDefault.default;
        this.xsd = _xsd.createXSD(this.rdfFactory);
    }
    _createClassDefault.default(Serializer1, [
        {
            key: "setBase",
            value: function setBase(base) {
                this.base = base;
                return this;
            }
        },
        {
            key: "setFlags",
            value: function setFlags(flags) {
                this.flags = flags || '';
                return this;
            }
        },
        {
            key: "toStr",
            value: function toStr(x) {
                var s = x.toNT();
                if (x.termType === 'Graph') this.formulas[s] = x; // remember as reverse does not work
                return s;
            }
        },
        {
            key: "fromStr",
            value: function fromStr(s) {
                if (s[0] === '{') {
                    var x = this.formulas[s];
                    if (!x) console.log('No formula object for ' + s);
                    return x;
                }
                return this.store.fromNT(s);
            }
        },
        {
            key: "setNamespaces",
            value: function setNamespaces(namespaces) {
                for(var px in namespaces)this.setPrefix(px, namespaces[px]);
                return this;
            }
        },
        {
            key: "setPrefix",
            value: function setPrefix(prefix, uri) {
                if (prefix.slice(0, 7) === 'default') return; // Try to weed these out
                if (prefix.slice(0, 2) === 'ns') return; //  From others inferior algos
                if (!prefix || !uri) return; // empty strings not suitable
                // remove any existing prefix targeting this uri
                // for (let existingPrefix in this.namespaces) {
                //   if (this.namespaces[existingPrefix] == uri)
                //     delete this.namespaces[existingPrefix];
                // }
                // remove any existing mapping for this prefix
                for(var existingNs in this.prefixes)if (this.prefixes[existingNs] == prefix) delete this.prefixes[existingNs];
                this.prefixes[uri] = prefix;
                this.namespaces[prefix] = uri;
            }
        },
        {
            key: "suggestPrefix",
            value: function suggestPrefix(prefix, uri) {
                if (prefix.slice(0, 7) === 'default') return; // Try to weed these out
                if (prefix.slice(0, 2) === 'ns') return; //  From others inferior algos
                if (!prefix || !uri) return; // empty strings not suitable
                if (prefix in this.namespaces || uri in this.prefixes) return; // already used
                this.prefixes[uri] = prefix;
                this.namespaces[prefix] = uri;
            } // Takes a namespace -> prefix map
        },
        {
            key: "suggestNamespaces",
            value: function suggestNamespaces(namespaces) {
                for(var px in namespaces)this.suggestPrefix(px, namespaces[px]);
                return this;
            }
        },
        {
            key: "checkIntegrity",
            value: function checkIntegrity() {
                var p, ns;
                for(p in this.namespaces){
                    if (this.prefixes[this.namespaces[p]] !== p) throw new Error('Serializer integity error 1: ' + p + ', ' + this.namespaces[p] + ', ' + this.prefixes[this.namespaces[p]] + '!');
                }
                for(ns in this.prefixes){
                    if (this.namespaces[this.prefixes[ns]] !== ns) throw new Error('Serializer integity error 2: ' + ns + ', ' + this.prefixs[ns] + ', ' + this.namespaces[this.prefixes[ns]] + '!');
                }
            } // Make up an unused prefix for a random namespace
        },
        {
            key: "makeUpPrefix",
            value: function makeUpPrefix(uri) {
                var p = uri;
                function canUseMethod(pp) {
                    if (!this.validPrefix.test(pp)) return false; // bad format
                    if (pp === 'ns') return false; // boring
                    if (pp in this.namespaces) return false; // already used
                    this.prefixes[uri] = pp;
                    this.namespaces[pp] = uri;
                    return pp;
                }
                var canUse = canUseMethod.bind(this);
                if ('#/'.indexOf(p[p.length - 1]) >= 0) p = p.slice(0, -1);
                var slash = p.lastIndexOf('/');
                if (slash >= 0) p = p.slice(slash + 1);
                var i = 0;
                while(i < p.length){
                    if (this.prefixchars.indexOf(p[i])) i++;
                    else break;
                }
                p = p.slice(0, i);
                if (p.length < 6 && canUse(p)) return p; // exact is best
                if (canUse(p.slice(0, 3))) return p.slice(0, 3);
                if (canUse(p.slice(0, 2))) return p.slice(0, 2);
                if (canUse(p.slice(0, 4))) return p.slice(0, 4);
                if (canUse(p.slice(0, 1))) return p.slice(0, 1);
                if (canUse(p.slice(0, 5))) return p.slice(0, 5);
                if (!this.validPrefix.test(p)) p = 'n'; // Otherwise the loop below may never termimnate
                for(var j = 0;; j++){
                    if (canUse(p.slice(0, 3) + j)) return p.slice(0, 3) + j;
                }
            }
        },
        {
            key: "rootSubjects",
            value: function rootSubjects(sts) {
                var incoming = {
                };
                var subjects = {
                };
                var allBnodes = {
                };
                /* This scan is to find out which nodes will have to be the roots of trees
      ** in the serialized form. This will be any symbols, and any bnodes
      ** which hve more or less than one incoming arc, and any bnodes which have
      ** one incoming arc but it is an uninterrupted loop of such nodes back to itself.
      ** This should be kept linear time with repect to the number of statements.
      ** Note it does not use any indexing of the store.
      */ for(var i = 0; i < sts.length; i++){
                    var st = sts[i];
                    var checkMentions = function checkMentions(x) {
                        if (!incoming.hasOwnProperty(x)) incoming[x] = [];
                        incoming[x].push(st.subject); // List of things which will cause this to be printed
                    };
                    var st2 = [
                        st.subject,
                        st.predicate,
                        st.object
                    ];
                    st2.map(function(y) {
                        if (y.termType === 'BlankNode') allBnodes[y.toNT()] = true;
                        else if (y.termType === 'Collection') y.elements.forEach(function(z) {
                            checkMentions(z); // bnodes in collections important
                        });
                    });
                    checkMentions(sts[i].object);
                    var ss = subjects[this.toStr(st.subject)]; // Statements with this as subject
                    if (!ss) ss = [];
                    ss.push(st);
                    subjects[this.toStr(st.subject)] = ss; // Make hash. @@ too slow for formula?
                }
                var roots = [];
                for(var xNT in subjects){
                    if (!subjects.hasOwnProperty(xNT)) continue;
                    var y1 = this.fromStr(xNT);
                    if (y1.termType !== 'BlankNode' || !incoming[y1] || incoming[y1].length !== 1) {
                        roots.push(y1);
                        continue;
                    }
                }
                this.incoming = incoming; // Keep for serializing @@ Bug for nested formulas
                // Now do the scan using existing roots
                var rootsHash = {
                };
                for(var k = 0; k < roots.length; k++)rootsHash[roots[k].toNT()] = true;
                return {
                    'roots': roots,
                    'subjects': subjects,
                    'rootsHash': rootsHash,
                    'incoming': incoming
                };
            } // //////////////////////////////////////////////////////
        },
        {
            key: "toN3",
            value: function toN3(f) {
                return this.statementsToN3(f.statements);
            }
        },
        {
            key: "explicitURI",
            value: function explicitURI(uri) {
                if (this.flags.indexOf('r') < 0 && this.base) uri = _uri.refTo(this.base, uri);
                else if (this.flags.indexOf('u') >= 0) // Unicode encoding NTriples style
                uri = backslashUify(uri);
                else uri = hexify(uri);
                return '<' + uri + '>';
            }
        },
        {
            key: "statementsToNTriples",
            value: function statementsToNTriples(sts) {
                var sorted = sts.slice();
                sorted.sort();
                var str = '';
                var rdfns = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
                var self = this;
                var kb = this.store;
                var factory = this.rdfFactory;
                var termToNT1 = function termToNT(x) {
                    if (x.termType !== 'Collection') return self.atomicTermToN3(x);
                    var list = x.elements;
                    var rest = kb.sym(rdfns + 'nill');
                    for(var i = list.length - 1; i >= 0; i--){
                        var bnode = factory.blankNode();
                        str += termToNT(bnode) + ' ' + termToNT(kb.sym(rdfns + 'first')) + ' ' + termToNT(list[i]) + '.\n';
                        str += termToNT(bnode) + ' ' + termToNT(kb.sym(rdfns + 'rest')) + ' ' + termToNT(rest) + '.\n';
                        rest = bnode;
                    }
                    return self.atomicTermToN3(rest);
                };
                for(var i1 = 0; i1 < sorted.length; i1++){
                    var st = sorted[i1];
                    var s = '';
                    s += termToNT1(st.subject) + ' ';
                    s += termToNT1(st.predicate) + ' ';
                    s += termToNT1(st.object) + ' ';
                    if (this.flags.indexOf('q') >= 0) // Do quads not nrtiples
                    s += termToNT1(st.why) + ' ';
                    s += '.\n';
                    str += s;
                }
                return str;
            }
        },
        {
            key: "statementsToN3",
            value: function statementsToN3(sts1) {
                var indent = 4;
                var width = 80;
                var kb = this.store; // A URI Map alows us to put the type statemnts at the top.
                var uriMap = {
                    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'aaa:00'
                };
                var SPO = function SPO(x, y) {
                    // Do limited canonicalization of bnodes
                    return _utilsJs.heavyCompareSPO(x, y, kb, uriMap);
                };
                sts1.sort(SPO);
                if (this.base && !this.defaultNamespace) this.defaultNamespace = this.base + '#';
                var predMap = {
                };
                if (this.flags.indexOf('s') < 0) predMap['http://www.w3.org/2002/07/owl#sameAs'] = '=';
                if (this.flags.indexOf('t') < 0) predMap['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'] = 'a';
                if (this.flags.indexOf('i') < 0) predMap['http://www.w3.org/2000/10/swap/log#implies'] = '=>';
                 // //////////////////////// Arrange the bits of text
                var spaces = function spaces(n) {
                    var s = '';
                    for(var i = 0; i < n; i++)s += ' ';
                    return s;
                };
                var treeToLine1 = function treeToLine(tree) {
                    var str = '';
                    for(var i = 0; i < tree.length; i++){
                        var branch = tree[i];
                        var s2 = typeof branch === 'string' ? branch : treeToLine(branch); // Note the space before the dot in case statement ends with 123 or colon. which is in fact allowed but be conservative.
                        if (i !== 0) {
                            var ch = str.slice(-1) || ' ';
                            if (s2 === ',' || s2 === ';') ;
                            else if (s2 === '.' && !'0123456789.:'.includes(ch)) ;
                            else str += ' '; // separate from previous token
                        }
                        str += s2;
                    }
                    return str;
                }; // Convert a nested tree of lists and strings to a string
                var treeToString1 = function treeToString(tree, level) {
                    var str = '';
                    var lastLength = 100000;
                    if (level === undefined) level = -1;
                    for(var i = 0; i < tree.length; i++){
                        var branch = tree[i];
                        if (typeof branch !== 'string') {
                            var substr = treeToString(branch, level + 1);
                            if (substr.length < 10 * (width - indent * level) && substr.indexOf('"""') < 0) {
                                // Don't mess up multiline strings
                                var line = treeToLine1(branch);
                                if (line.length < width - indent * level) {
                                    branch = line; //   Note! treat as string below
                                    substr = '';
                                }
                            }
                            if (substr) lastLength = 10000;
                            str += substr;
                        }
                        if (typeof branch === 'string') {
                            if (branch.length === 1 && str.slice(-1) === '\n') {
                                if (',.;'.indexOf(branch) >= 0) {
                                    str = str.slice(0, -1); // be conservative and ensure a whitespace between some chars and a final dot, as in treeToLine above
                                    if (branch == '.' && '0123456789.:'.includes(str.charAt(str.length - 1))) {
                                        str += ' ';
                                        lastLength += 1;
                                    }
                                    str += branch + '\n'; //  slip punct'n on end
                                    lastLength += 1;
                                    continue;
                                }
                            }
                            if (lastLength < indent * level + 4 || lastLength + branch.length + 1 < width && ';.'.indexOf(str[str.length - 2]) < 0) {
                                // or the string fits on last line
                                str = str.slice(0, -1) + ' ' + branch + '\n'; // then continue on this line
                                lastLength += branch.length + 1;
                            } else {
                                var _line = spaces(indent * level) + branch;
                                str += _line + '\n';
                                lastLength = _line.length;
                                if (level < 0) {
                                    str += '\n'; // extra blank line
                                    lastLength = 100000; // don't touch
                                }
                            }
                        }
                    }
                    return str;
                }; // //////////////////////////////////////////// Structure for N3
                // Convert a set of statements into a nested tree of lists and strings
                function statementListToTreeMethod(statements) {
                    var stats = this.rootSubjects(statements);
                    var roots = stats.roots;
                    var results = [];
                    for(var i = 0; i < roots.length; i++){
                        var root = roots[i];
                        results.push(subjectTree(root, stats));
                    }
                    return results;
                }
                var statementListToTree = statementListToTreeMethod.bind(this); // The tree for a subject
                function subjectTree(subject, stats) {
                    if (subject.termType === 'BlankNode' && !stats.incoming[subject]) return objectTree(subject, stats, true).concat([
                        '.'
                    ]); // Anonymous bnode subject
                    return [
                        termToN3(subject, stats)
                    ].concat([
                        propertyTree(subject, stats)
                    ]).concat([
                        '.'
                    ]);
                } // The property tree for a single subject or anonymous node
                function propertyTreeMethod(subject, stats) {
                    var results = [];
                    var lastPred = null;
                    var sts = stats.subjects[this.toStr(subject)] || []; // relevant statements
                    if (typeof sts === 'undefined') throw new Error('Cant find statements for ' + subject);
                    var objects = [];
                    for(var i = 0; i < sts.length; i++){
                        var st = sts[i];
                        if (st.predicate.uri === lastPred) objects.push(',');
                        else {
                            if (lastPred) {
                                results = results.concat([
                                    objects
                                ]).concat([
                                    ';'
                                ]);
                                objects = [];
                            }
                            results.push(predMap[st.predicate.uri] ? predMap[st.predicate.uri] : termToN3(st.predicate, stats));
                        }
                        lastPred = st.predicate.uri;
                        objects.push(objectTree(st.object, stats));
                    }
                    results = results.concat([
                        objects
                    ]);
                    return results;
                }
                var propertyTree = propertyTreeMethod.bind(this);
                function objectTreeMethod(obj, stats, force) {
                    if (obj.termType === 'BlankNode' && (force || stats.rootsHash[obj.toNT()] === undefined)) {
                        // if not a root
                        if (stats.subjects[this.toStr(obj)]) return [
                            '[',
                            propertyTree(obj, stats),
                            ']'
                        ];
                        else return '[]';
                    }
                    return termToN3(obj, stats);
                }
                var objectTree = objectTreeMethod.bind(this);
                function termToN3Method(expr, stats) {
                    //
                    var i, res;
                    switch(expr.termType){
                        case 'Graph':
                            res = [
                                '{'
                            ];
                            res = res.concat(statementListToTree(expr.statements));
                            return res.concat([
                                '}'
                            ]);
                        case 'Collection':
                            res = [
                                '('
                            ];
                            for(i = 0; i < expr.elements.length; i++)res.push([
                                objectTree(expr.elements[i], stats)
                            ]);
                            res.push(')');
                            return res;
                        default:
                            return this.atomicTermToN3(expr);
                    }
                }
                Serializer1.prototype.termToN3 = termToN3;
                var termToN3 = termToN3Method.bind(this);
                function prefixDirectivesMethod() {
                    var str = '';
                    if (this.defaultNamespace) str += '@prefix : ' + this.explicitURI(this.defaultNamespace) + '.\n';
                    for(var ns in this.prefixes){
                        if (!this.prefixes.hasOwnProperty(ns)) continue;
                        if (!this.namespacesUsed[ns]) continue;
                        str += '@prefix ' + this.prefixes[ns] + ': ' + this.explicitURI(ns) + '.\n';
                    }
                    return str + '\n';
                }
                var prefixDirectives = prefixDirectivesMethod.bind(this); // Body of statementsToN3:
                var tree1 = statementListToTree(sts1);
                return prefixDirectives() + treeToString1(tree1);
            } // //////////////////////////////////////////// Atomic Terms
        },
        {
            key: "atomicTermToN3",
            value: function atomicTermToN3(expr, stats) {
                switch(expr.termType){
                    case 'BlankNode':
                    case 'Variable':
                        return expr.toNT();
                    case 'Literal':
                        var val = expr.value;
                        if (typeof val !== 'string') throw new TypeError('Value of RDF literal node must be a string');
                         // var val = expr.value.toString() // should be a string already
                        if (expr.datatype && this.flags.indexOf('x') < 0) // Supress native numbers
                        switch(expr.datatype.uri){
                            case 'http://www.w3.org/2001/XMLSchema#integer':
                                return val;
                            case 'http://www.w3.org/2001/XMLSchema#decimal':
                                // In urtle must have dot
                                if (val.indexOf('.') < 0) val += '.0';
                                return val;
                            case 'http://www.w3.org/2001/XMLSchema#double':
                                // Must force use of 'e'
                                var eNotation = val.toLowerCase().indexOf('e') > 0;
                                if (val.indexOf('.') < 0 && !eNotation) val += '.0';
                                if (!eNotation) val += 'e0';
                                return val;
                            case 'http://www.w3.org/2001/XMLSchema#boolean':
                                return expr.value === '1' ? 'true' : 'false';
                        }
                        var str = this.stringToN3(expr.value);
                        if (expr.language) str += '@' + expr.language;
                        else if (!expr.datatype.equals(this.xsd.string)) str += '^^' + this.atomicTermToN3(expr.datatype, stats);
                        return str;
                    case 'NamedNode':
                        return this.symbolToN3(expr);
                    default:
                        throw new Error('Internal: atomicTermToN3 cannot handle ' + expr + ' of termType: ' + expr.termType);
                }
            } //  stringToN3:  String escaping for N3
        },
        {
            key: "stringToN3",
            value: function stringToN3(str, flags) {
                if (!flags) flags = 'e';
                var res = '';
                var i, j, k;
                var delim;
                var forbidden;
                if (str.length > 20 && str.slice(-1) !== '"' && flags.indexOf('n') < 0 && (str.indexOf('\n') > 0 || str.indexOf('"') > 0)) {
                    delim = '"""';
                    forbidden = this.forbidden3;
                } else {
                    delim = '"';
                    forbidden = this.forbidden1;
                }
                for(i = 0; i < str.length;){
                    forbidden.lastIndex = 0;
                    var m = forbidden.exec(str.slice(i));
                    if (m == null) break;
                    j = i + forbidden.lastIndex - 1;
                    res += str.slice(i, j);
                    var ch = str[j];
                    if (ch === '"' && delim === '"""' && str.slice(j, j + 3) !== '"""') res += ch;
                    else {
                        k = '\b\f\r\t\v\n\\"'.indexOf(ch); // No escaping of bell (7)?
                        if (k >= 0) res += '\\' + 'bfrtvn\\"'[k];
                        else if (flags.indexOf('e') >= 0) // Unicode escaping in strings not unix style
                        res += "\\u" + ('000' + ch.charCodeAt(0).toString(16).toLowerCase()).slice(-4);
                        else // no 'e' flag
                        res += ch;
                    }
                    i = j + 1;
                }
                return delim + res + str.slice(i) + delim;
            } //  A single symbol, either in  <> or namespace notation
        },
        {
            key: "symbolToN3",
            value: function symbolToN3(x) {
                // c.f. symbolString() in notation3.py
                var uri = x.uri;
                var j = uri.indexOf('#');
                if (j < 0 && this.flags.indexOf('/') < 0) j = uri.lastIndexOf('/');
                if (j >= 0 && this.flags.indexOf('p') < 0 && (uri.indexOf('http') === 0 || uri.indexOf('ws') === 0 || uri.indexOf('file') === 0)) {
                    var canSplit = true;
                    for(var k = j + 1; k < uri.length; k++)if (this._notNameChars.indexOf(uri[k]) >= 0) {
                        canSplit = false;
                        break;
                    }
                    /*
              if (uri.slice(0, j + 1) === this.base + '#') { // base-relative
                if (canSplit) {
                  return ':' + uri.slice(j + 1) // assume deafult ns is local
                } else {
                  return '<#' + uri.slice(j + 1) + '>'
                }
              }
        */ if (canSplit) {
                        var localid = uri.slice(j + 1);
                        var namesp = uri.slice(0, j + 1);
                        if (this.defaultNamespace && this.defaultNamespace === namesp && this.flags.indexOf('d') < 0) {
                            // d -> suppress default
                            if (this.flags.indexOf('k') >= 0 && this.keyords.indexOf(localid) < 0) return localid;
                            return ':' + localid;
                        } // this.checkIntegrity() //  @@@ Remove when not testing
                        var prefix = this.prefixes[namesp];
                        if (!prefix) prefix = this.makeUpPrefix(namesp);
                        if (prefix) {
                            this.namespacesUsed[namesp] = true;
                            return prefix + ':' + localid;
                        } // Fall though if can't do qname
                    }
                }
                return this.explicitURI(uri);
            } // /////////////////////////// Quad store serialization
        },
        {
            key: "writeStore",
            value: function writeStore(write) {
                var kb = this.store;
                var fetcher = kb.fetcher;
                var session = fetcher && fetcher.appNode; // The core data
                var sources = this.store.index[3];
                for(var s in sources){
                    // -> assume we can use -> as short for log:semantics
                    var source = kb.fromNT(s);
                    if (session && source.equals(session)) continue;
                    write('\n' + this.atomicTermToN3(source) + ' ' + this.atomicTermToN3(kb.sym('http://www.w3.org/2000/10/swap/log#semantics')) + ' { ' + this.statementsToN3(kb.statementsMatching(undefined, undefined, undefined, source)) + ' }.\n');
                } // The metadata from HTTP interactions:
                kb.statementsMatching(undefined, kb.sym('http://www.w3.org/2007/ont/link#requestedURI')).map(function(st) {
                    write('\n<' + st.object.value + '> log:metadata {\n');
                    var sts = kb.statementsMatching(undefined, undefined, undefined, st.subject);
                    write(this.statementsToN3(this.statementsToN3(sts)));
                    write('}.\n');
                }); // Inferences we have made ourselves not attributable to anyone else
                var metaSources = [];
                if (session) metaSources.push(session);
                var metadata = [];
                metaSources.map(function(source) {
                    metadata = metadata.concat(kb.statementsMatching(undefined, undefined, undefined, source));
                });
                write(this.statementsToN3(metadata));
            } // ////////////////////////////////////////////// XML serialization
        },
        {
            key: "statementsToXML",
            value: function statementsToXML(sts2) {
                var indent = 4;
                var width = 80;
                var namespaceCounts = []; // which have been used
                namespaceCounts['http://www.w3.org/1999/02/22-rdf-syntax-ns#'] = true;
                var liPrefix = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#_'; // prefix for ordered list items
                // //////////////////////// Arrange the bits of XML text
                var spaces = function spaces(n) {
                    var s = '';
                    for(var i = 0; i < n; i++)s += ' ';
                    return s;
                };
                var XMLtreeToLine1 = function XMLtreeToLine(tree) {
                    var str = '';
                    for(var i = 0; i < tree.length; i++){
                        var branch = tree[i];
                        var s2 = typeof branch === 'string' ? branch : XMLtreeToLine(branch);
                        str += s2;
                    }
                    return str;
                }; // Convert a nested tree of lists and strings to a string
                var XMLtreeToString1 = function XMLtreeToString(tree, level) {
                    var str = '';
                    var line;
                    var lastLength = 100000;
                    if (!level) level = 0;
                    for(var i = 0; i < tree.length; i++){
                        var branch = tree[i];
                        if (typeof branch !== 'string') {
                            var substr = XMLtreeToString(branch, level + 1);
                            if (substr.length < 10 * (width - indent * level) && substr.indexOf('"""') < 0) {
                                // Don't mess up multiline strings
                                line = XMLtreeToLine1(branch);
                                if (line.length < width - indent * level) {
                                    branch = '   ' + line; //   @@ Hack: treat as string below
                                    substr = '';
                                }
                            }
                            if (substr) lastLength = 10000;
                            str += substr;
                        }
                        if (typeof branch === 'string') {
                            if (lastLength < indent * level + 4) {
                                // continue
                                str = str.slice(0, -1) + ' ' + branch + '\n';
                                lastLength += branch.length + 1;
                            } else {
                                line = spaces(indent * level) + branch;
                                str += line + '\n';
                                lastLength = line.length;
                            }
                        } else ;
                    }
                    return str;
                };
                function statementListToXMLTreeMethod(statements) {
                    this.suggestPrefix('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
                    var stats = this.rootSubjects(statements);
                    var roots = stats.roots;
                    var results = [];
                    for(var i = 0; i < roots.length; i++){
                        var root = roots[i];
                        results.push(subjectXMLTree(root, stats));
                    }
                    return results;
                }
                var statementListToXMLTree = statementListToXMLTreeMethod.bind(this);
                function escapeForXML(str) {
                    if (typeof str === 'undefined') return '@@@undefined@@@@';
                    return str.replace(/[&<"]/g, function(m) {
                        switch(m[0]){
                            case '&':
                                return '&amp;';
                            case '<':
                                return '&lt;';
                            case '"':
                                return '&quot;';
                        }
                    });
                }
                function relURIMethod(term) {
                    return escapeForXML(this.base ? _utilsJs.uri.refTo(this.base, term.uri) : term.uri);
                }
                var relURI = relURIMethod.bind(this); // The tree for a subject
                function subjectXMLTreeMethod(subject, stats) {
                    var results = [];
                    var type, t, st, pred;
                    var sts = stats.subjects[this.toStr(subject)]; // relevant statements
                    if (typeof sts === 'undefined') // empty bnode
                    return propertyXMLTree(subject, stats);
                     // Sort only on the predicate, leave the order at object
                    // level undisturbed.  This leaves multilingual content in
                    // the order of entry (for partner literals), which helps
                    // readability.
                    //
                    // For the predicate sort, we attempt to split the uri
                    // as a hint to the sequence
                    sts.sort(function(a, b) {
                        var ap = a.predicate.uri;
                        var bp = b.predicate.uri;
                        if (ap.substring(0, liPrefix.length) === liPrefix || bp.substring(0, liPrefix.length) === liPrefix) // we're only interested in sorting list items
                        return ap.localeCompare(bp);
                        var as = ap.substring(liPrefix.length);
                        var bs = bp.substring(liPrefix.length);
                        var an = parseInt(as, 10);
                        var bn = parseInt(bs, 10);
                        if (isNaN(an) || isNaN(bn) || an !== as || bn !== bs) // we only care about integers
                        return ap.localeCompare(bp);
                        return an - bn;
                    });
                    for(var i = 0; i < sts.length; i++){
                        st = sts[i]; // look for a type
                        if (st.predicate.uri === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' && !type && st.object.termType === 'NamedNode') {
                            type = st.object;
                            continue; // don't include it as a child element
                        } // see whether predicate can be replaced with "li"
                        pred = st.predicate;
                        if (pred.uri.substr(0, liPrefix.length) === liPrefix) {
                            var number = pred.uri.substr(liPrefix.length); // make sure these are actually numeric list items
                            var intNumber = parseInt(number, 10);
                            if (number === intNumber.toString()) // was numeric; don't need to worry about ordering since we've already
                            // sorted the statements
                            pred = this.rdfFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#li');
                        }
                        t = qname(pred);
                        switch(st.object.termType){
                            case 'BlankNode':
                                if (stats.incoming[st.object].length === 1) // there should always be something in the incoming array for a bnode
                                results = results.concat([
                                    '<' + t + ' rdf:parseType="Resource">',
                                    subjectXMLTree(st.object, stats),
                                    '</' + t + '>'
                                ]);
                                else results = results.concat([
                                    '<' + t + ' rdf:nodeID="' + st.object.toNT().slice(2) + '"/>'
                                ]);
                                break;
                            case 'NamedNode':
                                results = results.concat([
                                    '<' + t + ' rdf:resource="' + relURI(st.object) + '"/>'
                                ]);
                                break;
                            case 'Literal':
                                results = results.concat([
                                    '<' + t + (st.object.datatype.equals(this.xsd.string) ? '' : ' rdf:datatype="' + escapeForXML(st.object.datatype.uri) + '"') + (st.object.language ? ' xml:lang="' + st.object.language + '"' : '') + '>' + escapeForXML(st.object.value) + '</' + t + '>'
                                ]);
                                break;
                            case 'Collection':
                                results = results.concat([
                                    '<' + t + ' rdf:parseType="Collection">',
                                    collectionXMLTree(st.object, stats),
                                    '</' + t + '>'
                                ]);
                                break;
                            default:
                                throw new Error("Can't serialize object of type " + st.object.termType + ' into XML');
                        } // switch
                    }
                    var tag = type ? qname(type) : 'rdf:Description';
                    var attrs = '';
                    if (subject.termType === 'BlankNode') {
                        if (!stats.incoming[subject] || stats.incoming[subject].length !== 1) // not an anonymous bnode
                        attrs = ' rdf:nodeID="' + subject.toNT().slice(2) + '"';
                    } else attrs = ' rdf:about="' + relURI(subject) + '"';
                    return [
                        '<' + tag + attrs + '>'
                    ].concat([
                        results
                    ]).concat([
                        '</' + tag + '>'
                    ]);
                }
                var subjectXMLTree = subjectXMLTreeMethod.bind(this);
                function collectionXMLTree(subject, stats) {
                    var res = [];
                    for(var i = 0; i < subject.elements.length; i++)res.push(subjectXMLTree(subject.elements[i], stats));
                    return res;
                } // The property tree for a single subject or anonymos node
                function propertyXMLTreeMethod(subject, stats) {
                    var results = [];
                    var sts = stats.subjects[this.toStr(subject)]; // relevant statements
                    if (!sts) return results; // No relevant statements
                    sts.sort();
                    for(var i = 0; i < sts.length; i++){
                        var st = sts[i];
                        switch(st.object.termType){
                            case 'BlankNode':
                                if (stats.rootsHash[st.object.toNT()]) // This bnode has been done as a root -- no content here @@ what bout first time
                                results = results.concat([
                                    '<' + qname(st.predicate) + ' rdf:nodeID="' + st.object.toNT().slice(2) + '">',
                                    '</' + qname(st.predicate) + '>'
                                ]);
                                else results = results.concat([
                                    '<' + qname(st.predicate) + ' rdf:parseType="Resource">',
                                    propertyXMLTree(st.object, stats),
                                    '</' + qname(st.predicate) + '>'
                                ]);
                                break;
                            case 'NamedNode':
                                results = results.concat([
                                    '<' + qname(st.predicate) + ' rdf:resource="' + relURI(st.object) + '"/>'
                                ]);
                                break;
                            case 'Literal':
                                results = results.concat([
                                    '<' + qname(st.predicate) + (st.object.datatype.equals(this.xsd.string) ? '' : ' rdf:datatype="' + escapeForXML(st.object.datatype.value) + '"') + (st.object.language ? ' xml:lang="' + st.object.language + '"' : '') + '>' + escapeForXML(st.object.value) + '</' + qname(st.predicate) + '>'
                                ]);
                                break;
                            case 'Collection':
                                results = results.concat([
                                    '<' + qname(st.predicate) + ' rdf:parseType="Collection">',
                                    collectionXMLTree(st.object, stats),
                                    '</' + qname(st.predicate) + '>'
                                ]);
                                break;
                            default:
                                throw new Error("Can't serialize object of type " + st.object.termType + ' into XML');
                        } // switch
                    }
                    return results;
                }
                var propertyXMLTree = propertyXMLTreeMethod.bind(this);
                function qnameMethod(term) {
                    var uri = term.uri;
                    var j = uri.indexOf('#');
                    if (j < 0 && this.flags.indexOf('/') < 0) j = uri.lastIndexOf('/');
                    if (j < 0) throw new Error('Cannot make qname out of <' + uri + '>');
                    for(var k = j + 1; k < uri.length; k++){
                        if (this._notNameChars.indexOf(uri[k]) >= 0) throw new Error('Invalid character "' + uri[k] + '" cannot be in XML qname for URI: ' + uri);
                    }
                    var localid = uri.slice(j + 1);
                    var namesp = uri.slice(0, j + 1);
                    if (this.defaultNamespace && this.defaultNamespace === namesp && this.flags.indexOf('d') < 0) // d -> suppress default
                    return localid;
                    var prefix = this.prefixes[namesp];
                    if (!prefix) prefix = this.makeUpPrefix(namesp);
                    namespaceCounts[namesp] = true;
                    return prefix + ':' + localid;
                }
                var qname = qnameMethod.bind(this); // Body of toXML:
                var tree3 = statementListToXMLTree(sts2);
                var str1 = '<rdf:RDF';
                if (this.defaultNamespace) str1 += ' xmlns="' + escapeForXML(this.defaultNamespace) + '"';
                for(var ns in namespaceCounts){
                    if (!namespaceCounts.hasOwnProperty(ns)) continue; // Rel uris in xml ns is not strictly allowed in the XMLNS spec but needed in practice often
                    var ns2 = this.base && this.flags.includes('z') ? _utilsJs.uri.refTo(this.base, ns) : ns;
                    str1 += '\n xmlns:' + this.prefixes[ns] + '="' + escapeForXML(ns2) + '"';
                }
                str1 += '>';
                var tree2 = [
                    str1,
                    tree3,
                    '</rdf:RDF>'
                ]; // @@ namespace declrations
                return XMLtreeToString1(tree2, -1);
            } // End @@ body
        }
    ]);
    return Serializer1;
}(); // String escaping utilities
function hexify(str) {
    // also used in parser
    return encodeURI(str);
}
function backslashUify(str) {
    var res = '';
    var k;
    for(var i = 0; i < str.length; i++){
        k = str.charCodeAt(i);
        if (k > 65535) res += "\\U" + ('00000000' + k.toString(16)).slice(-8); // convert to upper?
        else if (k > 126) res += "\\u" + ('0000' + k.toString(16)).slice(-4);
        else res += str[i];
    }
    return res;
}

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/defineProperty":"4x6r7","./named-node":"imvOa","./blank-node":"8EviO","./uri":"cwuSF","./utils-js":"2DMBx","./factories/canonical-data-factory":"ijj5A","./xsd":"fY7Xt","solid-namespace":"l0yNX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2DMBx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log", ()=>_logDefault.default
);
parcelHelpers.export(exports, "uri", ()=>_uri
);
parcelHelpers.export(exports, "string", ()=>string
);
parcelHelpers.export(exports, "mediaTypeClass", ()=>mediaTypeClass
);
parcelHelpers.export(exports, "linkRelationProperty", ()=>linkRelationProperty
);
/**
 * Adds callback functionality to an object.
 * Callback functions are indexed by a 'hook' string.
 * They return true if they want to be called again.
 * @method callbackify
 * @param obj {Object}
 * @param callbacks {Array<string>}
 */ parcelHelpers.export(exports, "callbackify", ()=>callbackify
);
/**
 * Returns a DOM parser based on current runtime environment.
 */ parcelHelpers.export(exports, "DOMParserFactory", ()=>DOMParserFactory
) // From https://github.com/linkeddata/dokieli
;
parcelHelpers.export(exports, "domToString", ()=>domToString
);
parcelHelpers.export(exports, "dumpNode", ()=>dumpNode
);
parcelHelpers.export(exports, "dtstamp", ()=>dtstamp
);
/**
 * Compares statements (heavy comparison for repeatable canonical ordering)
 */ parcelHelpers.export(exports, "heavyCompare", ()=>heavyCompare
);
parcelHelpers.export(exports, "heavyCompareSPO", ()=>heavyCompareSPO
);
/**
 * Defines a simple debugging function
 * @method output
 * @param o {String}
 */ parcelHelpers.export(exports, "output", ()=>output
);
/**
 * Returns a DOM from parsed XML.
 */ parcelHelpers.export(exports, "parseXML", ()=>parseXML
);
/**
 * Removes all statements equal to x from a
 */ parcelHelpers.export(exports, "RDFArrayRemove", ()=>RDFArrayRemove
);
parcelHelpers.export(exports, "string_startswith", ()=>string_startswith
);
parcelHelpers.export(exports, "stackString", ()=>stackString
);
/**
 * Utility functions for $rdf
 * @module util
 */ var _uri = require("./uri");
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _xmldom = require("@xmldom/xmldom");
var string = {
    template: stringTemplate
};
function mediaTypeClass(mediaType) {
    mediaType = mediaType.split(';')[0].trim(); // remove media type parameters
    return new _namedNodeDefault.default('http://www.w3.org/ns/iana/media-types/' + mediaType + '#Resource');
}
function linkRelationProperty(relation) {
    return new _namedNodeDefault.default('http://www.w3.org/ns/iana/link-relations/relation#' + relation.trim());
}
function callbackify(obj, callbacks) {
    obj.callbacks = {
    };
    for(var x1 = callbacks.length - 1; x1 >= 0; x1--)obj.callbacks[callbacks[x1]] = [];
    obj.addHook = function(hook) {
        if (!obj.callbacks[hook]) obj.callbacks[hook] = [];
    };
    obj.addCallback = function(hook, func) {
        obj.callbacks[hook].push(func);
    };
    obj.removeCallback = function(hook, funcName) {
        for(var i = 0; i < obj.callbacks[hook].length; i++)if (obj.callbacks[hook][i].name === funcName) {
            obj.callbacks[hook].splice(i, 1);
            return true;
        }
        return false;
    };
    obj.insertCallback = function(hook, func) {
        obj.callbacks[hook].unshift(func);
    };
    obj.fireCallbacks = function fireCallbacks(hook, args) {
        var newCallbacks = [];
        var replaceCallbacks = [];
        var len = obj.callbacks[hook].length;
        var x;
        var callback; // log.info('!@$ Firing '+hook+' call back with length'+len)
        for(x = len - 1; x >= 0; x--){
            // log.info('@@ Firing '+hook+' callback '+ obj.callbacks[hook][x])
            callback = obj.callbacks[hook][x];
            if (callback && callback.apply(obj, args)) newCallbacks.push(callback);
        }
        for(x = newCallbacks.length - 1; x >= 0; x--)replaceCallbacks.push(newCallbacks[x]);
        for(x = len; x < obj.callbacks[hook].length; x++)replaceCallbacks.push(obj.callbacks[hook][x]);
        obj.callbacks[hook] = replaceCallbacks;
    };
}
function DOMParserFactory() {
    if (window.DOMParser) return new _xmldom.DOMParser();
    else if (window.ActiveXObject) return new ActiveXObject('Microsoft.XMLDOM');
    else return false;
}
function domToString(node, options) {
    options = options || {
    };
    var selfClosing = [];
    if (options && options.selfClosing) options.selfClosing.split(' ').forEach(function(n) {
        selfClosing[n] = true;
    });
    var skipAttributes = [];
    if (options && options.skipAttributes) options.skipAttributes.split(' ').forEach(function(n) {
        skipAttributes[n] = true;
    });
    return dumpNode(node, options, selfClosing, skipAttributes);
}
function dumpNode(node, options, selfClosing, skipAttributes) {
    var i;
    var out = '';
    var noEsc = [
        false
    ];
    if (typeof node.nodeType === 'undefined') return out;
    if (node.nodeType === 1) {
        if (node.hasAttribute('class') && options && options.classWithChildText && node.matches(options.classWithChildText.class)) out += node.querySelector(options.classWithChildText.element).textContent;
        else if (!(options && options.skipNodeWithClass && node.matches('.' + options.skipNodeWithClass))) {
            var ename = node.nodeName.toLowerCase();
            out += '<' + ename;
            var attrList = [];
            for(i = node.attributes.length - 1; i >= 0; i--){
                var atn = node.attributes[i];
                if (skipAttributes && skipAttributes.length > 0 && skipAttributes[atn.name]) continue;
                if (/^\d+$/.test(atn.name)) continue;
                if (atn.name === 'class' && options && options.replaceClassItemWith && atn.value.split(' ').indexOf(options.replaceClassItemWith.source) > -1) {
                    var re = new RegExp(options.replaceClassItemWith.source, 'g');
                    atn.value = atn.value.replace(re, options.replaceClassItemWith.target).trim();
                }
                if (!(atn.name === 'class' && options && options.skipClassWithValue && options.skipClassWithValue === atn.value)) attrList.push(atn.name + '=\'' + atn.value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&quot;') + '\'');
            }
            if (attrList.length > 0) {
                if (options && options.sortAttributes) attrList.sort(function(a, b) {
                    return a.toLowerCase().localeCompare(b.toLowerCase());
                });
                out += ' ' + attrList.join(' ');
            }
            if (selfClosing && selfClosing.ename) out += ' />';
            else {
                out += '>';
                out += ename === 'html' ? '\n  ' : '';
                noEsc.push(ename === 'style' || ename === 'script');
                for(i = 0; i < node.childNodes.length; i++)out += dumpNode(node.childNodes[i]);
                noEsc.pop();
                out += ename === 'body' ? '</' + ename + '>' + '\n' : '</' + ename + '>';
            }
        }
    } else if (node.nodeType === 8) // FIXME: If comments are not tabbed in source, a new line is not prepended
    out += '<!--' + node.nodeValue + '-->';
    else if (node.nodeType === 3 || node.nodeType === 4) {
        // XXX: Remove new lines which were added after DOM ready
        var nl = node.nodeValue.replace(/\n+$/, '');
        out += noEsc[noEsc.length - 1] ? nl : nl.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    } else {
        console.log('Warning; Cannot handle serialising nodes of type: ' + node.nodeType);
        console.log(node);
    }
    return out;
}
function dtstamp() {
    var now = new Date();
    var year = now.getYear() + 1900;
    var month = now.getMonth() + 1;
    var day = now.getDate();
    var hour = now.getUTCHours();
    var minute = now.getUTCMinutes();
    var second = now.getSeconds();
    if (month < 10) month = '0' + month;
    if (day < 10) day = '0' + day;
    if (hour < 10) hour = '0' + hour;
    if (minute < 10) minute = '0' + minute;
    if (second < 10) second = '0' + second;
    return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':' + second + 'Z';
}
function heavyCompare(x2, y, g, uriMap) {
    var nonBlank = function nonBlank(x) {
        return x.termType === 'BlankNode' ? null : x;
    };
    var signature = function signature(x) {
        var lis = g.statementsMatching(x).map(function(st) {
            return '' + nonBlank(st.subject) + ' ' + nonBlank(st.predicate) + ' ' + nonBlank(st.object);
        }).concat(g.statementsMatching(undefined, undefined, x).map(function(st) {
            return '' + nonBlank(st.subject) + ' ' + nonBlank(st.predicate) + ' ' + nonBlank(st.object);
        }));
        lis.sort();
        return lis.join('\n');
    };
    var comparison = Object.prototype.hasOwnProperty.call(g, "compareTerms") ? g.compareTerms(x2, y) : x2.compareTerm(y);
    if (x2.termType === 'BlankNode' && y.termType === 'BlankNode') {
        if (comparison === 0) return 0; // Same
        if (signature(x2) > signature(y)) return 1;
        if (signature(x2) < signature(y)) return -1;
        return comparison; // Too bad -- this order not canonical.
    // throw "different bnodes indistinquishable for sorting"
    } else {
        if (uriMap && x2.uri && y.uri) return (uriMap[x2.uri] || x2.uri).localeCompare(uriMap[y.uri] || y.uri);
        return comparison;
    }
}
function heavyCompareSPO(x, y, g, uriMap) {
    return heavyCompare(x.subject, y.subject, g, uriMap) || heavyCompare(x.predicate, y.predicate, g, uriMap) || heavyCompare(x.object, y.object, g, uriMap);
}
function output(o) {
    var k = document.createElement('div');
    k.textContent = o;
    document.body.appendChild(k);
}
function parseXML(str, options) {
    var dparser;
    options = options || {
    };
    if (typeof module !== 'undefined' && module && module.exports) {
        // Node.js
        var dom = new _xmldom.DOMParser().parseFromString(str, options.contentType || 'application/xhtml+xml');
        return dom;
    } else if (typeof window !== 'undefined' && window.DOMParser) dparser = new window.DOMParser(); // seems to actually work
    else dparser = new _xmldom.DOMParser(); // Doc says this works
    return dparser.parseFromString(str, 'application/xml');
}
function RDFArrayRemove(a, x) {
    for(var i = 0; i < a.length; i++)// TODO: This used to be the following, which didnt always work..why
    // if(a[i] === x)
    if (a[i].subject.equals(x.subject) && a[i].predicate.equals(x.predicate) && a[i].object.equals(x.object) && a[i].why.equals(x.why)) {
        a.splice(i, 1);
        return;
    }
    throw new Error('RDFArrayRemove: Array did not contain ' + x + ' ' + x.why);
}
function string_startswith(str, pref) {
    // missing library routines
    return str.slice(0, pref.length) === pref;
}
/**
 * C++, python style %s -> subs
 */ function stringTemplate(base, subs) {
    var baseA = base.split('%s');
    var result = '';
    for(var i = 0; i < subs.length; i++){
        subs[i] += '';
        result += baseA[i] + subs[i];
    }
    return result + baseA.slice(subs.length).join();
} // Stack dump on errors - to pass errors back
function stackString(e) {
    var str = '' + e + '\n';
    if (!e.stack) return str + 'No stack available.\n';
    var lines = e.stack.toString().split('\n');
    var toprint = [];
    for(var i = 0; i < lines.length; i++){
        var line = lines[i];
        if (line.indexOf('ecmaunit.js') > -1) break;
        if (line.charAt(0) == '(') line = 'function' + line;
        var chunks = line.split('@');
        toprint.push(chunks);
    } // toprint.reverse();  No - I prefer the latest at the top by the error message -tbl
    for(var i = 0; i < toprint.length; i++)str += '  ' + toprint[i][1] + '\n    ' + toprint[i][0];
    return str;
}

},{"./uri":"cwuSF","./log":"44B5t","./named-node":"imvOa","@xmldom/xmldom":"1RL7t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1RL7t":[function(require,module,exports) {
var dom = require('./dom');
exports.DOMImplementation = dom.DOMImplementation;
exports.XMLSerializer = dom.XMLSerializer;
exports.DOMParser = require('./dom-parser').DOMParser;

},{"./dom":"dpcBR","./dom-parser":"ec9jr"}],"dpcBR":[function(require,module,exports) {
var conventions = require("./conventions");
var NAMESPACE = conventions.NAMESPACE;
/**
 * A prerequisite for `[].filter`, to drop elements that are empty
 * @param {string} input
 * @returns {boolean}
 */ function notEmptyString(input) {
    return input !== '';
}
/**
 * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * @param {string} input
 * @returns {string[]} (can be empty)
 */ function splitOnASCIIWhitespace(input) {
    // U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE
    return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : [];
}
/**
 * Adds element as a key to current if it is not already present.
 *
 * @param {Record<string, boolean | undefined>} current
 * @param {string} element
 * @returns {Record<string, boolean | undefined>}
 */ function orderedSetReducer(current, element) {
    if (!current.hasOwnProperty(element)) current[element] = true;
    return current;
}
/**
 * @see https://infra.spec.whatwg.org/#ordered-set
 * @param {string} input
 * @returns {string[]}
 */ function toOrderedSet(input) {
    if (!input) return [];
    var list = splitOnASCIIWhitespace(input);
    return Object.keys(list.reduce(orderedSetReducer, {
    }));
}
/**
 * Uses `list.indexOf` to implement something like `Array.prototype.includes`,
 * which we can not rely on being available.
 *
 * @param {any[]} list
 * @returns {function(any): boolean}
 */ function arrayIncludes(list) {
    return function(element) {
        return list && list.indexOf(element) !== -1;
    };
}
function copy(src, dest) {
    for(var p in src)dest[p] = src[p];
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */ function _extends(Class, Super) {
    var pt = Class.prototype;
    if (!(pt instanceof Super)) {
        function t() {
        }
        t.prototype = Super.prototype;
        t = new t();
        copy(pt, t);
        Class.prototype = pt = t;
    }
    if (pt.constructor != Class) {
        if (typeof Class != 'function') console.error("unknown Class:" + Class);
        pt.constructor = Class;
    }
}
// Node Types
var NodeType = {
};
var ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;
var ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;
var TEXT_NODE = NodeType.TEXT_NODE = 3;
var CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;
var ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;
var ENTITY_NODE = NodeType.ENTITY_NODE = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE = NodeType.COMMENT_NODE = 8;
var DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;
var DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;
var DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;
var NOTATION_NODE = NodeType.NOTATION_NODE = 12;
// ExceptionCode
var ExceptionCode = {
};
var ExceptionMessage = {
};
var INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = "Index size error", 1);
var DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = "DOMString size error", 2);
var HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = "Hierarchy request error", 3);
var WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = "Wrong document", 4);
var INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = "Invalid character", 5);
var NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = "No data allowed", 6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = "No modification allowed", 7);
var NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = "Not found", 8);
var NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = "Not supported", 9);
var INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = "Attribute in use", 10);
//level2
var INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = "Invalid state", 11);
var SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = "Syntax error", 12);
var INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = "Invalid modification", 13);
var NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = "Invalid namespace", 14);
var INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = "Invalid access", 15);
/**
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 */ function DOMException(code, message) {
    if (message instanceof Error) var error = message;
    else {
        error = this;
        Error.call(this, ExceptionMessage[code]);
        this.message = ExceptionMessage[code];
        if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
    }
    error.code = code;
    if (message) this.message = this.message + ": " + message;
    return error;
}
DOMException.prototype = Error.prototype;
copy(ExceptionCode, DOMException);
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */ function NodeList() {
}
NodeList.prototype = {
    /**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */ length: 0,
    /**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long 
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
	 */ item: function(index) {
        return this[index] || null;
    },
    toString: function(isHTML, nodeFilter) {
        for(var buf = [], i = 0; i < this.length; i++)serializeToString(this[i], buf, isHTML, nodeFilter);
        return buf.join('');
    }
};
function LiveNodeList(node, refresh) {
    this._node = node;
    this._refresh = refresh;
    _updateLiveList(this);
}
function _updateLiveList(list) {
    var inc = list._node._inc || list._node.ownerDocument._inc;
    if (list._inc != inc) {
        var ls = list._refresh(list._node);
        //console.log(ls.length)
        __set__(list, 'length', ls.length);
        copy(ls, list);
        list._inc = inc;
    }
}
LiveNodeList.prototype.item = function(i) {
    _updateLiveList(this);
    return this[i];
};
_extends(LiveNodeList, NodeList);
/**
 * Objects implementing the NamedNodeMap interface are used
 * to represent collections of nodes that can be accessed by name.
 * Note that NamedNodeMap does not inherit from NodeList;
 * NamedNodeMaps are not maintained in any particular order.
 * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,
 * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,
 * and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */ function NamedNodeMap() {
}
function _findNodeIndex(list, node) {
    var i = list.length;
    while(i--){
        if (list[i] === node) return i;
    }
}
function _addNamedNode(el, list, newAttr, oldAttr) {
    if (oldAttr) list[_findNodeIndex(list, oldAttr)] = newAttr;
    else list[list.length++] = newAttr;
    if (el) {
        newAttr.ownerElement = el;
        var doc = el.ownerDocument;
        if (doc) {
            oldAttr && _onRemoveAttribute(doc, el, oldAttr);
            _onAddAttribute(doc, el, newAttr);
        }
    }
}
function _removeNamedNode(el, list, attr) {
    //console.log('remove attr:'+attr)
    var i = _findNodeIndex(list, attr);
    if (i >= 0) {
        var lastIndex = list.length - 1;
        while(i < lastIndex)list[i] = list[++i];
        list.length = lastIndex;
        if (el) {
            var doc = el.ownerDocument;
            if (doc) {
                _onRemoveAttribute(doc, el, attr);
                attr.ownerElement = null;
            }
        }
    } else throw DOMException(NOT_FOUND_ERR, new Error(el.tagName + '@' + attr));
}
NamedNodeMap.prototype = {
    length: 0,
    item: NodeList.prototype.item,
    getNamedItem: function(key) {
        //		if(key.indexOf(':')>0 || key == 'xmlns'){
        //			return null;
        //		}
        //console.log()
        var i = this.length;
        while(i--){
            var attr = this[i];
            //console.log(attr.nodeName,key)
            if (attr.nodeName == key) return attr;
        }
    },
    setNamedItem: function(attr) {
        var el = attr.ownerElement;
        if (el && el != this._ownerElement) throw new DOMException(INUSE_ATTRIBUTE_ERR);
        var oldAttr = this.getNamedItem(attr.nodeName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
    },
    /* returns Node */ setNamedItemNS: function(attr) {
        var el = attr.ownerElement, oldAttr;
        if (el && el != this._ownerElement) throw new DOMException(INUSE_ATTRIBUTE_ERR);
        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
    },
    /* returns Node */ removeNamedItem: function(key) {
        var attr = this.getNamedItem(key);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
    },
    //for level2
    removeNamedItemNS: function(namespaceURI, localName) {
        var attr = this.getNamedItemNS(namespaceURI, localName);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
    },
    getNamedItemNS: function(namespaceURI, localName) {
        var i = this.length;
        while(i--){
            var node = this[i];
            if (node.localName == localName && node.namespaceURI == namespaceURI) return node;
        }
        return null;
    }
};
/**
 * The DOMImplementation interface represents an object providing methods
 * which are not dependent on any particular document.
 * Such an object is returned by the `Document.implementation` property.
 *
 * __The individual methods describe the differences compared to the specs.__
 *
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN
 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)
 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core
 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core
 * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard
 */ function DOMImplementation() {
}
DOMImplementation.prototype = {
    /**
	 * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
	 * The different implementations fairly diverged in what kind of features were reported.
	 * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
	 *
	 * @deprecated It is deprecated and modern browsers return true in all cases.
	 *
	 * @param {string} feature
	 * @param {string} [version]
	 * @returns {boolean} always true
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
	 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
	 */ hasFeature: function(feature, version) {
        return true;
    },
    /**
	 * Creates an XML Document object of the specified type with its document element.
	 *
	 * __It behaves slightly different from the description in the living standard__:
	 * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
	 * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string|null} namespaceURI
	 * @param {string} qualifiedName
	 * @param {DocumentType=null} doctype
	 * @returns {Document}
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */ createDocument: function(namespaceURI, qualifiedName, doctype) {
        var doc = new Document();
        doc.implementation = this;
        doc.childNodes = new NodeList();
        doc.doctype = doctype || null;
        if (doctype) doc.appendChild(doctype);
        if (qualifiedName) {
            var root = doc.createElementNS(namespaceURI, qualifiedName);
            doc.appendChild(root);
        }
        return doc;
    },
    /**
	 * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
	 *
	 * __This behavior is slightly different from the in the specs__:
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string} qualifiedName
	 * @param {string} [publicId]
	 * @param {string} [systemId]
	 * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
	 * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */ createDocumentType: function(qualifiedName, publicId, systemId) {
        var node = new DocumentType();
        node.name = qualifiedName;
        node.nodeName = qualifiedName;
        node.publicId = publicId || '';
        node.systemId = systemId || '';
        return node;
    }
};
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */ function Node() {
}
Node.prototype = {
    firstChild: null,
    lastChild: null,
    previousSibling: null,
    nextSibling: null,
    attributes: null,
    parentNode: null,
    childNodes: null,
    ownerDocument: null,
    nodeValue: null,
    namespaceURI: null,
    prefix: null,
    localName: null,
    // Modified in DOM Level 2:
    insertBefore: function(newChild, refChild) {
        return _insertBefore(this, newChild, refChild);
    },
    replaceChild: function(newChild, oldChild) {
        this.insertBefore(newChild, oldChild);
        if (oldChild) this.removeChild(oldChild);
    },
    removeChild: function(oldChild) {
        return _removeChild(this, oldChild);
    },
    appendChild: function(newChild) {
        return this.insertBefore(newChild, null);
    },
    hasChildNodes: function() {
        return this.firstChild != null;
    },
    cloneNode: function(deep) {
        return cloneNode(this.ownerDocument || this, this, deep);
    },
    // Modified in DOM Level 2:
    normalize: function() {
        var child = this.firstChild;
        while(child){
            var next = child.nextSibling;
            if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {
                this.removeChild(next);
                child.appendData(next.data);
            } else {
                child.normalize();
                child = next;
            }
        }
    },
    // Introduced in DOM Level 2:
    isSupported: function(feature, version) {
        return this.ownerDocument.implementation.hasFeature(feature, version);
    },
    // Introduced in DOM Level 2:
    hasAttributes: function() {
        return this.attributes.length > 0;
    },
    /**
	 * Look up the prefix associated to the given namespace URI, starting from this node.
	 * **The default namespace declarations are ignored by this method.**
	 * See Namespace Prefix Lookup for details on the algorithm used by this method.
	 *
	 * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
	 *
	 * @param {string | null} namespaceURI
	 * @returns {string | null}
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
	 * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
	 * @see https://github.com/xmldom/xmldom/issues/322
	 */ lookupPrefix: function(namespaceURI) {
        var el = this;
        while(el){
            var map = el._nsMap;
            //console.dir(map)
            if (map) for(var n in map){
                if (map[n] == namespaceURI) return n;
            }
            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI: function(prefix) {
        var el = this;
        while(el){
            var map = el._nsMap;
            //console.dir(map)
            if (map) {
                if (prefix in map) return map[prefix];
            }
            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace: function(namespaceURI) {
        var prefix = this.lookupPrefix(namespaceURI);
        return prefix == null;
    }
};
function _xmlEncoder(c) {
    return c == '<' && '&lt;' || c == '>' && '&gt;' || c == '&' && '&amp;' || c == '"' && '&quot;' || '&#' + c.charCodeAt() + ';';
}
copy(NodeType, Node);
copy(NodeType, Node.prototype);
/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */ function _visitNode(node, callback) {
    if (callback(node)) return true;
    if (node = node.firstChild) do {
        if (_visitNode(node, callback)) return true;
    }while (node = node.nextSibling)
}
function Document() {
}
function _onAddAttribute(doc, el, newAttr) {
    doc && doc._inc++;
    var ns = newAttr.namespaceURI;
    if (ns === NAMESPACE.XMLNS) //update namespace
    el._nsMap[newAttr.prefix ? newAttr.localName : ''] = newAttr.value;
}
function _onRemoveAttribute(doc, el, newAttr, remove) {
    doc && doc._inc++;
    var ns = newAttr.namespaceURI;
    if (ns === NAMESPACE.XMLNS) //update namespace
    delete el._nsMap[newAttr.prefix ? newAttr.localName : ''];
}
/**
 * Updates `el.childNodes`, updating the indexed items and it's `length`.
 * Passing `newChild` means it will be appended.
 * Otherwise it's assumed that an item has been removed,
 * and `el.firstNode` and it's `.nextSibling` are used
 * to walk the current list of child nodes.
 *
 * @param {Document} doc
 * @param {Node} el
 * @param {Node} [newChild]
 * @private
 */ function _onUpdateChild(doc, el, newChild) {
    if (doc && doc._inc) {
        doc._inc++;
        //update childNodes
        var cs = el.childNodes;
        if (newChild) cs[cs.length++] = newChild;
        else {
            var child = el.firstChild;
            var i = 0;
            while(child){
                cs[i++] = child;
                child = child.nextSibling;
            }
            cs.length = i;
            delete cs[cs.length];
        }
    }
}
/**
 * Removes the connections between `parentNode` and `child`
 * and any existing `child.previousSibling` or `child.nextSibling`.
 *
 * @see https://github.com/xmldom/xmldom/issues/135
 * @see https://github.com/xmldom/xmldom/issues/145
 *
 * @param {Node} parentNode
 * @param {Node} child
 * @returns {Node} the child that was removed.
 * @private
 */ function _removeChild(parentNode, child) {
    var previous = child.previousSibling;
    var next = child.nextSibling;
    if (previous) previous.nextSibling = next;
    else parentNode.firstChild = next;
    if (next) next.previousSibling = previous;
    else parentNode.lastChild = previous;
    child.parentNode = null;
    child.previousSibling = null;
    child.nextSibling = null;
    _onUpdateChild(parentNode.ownerDocument, parentNode);
    return child;
}
/**
 * preformance key(refChild == null)
 */ function _insertBefore(parentNode, newChild, nextChild) {
    var cp = newChild.parentNode;
    if (cp) cp.removeChild(newChild); //remove and update
    if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
        var newFirst = newChild.firstChild;
        if (newFirst == null) return newChild;
        var newLast = newChild.lastChild;
    } else newFirst = newLast = newChild;
    var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;
    newFirst.previousSibling = pre;
    newLast.nextSibling = nextChild;
    if (pre) pre.nextSibling = newFirst;
    else parentNode.firstChild = newFirst;
    if (nextChild == null) parentNode.lastChild = newLast;
    else nextChild.previousSibling = newLast;
    do newFirst.parentNode = parentNode;
    while (newFirst !== newLast && (newFirst = newFirst.nextSibling))
    _onUpdateChild(parentNode.ownerDocument || parentNode, parentNode);
    //console.log(parentNode.lastChild.nextSibling == null)
    if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) newChild.firstChild = newChild.lastChild = null;
    return newChild;
}
/**
 * Appends `newChild` to `parentNode`.
 * If `newChild` is already connected to a `parentNode` it is first removed from it.
 *
 * @see https://github.com/xmldom/xmldom/issues/135
 * @see https://github.com/xmldom/xmldom/issues/145
 * @param {Node} parentNode
 * @param {Node} newChild
 * @returns {Node}
 * @private
 */ function _appendSingleChild(parentNode, newChild) {
    if (newChild.parentNode) newChild.parentNode.removeChild(newChild);
    newChild.parentNode = parentNode;
    newChild.previousSibling = parentNode.lastChild;
    newChild.nextSibling = null;
    if (newChild.previousSibling) newChild.previousSibling.nextSibling = newChild;
    else parentNode.firstChild = newChild;
    parentNode.lastChild = newChild;
    _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
    return newChild;
}
Document.prototype = {
    //implementation : null,
    nodeName: '#document',
    nodeType: DOCUMENT_NODE,
    /**
	 * The DocumentType node of the document.
	 *
	 * @readonly
	 * @type DocumentType
	 */ doctype: null,
    documentElement: null,
    _inc: 1,
    insertBefore: function(newChild, refChild) {
        if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
            var child = newChild.firstChild;
            while(child){
                var next = child.nextSibling;
                this.insertBefore(child, refChild);
                child = next;
            }
            return newChild;
        }
        if (this.documentElement == null && newChild.nodeType == ELEMENT_NODE) this.documentElement = newChild;
        return _insertBefore(this, newChild, refChild), newChild.ownerDocument = this, newChild;
    },
    removeChild: function(oldChild) {
        if (this.documentElement == oldChild) this.documentElement = null;
        return _removeChild(this, oldChild);
    },
    // Introduced in DOM Level 2:
    importNode: function(importedNode, deep) {
        return importNode(this, importedNode, deep);
    },
    // Introduced in DOM Level 2:
    getElementById: function(id) {
        var rtv = null;
        _visitNode(this.documentElement, function(node) {
            if (node.nodeType == ELEMENT_NODE) {
                if (node.getAttribute('id') == id) {
                    rtv = node;
                    return true;
                }
            }
        });
        return rtv;
    },
    /**
	 * The `getElementsByClassName` method of `Document` interface returns an array-like object
	 * of all child elements which have **all** of the given class name(s).
	 *
	 * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
	 *
	 *
	 * Warning: This is a live LiveNodeList.
	 * Changes in the DOM will reflect in the array as the changes occur.
	 * If an element selected by this array no longer qualifies for the selector,
	 * it will automatically be removed. Be aware of this for iteration purposes.
	 *
	 * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
	 * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
	 */ getElementsByClassName: function(classNames) {
        var classNamesSet = toOrderedSet(classNames);
        return new LiveNodeList(this, function(base) {
            var ls = [];
            if (classNamesSet.length > 0) _visitNode(base.documentElement, function(node) {
                if (node !== base && node.nodeType === ELEMENT_NODE) {
                    var nodeClassNames = node.getAttribute('class');
                    // can be null if the attribute does not exist
                    if (nodeClassNames) {
                        // before splitting and iterating just compare them for the most common case
                        var matches = classNames === nodeClassNames;
                        if (!matches) {
                            var nodeClassNamesSet = toOrderedSet(nodeClassNames);
                            matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));
                        }
                        if (matches) ls.push(node);
                    }
                }
            });
            return ls;
        });
    },
    //document factory method:
    createElement: function(tagName) {
        var node = new Element();
        node.ownerDocument = this;
        node.nodeName = tagName;
        node.tagName = tagName;
        node.localName = tagName;
        node.childNodes = new NodeList();
        var attrs = node.attributes = new NamedNodeMap();
        attrs._ownerElement = node;
        return node;
    },
    createDocumentFragment: function() {
        var node = new DocumentFragment();
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        return node;
    },
    createTextNode: function(data) {
        var node = new Text();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
    },
    createComment: function(data) {
        var node = new Comment();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
    },
    createCDATASection: function(data) {
        var node = new CDATASection();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
    },
    createProcessingInstruction: function(target, data) {
        var node = new ProcessingInstruction();
        node.ownerDocument = this;
        node.tagName = node.target = target;
        node.nodeValue = node.data = data;
        return node;
    },
    createAttribute: function(name) {
        var node = new Attr();
        node.ownerDocument = this;
        node.name = name;
        node.nodeName = name;
        node.localName = name;
        node.specified = true;
        return node;
    },
    createEntityReference: function(name) {
        var node = new EntityReference();
        node.ownerDocument = this;
        node.nodeName = name;
        return node;
    },
    // Introduced in DOM Level 2:
    createElementNS: function(namespaceURI, qualifiedName) {
        var node = new Element();
        var pl = qualifiedName.split(':');
        var attrs = node.attributes = new NamedNodeMap();
        node.childNodes = new NodeList();
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.tagName = qualifiedName;
        node.namespaceURI = namespaceURI;
        if (pl.length == 2) {
            node.prefix = pl[0];
            node.localName = pl[1];
        } else //el.prefix = null;
        node.localName = qualifiedName;
        attrs._ownerElement = node;
        return node;
    },
    // Introduced in DOM Level 2:
    createAttributeNS: function(namespaceURI, qualifiedName) {
        var node = new Attr();
        var pl = qualifiedName.split(':');
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.name = qualifiedName;
        node.namespaceURI = namespaceURI;
        node.specified = true;
        if (pl.length == 2) {
            node.prefix = pl[0];
            node.localName = pl[1];
        } else //el.prefix = null;
        node.localName = qualifiedName;
        return node;
    }
};
_extends(Document, Node);
function Element() {
    this._nsMap = {
    };
}
Element.prototype = {
    nodeType: ELEMENT_NODE,
    hasAttribute: function(name) {
        return this.getAttributeNode(name) != null;
    },
    getAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        return attr && attr.value || '';
    },
    getAttributeNode: function(name) {
        return this.attributes.getNamedItem(name);
    },
    setAttribute: function(name, value) {
        var attr = this.ownerDocument.createAttribute(name);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
    },
    removeAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        attr && this.removeAttributeNode(attr);
    },
    //four real opeartion method
    appendChild: function(newChild) {
        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) return this.insertBefore(newChild, null);
        else return _appendSingleChild(this, newChild);
    },
    setAttributeNode: function(newAttr) {
        return this.attributes.setNamedItem(newAttr);
    },
    setAttributeNodeNS: function(newAttr) {
        return this.attributes.setNamedItemNS(newAttr);
    },
    removeAttributeNode: function(oldAttr) {
        //console.log(this == oldAttr.ownerElement)
        return this.attributes.removeNamedItem(oldAttr.nodeName);
    },
    //get real attribute name,and remove it by removeAttributeNode
    removeAttributeNS: function(namespaceURI, localName) {
        var old = this.getAttributeNodeNS(namespaceURI, localName);
        old && this.removeAttributeNode(old);
    },
    hasAttributeNS: function(namespaceURI, localName) {
        return this.getAttributeNodeNS(namespaceURI, localName) != null;
    },
    getAttributeNS: function(namespaceURI, localName) {
        var attr = this.getAttributeNodeNS(namespaceURI, localName);
        return attr && attr.value || '';
    },
    setAttributeNS: function(namespaceURI, qualifiedName, value) {
        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
    },
    getAttributeNodeNS: function(namespaceURI, localName) {
        return this.attributes.getNamedItemNS(namespaceURI, localName);
    },
    getElementsByTagName: function(tagName) {
        return new LiveNodeList(this, function(base) {
            var ls = [];
            _visitNode(base, function(node) {
                if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)) ls.push(node);
            });
            return ls;
        });
    },
    getElementsByTagNameNS: function(namespaceURI, localName) {
        return new LiveNodeList(this, function(base) {
            var ls = [];
            _visitNode(base, function(node) {
                if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)) ls.push(node);
            });
            return ls;
        });
    }
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;
_extends(Element, Node);
function Attr() {
}
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr, Node);
function CharacterData() {
}
CharacterData.prototype = {
    data: '',
    substringData: function(offset, count) {
        return this.data.substring(offset, offset + count);
    },
    appendData: function(text) {
        text = this.data + text;
        this.nodeValue = this.data = text;
        this.length = text.length;
    },
    insertData: function(offset, text) {
        this.replaceData(offset, 0, text);
    },
    appendChild: function(newChild) {
        throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);
    },
    deleteData: function(offset, count) {
        this.replaceData(offset, count, "");
    },
    replaceData: function(offset, count, text) {
        var start = this.data.substring(0, offset);
        var end = this.data.substring(offset + count);
        text = start + text + end;
        this.nodeValue = this.data = text;
        this.length = text.length;
    }
};
_extends(CharacterData, Node);
function Text() {
}
Text.prototype = {
    nodeName: "#text",
    nodeType: TEXT_NODE,
    splitText: function(offset) {
        var text = this.data;
        var newText = text.substring(offset);
        text = text.substring(0, offset);
        this.data = this.nodeValue = text;
        this.length = text.length;
        var newNode = this.ownerDocument.createTextNode(newText);
        if (this.parentNode) this.parentNode.insertBefore(newNode, this.nextSibling);
        return newNode;
    }
};
_extends(Text, CharacterData);
function Comment() {
}
Comment.prototype = {
    nodeName: "#comment",
    nodeType: COMMENT_NODE
};
_extends(Comment, CharacterData);
function CDATASection() {
}
CDATASection.prototype = {
    nodeName: "#cdata-section",
    nodeType: CDATA_SECTION_NODE
};
_extends(CDATASection, CharacterData);
function DocumentType() {
}
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType, Node);
function Notation() {
}
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation, Node);
function Entity() {
}
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity, Node);
function EntityReference() {
}
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference, Node);
function DocumentFragment() {
}
DocumentFragment.prototype.nodeName = "#document-fragment";
DocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment, Node);
function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction, Node);
function XMLSerializer() {
}
XMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {
    return nodeSerializeToString.call(node, isHtml, nodeFilter);
};
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml, nodeFilter) {
    var buf = [];
    var refNode = this.nodeType == 9 && this.documentElement || this;
    var prefix = refNode.prefix;
    var uri = refNode.namespaceURI;
    if (uri && prefix == null) {
        //console.log(prefix)
        var prefix = refNode.lookupPrefix(uri);
        if (prefix == null) //isHTML = true;
        var visibleNamespaces = [
            {
                namespace: uri,
                prefix: null
            }
        ];
    }
    serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);
    //console.log('###',this.nodeType,uri,prefix,buf.join(''))
    return buf.join('');
}
function needNamespaceDefine(node, isHTML, visibleNamespaces) {
    var prefix = node.prefix || '';
    var uri = node.namespaceURI;
    // According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,
    // and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :
    // > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.
    // in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)
    // and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :
    // > [...] Furthermore, the attribute value [...] must not be an empty string.
    // so serializing empty namespace value like xmlns:ds="" would produce an invalid XML document.
    if (!uri) return false;
    if (prefix === "xml" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) return false;
    var i = visibleNamespaces.length;
    while(i--){
        var ns = visibleNamespaces[i];
        // get namespace prefix
        if (ns.prefix === prefix) return ns.namespace !== uri;
    }
    return true;
}
/**
 * Well-formed constraint: No < in Attribute Values
 * > The replacement text of any entity referred to directly or indirectly
 * > in an attribute value must not contain a <.
 * @see https://www.w3.org/TR/xml11/#CleanAttrVals
 * @see https://www.w3.org/TR/xml11/#NT-AttValue
 *
 * Literal whitespace other than space that appear in attribute values
 * are serialized as their entity references, so they will be preserved.
 * (In contrast to whitespace literals in the input which are normalized to spaces)
 * @see https://www.w3.org/TR/xml11/#AVNormalize
 * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes
 */ function addSerializedAttribute(buf, qualifiedName, value) {
    buf.push(' ', qualifiedName, '="', value.replace(/[<>&"\t\n\r]/g, _xmlEncoder), '"');
}
function serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {
    if (!visibleNamespaces) visibleNamespaces = [];
    if (nodeFilter) {
        node = nodeFilter(node);
        if (node) {
            if (typeof node == 'string') {
                buf.push(node);
                return;
            }
        } else return;
    //buf.sort.apply(attrs, attributeSorter);
    }
    switch(node.nodeType){
        case ELEMENT_NODE:
            var attrs = node.attributes;
            var len = attrs.length;
            var child = node.firstChild;
            var nodeName = node.tagName;
            isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML;
            var prefixedNodeName = nodeName;
            if (!isHTML && !node.prefix && node.namespaceURI) {
                var defaultNS;
                // lookup current default ns from `xmlns` attribute
                for(var ai = 0; ai < attrs.length; ai++)if (attrs.item(ai).name === 'xmlns') {
                    defaultNS = attrs.item(ai).value;
                    break;
                }
                if (!defaultNS) // lookup current default ns in visibleNamespaces
                for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){
                    var namespace = visibleNamespaces[nsi];
                    if (namespace.prefix === '' && namespace.namespace === node.namespaceURI) {
                        defaultNS = namespace.namespace;
                        break;
                    }
                }
                if (defaultNS !== node.namespaceURI) for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){
                    var namespace = visibleNamespaces[nsi];
                    if (namespace.namespace === node.namespaceURI) {
                        if (namespace.prefix) prefixedNodeName = namespace.prefix + ':' + nodeName;
                        break;
                    }
                }
            }
            buf.push('<', prefixedNodeName);
            for(var i = 0; i < len; i++){
                // add namespaces for attributes
                var attr = attrs.item(i);
                if (attr.prefix == 'xmlns') visibleNamespaces.push({
                    prefix: attr.localName,
                    namespace: attr.value
                });
                else if (attr.nodeName == 'xmlns') visibleNamespaces.push({
                    prefix: '',
                    namespace: attr.value
                });
            }
            for(var i = 0; i < len; i++){
                var attr = attrs.item(i);
                if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {
                    var prefix = attr.prefix || '';
                    var uri = attr.namespaceURI;
                    addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
                    visibleNamespaces.push({
                        prefix: prefix,
                        namespace: uri
                    });
                }
                serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);
            }
            // add namespace for current node		
            if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
                var prefix = node.prefix || '';
                var uri = node.namespaceURI;
                addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
                visibleNamespaces.push({
                    prefix: prefix,
                    namespace: uri
                });
            }
            if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {
                buf.push('>');
                //if is cdata child node
                if (isHTML && /^script$/i.test(nodeName)) while(child){
                    if (child.data) buf.push(child.data);
                    else serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                    child = child.nextSibling;
                }
                else while(child){
                    serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                    child = child.nextSibling;
                }
                buf.push('</', prefixedNodeName, '>');
            } else buf.push('/>');
            // remove added visible namespaces
            //visibleNamespaces.length = startVisibleNamespaces;
            return;
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
            var child = node.firstChild;
            while(child){
                serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                child = child.nextSibling;
            }
            return;
        case ATTRIBUTE_NODE:
            return addSerializedAttribute(buf, node.name, node.value);
        case TEXT_NODE:
            /**
		 * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,
		 * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
		 * If they are needed elsewhere, they must be escaped using either numeric character references or the strings
		 * `&amp;` and `&lt;` respectively.
		 * The right angle bracket (>) may be represented using the string " &gt; ", and must, for compatibility,
		 * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,
		 * when that string is not marking the end of a CDATA section.
		 *
		 * In the content of elements, character data is any string of characters
		 * which does not contain the start-delimiter of any markup
		 * and does not include the CDATA-section-close delimiter, `]]>`.
		 *
		 * @see https://www.w3.org/TR/xml/#NT-CharData
		 * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node
		 */ return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));
        case CDATA_SECTION_NODE:
            return buf.push('<![CDATA[', node.data, ']]>');
        case COMMENT_NODE:
            return buf.push("<!--", node.data, "-->");
        case DOCUMENT_TYPE_NODE:
            var pubid = node.publicId;
            var sysid = node.systemId;
            buf.push('<!DOCTYPE ', node.name);
            if (pubid) {
                buf.push(' PUBLIC ', pubid);
                if (sysid && sysid != '.') buf.push(' ', sysid);
                buf.push('>');
            } else if (sysid && sysid != '.') buf.push(' SYSTEM ', sysid, '>');
            else {
                var sub = node.internalSubset;
                if (sub) buf.push(" [", sub, "]");
                buf.push(">");
            }
            return;
        case PROCESSING_INSTRUCTION_NODE:
            return buf.push("<?", node.target, " ", node.data, "?>");
        case ENTITY_REFERENCE_NODE:
            return buf.push('&', node.nodeName, ';');
        //case ENTITY_NODE:
        //case NOTATION_NODE:
        default:
            buf.push('??', node.nodeName);
    }
}
function importNode(doc, node, deep) {
    var node2;
    switch(node.nodeType){
        case ELEMENT_NODE:
            node2 = node.cloneNode(false);
            node2.ownerDocument = doc;
        //var attrs = node2.attributes;
        //var len = attrs.length;
        //for(var i=0;i<len;i++){
        //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
        //}
        case DOCUMENT_FRAGMENT_NODE:
            break;
        case ATTRIBUTE_NODE:
            deep = true;
            break;
    }
    if (!node2) node2 = node.cloneNode(false); //false
    node2.ownerDocument = doc;
    node2.parentNode = null;
    if (deep) {
        var child = node.firstChild;
        while(child){
            node2.appendChild(importNode(doc, child, deep));
            child = child.nextSibling;
        }
    }
    return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc, node, deep) {
    var node2 = new node.constructor();
    for(var n in node){
        var v = node[n];
        if (typeof v != 'object') {
            if (v != node2[n]) node2[n] = v;
        }
    }
    if (node.childNodes) node2.childNodes = new NodeList();
    node2.ownerDocument = doc;
    switch(node2.nodeType){
        case ELEMENT_NODE:
            var attrs = node.attributes;
            var attrs2 = node2.attributes = new NamedNodeMap();
            var len = attrs.length;
            attrs2._ownerElement = node2;
            for(var i = 0; i < len; i++)node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));
            break;
        case ATTRIBUTE_NODE:
            deep = true;
    }
    if (deep) {
        var child = node.firstChild;
        while(child){
            node2.appendChild(cloneNode(doc, child, deep));
            child = child.nextSibling;
        }
    }
    return node2;
}
function __set__(object, key, value) {
    object[key] = value;
}
//do dynamic
try {
    if (Object.defineProperty) {
        Object.defineProperty(LiveNodeList.prototype, 'length', {
            get: function() {
                _updateLiveList(this);
                return this.$$length;
            }
        });
        Object.defineProperty(Node.prototype, 'textContent', {
            get: function() {
                return getTextContent(this);
            },
            set: function(data) {
                switch(this.nodeType){
                    case ELEMENT_NODE:
                    case DOCUMENT_FRAGMENT_NODE:
                        while(this.firstChild)this.removeChild(this.firstChild);
                        if (data || String(data)) this.appendChild(this.ownerDocument.createTextNode(data));
                        break;
                    default:
                        this.data = data;
                        this.value = data;
                        this.nodeValue = data;
                }
            }
        });
        function getTextContent(node) {
            switch(node.nodeType){
                case ELEMENT_NODE:
                case DOCUMENT_FRAGMENT_NODE:
                    var buf = [];
                    node = node.firstChild;
                    while(node){
                        if (node.nodeType !== 7 && node.nodeType !== 8) buf.push(getTextContent(node));
                        node = node.nextSibling;
                    }
                    return buf.join('');
                default:
                    return node.nodeValue;
            }
        }
        __set__ = function(object, key, value) {
            //console.log(value)
            object['$$' + key] = value;
        };
    }
} catch (e) {
}
//if(typeof require == 'function'){
exports.DocumentType = DocumentType;
exports.DOMException = DOMException;
exports.DOMImplementation = DOMImplementation;
exports.Element = Element;
exports.Node = Node;
exports.NodeList = NodeList;
exports.XMLSerializer = XMLSerializer; //}

},{"./conventions":"hb2CV"}],"hb2CV":[function(require,module,exports) {
'use strict';
/**
 * "Shallow freezes" an object to render it immutable.
 * Uses `Object.freeze` if available,
 * otherwise the immutability is only in the type.
 *
 * Is used to create "enum like" objects.
 *
 * @template T
 * @param {T} object the object to freeze
 * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,
 * 				allows to inject custom object constructor for tests
 * @returns {Readonly<T>}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
 */ function freeze(object, oc) {
    if (oc === undefined) oc = Object;
    return oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object;
}
/**
 * Since we can not rely on `Object.assign` we provide a simplified version
 * that is sufficient for our needs.
 *
 * @param {Object} target
 * @param {Object | null | undefined} source
 *
 * @returns {Object} target
 * @throws TypeError if target is not an object
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign
 */ function assign(target, source) {
    if (target === null || typeof target !== 'object') throw new TypeError('target is not an object');
    for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
    return target;
}
/**
 * All mime types that are allowed as input to `DOMParser.parseFromString`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec
 * @see DOMParser.prototype.parseFromString
 */ var MIME_TYPE = freeze({
    /**
	 * `text/html`, the only mime type that triggers treating an XML document as HTML.
	 *
	 * @see DOMParser.SupportedType.isHTML
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
	 */ HTML: 'text/html',
    /**
	 * Helper method to check a mime type if it indicates an HTML document
	 *
	 * @param {string} [value]
	 * @returns {boolean}
	 *
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */ isHTML: function(value) {
        return value === MIME_TYPE.HTML;
    },
    /**
	 * `application/xml`, the standard mime type for XML documents.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
	 * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */ XML_APPLICATION: 'application/xml',
    /**
	 * `text/html`, an alias for `application/xml`.
	 *
	 * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
	 * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */ XML_TEXT: 'text/xml',
    /**
	 * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
	 * but is parsed as an XML document.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
	 * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
	 */ XML_XHTML_APPLICATION: 'application/xhtml+xml',
    /**
	 * `image/svg+xml`,
	 *
	 * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
	 * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
	 * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
	 */ XML_SVG_IMAGE: 'image/svg+xml'
});
/**
 * Namespaces that are used in this code base.
 *
 * @see http://www.w3.org/TR/REC-xml-names
 */ var NAMESPACE = freeze({
    /**
	 * The XHTML namespace.
	 *
	 * @see http://www.w3.org/1999/xhtml
	 */ HTML: 'http://www.w3.org/1999/xhtml',
    /**
	 * Checks if `uri` equals `NAMESPACE.HTML`.
	 *
	 * @param {string} [uri]
	 *
	 * @see NAMESPACE.HTML
	 */ isHTML: function(uri) {
        return uri === NAMESPACE.HTML;
    },
    /**
	 * The SVG namespace.
	 *
	 * @see http://www.w3.org/2000/svg
	 */ SVG: 'http://www.w3.org/2000/svg',
    /**
	 * The `xml:` namespace.
	 *
	 * @see http://www.w3.org/XML/1998/namespace
	 */ XML: 'http://www.w3.org/XML/1998/namespace',
    /**
	 * The `xmlns:` namespace
	 *
	 * @see https://www.w3.org/2000/xmlns/
	 */ XMLNS: 'http://www.w3.org/2000/xmlns/'
});
exports.assign = assign;
exports.freeze = freeze;
exports.MIME_TYPE = MIME_TYPE;
exports.NAMESPACE = NAMESPACE;

},{}],"ec9jr":[function(require,module,exports) {
var conventions = require("./conventions");
var dom = require('./dom');
var entities = require('./entities');
var sax = require('./sax');
var DOMImplementation = dom.DOMImplementation;
var NAMESPACE = conventions.NAMESPACE;
var ParseError = sax.ParseError;
var XMLReader = sax.XMLReader;
/**
 * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:
 *
 * > XML parsed entities are often stored in computer files which,
 * > for editing convenience, are organized into lines.
 * > These lines are typically separated by some combination
 * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).
 * >
 * > To simplify the tasks of applications, the XML processor must behave
 * > as if it normalized all line breaks in external parsed entities (including the document entity)
 * > on input, before parsing, by translating all of the following to a single #xA character:
 * >
 * > 1. the two-character sequence #xD #xA
 * > 2. the two-character sequence #xD #x85
 * > 3. the single character #x85
 * > 4. the single character #x2028
 * > 5. any #xD character that is not immediately followed by #xA or #x85.
 *
 * @param {string} input
 * @returns {string}
 */ function normalizeLineEndings(input) {
    return input.replace(/\r[\n\u0085]/g, '\n').replace(/[\r\u0085\u2028]/g, '\n');
}
/**
 * @typedef Locator
 * @property {number} [columnNumber]
 * @property {number} [lineNumber]
 */ /**
 * @typedef DOMParserOptions
 * @property {DOMHandler} [domBuilder]
 * @property {Function} [errorHandler]
 * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing
 * 						defaults to `normalizeLineEndings`
 * @property {Locator} [locator]
 * @property {Record<string, string>} [xmlns]
 *
 * @see normalizeLineEndings
 */ /**
 * The DOMParser interface provides the ability to parse XML or HTML source code
 * from a string into a DOM `Document`.
 *
 * _xmldom is different from the spec in that it allows an `options` parameter,
 * to override the default behavior._
 *
 * @param {DOMParserOptions} [options]
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization
 */ function DOMParser(options) {
    this.options = options || {
        locator: {
        }
    };
}
DOMParser.prototype.parseFromString = function(source, mimeType) {
    var options = this.options;
    var sax1 = new XMLReader();
    var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler
    var errorHandler = options.errorHandler;
    var locator = options.locator;
    var defaultNSMap = options.xmlns || {
    };
    var isHTML = /\/x?html?$/.test(mimeType); //mimeType.toLowerCase().indexOf('html') > -1;
    var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;
    if (locator) domBuilder.setDocumentLocator(locator);
    sax1.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);
    sax1.domBuilder = options.domBuilder || domBuilder;
    if (isHTML) defaultNSMap[''] = NAMESPACE.HTML;
    defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
    var normalize = options.normalizeLineEndings || normalizeLineEndings;
    if (source && typeof source === 'string') sax1.parse(normalize(source), defaultNSMap, entityMap);
    else sax1.errorHandler.error('invalid doc source');
    return domBuilder.doc;
};
function buildErrorHandler(errorImpl, domBuilder, locator) {
    if (!errorImpl) {
        if (domBuilder instanceof DOMHandler) return domBuilder;
        errorImpl = domBuilder;
    }
    var errorHandler = {
    };
    var isCallback = errorImpl instanceof Function;
    locator = locator || {
    };
    function build(key) {
        var fn = errorImpl[key];
        if (!fn && isCallback) fn = errorImpl.length == 2 ? function(msg) {
            errorImpl(key, msg);
        } : errorImpl;
        errorHandler[key] = fn && function(msg) {
            fn('[xmldom ' + key + ']\t' + msg + _locator(locator));
        } || function() {
        };
    }
    build('warning');
    build('error');
    build('fatalError');
    return errorHandler;
}
//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler
 *
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */ function DOMHandler() {
    this.cdata = false;
}
function position(locator, node) {
    node.lineNumber = locator.lineNumber;
    node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */ DOMHandler.prototype = {
    startDocument: function() {
        this.doc = new DOMImplementation().createDocument(null, null, null);
        if (this.locator) this.doc.documentURI = this.locator.systemId;
    },
    startElement: function(namespaceURI, localName, qName, attrs) {
        var doc = this.doc;
        var el = doc.createElementNS(namespaceURI, qName || localName);
        var len = attrs.length;
        appendElement(this, el);
        this.currentElement = el;
        this.locator && position(this.locator, el);
        for(var i = 0; i < len; i++){
            var namespaceURI = attrs.getURI(i);
            var value = attrs.getValue(i);
            var qName = attrs.getQName(i);
            var attr = doc.createAttributeNS(namespaceURI, qName);
            this.locator && position(attrs.getLocator(i), attr);
            attr.value = attr.nodeValue = value;
            el.setAttributeNode(attr);
        }
    },
    endElement: function(namespaceURI, localName, qName) {
        var current = this.currentElement;
        var tagName = current.tagName;
        this.currentElement = current.parentNode;
    },
    startPrefixMapping: function(prefix, uri) {
    },
    endPrefixMapping: function(prefix) {
    },
    processingInstruction: function(target, data) {
        var ins = this.doc.createProcessingInstruction(target, data);
        this.locator && position(this.locator, ins);
        appendElement(this, ins);
    },
    ignorableWhitespace: function(ch, start, length) {
    },
    characters: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        //console.log(chars)
        if (chars) {
            if (this.cdata) var charNode = this.doc.createCDATASection(chars);
            else var charNode = this.doc.createTextNode(chars);
            if (this.currentElement) this.currentElement.appendChild(charNode);
            else if (/^\s*$/.test(chars)) this.doc.appendChild(charNode);
            this.locator && position(this.locator, charNode);
        }
    },
    skippedEntity: function(name) {
    },
    endDocument: function() {
        this.doc.normalize();
    },
    setDocumentLocator: function(locator) {
        if (this.locator = locator) locator.lineNumber = 0;
    },
    //LexicalHandler
    comment: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        var comm = this.doc.createComment(chars);
        this.locator && position(this.locator, comm);
        appendElement(this, comm);
    },
    startCDATA: function() {
        //used in characters() methods
        this.cdata = true;
    },
    endCDATA: function() {
        this.cdata = false;
    },
    startDTD: function(name, publicId, systemId) {
        var impl = this.doc.implementation;
        if (impl && impl.createDocumentType) {
            var dt = impl.createDocumentType(name, publicId, systemId);
            this.locator && position(this.locator, dt);
            appendElement(this, dt);
            this.doc.doctype = dt;
        }
    },
    /**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */ warning: function(error) {
        console.warn('[xmldom warning]\t' + error, _locator(this.locator));
    },
    error: function(error) {
        console.error('[xmldom error]\t' + error, _locator(this.locator));
    },
    fatalError: function(error) {
        throw new ParseError(error, this.locator);
    }
};
function _locator(l) {
    if (l) return '\n@' + (l.systemId || '') + '#[line:' + l.lineNumber + ',col:' + l.columnNumber + ']';
}
function _toString(chars, start, length) {
    if (typeof chars == 'string') return chars.substr(start, length);
    else {
        if (chars.length >= start + length || start) return new java.lang.String(chars, start, length) + '';
        return chars;
    }
}
/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */ "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function(key) {
    DOMHandler.prototype[key] = function() {
        return null;
    };
});
/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */ function appendElement(hander, node) {
    if (!hander.currentElement) hander.doc.appendChild(node);
    else hander.currentElement.appendChild(node);
} //appendChild and setAttributeNS are preformance key
exports.__DOMHandler = DOMHandler;
exports.normalizeLineEndings = normalizeLineEndings;
exports.DOMParser = DOMParser;

},{"./conventions":"hb2CV","./dom":"dpcBR","./entities":"johZl","./sax":"kMQFS"}],"johZl":[function(require,module,exports) {
var freeze = require('./conventions').freeze;
/**
 * The entities that are predefined in every XML document.
 *
 * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1
 * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia
 */ exports.XML_ENTITIES = freeze({
    amp: '&',
    apos: "'",
    gt: '>',
    lt: '<',
    quot: '"'
});
/**
 * A map of currently 241 entities that are detected in an HTML document.
 * They contain all entries from `XML_ENTITIES`.
 *
 * @see XML_ENTITIES
 * @see DOMParser.parseFromString
 * @see DOMImplementation.prototype.createHTMLDocument
 * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec
 * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names
 * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)
 */ exports.HTML_ENTITIES = freeze({
    lt: '<',
    gt: '>',
    amp: '&',
    quot: '"',
    apos: "'",
    Agrave: "À",
    Aacute: "Á",
    Acirc: "Â",
    Atilde: "Ã",
    Auml: "Ä",
    Aring: "Å",
    AElig: "Æ",
    Ccedil: "Ç",
    Egrave: "È",
    Eacute: "É",
    Ecirc: "Ê",
    Euml: "Ë",
    Igrave: "Ì",
    Iacute: "Í",
    Icirc: "Î",
    Iuml: "Ï",
    ETH: "Ð",
    Ntilde: "Ñ",
    Ograve: "Ò",
    Oacute: "Ó",
    Ocirc: "Ô",
    Otilde: "Õ",
    Ouml: "Ö",
    Oslash: "Ø",
    Ugrave: "Ù",
    Uacute: "Ú",
    Ucirc: "Û",
    Uuml: "Ü",
    Yacute: "Ý",
    THORN: "Þ",
    szlig: "ß",
    agrave: "à",
    aacute: "á",
    acirc: "â",
    atilde: "ã",
    auml: "ä",
    aring: "å",
    aelig: "æ",
    ccedil: "ç",
    egrave: "è",
    eacute: "é",
    ecirc: "ê",
    euml: "ë",
    igrave: "ì",
    iacute: "í",
    icirc: "î",
    iuml: "ï",
    eth: "ð",
    ntilde: "ñ",
    ograve: "ò",
    oacute: "ó",
    ocirc: "ô",
    otilde: "õ",
    ouml: "ö",
    oslash: "ø",
    ugrave: "ù",
    uacute: "ú",
    ucirc: "û",
    uuml: "ü",
    yacute: "ý",
    thorn: "þ",
    yuml: "ÿ",
    nbsp: "\u00a0",
    iexcl: "¡",
    cent: "¢",
    pound: "£",
    curren: "¤",
    yen: "¥",
    brvbar: "¦",
    sect: "§",
    uml: "¨",
    copy: "©",
    ordf: "ª",
    laquo: "«",
    not: "¬",
    shy: "­­",
    reg: "®",
    macr: "¯",
    deg: "°",
    plusmn: "±",
    sup2: "²",
    sup3: "³",
    acute: "´",
    micro: "µ",
    para: "¶",
    middot: "·",
    cedil: "¸",
    sup1: "¹",
    ordm: "º",
    raquo: "»",
    frac14: "¼",
    frac12: "½",
    frac34: "¾",
    iquest: "¿",
    times: "×",
    divide: "÷",
    forall: "∀",
    part: "∂",
    exist: "∃",
    empty: "∅",
    nabla: "∇",
    isin: "∈",
    notin: "∉",
    ni: "∋",
    prod: "∏",
    sum: "∑",
    minus: "−",
    lowast: "∗",
    radic: "√",
    prop: "∝",
    infin: "∞",
    ang: "∠",
    and: "∧",
    or: "∨",
    cap: "∩",
    cup: "∪",
    'int': "∫",
    there4: "∴",
    sim: "∼",
    cong: "≅",
    asymp: "≈",
    ne: "≠",
    equiv: "≡",
    le: "≤",
    ge: "≥",
    sub: "⊂",
    sup: "⊃",
    nsub: "⊄",
    sube: "⊆",
    supe: "⊇",
    oplus: "⊕",
    otimes: "⊗",
    perp: "⊥",
    sdot: "⋅",
    Alpha: "Α",
    Beta: "Β",
    Gamma: "Γ",
    Delta: "Δ",
    Epsilon: "Ε",
    Zeta: "Ζ",
    Eta: "Η",
    Theta: "Θ",
    Iota: "Ι",
    Kappa: "Κ",
    Lambda: "Λ",
    Mu: "Μ",
    Nu: "Ν",
    Xi: "Ξ",
    Omicron: "Ο",
    Pi: "Π",
    Rho: "Ρ",
    Sigma: "Σ",
    Tau: "Τ",
    Upsilon: "Υ",
    Phi: "Φ",
    Chi: "Χ",
    Psi: "Ψ",
    Omega: "Ω",
    alpha: "α",
    beta: "β",
    gamma: "γ",
    delta: "δ",
    epsilon: "ε",
    zeta: "ζ",
    eta: "η",
    theta: "θ",
    iota: "ι",
    kappa: "κ",
    lambda: "λ",
    mu: "μ",
    nu: "ν",
    xi: "ξ",
    omicron: "ο",
    pi: "π",
    rho: "ρ",
    sigmaf: "ς",
    sigma: "σ",
    tau: "τ",
    upsilon: "υ",
    phi: "φ",
    chi: "χ",
    psi: "ψ",
    omega: "ω",
    thetasym: "ϑ",
    upsih: "ϒ",
    piv: "ϖ",
    OElig: "Œ",
    oelig: "œ",
    Scaron: "Š",
    scaron: "š",
    Yuml: "Ÿ",
    fnof: "ƒ",
    circ: "ˆ",
    tilde: "˜",
    ensp: " ",
    emsp: " ",
    thinsp: " ",
    zwnj: "‌",
    zwj: "‍",
    lrm: "‎",
    rlm: "‏",
    ndash: "–",
    mdash: "—",
    lsquo: "‘",
    rsquo: "’",
    sbquo: "‚",
    ldquo: "“",
    rdquo: "”",
    bdquo: "„",
    dagger: "†",
    Dagger: "‡",
    bull: "•",
    hellip: "…",
    permil: "‰",
    prime: "′",
    Prime: "″",
    lsaquo: "‹",
    rsaquo: "›",
    oline: "‾",
    euro: "€",
    trade: "™",
    larr: "←",
    uarr: "↑",
    rarr: "→",
    darr: "↓",
    harr: "↔",
    crarr: "↵",
    lceil: "⌈",
    rceil: "⌉",
    lfloor: "⌊",
    rfloor: "⌋",
    loz: "◊",
    spades: "♠",
    clubs: "♣",
    hearts: "♥",
    diams: "♦"
});
/**
 * @deprecated use `HTML_ENTITIES` instead
 * @see HTML_ENTITIES
 */ exports.entityMap = exports.HTML_ENTITIES;

},{"./conventions":"hb2CV"}],"kMQFS":[function(require,module,exports) {
var NAMESPACE = require("./conventions").NAMESPACE;
//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/ //\u10000-\uEFFFF
;
var nameChar = new RegExp("[\\-\\.0-9" + nameStartChar.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^' + nameStartChar.source + nameChar.source + '*(?:\:' + nameStartChar.source + nameChar.source + '*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0; //tag name offerring
var S_ATTR = 1; //attr name offerring
var S_ATTR_SPACE = 2; //attr name end and space offer
var S_EQ = 3; //=space?
var S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)
var S_ATTR_END = 5; //attr value end and no space(quot end)
var S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7; //closed el<el />
/**
 * Creates an error that will not be caught by XMLReader aka the SAX parser.
 *
 * @param {string} message
 * @param {any?} locator Optional, can provide details about the location in the source
 * @constructor
 */ function ParseError(message, locator) {
    this.message = message;
    this.locator = locator;
    if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError);
}
ParseError.prototype = new Error();
ParseError.prototype.name = ParseError.name;
function XMLReader() {
}
XMLReader.prototype = {
    parse: function(source, defaultNSMap, entityMap) {
        var domBuilder = this.domBuilder;
        domBuilder.startDocument();
        _copy(defaultNSMap, defaultNSMap = {
        });
        parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);
        domBuilder.endDocument();
    }
};
function parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {
    function fixedFromCharCode(code) {
        // String.prototype.fromCharCode does not supports
        // > 2 bytes unicode chars directly
        if (code > 65535) {
            code -= 65536;
            var surrogate1 = 55296 + (code >> 10), surrogate2 = 56320 + (code & 1023);
            return String.fromCharCode(surrogate1, surrogate2);
        } else return String.fromCharCode(code);
    }
    function entityReplacer(a) {
        var k = a.slice(1, -1);
        if (Object.hasOwnProperty.call(entityMap, k)) return entityMap[k];
        else if (k.charAt(0) === '#') return fixedFromCharCode(parseInt(k.substr(1).replace('x', '0x')));
        else {
            errorHandler.error('entity not found:' + a);
            return a;
        }
    }
    function appendText(end) {
        if (end > start) {
            var xt = source.substring(start, end).replace(/&#?\w+;/g, entityReplacer);
            locator && position(start);
            domBuilder.characters(xt, 0, end - start);
            start = end;
        }
    }
    function position(p, m) {
        while(p >= lineEnd && (m = linePattern.exec(source))){
            lineStart = m.index;
            lineEnd = lineStart + m[0].length;
            locator.lineNumber++;
        //console.log('line++:',locator,startPos,endPos)
        }
        locator.columnNumber = p - lineStart + 1;
    }
    var lineStart = 0;
    var lineEnd = 0;
    var linePattern = /.*(?:\r\n?|\n)|.*$/g;
    var locator = domBuilder.locator;
    var parseStack = [
        {
            currentNSMap: defaultNSMapCopy
        }
    ];
    var closeMap = {
    };
    var start = 0;
    while(true){
        try {
            var tagStart = source.indexOf('<', start);
            if (tagStart < 0) {
                if (!source.substr(start).match(/^\s*$/)) {
                    var doc = domBuilder.doc;
                    var text = doc.createTextNode(source.substr(start));
                    doc.appendChild(text);
                    domBuilder.currentElement = text;
                }
                return;
            }
            if (tagStart > start) appendText(tagStart);
            switch(source.charAt(tagStart + 1)){
                case '/':
                    var end1 = source.indexOf('>', tagStart + 3);
                    var tagName = source.substring(tagStart + 2, end1).replace(/[ \t\n\r]+$/g, '');
                    var config = parseStack.pop();
                    if (end1 < 0) {
                        tagName = source.substring(tagStart + 2).replace(/[\s<].*/, '');
                        errorHandler.error("end tag name: " + tagName + ' is not complete:' + config.tagName);
                        end1 = tagStart + 1 + tagName.length;
                    } else if (tagName.match(/\s</)) {
                        tagName = tagName.replace(/[\s<].*/, '');
                        errorHandler.error("end tag name: " + tagName + ' maybe not complete');
                        end1 = tagStart + 1 + tagName.length;
                    }
                    var localNSMap = config.localNSMap;
                    var endMatch = config.tagName == tagName;
                    var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();
                    if (endIgnoreCaseMach) {
                        domBuilder.endElement(config.uri, config.localName, tagName);
                        if (localNSMap) for(var prefix in localNSMap)domBuilder.endPrefixMapping(prefix);
                        if (!endMatch) errorHandler.fatalError("end tag name: " + tagName + ' is not match the current start tagName:' + config.tagName); // No known test case
                    } else parseStack.push(config);
                    end1++;
                    break;
                // end elment
                case '?':
                    locator && position(tagStart);
                    end1 = parseInstruction(source, tagStart, domBuilder);
                    break;
                case '!':
                    locator && position(tagStart);
                    end1 = parseDCC(source, tagStart, domBuilder, errorHandler);
                    break;
                default:
                    locator && position(tagStart);
                    var el = new ElementAttributes();
                    var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;
                    //elStartEnd
                    var end1 = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);
                    var len = el.length;
                    if (!el.closed && fixSelfClosed(source, end1, el.tagName, closeMap)) {
                        el.closed = true;
                        if (!entityMap.nbsp) errorHandler.warning('unclosed xml attribute');
                    }
                    if (locator && len) {
                        var locator2 = copyLocator(locator, {
                        });
                        //try{//attribute position fixed
                        for(var i = 0; i < len; i++){
                            var a1 = el[i];
                            position(a1.offset);
                            a1.locator = copyLocator(locator, {
                            });
                        }
                        domBuilder.locator = locator2;
                        if (appendElement(el, domBuilder, currentNSMap)) parseStack.push(el);
                        domBuilder.locator = locator;
                    } else if (appendElement(el, domBuilder, currentNSMap)) parseStack.push(el);
                    if (NAMESPACE.isHTML(el.uri) && !el.closed) end1 = parseHtmlSpecialContent(source, end1, el.tagName, entityReplacer, domBuilder);
                    else end1++;
            }
        } catch (e) {
            if (e instanceof ParseError) throw e;
            errorHandler.error('element parse error: ' + e);
            end1 = -1;
        }
        if (end1 > start) start = end1;
        else //TODO: 这里有可能sax回退，有位置错误风险
        appendText(Math.max(tagStart, start) + 1);
    }
}
function copyLocator(f, t) {
    t.lineNumber = f.lineNumber;
    t.columnNumber = f.columnNumber;
    return t;
}
/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */ function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {
    /**
	 * @param {string} qname
	 * @param {string} value
	 * @param {number} startIndex
	 */ function addAttribute(qname, value, startIndex) {
        if (el.attributeNames.hasOwnProperty(qname)) errorHandler.fatalError('Attribute ' + qname + ' redefined');
        el.addValue(qname, // @see https://www.w3.org/TR/xml/#AVNormalize
        // since the xmldom sax parser does not "interpret" DTD the following is not implemented:
        // - recursive replacement of (DTD) entity references
        // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
        value.replace(/[\t\n\r]/g, ' ').replace(/&#?\w+;/g, entityReplacer), startIndex);
    }
    var attrName;
    var value1;
    var p = ++start;
    var s = S_TAG; //status
    while(true){
        var c = source.charAt(p);
        switch(c){
            case '=':
                if (s === S_ATTR) {
                    attrName = source.slice(start, p);
                    s = S_EQ;
                } else if (s === S_ATTR_SPACE) s = S_EQ;
                else //fatalError: equal must after attrName or space after attrName
                throw new Error('attribute equal must after attrName'); // No known test case
                break;
            case '\'':
            case '"':
                if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
                ) {
                    if (s === S_ATTR) {
                        errorHandler.warning('attribute value must after "="');
                        attrName = source.slice(start, p);
                    }
                    start = p + 1;
                    p = source.indexOf(c, start);
                    if (p > 0) {
                        value1 = source.slice(start, p);
                        addAttribute(attrName, value1, start - 1);
                        s = S_ATTR_END;
                    } else //fatalError: no end quot match
                    throw new Error('attribute value no end \'' + c + '\' match');
                } else if (s == S_ATTR_NOQUOT_VALUE) {
                    value1 = source.slice(start, p);
                    addAttribute(attrName, value1, start);
                    errorHandler.warning('attribute "' + attrName + '" missed start quot(' + c + ')!!');
                    start = p + 1;
                    s = S_ATTR_END;
                } else //fatalError: no equal before
                throw new Error('attribute value must after "="'); // No known test case
                break;
            case '/':
                switch(s){
                    case S_TAG:
                        el.setTagName(source.slice(start, p));
                    case S_ATTR_END:
                    case S_TAG_SPACE:
                    case S_TAG_CLOSE:
                        s = S_TAG_CLOSE;
                        el.closed = true;
                    case S_ATTR_NOQUOT_VALUE:
                    case S_ATTR:
                    case S_ATTR_SPACE:
                        break;
                    //case S_EQ:
                    default:
                        throw new Error("attribute invalid close char('/')") // No known test case
                        ;
                }
                break;
            case '':
                errorHandler.error('unexpected end of input');
                if (s == S_TAG) el.setTagName(source.slice(start, p));
                return p;
            case '>':
                switch(s){
                    case S_TAG:
                        el.setTagName(source.slice(start, p));
                    case S_ATTR_END:
                    case S_TAG_SPACE:
                    case S_TAG_CLOSE:
                        break; //normal
                    case S_ATTR_NOQUOT_VALUE:
                    case S_ATTR:
                        value1 = source.slice(start, p);
                        if (value1.slice(-1) === '/') {
                            el.closed = true;
                            value1 = value1.slice(0, -1);
                        }
                    case S_ATTR_SPACE:
                        if (s === S_ATTR_SPACE) value1 = attrName;
                        if (s == S_ATTR_NOQUOT_VALUE) {
                            errorHandler.warning('attribute "' + value1 + '" missed quot(")!');
                            addAttribute(attrName, value1, start);
                        } else {
                            if (!NAMESPACE.isHTML(currentNSMap['']) || !value1.match(/^(?:disabled|checked|selected)$/i)) errorHandler.warning('attribute "' + value1 + '" missed value!! "' + value1 + '" instead!!');
                            addAttribute(value1, value1, start);
                        }
                        break;
                    case S_EQ:
                        throw new Error('attribute value missed!!');
                }
                //			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
                return p;
            /*xml space '\x20' | #x9 | #xD | #xA; */ case '\u0080':
                c = ' ';
            default:
                if (c <= ' ') switch(s){
                    case S_TAG:
                        el.setTagName(source.slice(start, p)); //tagName
                        s = S_TAG_SPACE;
                        break;
                    case S_ATTR:
                        attrName = source.slice(start, p);
                        s = S_ATTR_SPACE;
                        break;
                    case S_ATTR_NOQUOT_VALUE:
                        var value1 = source.slice(start, p);
                        errorHandler.warning('attribute "' + value1 + '" missed quot(")!!');
                        addAttribute(attrName, value1, start);
                    case S_ATTR_END:
                        s = S_TAG_SPACE;
                        break;
                }
                else //S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
                //S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
                switch(s){
                    //case S_TAG:void();break;
                    //case S_ATTR:void();break;
                    //case S_ATTR_NOQUOT_VALUE:void();break;
                    case S_ATTR_SPACE:
                        var tagName = el.tagName;
                        if (!NAMESPACE.isHTML(currentNSMap['']) || !attrName.match(/^(?:disabled|checked|selected)$/i)) errorHandler.warning('attribute "' + attrName + '" missed value!! "' + attrName + '" instead2!!');
                        addAttribute(attrName, attrName, start);
                        start = p;
                        s = S_ATTR;
                        break;
                    case S_ATTR_END:
                        errorHandler.warning('attribute space is required"' + attrName + '"!!');
                    case S_TAG_SPACE:
                        s = S_ATTR;
                        start = p;
                        break;
                    case S_EQ:
                        s = S_ATTR_NOQUOT_VALUE;
                        start = p;
                        break;
                    case S_TAG_CLOSE:
                        throw new Error("elements closed character '/' and '>' must be connected to");
                }
        } //end outer switch
        //console.log('p++',p)
        p++;
    }
}
/**
 * @return true if has new namespace define
 */ function appendElement(el, domBuilder, currentNSMap) {
    var tagName = el.tagName;
    var localNSMap = null;
    //var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
    var i = el.length;
    while(i--){
        var a = el[i];
        var qName = a.qName;
        var value = a.value;
        var nsp = qName.indexOf(':');
        if (nsp > 0) {
            var prefix = a.prefix = qName.slice(0, nsp);
            var localName = qName.slice(nsp + 1);
            var nsPrefix = prefix === 'xmlns' && localName;
        } else {
            localName = qName;
            prefix = null;
            nsPrefix = qName === 'xmlns' && '';
        }
        //can not set prefix,because prefix !== ''
        a.localName = localName;
        //prefix == null for no ns prefix attribute
        if (nsPrefix !== false) {
            if (localNSMap == null) {
                localNSMap = {
                };
                //console.log(currentNSMap,0)
                _copy(currentNSMap, currentNSMap = {
                });
            //console.log(currentNSMap,1)
            }
            currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
            a.uri = NAMESPACE.XMLNS;
            domBuilder.startPrefixMapping(nsPrefix, value);
        }
    }
    var i = el.length;
    while(i--){
        a = el[i];
        var prefix = a.prefix;
        if (prefix) {
            if (prefix === 'xml') a.uri = NAMESPACE.XML;
            if (prefix !== 'xmlns') a.uri = currentNSMap[prefix || ''];
        }
    }
    var nsp = tagName.indexOf(':');
    if (nsp > 0) {
        prefix = el.prefix = tagName.slice(0, nsp);
        localName = el.localName = tagName.slice(nsp + 1);
    } else {
        prefix = null; //important!!
        localName = el.localName = tagName;
    }
    //no prefix element has default namespace
    var ns = el.uri = currentNSMap[prefix || ''];
    domBuilder.startElement(ns, localName, tagName, el);
    //endPrefixMapping and startPrefixMapping have not any help for dom builder
    //localNSMap = null
    if (el.closed) {
        domBuilder.endElement(ns, localName, tagName);
        if (localNSMap) for(prefix in localNSMap)domBuilder.endPrefixMapping(prefix);
    } else {
        el.currentNSMap = currentNSMap;
        el.localNSMap = localNSMap;
        //parseStack.push(el);
        return true;
    }
}
function parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {
    if (/^(?:script|textarea)$/i.test(tagName)) {
        var elEndStart = source.indexOf('</' + tagName + '>', elStartEnd);
        var text = source.substring(elStartEnd + 1, elEndStart);
        if (/[&<]/.test(text)) {
            if (/^script$/i.test(tagName)) {
                //if(!/\]\]>/.test(text)){
                //lexHandler.startCDATA();
                domBuilder.characters(text, 0, text.length);
                //lexHandler.endCDATA();
                return elEndStart;
            //}
            } //}else{//text area
            text = text.replace(/&#?\w+;/g, entityReplacer);
            domBuilder.characters(text, 0, text.length);
            return elEndStart;
        //}
        }
    }
    return elStartEnd + 1;
}
function fixSelfClosed(source, elStartEnd, tagName, closeMap) {
    //if(tagName in closeMap){
    var pos = closeMap[tagName];
    if (pos == null) {
        //console.log(tagName)
        pos = source.lastIndexOf('</' + tagName + '>');
        if (pos < elStartEnd) pos = source.lastIndexOf('</' + tagName);
        closeMap[tagName] = pos;
    }
    return pos < elStartEnd;
//}
}
function _copy(source, target) {
    for(var n in source)target[n] = source[n];
}
function parseDCC(source, start, domBuilder, errorHandler) {
    var next = source.charAt(start + 2);
    switch(next){
        case '-':
            if (source.charAt(start + 3) === '-') {
                var end = source.indexOf('-->', start + 4);
                //append comment source.substring(4,end)//<!--
                if (end > start) {
                    domBuilder.comment(source, start + 4, end - start - 4);
                    return end + 3;
                } else {
                    errorHandler.error("Unclosed comment");
                    return -1;
                }
            } else //error
            return -1;
        default:
            if (source.substr(start + 3, 6) == 'CDATA[') {
                var end = source.indexOf(']]>', start + 9);
                domBuilder.startCDATA();
                domBuilder.characters(source, start + 9, end - start - 9);
                domBuilder.endCDATA();
                return end + 3;
            }
            //<!DOCTYPE
            //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)
            var matchs = split(source, start);
            var len = matchs.length;
            if (len > 1 && /!doctype/i.test(matchs[0][0])) {
                var name = matchs[1][0];
                var pubid = false;
                var sysid = false;
                if (len > 3) {
                    if (/^public$/i.test(matchs[2][0])) {
                        pubid = matchs[3][0];
                        sysid = len > 4 && matchs[4][0];
                    } else if (/^system$/i.test(matchs[2][0])) sysid = matchs[3][0];
                }
                var lastMatch = matchs[len - 1];
                domBuilder.startDTD(name, pubid, sysid);
                domBuilder.endDTD();
                return lastMatch.index + lastMatch[0].length;
            }
    }
    return -1;
}
function parseInstruction(source, start, domBuilder) {
    var end = source.indexOf('?>', start);
    if (end) {
        var match = source.substring(start, end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
        if (match) {
            var len = match[0].length;
            domBuilder.processingInstruction(match[1], match[2]);
            return end + 2;
        } else return -1;
    }
    return -1;
}
function ElementAttributes() {
    this.attributeNames = {
    };
}
ElementAttributes.prototype = {
    setTagName: function(tagName) {
        if (!tagNamePattern.test(tagName)) throw new Error('invalid tagName:' + tagName);
        this.tagName = tagName;
    },
    addValue: function(qName, value, offset) {
        if (!tagNamePattern.test(qName)) throw new Error('invalid attribute:' + qName);
        this.attributeNames[qName] = this.length;
        this[this.length++] = {
            qName: qName,
            value: value,
            offset: offset
        };
    },
    length: 0,
    getLocalName: function(i) {
        return this[i].localName;
    },
    getLocator: function(i) {
        return this[i].locator;
    },
    getQName: function(i) {
        return this[i].qName;
    },
    getURI: function(i) {
        return this[i].uri;
    },
    getValue: function(i) {
        return this[i].value;
    }
};
function split(source, start) {
    var match;
    var buf = [];
    var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
    reg.lastIndex = start;
    reg.exec(source); //skip <
    while(match = reg.exec(source)){
        buf.push(match);
        if (match[1]) return buf;
    }
}
exports.XMLReader = XMLReader;
exports.ParseError = ParseError;

},{"./conventions":"hb2CV"}],"fY7Xt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createXSD", ()=>createXSD
);
var _canonicalDataFactory = require("./factories/canonical-data-factory");
var _canonicalDataFactoryDefault = parcelHelpers.interopDefault(_canonicalDataFactory);
function createXSD() {
    var localFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _canonicalDataFactoryDefault.default;
    return {
        boolean: localFactory.namedNode("http://www.w3.org/2001/XMLSchema#boolean"),
        dateTime: localFactory.namedNode("http://www.w3.org/2001/XMLSchema#dateTime"),
        decimal: localFactory.namedNode("http://www.w3.org/2001/XMLSchema#decimal"),
        double: localFactory.namedNode("http://www.w3.org/2001/XMLSchema#double"),
        integer: localFactory.namedNode("http://www.w3.org/2001/XMLSchema#integer"),
        langString: localFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"),
        string: localFactory.namedNode("http://www.w3.org/2001/XMLSchema#string")
    };
}
var defaultXSD = createXSD(_canonicalDataFactoryDefault.default);
exports.default = defaultXSD;

},{"./factories/canonical-data-factory":"ijj5A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l0yNX":[function(require,module,exports) {
/**
 * Provides a way to access commonly used namespaces
 *
 * Usage:
 *
 *   ```
 *   const $rdf = require('rdflib'); //or any other RDF/JS-compatible library
 *   const ns = require('solid-namespace')($rdf);
 *   const store = $rdf.graph();
 *
 *   let me = ...;
 *   let name = store.any(me, ns.vcard(‘fn’)) || store.any(me, ns.foaf(‘name’));
 *   ```
 * @module vocab
 */ const aliases = {
    acl: 'http://www.w3.org/ns/auth/acl#',
    arg: 'http://www.w3.org/ns/pim/arg#',
    as: 'https://www.w3.org/ns/activitystreams#',
    cal: 'http://www.w3.org/2002/12/cal/ical#',
    cert: 'http://www.w3.org/ns/auth/cert#',
    contact: 'http://www.w3.org/2000/10/swap/pim/contact#',
    dc: 'http://purl.org/dc/elements/1.1/',
    dct: 'http://purl.org/dc/terms/',
    doap: 'http://usefulinc.com/ns/doap#',
    foaf: 'http://xmlns.com/foaf/0.1/',
    geo: 'http://www.w3.org/2003/01/geo/wgs84_pos#',
    gpx: 'http://www.w3.org/ns/pim/gpx#',
    http: 'http://www.w3.org/2007/ont/http#',
    httph: 'http://www.w3.org/2007/ont/httph#',
    icalTZ: 'http://www.w3.org/2002/12/cal/icaltzd#',
    ldp: 'http://www.w3.org/ns/ldp#',
    link: 'http://www.w3.org/2007/ont/link#',
    log: 'http://www.w3.org/2000/10/swap/log#',
    meeting: 'http://www.w3.org/ns/pim/meeting#',
    mo: 'http://purl.org/ontology/mo/',
    org: 'http://www.w3.org/ns/org#',
    owl: 'http://www.w3.org/2002/07/owl#',
    pad: 'http://www.w3.org/ns/pim/pad#',
    patch: 'http://www.w3.org/ns/pim/patch#',
    prov: 'http://www.w3.org/ns/prov#',
    qu: 'http://www.w3.org/2000/10/swap/pim/qif#',
    trip: 'http://www.w3.org/ns/pim/trip#',
    rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    rdfs: 'http://www.w3.org/2000/01/rdf-schema#',
    rss: 'http://purl.org/rss/1.0/',
    sched: 'http://www.w3.org/ns/pim/schedule#',
    schema: 'http://schema.org/',
    sioc: 'http://rdfs.org/sioc/ns#',
    solid: 'http://www.w3.org/ns/solid/terms#',
    space: 'http://www.w3.org/ns/pim/space#',
    stat: 'http://www.w3.org/ns/posix/stat#',
    tab: 'http://www.w3.org/2007/ont/link#',
    tabont: 'http://www.w3.org/2007/ont/link#',
    ui: 'http://www.w3.org/ns/ui#',
    vcard: 'http://www.w3.org/2006/vcard/ns#',
    wf: 'http://www.w3.org/2005/01/wf/flow#',
    xsd: 'http://www.w3.org/2001/XMLSchema#',
    cco: 'http://www.ontologyrepository.com/CommonCoreOntologies/'
};
/**
 * @param [rdflib] {RDF} Optional RDF Library (such as rdflib.js or rdf-ext) to inject
 */ function vocab(rdf = {
    namedNode: (u)=>u
}) {
    const namespaces = {
    };
    for(const alias in aliases){
        const expansion = aliases[alias];
        namespaces[alias] = function(localName = '') {
            return rdf.namedNode(expansion + localName);
        };
    }
    return namespaces;
}
module.exports = vocab;

},{}],"2V7vH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** RDF/JS spec Typeguards */ /**
 * Loads ontologies of the data we load (this is the callback from the kb to
 * the fetcher).
 */ parcelHelpers.export(exports, "AJAR_handleNewTerm", ()=>AJAR_handleNewTerm
);
parcelHelpers.export(exports, "appliedFactoryMethods", ()=>appliedFactoryMethods
);
/**
 * Expands an array of Terms to a set of statements representing the rdf:list.
 * @param rdfFactory - The factory to use
 * @param subject - The iri of the first list item.
 * @param data - The terms to expand into the list.
 * @return The {data} as a set of statements.
 */ parcelHelpers.export(exports, "arrayToStatements", ()=>arrayToStatements
);
parcelHelpers.export(exports, "ArrayIndexOf", ()=>ArrayIndexOf
);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _uri = require("./uri");
var _utilsJs = require("./utils-js");
function AJAR_handleNewTerm(kb, p, requestedBy) {
    var sf = null;
    if (typeof kb.fetcher !== 'undefined') sf = kb.fetcher;
    else return;
    if (p.termType !== 'NamedNode') return;
    var docuri = _uri.docpart(p.uri);
    var fixuri;
    if (p.uri.indexOf('#') < 0) {
        // No hash
        // @@ major hack for dbpedia Categories, which spread indefinitely
        if (_utilsJs.string_startswith(p.uri, 'http://dbpedia.org/resource/Category:')) return;
        /*
      if (string_startswith(p.uri, 'http://xmlns.com/foaf/0.1/')) {
      fixuri = "http://dig.csail.mit.edu/2005/ajar/ajaw/test/foaf"
      // should give HTTP 303 to ontology -- now is :-)
      } else
    */ if (_utilsJs.string_startswith(p.uri, 'http://purl.org/dc/elements/1.1/') || _utilsJs.string_startswith(p.uri, 'http://purl.org/dc/terms/')) fixuri = 'http://dublincore.org/2005/06/13/dcq'; // dc fetched multiple times
        else if (_utilsJs.string_startswith(p.uri, 'http://xmlns.com/wot/0.1/')) fixuri = 'http://xmlns.com/wot/0.1/index.rdf';
        else if (_utilsJs.string_startswith(p.uri, 'http://web.resource.org/cc/')) //            log.warn("creative commons links to html instead of rdf. doesn't seem to content-negotiate.")
        fixuri = 'http://web.resource.org/cc/schema.rdf';
    }
    if (fixuri) docuri = fixuri;
    if (sf && sf.getState(docuri) !== 'unrequested') return;
    if (fixuri) // only give warning once: else happens too often
    _logDefault.default.warn('Assuming server still broken, faking redirect of <' + p.uri + '> to <' + docuri + '>');
    return sf.fetch(docuri, {
        referringTerm: requestedBy
    });
}
var appliedFactoryMethods = [
    'blankNode',
    'defaultGraph',
    'literal',
    'namedNode',
    'quad',
    'variable',
    'supports'
];
var rdf = {
    first: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#first',
    rest: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest',
    nil: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'
};
function arrayToStatements(rdfFactory, subject, data) {
    var statements = [];
    data.reduce(function(id, _listObj, i, listData) {
        statements.push(rdfFactory.quad(id, rdfFactory.namedNode(rdf.first), listData[i]));
        var nextNode;
        if (i < listData.length - 1) {
            nextNode = rdfFactory.blankNode();
            statements.push(rdfFactory.quad(id, rdfFactory.namedNode(rdf.rest), nextNode));
        } else statements.push(rdfFactory.quad(id, rdfFactory.namedNode(rdf.rest), rdfFactory.namedNode(rdf.nil)));
        return nextNode;
    }, subject);
    return statements;
}
function ArrayIndexOf(arr, item) {
    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var length = arr.length;
    if (i < 0) i = length + i;
    for(; i < length; i++){
        if (arr[i] === item) return i;
    }
    return -1;
}

},{"./log":"44B5t","./uri":"cwuSF","./utils-js":"2DMBx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLCeO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This file attaches all functionality to Node
// that would otherwise require circular dependencies.
var _collection = require("./collection");
var _nodeInternal = require("./node-internal");
var _nodeInternalDefault = parcelHelpers.interopDefault(_nodeInternal);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
var _terms = require("./utils/terms");
/**
 * Creates an RDF Node from a native javascript value.
 * RDF Nodes are returned unchanged, undefined returned as itself.
 * @method fromValue
 * @static
 * @param value {Node|Date|String|Number|Boolean|Undefined}
 * @return {Node|Collection}
 */ _nodeInternalDefault.default.fromValue = _collection.fromValue;
exports.default = _nodeInternalDefault.default;
var ns = {
    xsd: _namespaceDefault.default('http://www.w3.org/2001/XMLSchema#')
};
/**
 * Gets the javascript object equivalent to a node
 * @param term The RDF node
 */ _nodeInternalDefault.default.toJS = function(term) {
    if (_terms.isCollection(term)) return term.elements.map(_nodeInternalDefault.default.toJS); // Array node (not standard RDFJS)
    if (!_terms.isLiteral(term)) return term;
    if (term.datatype.equals(ns.xsd('boolean'))) return term.value === '1' || term.value === 'true';
    if (term.datatype.equals(ns.xsd('dateTime')) || term.datatype.equals(ns.xsd('date'))) return new Date(term.value);
    if (term.datatype.equals(ns.xsd('integer')) || term.datatype.equals(ns.xsd('float')) || term.datatype.equals(ns.xsd('decimal'))) return Number(term.value);
    return term.value;
};

},{"./collection":"hfkNS","./node-internal":"kZc6I","./namespace":"iFtHC","./utils/terms":"cHcdt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1LIOf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Query", ()=>Query
);
/**
 * This function will match a pattern to the current Store
 *
 * The callback function is called whenever a match is found
 * When fetcher is supplied this will be called to load from the web
 * any new nodes as they are discovered.  This will cause the query to traverse the
 * graph of linked data, sometimes called "Link Following Query"
 *
 * @param myQuery - a knowledgebase containing a pattern to use as query
 * @param callback - whenever the pattern in myQuery is met this is called with
 *  the new bindings as parameter
 * @param fetcher? - If and only if,  you want link following, give a fetcher
 *                which has been created for the quadstore being queried.
 * @param onDone -  callback when query finished
 */ parcelHelpers.export(exports, "indexedFormulaQuery", ()=>indexedFormulaQuery
) // query
;
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
// Matching a formula against another formula
// Assync as well as Synchronously
//
// W3C open source licence 2005.
//
// This builds on term.js, match.js (and identity.js?)
// to allow a query of a formula.
//
// Here we introduce for the first time a subclass of term: variable.
//
// SVN ID: $Id: query.js 25116 2008-11-15 16:13:48Z timbl $
//  Variable
//
// Compare with BlankNode.  They are similar, but a variable
// stands for something whose value is to be returned.
// Also, users name variables and want the same name back when stuff is printed
/* jsl:option explicit */ // Turn on JavaScriptLint variable declaration checking
var _store = require("./store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _defaultGraphUri = require("./utils/default-graph-uri");
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _uri = require("./uri");
var Query = /*#__PURE__*/ _createClassDefault.default(function Query1(name, id) {
    _classCallCheckDefault.default(this, Query1);
    this.pat = new _storeDefault.default(); // The pattern to search for
    this.vars = []; // Used by UI code but not in query.js
    //    this.orderBy = [] // Not used yet
    this.name = name;
    this.id = id;
});
function indexedFormulaQuery(myQuery, callback1, fetcher1, onDone1) {
    /** Debug strings
  */ function bindingDebug(b) {
        var str = '';
        var v;
        for(v in b)if (b.hasOwnProperty(v)) str += '    ' + v + ' -> ' + b[v];
        return str;
    }
    function bindingsDebug(nbs) {
        var str = 'Bindings: ';
        var i;
        var n = nbs.length;
        for(i = 0; i < n; i++)str += bindingDebug(nbs[i][0]) + ';\n\t';
        return str;
    } // bindingsDebug
    /** Unification
   *
   * Unification finds all bindings such that when the binding is applied
   * to one term it is equal to the other.
   * @returns {Arrray}-  a list of bindings, where a binding is an associative array
   *  mapping variuable to value.
   */ function unifyTerm(self, other, bindings, formula) {
        var actual = bindings[self];
        if (actual === undefined) {
            // Not mapped
            if (self.isVar) {
                var b = [];
                b[self] = other;
                return [
                    [
                        b,
                        null
                    ]
                ]; // Match
            }
            actual = self;
        }
        if (!actual.complexType) {
            if (formula.redirections[actual]) actual = formula.redirections[actual];
            if (formula.redirections[other]) other = formula.redirections[other];
            if (actual.equals(other) || actual.uri && actual.uri === _defaultGraphUri.defaultGraphURI) // Used to mean 'any graph' in a query
            return [
                [
                    [],
                    null
                ]
            ];
            return [];
        }
        if (self instanceof Array) {
            if (!(other instanceof Array)) return [];
            return unifyContents(self, other, bindings);
        }
        throw new Error('query.js: oops - code not written yet'); // return undefined;  // for lint - no jslint objects to unreachables
    //    return actual.unifyContents(other, bindings)
    } // unifyTerm
    function unifyContents(self, other, bindings, formula) {
        var nbs2;
        if (self.length !== other.length) return []; // no way
        if (!self.length) return [
            [
                [],
                null
            ]
        ]; // Success
        var nbs = unifyTerm(self[0], other[0], bindings, formula);
        if (nbs.length === 0) return nbs;
        var res = [];
        var i;
        var n = nbs.length;
        var nb;
        var j;
        var m;
        var v;
        var nb2;
        var bindings2;
        for(i = 0; i < n; i++){
            // for each possibility from the first term
            nb = nbs[i][0]; // new bindings
            bindings2 = [];
            for(v in nb)if (nb.hasOwnProperty(v)) bindings2[v] = nb[v]; // copy
            for(v in bindings)if (bindings.hasOwnProperty(v)) bindings2[v] = bindings[v]; // copy
            nbs2 = unifyContents(self.slice(1), other.slice(1), bindings2, formula);
            m = nbs2.length;
            for(j = 0; j < m; j++){
                nb2 = nbs2[j][0]; // @@@@ no idea whether this is used or right
                for(v in nb)if (nb.hasOwnProperty(v)) nb2[v] = nb[v];
                res.push([
                    nb2,
                    null
                ]);
            }
        }
        return res;
    } // unifyContents
    //  Matching
    //
    // Matching finds all bindings such that when the binding is applied
    // to one term it is equal to the other term.  We only match formulae.
    /** if x is not in the bindings array, return the var; otherwise, return the bindings **/ function bind(x, binding) {
        var y = binding[x];
        if (y === undefined) return x;
        return y;
    } // When there are OPTIONAL clauses, we must return bindings without them if none of them
    // succeed. However, if any of them do succeed, we should not.  (This is what branchCount()
    // tracked. The problem currently is (2011/7) that when several optionals exist, and they
    // all match, multiple sets of bindings are returned, each with one optional filled in.)
    function union(a, b) {
        var c = {
        };
        var x;
        for(x in a)if (a.hasOwnProperty(x)) c[x] = a[x];
        for(x in b)if (b.hasOwnProperty(x)) c[x] = b[x];
        return c;
    }
    function OptionalBranchJunction(originalCallback, trunkBindings) {
        this.trunkBindings = trunkBindings;
        this.originalCallback = originalCallback;
        this.branches = []; // this.results = []; // result[i] is an array of bindings for branch i
        // this.done = {};  // done[i] means all/any results are in for branch i
        // this.count = {}
        return this;
    }
    OptionalBranchJunction.prototype.checkAllDone = function() {
        var i;
        for(i = 0; i < this.branches.length; i++){
            if (!this.branches[i].done) return;
        }
        _logDefault.default.debug('OPTIONAL BIDNINGS ALL DONE:');
        this.doCallBacks(this.branches.length - 1, this.trunkBindings);
    }; // Recrursively generate the cross product of the bindings
    OptionalBranchJunction.prototype.doCallBacks = function(b, bindings) {
        var j;
        if (b < 0) return this.originalCallback(bindings);
        for(j = 0; j < this.branches[b].results.length; j++)this.doCallBacks(b - 1, union(bindings, this.branches[b].results[j]));
    }; // A mandatory branch is the normal one, where callbacks
    // are made immediately and no junction is needed.
    // Might be useful for onFinsihed callback for query API.
    function MandatoryBranch(callback, onDone) {
        this.count = 0;
        this.success = false;
        this.done = false; // this.results = []
        this.callback = callback;
        this.onDone = onDone; // this.junction = junction
        // junction.branches.push(this)
        return this;
    }
    MandatoryBranch.prototype.reportMatch = function(bindings) {
        // log.error("@@@@ query.js 1"); // @@
        this.callback(bindings);
        this.success = true;
    };
    MandatoryBranch.prototype.reportDone = function() {
        this.done = true;
        _logDefault.default.info('Mandatory query branch finished.***');
        if (this.onDone !== undefined) this.onDone();
    }; // An optional branch hoards its results.
    var OptionalBranch = function OptionalBranch(junction) {
        this.count = 0;
        this.done = false;
        this.results = [];
        this.junction = junction;
        junction.branches.push(this);
        return this;
    };
    OptionalBranch.prototype.reportMatch = function(bindings) {
        this.results.push(bindings);
    };
    OptionalBranch.prototype.reportDone = function() {
        _logDefault.default.debug('Optional branch finished - results.length = ' + this.results.length);
        if (this.results.length === 0) {
            // This is what optional means: if no hits,
            this.results.push({
            }); // mimic success, but with no bindings
            _logDefault.default.debug("Optional branch FAILED - that's OK.");
        }
        this.done = true;
        this.junction.checkAllDone();
    };
    /** prepare -- sets the index of the item to the possible matches
   * @param f - formula
   * @param item - an Statement, possibly w/ vars in it
   * @param bindings - Bindings so far
   * @returns false if the query fails -- there are no items that match
  */ function prepare(f, item, bindings) {
        var terms, termIndex, i, ind;
        item.nvars = 0;
        item.index = null; // if (!f.statements) log.warn("@@@ prepare: f is "+f)
        //    log.debug("Prepare: f has "+ f.statements.length)
        // log.debug("Prepare: Kb size "+f.statements.length+" Preparing "+item)
        terms = [
            item.subject,
            item.predicate,
            item.object,
            item.why
        ];
        ind = [
            f.subjectIndex,
            f.predicateIndex,
            f.objectIndex,
            f.whyIndex
        ];
        for(i = 0; i < 4; i++){
            var t = terms[i]; // console.log("  Prepare (" + t + ") "+(t in bindings))
            if (t.uri && t.uri === _defaultGraphUri.defaultGraphURI) ;
            else if (t.isVar && !(bindings[t] !== undefined)) item.nvars++;
            else {
                t = bind(terms[i], bindings); // returns the RDF binding if bound, otherwise itself
                // if (terms[i]!=bind(terms[i],bindings) alert("Term: "+terms[i]+"Binding: "+bind(terms[i], bindings))
                if (f.redirections[f.id(t)]) t = f.redirections[f.id(t)]; // redirect
                termIndex = ind[i][f.id(t)];
                if (!termIndex) {
                    item.index = [];
                    return false; // Query line cannot match
                }
                if (item.index === null || item.index.length > termIndex.length) // Find smallest index
                item.index = termIndex;
            }
        }
        if (item.index === null) // All 4 are variables?
        item.index = f.statements;
        return true;
    } // prepare
    /** sorting function -- negative if self is easier **/ // We always prefer to start with a URI to be able to browse a graph
    // this is why we put off items with more variables till later.
    function easiestQuery(self, other) {
        if (self.nvars !== other.nvars) return self.nvars - other.nvars;
        return self.index.length - other.index.length;
    }
    var matchIndex = 0; // index
    /** matches a pattern formula against the knowledge base, e.g. to find matches for table-view
  *
  * @param f - knowledge base formula
  * @param g - pattern formula (may have vars)
  * @param bindingsSoFar  - bindings accumulated in matching to date
  * @param level - spaces to indent stuff also lets you know what level of recursion you're at
  * @param fetcher - function (term, requestedBy) If you want link following
  * @param localCallback - function(bindings, pattern, branch) called on sucess
  * @returns nothing
  *
  * Will fetch linked data from the web iff the knowledge base an associated source fetcher (f.fetcher)
  ***/ var match1 = function match(f, g, bindingsSoFar, level, fetcher, localCallback, branch) {
        _logDefault.default.debug('Match begins, Branch count now: ' + branch.count + ' for ' + branch.pattern_debug); // log.debug("match: f has "+f.statements.length+", g has "+g.statements.length)
        var pattern = g.statements;
        if (pattern.length === 0) {
            // when it's satisfied all the pattern triples
            _logDefault.default.debug('FOUND MATCH WITH BINDINGS:' + bindingDebug(bindingsSoFar));
            if (g.optional.length === 0) branch.reportMatch(bindingsSoFar);
            else {
                _logDefault.default.debug('OPTIONAL: ' + g.optional);
                var junction = new OptionalBranchJunction(callback1, bindingsSoFar); // @@ won't work with nested optionals? nest callbacks
                var br = [];
                var b;
                for(b = 0; b < g.optional.length; b++){
                    br[b] = new OptionalBranch(junction); // Allocate branches to prevent premature ending
                    br[b].pattern_debug = g.optional[b]; // for diagnotics only
                }
                for(b = 0; b < g.optional.length; b++){
                    br[b].count = br[b].count + 1; // Count how many matches we have yet to complete
                    match(f, g.optional[b], bindingsSoFar, '', fetcher, callback1, br[b]);
                }
            }
            branch.count--;
            _logDefault.default.debug('Match ends -- success , Branch count now: ' + branch.count + ' for ' + branch.pattern_debug);
            return; // Success
        }
        var item;
        var i;
        var n = pattern.length; // log.debug(level + "Match "+n+" left, bs so far:"+bindingDebug(bindingsSoFar))
        // Follow links from variables in query
        if (fetcher) {
            // Fetcher is used to fetch URIs, function first term is a URI term, second is the requester
            var id = 'match' + matchIndex++;
            var fetchResource = function fetchResource(requestedTerm, id) {
                var docuri = requestedTerm.uri.split('#')[0];
                fetcher.nowOrWhenFetched(docuri, undefined, function(ok, body, xhr) {
                    if (!ok) console.log('Error following link to <' + requestedTerm.uri + '> in query: ' + body);
                    match(f, g, bindingsSoFar, level, fetcher, localCallback, branch);
                });
            };
            for(i = 0; i < n; i++){
                item = pattern[i]; // for each of the triples in the query
                if (bindingsSoFar[item.subject] !== undefined && bindingsSoFar[item.subject].uri && fetcher && fetcher.getState(_uri.docpart(bindingsSoFar[item.subject].uri)) === 'unrequested') {
                    // fetch the subject info and return to id
                    fetchResource(bindingsSoFar[item.subject], id);
                    return; // only look up one per line this time, but we will come back again though match
                }
                if (bindingsSoFar[item.object] !== undefined && bindingsSoFar[item.object].uri && fetcher && fetcher.getState(_uri.docpart(bindingsSoFar[item.object].uri)) === 'unrequested') {
                    fetchResource(bindingsSoFar[item.object], id);
                    return;
                }
            }
        } // if fetcher
        match2(f, g, bindingsSoFar, level, fetcher, localCallback, branch);
    }; // match
    var constraintsSatisfied = function constraintsSatisfied(bindings, constraints) {
        var res = true;
        var x;
        var test;
        for(x in bindings){
            if (bindings.hasOwnProperty(x)) {
                if (constraints[x]) {
                    test = constraints[x].test;
                    if (test && !test(bindings[x])) res = false;
                }
            }
        }
        return res;
    };
    /** match2 -- stuff after the fetch **/ var match2 = function match2(f, g, bindingsSoFar, level, fetcher, callback, branch) {
        // post fetch
        var pattern = g.statements;
        var n = pattern.length;
        var i;
        var k;
        var nk;
        var v;
        var bindings2;
        var newBindings1;
        var item;
        for(i = 0; i < n; i++){
            // For each statement left in the query, run prepare
            item = pattern[i]; // log.info('match2: item=' + item + ', bindingsSoFar=' + bindingDebug(bindingsSoFar))
            prepare(f, item, bindingsSoFar); // if (item.index) console.log('     item.index.length ' + item.index.length)
        }
        pattern.sort(easiestQuery);
        item = pattern[0]; // log.debug("Sorted pattern:\n"+pattern)
        var rest = f.formula();
        rest.optional = g.optional;
        rest.constraints = g.constraints;
        rest.statements = pattern.slice(1); // No indexes: we will not query g.
        _logDefault.default.debug(level + 'match2 searching ' + item.index.length + ' for ' + item + '; bindings so far=' + bindingDebug(bindingsSoFar)); // var results = []
        var c;
        var nc = item.index.length;
        var nbs1;
        var st;
        var onward = 0; // var x
        for(c = 0; c < nc; c++){
            // For each candidate statement
            st = item.index[c]; // for each statement in the item's index, spawn a new match with that binding
            nbs1 = unifyContents([
                item.subject,
                item.predicate,
                item.object,
                item.why
            ], [
                st.subject,
                st.predicate,
                st.object,
                st.why
            ], bindingsSoFar, f);
            _logDefault.default.info(level + ' From first: ' + nbs1.length + ': ' + bindingsDebug(nbs1));
            nk = nbs1.length; // branch.count += nk
            // log.debug("Branch count bumped "+nk+" to: "+branch.count)
            for(k = 0; k < nk; k++){
                // For each way that statement binds
                bindings2 = [];
                newBindings1 = nbs1[k][0];
                if (!constraintsSatisfied(newBindings1, g.constraints)) // branch.count--
                _logDefault.default.debug('Branch count CS: ' + branch.count);
                else {
                    for(v in newBindings1)if (newBindings1.hasOwnProperty(v)) bindings2[v] = newBindings1[v]; // copy
                    for(v in bindingsSoFar)if (bindingsSoFar.hasOwnProperty(v)) bindings2[v] = bindingsSoFar[v]; // copy
                    branch.count++; // Count how many matches we have yet to complete
                    onward++;
                    match1(f, rest, bindings2, level + '  ', fetcher, callback, branch); // call match
                }
            }
        }
        branch.count--;
        if (onward === 0) _logDefault.default.debug('Match2 fails completely on ' + item);
        _logDefault.default.debug('Match2 ends, Branch count: ' + branch.count + ' for ' + branch.pattern_debug);
        if (branch.count === 0) {
            _logDefault.default.debug('Branch finished.');
            branch.reportDone();
        }
    }; // match2
    // ////////////////////////// Body of query()  ///////////////////////
    var f1 = this;
    _logDefault.default.debug('Query on ' + this.statements.length);
    var trunck = new MandatoryBranch(callback1, onDone1);
    trunck.count++; // count one branch to complete at the moment
    if (myQuery.sync) match1(f1, myQuery.pat, myQuery.pat.initBindings, '', fetcher1, callback1, trunck);
    else // Give up thread: Allow other activities to run
    setTimeout(function() {
        match1(f1, myQuery.pat, myQuery.pat.initBindings, '', fetcher1, callback1, trunck);
    }, 0);
     // returns nothing; callback does the work
}

},{"@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/classCallCheck":"3nRml","./store":"8JtW2","./utils/default-graph-uri":"eia2J","./log":"44B5t","./uri":"cwuSF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4bGR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SinkParser", ()=>SinkParser
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _typeof = require("@babel/runtime/helpers/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
/**
*
*  UTF-8 data encode / decode
*  http://www.webtoolkit.info/
*
**/ var _uri = require("./uri");
var _utils = require("./utils");
function hexify(str) {
    // also used in parser
    return encodeURI(str);
}
var Utf8 = {
    // public method for url encoding
    encode: function encode(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";
        for(var n = 0; n < string.length; n++){
            var c = string.charCodeAt(n);
            if (c < 128) utftext += String.fromCharCode(c);
            else if (c > 127 && c < 2048) {
                utftext += String.fromCharCode(c >> 6 | 192);
                utftext += String.fromCharCode(c & 63 | 128);
            } else {
                utftext += String.fromCharCode(c >> 12 | 224);
                utftext += String.fromCharCode(c >> 6 & 63 | 128);
                utftext += String.fromCharCode(c & 63 | 128);
            }
        }
        return utftext;
    },
    // public method for url decoding
    decode: function decode(utftext) {
        var string = "";
        var i = 0;
        while(i < utftext.length){
            var c = utftext.charCodeAt(i);
            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            } else if (c > 191 && c < 224) {
                string += String.fromCharCode((c & 31) << 6 | utftext.charCodeAt(i + 1) & 63);
                i += 2;
            } else {
                string += String.fromCharCode((c & 15) << 12 | (utftext.charCodeAt(i + 1) & 63) << 6 | utftext.charCodeAt(i + 2) & 63);
                i += 3;
            }
        }
        return string;
    }
}; // Things we need to define to make converted pythn code work in js
// environment of $rdf
var RDFSink_forSomeSym = "http://www.w3.org/2000/10/swap/log#forSome";
var RDFSink_forAllSym = "http://www.w3.org/2000/10/swap/log#forAll";
var Logic_NS = "http://www.w3.org/2000/10/swap/log#"; //  pyjs seems to reference runtime library which I didn't find
var pyjslib_Tuple = function pyjslib_Tuple(theList) {
    return theList;
};
var pyjslib_List = function pyjslib_List(theList) {
    return theList;
};
var pyjslib_Dict = function pyjslib_Dict(listOfPairs) {
    if (listOfPairs.length > 0) throw "missing.js: oops nnonempty dict not imp";
    return [];
};
var pyjslib_len = function pyjslib_len(s) {
    return s.length;
};
var pyjslib_slice = function pyjslib_slice(str, i, j) {
    if (typeof str.slice == 'undefined') throw '@@ mising.js: No .slice function for ' + str + ' of type ' + _typeofDefault.default(str);
    if (typeof j == 'undefined' || j == null) return str.slice(i);
    return str.slice(i, j); // @ exactly the same spec?
};
var StopIteration = Error('dummy error stop iteration');
var pyjslib_Iterator = function pyjslib_Iterator(theList) {
    this.last = 0;
    this.li = theList;
    this.next = function() {
        if (this.last == this.li.length) throw StopIteration;
        return this.li[this.last++];
    };
    return this;
};
var ord = function ord(str) {
    return str.charCodeAt(0);
};
var string_find = function string_find(str, s) {
    return str.indexOf(s);
};
var assertFudge = function assertFudge(condition, desc) {
    if (condition) return;
    if (desc) throw "python Assertion failed: " + desc;
    throw "(python) Assertion failed.";
};
var stringFromCharCode = function stringFromCharCode(uesc) {
    return String.fromCharCode(uesc);
};
String.prototype.encode = function(encoding) {
    if (encoding != 'utf-8') throw "UTF8_converter: can only do utf-8";
    return Utf8.encode(this);
};
String.prototype.decode = function(encoding) {
    if (encoding != 'utf-8') throw "UTF8_converter: can only do utf-8"; //return Utf8.decode(this);
    return this;
};
var uripath_join = function uripath_join(base, given) {
    return _uri.join(given, base); // sad but true
};
var becauseSubexpression = null; // No reason needed
var diag_tracking = 0;
var diag_chatty_flag = 0;
var diag_progress = function diag_progress(str) {
/*$rdf.log.debug(str);*/ }; // why_BecauseOfData = function(doc, reason) { return doc };
var RDF_type_URI = "http://www.w3.org/1999/02/22-rdf-syntax-ns#type";
var DAML_sameAs_URI = "http://www.w3.org/2002/07/owl#sameAs";
/*
function SyntaxError(details) {
    return new __SyntaxError(details);
}
*/ function __SyntaxError(details) {
    this.details = details;
}
/*

$Id: n3parser.js 14561 2008-02-23 06:37:26Z kennyluck $

HAND EDITED FOR CONVERSION TO JAVASCRIPT

This module implements a Nptation3 parser, and the final
part of a notation3 serializer.

See also:

Notation 3
http://www.w3.org/DesignIssues/Notation3

Closed World Machine - and RDF Processor
http://www.w3.org/2000/10/swap/cwm

To DO: See also "@@" in comments

- Clean up interfaces
______________________________________________

Module originally by Dan Connolly, includeing notation3
parser and RDF generator. TimBL added RDF stream model
and N3 generation, replaced stream model with use
of common store/formula API.  Yosi Scharf developped
the module, including tests and test harness.

*/ var ADDED_HASH = "#";
var LOG_implies_URI = "http://www.w3.org/2000/10/swap/log#implies";
var INTEGER_DATATYPE = "http://www.w3.org/2001/XMLSchema#integer";
var FLOAT_DATATYPE = "http://www.w3.org/2001/XMLSchema#double";
var DECIMAL_DATATYPE = "http://www.w3.org/2001/XMLSchema#decimal";
var DATE_DATATYPE = "http://www.w3.org/2001/XMLSchema#date";
var DATETIME_DATATYPE = "http://www.w3.org/2001/XMLSchema#dateTime";
var BOOLEAN_DATATYPE = "http://www.w3.org/2001/XMLSchema#boolean";
var option_noregen = 0;
var _notQNameChars = "\t\r\n !\"#$%&'()*.,+/;<=>?@[\\]^`{|}~";
var _notNameChars = _notQNameChars + ":";
var _rdfns = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
var N3CommentCharacter = "#";
var eol = new RegExp("^[ \\t]*(#[^\\n]*)?\\r?\\n", 'g');
var eof = new RegExp("^[ \\t]*(#[^\\n]*)?$", 'g');
var ws = new RegExp("^[ \\t]*", 'g');
var signed_integer = new RegExp("^[-+]?[0-9]+", 'g');
var number_syntax = new RegExp("^([-+]?[0-9]+)(\\.[0-9]+)?(e[-+]?[0-9]+)?", 'g');
var datetime_syntax = new RegExp('^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9](T[0-9][0-9]:[0-9][0-9](:[0-9][0-9](\\.[0-9]*)?)?)?Z?');
var digitstring = new RegExp("^[0-9]+", 'g');
var interesting = new RegExp("[\\\\\\r\\n\\\"]", 'g');
var langcode = new RegExp("^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*", 'g');
function createSinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why) {
    return new SinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why);
}
exports.default = createSinkParser;
var SinkParser = /*#__PURE__*/ function() {
    function SinkParser1(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why) {
        _classCallCheckDefault.default(this, SinkParser1);
        if (typeof openFormula == 'undefined') openFormula = null;
        if (typeof thisDoc == 'undefined') thisDoc = "";
        if (typeof baseURI == 'undefined') baseURI = null;
        if (typeof genPrefix == 'undefined') genPrefix = "";
        if (typeof metaURI == 'undefined') metaURI = null;
        if (typeof flags == 'undefined') flags = "";
        if (typeof why == 'undefined') why = null;
        /*
    note: namespace names should *not* end in #;
    the # will get added during qname processing */ this._bindings = new pyjslib_Dict([]);
        this._flags = flags;
        if (thisDoc != "") {
            assertFudge(thisDoc.indexOf(":") >= 0, "Document URI not absolute: " + thisDoc);
            this._bindings[""] = thisDoc + "#";
        }
        this._store = store;
        if (genPrefix) store.setGenPrefix(genPrefix);
        this._thisDoc = thisDoc;
        this.source = store.sym(thisDoc);
        this.lines = 0;
        this.statementCount = 0;
        this.startOfLine = 0;
        this.previousLine = 0;
        this._genPrefix = genPrefix;
        this.keywords = new pyjslib_List([
            "a",
            "this",
            "bind",
            "has",
            "is",
            "of",
            "true",
            "false"
        ]);
        this.keywordsSet = 0;
        this._anonymousNodes = new pyjslib_Dict([]);
        this._variables = new pyjslib_Dict([]);
        this._parentVariables = new pyjslib_Dict([]);
        this._reason = why;
        this._reason2 = null;
        if (diag_tracking) this._reason2 = why_BecauseOfData(store.sym(thisDoc), this._reason);
        if (baseURI) this._baseURI = baseURI;
        else if (thisDoc) this._baseURI = thisDoc;
        else this._baseURI = null;
        assertFudge(!this._baseURI || this._baseURI.indexOf(":") >= 0);
        if (!this._genPrefix) {
            if (this._thisDoc) this._genPrefix = this._thisDoc + "#_g";
            else this._genPrefix = RDFSink_uniqueURI();
        }
        if (openFormula == null) {
            if (this._thisDoc) this._formula = store.formula(thisDoc + "#_formula");
            else this._formula = store.formula();
        } else this._formula = openFormula;
        this._context = this._formula;
        this._parentContext = null;
    }
    _createClassDefault.default(SinkParser1, [
        {
            key: "here",
            value: function here(i) {
                return this._genPrefix + "_L" + this.lines + "C" + (i - this.startOfLine + 1);
            }
        },
        {
            key: "formula",
            value: function formula() {
                return this._formula;
            }
        },
        {
            key: "loadStream",
            value: function loadStream(stream) {
                return this.loadBuf(stream.read());
            }
        },
        {
            key: "loadBuf",
            value: function loadBuf(buf) {
                /*
      Parses a buffer and returns its top level formula*/ this.startDoc();
                this.feed(buf);
                return this.endDoc();
            }
        },
        {
            key: "feed",
            value: function feed(octets) {
                /*
      Feed an octet stream tothe parser
       if BadSyntax is raised, the string
      passed in the exception object is the
      remainder after any statements have been parsed.
      So if there is more data to feed to the
      parser, it should be straightforward to recover.*/ var str = octets.decode("utf-8");
                var i = 0;
                while(i >= 0){
                    var j = this.skipSpace(str, i);
                    if (j < 0) return;
                    var i = this.directiveOrStatement(str, j);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "expected directive or statement");
                }
            }
        },
        {
            key: "directiveOrStatement",
            value: function directiveOrStatement(str, h) {
                var i = this.skipSpace(str, h);
                if (i < 0) return i;
                var j = this.directive(str, i);
                if (j >= 0) return this.checkDot(str, j);
                var j = this.statement(str, i);
                if (j >= 0) return this.checkDot(str, j);
                return j;
            }
        },
        {
            key: "tok",
            value: function tok(_tok, str, i) {
                /*
      Check for keyword.  Space must have been stripped on entry and
      we must not be at end of file.*/ var whitespace = "\t\n\v\f\r ";
                if (str.slice(i, i + 1) == "@") var i = i + 1;
                else {
                    if (_utils.ArrayIndexOf(this.keywords, _tok) < 0) return -1;
                }
                var k = i + pyjslib_len(_tok);
                if (str.slice(i, k) == _tok && _notQNameChars.indexOf(str.charAt(k)) >= 0) return k;
                else return -1;
            }
        },
        {
            key: "directive",
            value: function directive(str, i) {
                var j = this.skipSpace(str, i);
                if (j < 0) return j;
                var res = new pyjslib_List([]);
                var j = this.tok("bind", str, i);
                if (j > 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "keyword bind is obsolete: use @prefix");
                var j = this.tok("keywords", str, i);
                if (j > 0) {
                    var i = this.commaSeparatedList(str, j, res, false);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "'@keywords' needs comma separated list of words");
                    this.setKeywords(pyjslib_slice(res, null, null));
                    if (diag_chatty_flag > 80) diag_progress("Keywords ", this.keywords);
                    return i;
                }
                var j = this.tok("forAll", str, i);
                if (j > 0) {
                    var i = this.commaSeparatedList(str, j, res, true);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad variable list after @forAll");
                    var __x = new pyjslib_Iterator(res);
                    try {
                        while(true){
                            var x = __x.next();
                            if (_utils.ArrayIndexOf(this._variables, x) < 0 || _utils.ArrayIndexOf(this._parentVariables, x) >= 0) this._variables[x] = this._context.newUniversal(x);
                        }
                    } catch (e) {
                        if (e != StopIteration) throw e;
                    }
                    return i;
                }
                var j = this.tok("forSome", str, i);
                if (j > 0) {
                    var i = this.commaSeparatedList(str, j, res, this.uri_ref2);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad variable list after @forSome");
                    var __x = new pyjslib_Iterator(res);
                    try {
                        while(true){
                            var x = __x.next();
                            this._context.declareExistential(x);
                        }
                    } catch (e) {
                        if (e != StopIteration) throw e;
                    }
                    return i;
                }
                var j = this.tok("prefix", str, i);
                if (j >= 0) {
                    var t = new pyjslib_List([]);
                    var i = this.qname(str, j, t);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "expected qname after @prefix");
                    var j = this.uri_ref2(str, i, t);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "expected <uriref> after @prefix _qname_");
                    var ns = t[1].uri;
                    if (this._baseURI) var ns = uripath_join(this._baseURI, ns);
                    else assertFudge(ns.indexOf(":") >= 0, "With no base URI, cannot handle relative URI for NS");
                    assertFudge(ns.indexOf(":") >= 0);
                    this._bindings[t[0][0]] = ns;
                    this.bind(t[0][0], hexify(ns));
                    return j;
                }
                var j = this.tok("base", str, i);
                if (j >= 0) {
                    var t = new pyjslib_List([]);
                    var i = this.uri_ref2(str, j, t);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "expected <uri> after @base ");
                    var ns = t[0].uri;
                    if (this._baseURI) var ns = uripath_join(this._baseURI, ns);
                    else throw BadSyntax(this._thisDoc, this.lines, str, j, "With no previous base URI, cannot use relative URI in @base  <" + ns + ">");
                    assertFudge(ns.indexOf(":") >= 0);
                    this._baseURI = ns;
                    return i;
                }
                return -1;
            }
        },
        {
            key: "bind",
            value: function bind(qn, uri) {
                if (qn == "") ;
                else this._store.setPrefixForURI(qn, uri);
            }
        },
        {
            key: "setKeywords",
            value: function setKeywords(k) {
                /*
      Takes a list of strings*/ if (k == null) this.keywordsSet = 0;
                else {
                    this.keywords = k;
                    this.keywordsSet = 1;
                }
            }
        },
        {
            key: "startDoc",
            value: function startDoc() {
            }
        },
        {
            key: "endDoc",
            value: function endDoc() {
                /*
      Signal end of document and stop parsing. returns formula*/ return this._formula;
            }
        },
        {
            key: "makeStatement",
            value: function makeStatement(quad) {
                quad[0].add(quad[2], quad[1], quad[3], this.source);
                this.statementCount += 1;
            }
        },
        {
            key: "statement",
            value: function statement(str, i) {
                var r = new pyjslib_List([]);
                var i = this.object(str, i, r);
                if (i < 0) return i;
                var j = this.property_list(str, i, r[0]);
                if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "expected propertylist");
                return j;
            }
        },
        {
            key: "subject",
            value: function subject(str, i, res) {
                return this.item(str, i, res);
            }
        },
        {
            key: "verb",
            value: function verb(str, i, res) {
                /*
      has _prop_
      is _prop_ of
      a
      =
      _prop_
      >- prop ->
      <- prop -<
      _operator_*/ var j = this.skipSpace(str, i);
                if (j < 0) return j;
                var r = new pyjslib_List([]);
                var j = this.tok("has", str, i);
                if (j >= 0) {
                    var i = this.prop(str, j, r);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "expected property after 'has'");
                    res.push(new pyjslib_Tuple([
                        "->",
                        r[0]
                    ]));
                    return i;
                }
                var j = this.tok("is", str, i);
                if (j >= 0) {
                    var i = this.prop(str, j, r);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "expected <property> after 'is'");
                    var j = this.skipSpace(str, i);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "End of file found, expected property after 'is'");
                    var i = j;
                    var j = this.tok("of", str, i);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "expected 'of' after 'is' <prop>");
                    res.push(new pyjslib_Tuple([
                        "<-",
                        r[0]
                    ]));
                    return j;
                }
                var j = this.tok("a", str, i);
                if (j >= 0) {
                    res.push(new pyjslib_Tuple([
                        "->",
                        this._store.sym(RDF_type_URI)
                    ]));
                    return j;
                }
                if (str.slice(i, i + 2) == "<=") {
                    res.push(new pyjslib_Tuple([
                        "<-",
                        this._store.sym(Logic_NS + "implies")
                    ]));
                    return i + 2;
                }
                if (str.slice(i, i + 1) == "=") {
                    if (str.slice(i + 1, i + 2) == ">") {
                        res.push(new pyjslib_Tuple([
                            "->",
                            this._store.sym(Logic_NS + "implies")
                        ]));
                        return i + 2;
                    }
                    res.push(new pyjslib_Tuple([
                        "->",
                        this._store.sym(DAML_sameAs_URI)
                    ]));
                    return i + 1;
                }
                if (str.slice(i, i + 2) == ":=") {
                    res.push(new pyjslib_Tuple([
                        "->",
                        Logic_NS + "becomes"
                    ]));
                    return i + 2;
                }
                var j = this.prop(str, i, r);
                if (j >= 0) {
                    res.push(new pyjslib_Tuple([
                        "->",
                        r[0]
                    ]));
                    return j;
                }
                if (str.slice(i, i + 2) == ">-" || str.slice(i, i + 2) == "<-") throw BadSyntax(this._thisDoc, this.lines, str, j, ">- ... -> syntax is obsolete.");
                return -1;
            }
        },
        {
            key: "prop",
            value: function prop(str, i, res) {
                return this.item(str, i, res);
            }
        },
        {
            key: "item",
            value: function item(str, i, res) {
                return this.path(str, i, res);
            }
        },
        {
            key: "blankNode",
            value: function blankNode(uri) {
                return this._context.bnode(uri, this._reason2);
            }
        },
        {
            key: "path",
            value: function path(str, i, res) {
                /*
      Parse the path production.
      */ var j = this.nodeOrLiteral(str, i, res);
                if (j < 0) return j;
                while("!^.".indexOf(str.slice(j, j + 1)) >= 0){
                    var ch = str.slice(j, j + 1);
                    if (ch == ".") {
                        var ahead = str.slice(j + 1, j + 2);
                        if (!ahead || _notNameChars.indexOf(ahead) >= 0 && ":?<[{(".indexOf(ahead) < 0) break;
                    }
                    var subj = res.pop();
                    var obj = this.blankNode(this.here(j));
                    var j = this.node(str, j + 1, res);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found in middle of path syntax");
                    var pred = res.pop();
                    if (ch == "^") this.makeStatement(new pyjslib_Tuple([
                        this._context,
                        pred,
                        obj,
                        subj
                    ]));
                    else this.makeStatement(new pyjslib_Tuple([
                        this._context,
                        pred,
                        subj,
                        obj
                    ]));
                    res.push(obj);
                }
                return j;
            }
        },
        {
            key: "anonymousNode",
            value: function anonymousNode(ln) {
                /*
      Remember or generate a term for one of these _: anonymous nodes*/ var term = this._anonymousNodes[ln];
                if (term) return term;
                var term = this._store.bnode(ln); // var term = this._store.bnode(this._context, this._reason2); eh?
                this._anonymousNodes[ln] = term;
                return term;
            }
        },
        {
            key: "node",
            value: function node(str, i, res, subjectAlready) {
                if (typeof subjectAlready == 'undefined') subjectAlready = null;
                /*
      Parse the <node> production.
      Space is now skipped once at the beginning
      instead of in multipe calls to self.skipSpace().
      */ var subj = subjectAlready;
                var j = this.skipSpace(str, i);
                if (j < 0) return j;
                var i = j;
                var ch = str.slice(i, i + 1);
                if (ch == "[") {
                    var bnodeID = this.here(i);
                    var j = this.skipSpace(str, i + 1);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF after '['");
                    if (str.slice(j, j + 1) == "=") {
                        var i = j + 1;
                        var objs = new pyjslib_List([]);
                        var j = this.objectList(str, i, objs);
                        if (j >= 0) {
                            var subj = objs[0];
                            if (pyjslib_len(objs) > 1) {
                                var __obj = new pyjslib_Iterator(objs);
                                try {
                                    while(true){
                                        var obj = __obj.next();
                                        this.makeStatement(new pyjslib_Tuple([
                                            this._context,
                                            this._store.sym(DAML_sameAs_URI),
                                            subj,
                                            obj
                                        ]));
                                    }
                                } catch (e) {
                                    if (e != StopIteration) throw e;
                                }
                            }
                            var j = this.skipSpace(str, j);
                            if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF when objectList expected after [ = ");
                            if (str.slice(j, j + 1) == ";") var j = j + 1;
                        } else throw BadSyntax(this._thisDoc, this.lines, str, i, "objectList expected after [= ");
                    }
                    if (subj == null) var subj = this.blankNode(bnodeID);
                    var i = this.property_list(str, j, subj);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "property_list expected");
                    var j = this.skipSpace(str, i);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF when ']' expected after [ <propertyList>");
                    if (str.slice(j, j + 1) != "]") throw BadSyntax(this._thisDoc, this.lines, str, j, "']' expected");
                    res.push(subj);
                    return j + 1;
                }
                if (ch == "{") {
                    var ch2 = str.slice(i + 1, i + 2);
                    if (ch2 == "$") {
                        i += 1;
                        var j = i + 1;
                        var mylist = new pyjslib_List([]);
                        var first_run = true;
                        while(true){
                            var i = this.skipSpace(str, j);
                            if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "needed '$}', found end.");
                            if (str.slice(i, i + 2) == "$}") {
                                var j = i + 2;
                                break;
                            }
                            if (!first_run) {
                                if (str.slice(i, i + 1) == ",") i += 1;
                                else throw BadSyntax(this._thisDoc, this.lines, str, i, "expected: ','");
                            } else var first_run = false;
                            var item = new pyjslib_List([]);
                            var j = this.item(str, i, item);
                            if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "expected item in set or '$}'");
                            mylist.push(item[0]);
                        }
                        res.push(this._store.newSet(mylist, this._context));
                        return j;
                    } else {
                        var j = i + 1;
                        var oldParentContext = this._parentContext;
                        this._parentContext = this._context;
                        var parentAnonymousNodes = this._anonymousNodes;
                        var grandParentVariables = this._parentVariables;
                        this._parentVariables = this._variables;
                        this._anonymousNodes = new pyjslib_Dict([]);
                        this._variables = this._variables.slice();
                        var reason2 = this._reason2;
                        this._reason2 = becauseSubexpression;
                        if (subj == null) var subj = this._store.formula();
                        this._context = subj;
                        while(true){
                            var i = this.skipSpace(str, j);
                            if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "needed '}', found end.");
                            if (str.slice(i, i + 1) == "}") {
                                var j = i + 1;
                                break;
                            }
                            var j = this.directiveOrStatement(str, i);
                            if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "expected statement or '}'");
                        }
                        this._anonymousNodes = parentAnonymousNodes;
                        this._variables = this._parentVariables;
                        this._parentVariables = grandParentVariables;
                        this._context = this._parentContext;
                        this._reason2 = reason2;
                        this._parentContext = oldParentContext;
                        res.push(subj.close());
                        return j;
                    }
                }
                if (ch == "(") {
                    var thing_type = this._store.list;
                    var ch2 = str.slice(i + 1, i + 2);
                    if (ch2 == "$") {
                        var thing_type = this._store.newSet;
                        i += 1;
                    }
                    var j = i + 1;
                    var mylist = new pyjslib_List([]);
                    while(true){
                        var i = this.skipSpace(str, j);
                        if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "needed ')', found end.");
                        if (str.slice(i, i + 1) == ")") {
                            var j = i + 1;
                            break;
                        }
                        var item = new pyjslib_List([]);
                        var j = this.item(str, i, item);
                        if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "expected item in list or ')'");
                        mylist.push(item[0]);
                    }
                    res.push(thing_type(mylist, this._context));
                    return j;
                }
                var j = this.tok("this", str, i);
                if (j >= 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "Keyword 'this' was ancient N3. Now use @forSome and @forAll keywords.");
                var j = this.tok("true", str, i);
                if (j >= 0) {
                    res.push(true);
                    return j;
                }
                var j = this.tok("false", str, i);
                if (j >= 0) {
                    res.push(false);
                    return j;
                }
                if (subj == null) {
                    var j = this.uri_ref2(str, i, res);
                    if (j >= 0) return j;
                }
                return -1;
            }
        },
        {
            key: "property_list",
            value: function property_list(str, i, subj) {
                /*
      Parse property list
      Leaves the terminating punctuation in the buffer
      */ while(true){
                    var j = this.skipSpace(str, i);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF found when expected verb in property list");
                    if (str.slice(j, j + 2) == ":-") {
                        var i = j + 2;
                        var res = new pyjslib_List([]);
                        var j = this.node(str, i, res, subj);
                        if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "bad {} or () or [] node after :- ");
                        var i = j;
                        continue;
                    }
                    var i = j;
                    var v = new pyjslib_List([]);
                    var j = this.verb(str, i, v);
                    if (j <= 0) return i;
                    var objs = new pyjslib_List([]);
                    var i = this.objectList(str, j, objs);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "objectList expected");
                    var __obj = new pyjslib_Iterator(objs);
                    try {
                        while(true){
                            var obj = __obj.next();
                            var pairFudge = v[0];
                            var dir = pairFudge[0];
                            var sym = pairFudge[1];
                            if (dir == "->") this.makeStatement(new pyjslib_Tuple([
                                this._context,
                                sym,
                                subj,
                                obj
                            ]));
                            else this.makeStatement(new pyjslib_Tuple([
                                this._context,
                                sym,
                                obj,
                                subj
                            ]));
                        }
                    } catch (e) {
                        if (e != StopIteration) throw e;
                    }
                    var j = this.skipSpace(str, i);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found in list of objects");
                    if (str.slice(i, i + 1) != ";") return i;
                    var i = i + 1;
                }
            }
        },
        {
            key: "commaSeparatedList",
            value: function commaSeparatedList(str, j, res, ofUris) {
                /*
      return value: -1 bad syntax; >1 new position in str
      res has things found appended
       Used to use a final value of the function to be called, e.g. this.bareWord
      but passing the function didn't work fo js converion pyjs
      */ var i = this.skipSpace(str, j);
                if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF found expecting comma sep list");
                if (str.charAt(i) == ".") return j;
                if (ofUris) var i = this.uri_ref2(str, i, res);
                else var i = this.bareWord(str, i, res);
                if (i < 0) return -1;
                while(true){
                    var j = this.skipSpace(str, i);
                    if (j < 0) return j;
                    var ch = str.slice(j, j + 1);
                    if (ch != ",") {
                        if (ch != ".") return -1;
                        return j;
                    }
                    if (ofUris) var i = this.uri_ref2(str, j + 1, res);
                    else var i = this.bareWord(str, j + 1, res);
                    if (i < 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "bad list content");
                }
            }
        },
        {
            key: "objectList",
            value: function objectList(str, i, res) {
                var i = this.object(str, i, res);
                if (i < 0) return -1;
                while(true){
                    var j = this.skipSpace(str, i);
                    if (j < 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found after object");
                    if (str.slice(j, j + 1) != ",") return j;
                    var i = this.object(str, j + 1, res);
                    if (i < 0) return i;
                }
            }
        },
        {
            key: "checkDot",
            value: function checkDot(str, i) {
                var j = this.skipSpace(str, i);
                if (j < 0) return j;
                if (str.slice(j, j + 1) == ".") return j + 1;
                if (str.slice(j, j + 1) == "}") return j;
                if (str.slice(j, j + 1) == "]") return j;
                throw BadSyntax(this._thisDoc, this.lines, str, j, "expected '.' or '}' or ']' at end of statement");
            }
        },
        {
            key: "uri_ref2",
            value: function uri_ref2(str, i, res) {
                /*
      Generate uri from n3 representation.
       Note that the RDF convention of directly concatenating
      NS and local name is now used though I prefer inserting a '#'
      to make the namesapces look more like what XML folks expect.
      */ var qn = new pyjslib_List([]);
                var j = this.qname(str, i, qn);
                if (j >= 0) {
                    var pairFudge = qn[0];
                    var pfx = pairFudge[0];
                    var ln = pairFudge[1];
                    if (pfx == null) {
                        assertFudge(0, "not used?");
                        var ns = this._baseURI + ADDED_HASH;
                    } else {
                        var ns = this._bindings[pfx];
                        if (!ns) {
                            if (pfx == "_") {
                                res.push(this.anonymousNode(ln));
                                return j;
                            }
                            throw BadSyntax(this._thisDoc, this.lines, str, i, "Prefix " + pfx + " not bound.");
                        }
                    }
                    var symb = this._store.sym(ns + ln);
                    if (_utils.ArrayIndexOf(this._variables, symb) >= 0) res.push(this._variables[symb]);
                    else res.push(symb);
                    return j;
                }
                var i = this.skipSpace(str, i);
                if (i < 0) return -1;
                if (str.charAt(i) == "?") {
                    var v = new pyjslib_List([]);
                    var j = this.variable(str, i, v);
                    if (j > 0) {
                        res.push(v[0]);
                        return j;
                    }
                    return -1;
                } else if (str.charAt(i) == "<") {
                    var i = i + 1;
                    var st = i;
                    while(i < pyjslib_len(str)){
                        if (str.charAt(i) == ">") {
                            var uref = str.slice(st, i);
                            if (this._baseURI) var uref = uripath_join(this._baseURI, uref);
                            else assertFudge(uref.indexOf(":") >= 0, "With no base URI, cannot deal with relative URIs");
                            if (str.slice(i - 1, i) == "#" && !(pyjslib_slice(uref, -1, null) == "#")) var uref = uref + "#";
                            var symb = this._store.sym(uref);
                            if (_utils.ArrayIndexOf(this._variables, symb) >= 0) res.push(this._variables[symb]);
                            else res.push(symb);
                            return i + 1;
                        }
                        var i = i + 1;
                    }
                    throw BadSyntax(this._thisDoc, this.lines, str, j, "unterminated URI reference");
                } else if (this.keywordsSet) {
                    var v = new pyjslib_List([]);
                    var j = this.bareWord(str, i, v);
                    if (j < 0) return -1;
                    if (_utils.ArrayIndexOf(this.keywords, v[0]) >= 0) throw BadSyntax(this._thisDoc, this.lines, str, i, "Keyword \"" + v[0] + "\" not allowed here.");
                    res.push(this._store.sym(this._bindings[""] + v[0]));
                    return j;
                } else return -1;
            }
        },
        {
            key: "skipSpace",
            value: function skipSpace(str, i) {
                /*
      Skip white space, newlines and comments.
      return -1 if EOF, else position of first non-ws character*/ var whitespace = " \n\r\t\f\x0B\xA0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u200B\u2028\u2029\u3000";
                for(var j = i ? i : 0; j < str.length; j++){
                    var ch = str.charAt(j); // console.log("    skipspace j= "+j + " i= " + i + " n= " + str.length);
                    // console.log(" skipspace ch <" + ch + ">");
                    if (whitespace.indexOf(ch) < 0) {
                        //not ws
                        // console.log(" skipspace 2 ch <" + ch + ">");
                        if (str.charAt(j) === '#') for(;; j++){
                            // console.log("    skipspace2 j= "+j + " i= " + i + " n= " + str.length);
                            if (j === str.length) return -1; // EOF
                            if (str.charAt(j) === '\n') {
                                this.lines = this.lines + 1;
                                break;
                            }
                        }
                        else // Not hash - something interesting
                        // console.log(" skipspace 3 ch <" + ch + ">");
                        return j;
                    } else // Whitespace
                    // console.log(" skipspace 5 ch <" + ch + ">");
                    if (str.charAt(j) === '\n') this.lines = this.lines + 1;
                } // next j
                return -1; // EOF
            }
        },
        {
            key: "variable",
            value: function variable(str, i, res) {
                /*
      ?abc -> variable(:abc)
      */ var j = this.skipSpace(str, i);
                if (j < 0) return -1;
                if (str.slice(j, j + 1) != "?") return -1;
                var j = j + 1;
                var i = j;
                if ("0123456789-".indexOf(str.charAt(j)) >= 0) throw BadSyntax(this._thisDoc, this.lines, str, j, "Varible name can't start with '" + str.charAt(j) + "s'");
                while(i < pyjslib_len(str) && _notNameChars.indexOf(str.charAt(i)) < 0)var i = i + 1;
                if (this._parentContext == null) throw BadSyntax(this._thisDoc, this.lines, str, j, "Can't use ?xxx syntax for variable in outermost level: " + str.slice(j - 1, i));
                res.push(this._store.variable(str.slice(j, i)));
                return i;
            }
        },
        {
            key: "bareWord",
            value: function bareWord(str, i, res) {
                /*
      abc -> :abc
      */ var j = this.skipSpace(str, i);
                if (j < 0) return -1;
                var ch = str.charAt(j);
                if ("0123456789-".indexOf(ch) >= 0) return -1;
                if (_notNameChars.indexOf(ch) >= 0) return -1;
                var i = j;
                while(i < pyjslib_len(str) && _notNameChars.indexOf(str.charAt(i)) < 0)var i = i + 1;
                res.push(str.slice(j, i));
                return i;
            }
        },
        {
            key: "qname",
            value: function qname(str, i, res) {
                /*
       xyz:def -> ('xyz', 'def')
      If not in keywords and keywordsSet: def -> ('', 'def')
      :def -> ('', 'def')
      */ var i = this.skipSpace(str, i);
                if (i < 0) return -1;
                var c = str.charAt(i);
                if ("0123456789-+".indexOf(c) >= 0) return -1;
                if (_notNameChars.indexOf(c) < 0) {
                    var ln = c;
                    var i = i + 1;
                    while(i < pyjslib_len(str)){
                        var c = str.charAt(i);
                        if (_notNameChars.indexOf(c) < 0) {
                            var ln = ln + c;
                            var i = i + 1;
                        } else break;
                    }
                } else var ln = "";
                if (i < pyjslib_len(str) && str.charAt(i) == ":") {
                    var pfx = ln;
                    var i = i + 1;
                    var ln = "";
                    while(i < pyjslib_len(str)){
                        var c = str.charAt(i);
                        if (_notNameChars.indexOf(c) < 0) {
                            var ln = ln + c;
                            var i = i + 1;
                        } else break;
                    }
                    res.push(new pyjslib_Tuple([
                        pfx,
                        ln
                    ]));
                    return i;
                } else {
                    if (ln && this.keywordsSet && _utils.ArrayIndexOf(this.keywords, ln) < 0) {
                        res.push(new pyjslib_Tuple([
                            "",
                            ln
                        ]));
                        return i;
                    }
                    return -1;
                }
            }
        },
        {
            key: "object",
            value: function object(str, i, res) {
                var j = this.subject(str, i, res);
                if (j >= 0) return j;
                else {
                    var j = this.skipSpace(str, i);
                    if (j < 0) return -1;
                    else var i = j;
                    var delim = null;
                    var ch = str.charAt(i);
                    if (ch == "\"" || ch == "'") {
                        if (str.slice(i, i + 3 == ch + ch)) delim = ch + ch + ch;
                        else delim = ch;
                        var i = i + pyjslib_len(delim);
                        var pairFudge = this.strconst(str, i, delim);
                        var j = pairFudge[0];
                        var s = pairFudge[1];
                        res.push(this._store.literal(s));
                        diag_progress("New string const ", s, j);
                        return j;
                    } else return -1;
                }
            }
        },
        {
            key: "nodeOrLiteral",
            value: function nodeOrLiteral(str, i, res) {
                var j = this.node(str, i, res);
                if (j >= 0) return j;
                else {
                    var j = this.skipSpace(str, i);
                    if (j < 0) return -1;
                    else var i = j;
                    var ch = str.charAt(i);
                    if ("-+0987654321".indexOf(ch) >= 0) {
                        datetime_syntax.lastIndex = 0;
                        var m = datetime_syntax.exec(str.slice(i));
                        if (m != null) {
                            // j =  ( i + datetime_syntax.lastIndex ) ;
                            var val = m[0];
                            j = i + val.length;
                            if (val.indexOf("T") >= 0) res.push(this._store.literal(val, this._store.sym(DATETIME_DATATYPE)));
                            else res.push(this._store.literal(val, this._store.sym(DATE_DATATYPE)));
                        } else {
                            number_syntax.lastIndex = 0;
                            var m = number_syntax.exec(str.slice(i));
                            if (m == null) throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad number or date syntax");
                            j = i + number_syntax.lastIndex;
                            var val = str.slice(i, j);
                            if (val.indexOf("e") >= 0) res.push(this._store.literal(parseFloat(val), this._store.sym(FLOAT_DATATYPE)));
                            else if (str.slice(i, j).indexOf(".") >= 0) res.push(this._store.literal(parseFloat(val), this._store.sym(DECIMAL_DATATYPE)));
                            else res.push(this._store.literal(parseInt(val), this._store.sym(INTEGER_DATATYPE)));
                        }
                        return j; // Where we have got up to
                    }
                    if (str.charAt(i) == "\"") {
                        if (str.slice(i, i + 3) == "\"\"\"") var delim = "\"\"\"";
                        else var delim = "\"";
                        var i = i + pyjslib_len(delim);
                        var dt = null;
                        var pairFudge = this.strconst(str, i, delim);
                        var j = pairFudge[0];
                        var s = pairFudge[1];
                        var lang = null;
                        if (str.slice(j, j + 1) == "@") {
                            langcode.lastIndex = 0;
                            var m = langcode.exec(str.slice(j + 1));
                            if (m == null) throw BadSyntax(this._thisDoc, startline, str, i, "Bad language code syntax on string literal, after @");
                            var i = langcode.lastIndex + j + 1;
                            var lang = str.slice(j + 1, i);
                            var j = i;
                        }
                        if (str.slice(j, j + 2) == "^^") {
                            var res2 = new pyjslib_List([]);
                            var j = this.uri_ref2(str, j + 2, res2);
                            var dt = res2[0];
                        }
                        res.push(this._store.literal(s, lang || dt));
                        return j;
                    } else return -1;
                }
            }
        },
        {
            key: "strconst",
            value: function strconst(str, i, delim) {
                /*
      parse an N3 string constant delimited by delim.
      return index, val
      */ var j = i;
                var ustr = "";
                var startline = this.lines;
                while(j < pyjslib_len(str)){
                    var i = j + pyjslib_len(delim);
                    if (str.slice(j, i) == delim) return new pyjslib_Tuple([
                        i,
                        ustr
                    ]);
                    if (str.charAt(j) == "\"") {
                        var ustr = ustr + "\"";
                        var j = j + 1;
                        continue;
                    }
                    interesting.lastIndex = 0;
                    var m = interesting.exec(str.slice(j));
                    if (!m) throw BadSyntax(this._thisDoc, startline, str, j, "Closing quote missing in string at ^ in " + str.slice(j - 20, j) + "^" + str.slice(j, j + 20));
                    var i = j + interesting.lastIndex - 1;
                    var ustr = ustr + str.slice(j, i);
                    var ch = str.charAt(i);
                    if (ch == "\"") {
                        var j = i;
                        continue;
                    } else if (ch == "\r") {
                        var j = i + 1;
                        continue;
                    } else if (ch == "\n") {
                        if (delim == "\"") throw BadSyntax(this._thisDoc, startline, str, i, "newline found in string literal");
                        this.lines = this.lines + 1;
                        var ustr = ustr + ch;
                        var j = i + 1;
                        this.previousLine = this.startOfLine;
                        this.startOfLine = j;
                    } else if (ch == "\\") {
                        var j = i + 1;
                        var ch = str.slice(j, j + 1);
                        if (!ch) throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal (2)");
                        var k = string_find("abfrtvn\\\"", ch);
                        if (k >= 0) {
                            var uch = "\a\b\f\r\t\v\n\\\"".charAt(k);
                            var ustr = ustr + uch;
                            var j = j + 1;
                        } else if (ch == "u") {
                            var pairFudge = this.uEscape(str, j + 1, startline);
                            var j = pairFudge[0];
                            var ch = pairFudge[1];
                            var ustr = ustr + ch;
                        } else if (ch == "U") {
                            var pairFudge = this.UEscape(str, j + 1, startline);
                            var j = pairFudge[0];
                            var ch = pairFudge[1];
                            var ustr = ustr + ch;
                        } else throw BadSyntax(this._thisDoc, this.lines, str, i, "bad escape");
                    }
                }
                throw BadSyntax(this._thisDoc, this.lines, str, i, "unterminated string literal");
            }
        },
        {
            key: "uEscape",
            value: function uEscape(str, i, startline) {
                var j = i;
                var count = 0;
                var value = 0;
                while(count < 4){
                    var chFudge = str.slice(j, j + 1);
                    var ch = chFudge.toLowerCase();
                    var j = j + 1;
                    if (ch == "") throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal(3)");
                    var k = string_find("0123456789abcdef", ch);
                    if (k < 0) throw BadSyntax(this._thisDoc, startline, str, i, "bad string literal hex escape");
                    var value = value * 16 + k;
                    var count = count + 1;
                }
                var uch = String.fromCharCode(value);
                return new pyjslib_Tuple([
                    j,
                    uch
                ]);
            }
        },
        {
            key: "UEscape",
            value: function UEscape(str, i, startline) {
                var j = i;
                var count = 0;
                var value = "\\U";
                while(count < 8){
                    var chFudge = str.slice(j, j + 1);
                    var ch = chFudge.toLowerCase();
                    var j = j + 1;
                    if (ch == "") throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal(3)");
                    var k = string_find("0123456789abcdef", ch);
                    if (k < 0) throw BadSyntax(this._thisDoc, startline, str, i, "bad string literal hex escape");
                    var value = value + ch;
                    var count = count + 1;
                }
                var uch = stringFromCharCode("0x" + pyjslib_slice(value, 2, 10) - 0);
                return new pyjslib_Tuple([
                    j,
                    uch
                ]);
            }
        }
    ]);
    return SinkParser1;
}();
function OLD_BadSyntax(uri, lines, str, i, why) {
    return new __OLD_BadSyntax(uri, lines, str, i, why);
}
function __OLD_BadSyntax(uri, lines, str, i, why) {
    this._str = str.encode("utf-8");
    this._str = str;
    this._i = i;
    this._why = why;
    this.lines = lines;
    this._uri = uri;
}
__OLD_BadSyntax.prototype.toString = function() {
    var str = this._str;
    var i = this._i;
    var st = 0;
    if (i > 60) {
        var pre = "...";
        var st = i - 60;
    } else var pre = "";
    if (pyjslib_len(str) - i > 60) var post = "...";
    else var post = "";
    return "Line %i of <%s>: Bad syntax (%s) at ^ in:\n\"%s%s^%s%s\"" % new pyjslib_Tuple([
        this.lines + 1,
        this._uri,
        this._why,
        pre,
        str.slice(st, i),
        str.slice(i, i + 60),
        post
    ]);
};
function BadSyntax(uri, lines, str, i, why) {
    var lineNo = lines + 1;
    var msg = "Line " + lineNo + " of <" + uri + ">: Bad syntax: " + why + "\nat: \"" + str.slice(i, i + 30) + "\"";
    var e = new SyntaxError(msg, uri, lineNo);
    e.lineNo = lineNo;
    e.characterInFile = i;
    e.syntaxProblem = why;
    return e;
}
function stripCR(str) {
    var res = "";
    var __ch = new pyjslib_Iterator(str);
    try {
        while(true){
            var ch = __ch.next();
            if (ch != "\r") var res = res + ch;
        }
    } catch (e) {
        if (e != StopIteration) throw e;
    }
    return res;
}
function dummyWrite(x) {
}

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/typeof":"jgQjt","./uri":"cwuSF","./utils":"2V7vH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aLUnk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extendedTermFactory = require("./factories/extended-term-factory");
var _extendedTermFactoryDefault = parcelHelpers.interopDefault(_extendedTermFactory);
var _jsonldparser = require("./jsonldparser"); // @ts-ignore is this injected?
var _jsonldparserDefault = parcelHelpers.interopDefault(_jsonldparser);
var _n3 = require("n3"); // @@ Goal: remove this dependency
var _n3Parser = require("./n3parser");
var _n3ParserDefault = parcelHelpers.interopDefault(_n3Parser);
var _rdfaparser = require("./rdfaparser");
var _rdfxmlparser = require("./rdfxmlparser");
var _rdfxmlparserDefault = parcelHelpers.interopDefault(_rdfxmlparser);
var _patchParser = require("./patch-parser");
var _patchParserDefault = parcelHelpers.interopDefault(_patchParser);
var _utilsJs = require("./utils-js");
var _types = require("./types");
function parse(str, kb, base) {
    var contentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'text/turtle';
    var callback = arguments.length > 4 ? arguments[4] : undefined;
    contentType = contentType || _types.TurtleContentType;
    contentType = contentType.split(';')[0];
    try {
        if (contentType === _types.N3ContentType || contentType === _types.TurtleContentType) {
            var p = _n3ParserDefault.default(kb, kb, base, base, null, null, '', null);
            p.loadBuf(str);
            executeCallback();
        } else if (contentType === _types.RDFXMLContentType) {
            var parser = new _rdfxmlparserDefault.default(kb);
            parser.parse(_utilsJs.parseXML(str), base, kb.sym(base));
            executeCallback();
        } else if (contentType === _types.XHTMLContentType) {
            _rdfaparser.parseRDFaDOM(_utilsJs.parseXML(str, {
                contentType: _types.XHTMLContentType
            }), kb, base);
            executeCallback();
        } else if (contentType === _types.HTMLContentType) {
            _rdfaparser.parseRDFaDOM(_utilsJs.parseXML(str, {
                contentType: _types.HTMLContentType
            }), kb, base);
            executeCallback();
        } else if (contentType === _types.SPARQLUpdateContentType || contentType === _types.SPARQLUpdateSingleMatchContentType) {
            // @@ we handle a subset
            _patchParserDefault.default(str, kb, base);
            executeCallback();
        } else if (contentType === _types.JSONLDContentType) _jsonldparserDefault.default(str, kb, base, executeCallback);
        else if (contentType === _types.NQuadsContentType || contentType === _types.NQuadsAltContentType) {
            var n3Parser = new _n3.Parser({
                factory: _extendedTermFactoryDefault.default
            });
            nquadCallback(null, str);
        } else if (contentType === undefined) throw new Error("contentType is undefined");
        else throw new Error("Don't know how to parse " + contentType + ' yet');
    } catch (e1) {
        // @ts-ignore
        executeErrorCallback(e1);
    }
    parse.handled = {
        'text/n3': true,
        'text/turtle': true,
        'application/rdf+xml': true,
        'application/xhtml+xml': true,
        'text/html': true,
        'application/sparql-update': true,
        'application/sparql-update-single-match': true,
        'application/ld+json': true,
        'application/nquads': true,
        'application/n-quads': true
    };
    function executeCallback() {
        if (callback) callback(null, kb);
        else return;
    }
    function executeErrorCallback(e) {
        if (contentType !== _types.JSONLDContentType || contentType !== _types.NQuadsContentType || contentType !== _types.NQuadsAltContentType) {
            if (callback) callback(e, kb);
            else {
                var e2 = new Error('' + e + ' while trying to parse <' + base + '> as ' + contentType); //@ts-ignore .cause is not a default error property
                e2.cause = e;
                throw e2;
            }
        }
    }
    /*
    function setJsonLdBase (doc, base) {
      if (doc instanceof Array) {
        return
      }
      if (!('@context' in doc)) {
        doc['@context'] = {}
      }
      doc['@context']['@base'] = base
    }
  */ function nquadCallback(err, nquads) {
        if (err) callback(err, kb);
        try {
            n3Parser.parse(nquads, tripleCallback);
        } catch (err1) {
            callback(err1, kb);
        }
    }
    function tripleCallback(err, triple) {
        if (triple) kb.add(triple.subject, triple.predicate, triple.object, triple.graph);
        else callback(err, kb);
    }
}
exports.default = parse;

},{"./factories/extended-term-factory":"g1HzI","./jsonldparser":"ad9Kd","n3":"6eLdg","./n3parser":"f4bGR","./rdfaparser":"4L3yv","./rdfxmlparser":"5j1sr","./patch-parser":"bRSLG","./utils-js":"2DMBx","./types":"hXMiD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g1HzI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _collection = require("../collection");
var _collectionDefault = parcelHelpers.interopDefault(_collection);
var _canonicalDataFactory = require("./canonical-data-factory");
var _canonicalDataFactoryDefault = parcelHelpers.interopDefault(_canonicalDataFactory);
var _types = require("../types");
var _factoryTypes = require("./factory-types");
var _terms = require("../utils/terms");
var _variable = require("../variable");
var _variableDefault = parcelHelpers.interopDefault(_variable);
var _supports;
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {
        };
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _definePropertyDefault.default(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
/**
 * Data factory which also supports Collections
 *
 * Necessary for preventing circular dependencies.
 */ var ExtendedTermFactory = _objectSpread(_objectSpread({
}, _canonicalDataFactoryDefault.default), {
}, {
    supports: (_supports = {
    }, _definePropertyDefault.default(_supports, _factoryTypes.Feature.collections, true), _definePropertyDefault.default(_supports, _factoryTypes.Feature.defaultGraphType, false), _definePropertyDefault.default(_supports, _factoryTypes.Feature.equalsMethod, true), _definePropertyDefault.default(_supports, _factoryTypes.Feature.identity, false), _definePropertyDefault.default(_supports, _factoryTypes.Feature.id, true), _definePropertyDefault.default(_supports, _factoryTypes.Feature.reversibleId, false), _definePropertyDefault.default(_supports, _factoryTypes.Feature.variableType, true), _supports),
    /**
   * Creates a new collection
   * @param elements - The initial element
   */ collection: function collection(elements) {
        return new _collectionDefault.default(elements);
    },
    id: function id(term) {
        var _this = this;
        if (_terms.isCollection(term)) return "( ".concat(term.elements.map(function(e) {
            return _this.id(e);
        }).join(', '), " )");
        if (_terms.isVariable(term)) return _variableDefault.default.toString(term);
        return _canonicalDataFactoryDefault.default.id(term);
    },
    termToNQ: function termToNQ(term) {
        if (term.termType === _types.CollectionTermType) return _collectionDefault.default.toNT(term);
        return _canonicalDataFactoryDefault.default.termToNQ(term);
    }
});
exports.default = ExtendedTermFactory;

},{"@babel/runtime/helpers/defineProperty":"4x6r7","../collection":"hfkNS","./canonical-data-factory":"ijj5A","../types":"hXMiD","./factory-types":"j4Sya","../utils/terms":"cHcdt","../variable":"hxAV4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ad9Kd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Parses json-ld formatted JS objects to a rdf Term.
 * @param kb - The DataFactory to use.
 * @param obj - The json-ld object to process.
 * @return {Literal|NamedNode|BlankNode|Collection}
 */ parcelHelpers.export(exports, "jsonldObjectToTerm", ()=>jsonldObjectToTerm
);
var _jsonld = require("jsonld");
var _jsonldDefault = parcelHelpers.interopDefault(_jsonld);
var _utils = require("./utils");
function jsonldObjectToTerm(kb, obj) {
    if (typeof obj === 'string') return kb.rdfFactory.literal(obj);
    if (Object.prototype.hasOwnProperty.call(obj, '@list')) {
        if (kb.rdfFactory.supports["COLLECTIONS"] === true) return listToCollection(kb, obj['@list']);
        return listToStatements(kb, obj);
    }
    if (Object.prototype.hasOwnProperty.call(obj, '@id')) return kb.rdfFactory.namedNode(obj['@id']);
    if (Object.prototype.hasOwnProperty.call(obj, '@language')) return kb.rdfFactory.literal(obj['@value'], obj['@language']);
    if (Object.prototype.hasOwnProperty.call(obj, '@type')) return kb.rdfFactory.literal(obj['@value'], kb.rdfFactory.namedNode(obj['@type']));
    if (Object.prototype.hasOwnProperty.call(obj, '@value')) return kb.rdfFactory.literal(obj['@value']);
    return kb.rdfFactory.literal(obj);
}
/**
 * Adds the statements in a json-ld list object to {kb}.
 */ function listToStatements(kb, obj) {
    var listId = obj['@id'] ? kb.rdfFactory.namedNode(obj['@id']) : kb.rdfFactory.blankNode();
    var items = obj['@list'].map(function(listItem) {
        return jsonldObjectToTerm(kb, listItem);
    });
    var statements = _utils.arrayToStatements(kb.rdfFactory, listId, items);
    kb.addAll(statements);
    return listId;
}
function listToCollection(kb, obj) {
    if (!Array.isArray(obj)) throw new TypeError("Object must be an array");
    return kb.rdfFactory.collection(obj.map(function(o) {
        return jsonldObjectToTerm(kb, o);
    }));
}
function jsonldParser(str, kb, base, callback) {
    var baseString = base && Object.prototype.hasOwnProperty.call(base, 'termType') ? base.value : base;
    return _jsonldDefault.default.flatten(JSON.parse(str), null, {
        base: baseString
    }).then(function(flattened) {
        return flattened.reduce(function(store, flatResource) {
            kb = processResource(kb, base, flatResource);
            return kb;
        }, kb);
    }).then(callback).catch(callback);
}
exports.default = jsonldParser;
function processResource(kb, base, flatResource) {
    var id = flatResource['@id'] ? kb.rdfFactory.namedNode(flatResource['@id']) : kb.rdfFactory.blankNode();
    for(var _i = 0, _Object$keys = Object.keys(flatResource); _i < _Object$keys.length; _i++){
        var property = _Object$keys[_i];
        if (property === '@id') continue;
        else if (property == '@graph') {
            // the JSON-LD flattened structure may contain nested graphs
            // the id value for this object is the new base (named graph id) for all nested flat resources
            var graphId = id; // this is an array of resources
            var nestedFlatResources = flatResource[property]; // recursively process all flat resources in the array, but with the graphId as base.
            for(var i = 0; i < nestedFlatResources.length; i++)kb = processResource(kb, graphId, nestedFlatResources[i]);
        }
        var value = flatResource[property];
        if (Array.isArray(value)) for(var _i2 = 0; _i2 < value.length; _i2++)kb.addStatement(createStatement(kb, id, property, value[_i2], base));
        else kb.addStatement(createStatement(kb, id, property, value, base));
    }
    return kb;
}
/**
 * Create statement quad depending on @type being a type node
 * @param kb
 * @param subject id
 * @param property
 * @param value
 * @return quad statement
 */ function createStatement(kb, id, property, value, base) {
    var predicate, object;
    if (property === "@type") {
        predicate = kb.rdfFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");
        object = kb.rdfFactory.namedNode(value);
    } else {
        predicate = kb.rdfFactory.namedNode(property);
        object = jsonldObjectToTerm(kb, value);
    }
    return kb.rdfFactory.quad(id, predicate, object, kb.rdfFactory.namedNode(base));
}

},{"jsonld":"hDReo","./utils":"2V7vH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4L3yv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>RDFaProcessor
);
parcelHelpers.export(exports, "parseRDFaDOM", ()=>parseRDFaDOM
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
//  RDFa Parser for rdflib.js
// Originally by: Alex Milowski
// From https://github.com/alexmilowski/green-turtle
// Converted: timbl 2015-08-25 not yet working
// Added wrapper: csarven 2016-05-09 working
// RDFaProcessor.prototype = new Object() // Was URIResolver
// RDFaProcessor.prototype.constructor=RDFaProcessor
// options.base = base URI    not really an option, shopuld always be set.
//
var _blankNode = require("./blank-node");
var _blankNodeDefault = parcelHelpers.interopDefault(_blankNode);
var _literal = require("./literal");
var _literalDefault = parcelHelpers.interopDefault(_literal);
var _namedNode = require("./named-node");
var _namedNodeDefault = parcelHelpers.interopDefault(_namedNode);
var _uri = require("./uri");
var _utilsJs = require("./utils-js");
var _canonicalDataFactory = require("./factories/canonical-data-factory");
var _canonicalDataFactoryDefault = parcelHelpers.interopDefault(_canonicalDataFactory);
if (typeof Node === 'undefined') //  @@@@@@ Global. Interface to xmldom.
var Node = {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
};
var RDFaProcessor = /*#__PURE__*/ function() {
    function RDFaProcessor1(kb, options) {
        _classCallCheckDefault.default(this, RDFaProcessor1);
        this.options = options || {
        };
        this.kb = kb;
        this.target = options.target || {
            graph: {
                subjects: {
                },
                prefixes: {
                },
                terms: {
                }
            }
        }; // XXX: Added to track bnodes
        this.blankNodes = []; // XXX: Added for normalisation
        this.htmlOptions = {
            'selfClosing': 'br img input area base basefont col colgroup source wbr isindex link meta param hr'
        };
        this.theOne = '_:' + new Date().getTime();
        this.language = null;
        this.vocabulary = null;
        this.blankCounter = 0;
        this.langAttributes = [
            {
                namespaceURI: 'http://www.w3.org/XML/1998/namespace',
                localName: 'lang'
            }
        ];
        this.inXHTMLMode = false;
        this.absURIRE = /[\w\_\-]+:\S+/;
        this.finishedHandlers = [];
        this.init();
    }
    _createClassDefault.default(RDFaProcessor1, [
        {
            key: "addTriple",
            value: function addTriple(origin, subject, predicate, object) {
                var su, ob, pr, or;
                if (typeof subject === 'undefined') su = _canonicalDataFactoryDefault.default.namedNode(this.options.base);
                else su = this.toRDFNodeObject(subject);
                pr = this.toRDFNodeObject(predicate);
                ob = this.toRDFNodeObject(object);
                or = _canonicalDataFactoryDefault.default.namedNode(this.options.base); // console.log('Adding { ' + su + ' ' + pr + ' ' + ob + ' ' + or + ' }')
                this.kb.add(su, pr, ob, or);
            }
        },
        {
            key: "ancestorPath",
            value: function ancestorPath(node) {
                var path = '';
                while(node && node.nodeType !== Node.DOCUMENT_NODE){
                    path = '/' + node.localName + path;
                    node = node.parentNode;
                }
                return path;
            }
        },
        {
            key: "copyMappings",
            value: function copyMappings(mappings) {
                var newMappings = {
                };
                for(var k in mappings)newMappings[k] = mappings[k];
                return newMappings;
            }
        },
        {
            key: "copyProperties",
            value: function copyProperties() {
            }
        },
        {
            key: "deriveDateTimeType",
            value: function deriveDateTimeType(value) {
                for(var i = 0; i < RDFaProcessor1.dateTimeTypes.length; i++){
                    // console.log("Checking "+value+" against "+RDFaProcessor.dateTimeTypes[i].type)
                    var matched = RDFaProcessor1.dateTimeTypes[i].pattern.exec(value);
                    if (matched && matched[0].length === value.length) // console.log("Matched!")
                    return RDFaProcessor1.dateTimeTypes[i].type;
                }
                return null;
            }
        },
        {
            key: "init",
            value: function init() {
            }
        },
        {
            key: "newBlankNode",
            value: function newBlankNode() {
                this.blankCounter++;
                return '_:' + this.blankCounter;
            }
        },
        {
            key: "newSubjectOrigin",
            value: function newSubjectOrigin(origin, subject) {
            }
        },
        {
            key: "parseCURIE",
            value: function parseCURIE(value, prefixes, base) {
                var colon = value.indexOf(':');
                var uri;
                if (colon >= 0) {
                    var prefix = value.substring(0, colon);
                    if (prefix === '') {
                        // default prefix
                        uri = prefixes[''];
                        return uri ? uri + value.substring(colon + 1) : null;
                    } else if (prefix === '_') // blank node
                    return '_:' + value.substring(colon + 1);
                    else if (RDFaProcessor1.NCNAME.test(prefix)) {
                        uri = prefixes[prefix];
                        if (uri) return uri + value.substring(colon + 1);
                    }
                }
                return null;
            }
        },
        {
            key: "parseCURIEOrURI",
            value: function parseCURIEOrURI(value, prefixes, base) {
                var curie = this.parseCURIE(value, prefixes, base);
                if (curie) return curie;
                return this.resolveAndNormalize(base, value);
            }
        },
        {
            key: "parsePredicate",
            value: function parsePredicate(value, defaultVocabulary, terms, prefixes, base, ignoreTerms) {
                if (value === '') return null;
                var predicate = this.parseTermOrCURIEOrAbsURI(value, defaultVocabulary, ignoreTerms ? null : terms, prefixes, base);
                if (predicate && predicate.indexOf('_:') === 0) return null;
                return predicate;
            }
        },
        {
            key: "parsePrefixMappings",
            value: function parsePrefixMappings(str, target) {
                var values = this.tokenize(str);
                var prefix = null; // var uri = null
                for(var i = 0; i < values.length; i++){
                    if (values[i][values[i].length - 1] === ':') prefix = values[i].substring(0, values[i].length - 1);
                    else if (prefix) {
                        target[prefix] = this.options.base ? _uri.join(values[i], this.options.base) : values[i];
                        prefix = null;
                    }
                }
            }
        },
        {
            key: "parseSafeCURIEOrCURIEOrURI",
            value: function parseSafeCURIEOrCURIEOrURI(value, prefixes, base) {
                value = this.trim(value);
                if (value.charAt(0) === '[' && value.charAt(value.length - 1) === ']') {
                    value = value.substring(1, value.length - 1);
                    value = value.trim(value);
                    if (value.length === 0) return null;
                    if (value === '_:') // the one node
                    return this.theOne;
                    return this.parseCURIE(value, prefixes, base);
                } else return this.parseCURIEOrURI(value, prefixes, base);
            }
        },
        {
            key: "parseTermOrCURIEOrAbsURI",
            value: function parseTermOrCURIEOrAbsURI(value, defaultVocabulary, terms, prefixes, base) {
                // alert("Parsing "+value+" with default vocab "+defaultVocabulary)
                value = this.trim(value);
                var curie = this.parseCURIE(value, prefixes, base);
                if (curie) return curie;
                else if (terms) {
                    if (defaultVocabulary && !this.absURIRE.exec(value)) return defaultVocabulary + value;
                    var term = terms[value];
                    if (term) return term;
                    var lcvalue = value.toLowerCase();
                    term = terms[lcvalue];
                    if (term) return term;
                }
                if (this.absURIRE.exec(value)) return this.resolveAndNormalize(base, value);
                return null;
            }
        },
        {
            key: "parseTermOrCURIEOrURI",
            value: function parseTermOrCURIEOrURI(value, defaultVocabulary, terms, prefixes, base) {
                // alert("Parsing "+value+" with default vocab "+defaultVocabulary)
                value = this.trim(value);
                var curie = this.parseCURIE(value, prefixes, base);
                if (curie) return curie;
                else {
                    var term = terms[value];
                    if (term) return term;
                    var lcvalue = value.toLowerCase();
                    term = terms[lcvalue];
                    if (term) return term;
                    if (defaultVocabulary && !this.absURIRE.exec(value)) return defaultVocabulary + value;
                }
                return this.resolveAndNormalize(base, value);
            }
        },
        {
            key: "parseURI",
            value: function parseURI(uri) {
                return uri; // We just use strings as URIs, not objects now.
            }
        },
        {
            key: "process",
            value: function process(node, options) {
                /*
      if (!window.console) {
         window.console = { log: function() {} }
      } */ options = options || {
                };
                var base;
                if (node.nodeType === Node.DOCUMENT_NODE) {
                    if (node.baseURI && !options.baseURI) options.baseURI = node.baseURI; // be defensive as DOM implementations vary
                    base = node.baseURI;
                    node = node.documentElement;
                    if (!node.baseURI) node.baseURI = base;
                    this.setContext(node);
                } else if (node.parentNode.nodeType === Node.DOCUMENT_NODE) this.setContext(node);
                var queue = []; // Fix for Firefox that includes the hash in the base URI
                var removeHash = function removeHash(baseURI) {
                    // Fix for undefined baseURI property
                    if (!baseURI && options && options.baseURI) return options.baseURI;
                    var hash = baseURI.indexOf('#');
                    if (hash >= 0) baseURI = baseURI.substring(0, hash);
                    if (options && options.baseURIMap) baseURI = options.baseURIMap(baseURI);
                    return baseURI;
                };
                queue.push({
                    current: node,
                    context: this.push(null, removeHash(node.baseURI))
                });
                while(queue.length > 0){
                    var item = queue.shift();
                    if (item.parent) {
                        // Sequence Step 14: list triple generation
                        if (item.context.parent && item.context.parent.listMapping === item.listMapping) continue;
                         // console.log("Generating lists for "+item.subject+", tag "+item.parent.localName)
                        for(var _predicate in item.listMapping){
                            var list = item.listMapping[_predicate];
                            if (list.length === 0) {
                                this.addTriple(item.parent, item.subject, _predicate, {
                                    type: RDFaProcessor1.objectURI,
                                    value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'
                                });
                                continue;
                            }
                            var bnodes = [];
                            for(var _i = 0; _i < list.length; _i++)bnodes.push(this.newBlankNode()); // this.newSubject(item.parent,bnodes[i])
                            for(var _i2 = 0; _i2 < bnodes.length; _i2++){
                                this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#first', list[_i2]);
                                this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest', {
                                    type: RDFaProcessor1.objectURI,
                                    value: _i2 + 1 < bnodes.length ? bnodes[_i2 + 1] : 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'
                                });
                            }
                            this.addTriple(item.parent, item.subject, _predicate, {
                                type: RDFaProcessor1.objectURI,
                                value: bnodes[0]
                            });
                        }
                        continue;
                    }
                    var current = item.current;
                    var context = item.context; // console.log("Tag: "+current.localName+", listMapping="+JSON.stringify(context.listMapping))
                    // Sequence Step 1
                    var skip = false;
                    var newSubject = null;
                    var currentObjectResource = null;
                    var typedResource = null;
                    var prefixes = context.prefixes;
                    var prefixesCopied = false;
                    var incomplete = [];
                    var listMapping = context.listMapping;
                    var listMappingDifferent = !context.parent;
                    var language = context.language;
                    var vocabulary = context.vocabulary; // TODO: the "base" element may be used for HTML+RDFa 1.1
                    base = this.parseURI(removeHash(current.baseURI));
                    current.item = null; // Sequence Step 2: set the default vocabulary
                    var vocabAtt = current.getAttributeNode('vocab');
                    if (vocabAtt) {
                        var value = this.trim(vocabAtt.value);
                        if (value.length > 0) {
                            vocabulary = value;
                            var baseSubject = base.spec; // this.newSubject(current,baseSubject)
                            this.addTriple(current, baseSubject, 'http://www.w3.org/ns/rdfa#usesVocabulary', {
                                type: RDFaProcessor1.objectURI,
                                value: vocabulary
                            });
                        } else vocabulary = this.vocabulary;
                    } // Sequence Step 3: IRI mappings
                    // handle xmlns attributes
                    for(var i = 0; i < current.attributes.length; i++){
                        var att = current.attributes[i]; // if (att.namespaceURI=="http://www.w3.org/2000/xmlns/") {
                        if (att.nodeName.charAt(0) === 'x' && att.nodeName.indexOf('xmlns:') === 0) {
                            if (!prefixesCopied) {
                                prefixes = this.copyMappings(prefixes);
                                prefixesCopied = true;
                            }
                            var prefix = att.nodeName.substring(6); // TODO: resolve relative?
                            var ref = RDFaProcessor1.trim(att.value);
                            prefixes[prefix] = this.options.base ? _uri.join(ref, this.options.base) : ref;
                        }
                    } // Handle prefix mappings (@prefix)
                    var prefixAtt = current.getAttributeNode('prefix');
                    if (prefixAtt) {
                        if (!prefixesCopied) {
                            prefixes = this.copyMappings(prefixes);
                            prefixesCopied = true;
                        }
                        this.parsePrefixMappings(prefixAtt.value, prefixes);
                    } // Sequence Step 4: language
                    var xmlLangAtt = null;
                    for(var _i3 = 0; !xmlLangAtt && _i3 < this.langAttributes.length; _i3++)xmlLangAtt = current.getAttributeNodeNS(this.langAttributes[_i3].namespaceURI, this.langAttributes[_i3].localName);
                    if (xmlLangAtt) {
                        var _value = RDFaProcessor1.trim(xmlLangAtt.value);
                        if (_value.length > 0) language = _value;
                        else language = null;
                    }
                    var relAtt = current.getAttributeNode('rel');
                    var revAtt = current.getAttributeNode('rev');
                    var typeofAtt = current.getAttributeNode('typeof');
                    var propertyAtt = current.getAttributeNode('property');
                    var datatypeAtt = current.getAttributeNode('datatype');
                    var datetimeAtt = this.inHTMLMode ? current.getAttributeNode('datetime') : null;
                    var contentAtt = current.getAttributeNode('content');
                    var aboutAtt = current.getAttributeNode('about');
                    var srcAtt = current.getAttributeNode('src');
                    var resourceAtt = current.getAttributeNode('resource');
                    var hrefAtt = current.getAttributeNode('href');
                    var inlistAtt = current.getAttributeNode('inlist');
                    var relAttPredicates = [];
                    var predicate, values;
                    if (relAtt) {
                        values = this.tokenize(relAtt.value);
                        for(var _i4 = 0; _i4 < values.length; _i4++){
                            predicate = this.parsePredicate(values[_i4], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt !== null);
                            if (predicate) relAttPredicates.push(predicate);
                        }
                    }
                    var revAttPredicates = [];
                    if (revAtt) {
                        values = this.tokenize(revAtt.value);
                        for(var _i5 = 0; _i5 < values.length; _i5++){
                            predicate = this.parsePredicate(values[_i5], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt);
                            if (predicate) revAttPredicates.push(predicate);
                        }
                    } // Section 3.1, bullet 7
                    if (this.inHTMLMode && (relAtt || revAtt) && propertyAtt) {
                        if (relAttPredicates.length === 0) relAtt = null;
                        if (revAttPredicates.length === 0) revAtt = null;
                    }
                    if (relAtt || revAtt) {
                        // Sequence Step 6: establish new subject and value
                        if (aboutAtt) newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);
                        if (typeofAtt) typedResource = newSubject;
                        if (!newSubject) {
                            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) newSubject = removeHash(current.baseURI);
                            else if (context.parentObject) // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
                            newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
                        }
                        if (resourceAtt) currentObjectResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
                        if (!currentObjectResource) {
                            if (hrefAtt) currentObjectResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
                            else if (srcAtt) currentObjectResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
                            else if (typeofAtt && !aboutAtt && !(this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body'))) currentObjectResource = this.newBlankNode();
                        }
                        if (typeofAtt && !aboutAtt && this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body')) typedResource = newSubject;
                        else if (typeofAtt && !aboutAtt) typedResource = currentObjectResource;
                    } else if (propertyAtt && !contentAtt && !datatypeAtt) {
                        // Sequence Step 5.1: establish a new subject
                        if (aboutAtt) {
                            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);
                            if (typeofAtt) typedResource = newSubject;
                        }
                        if (!newSubject && current.parentNode.nodeType === Node.DOCUMENT_NODE) {
                            newSubject = removeHash(current.baseURI);
                            if (typeofAtt) typedResource = newSubject;
                        } else if (!newSubject && context.parentObject) // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
                        newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
                        if (typeofAtt && !typedResource) {
                            if (resourceAtt) typedResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
                            if (!typedResource && hrefAtt) typedResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
                            if (!typedResource && srcAtt) typedResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
                            if (!typedResource && (this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) typedResource = newSubject;
                            if (!typedResource) typedResource = this.newBlankNode();
                            currentObjectResource = typedResource;
                        } // console.log(current.localName+", newSubject="+newSubject+", typedResource="+typedResource+", currentObjectResource="+currentObjectResource)
                    } else {
                        // Sequence Step 5.2: establish a new subject
                        if (aboutAtt) newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);
                        if (!newSubject && resourceAtt) newSubject = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
                        if (!newSubject && hrefAtt) newSubject = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
                        if (!newSubject && srcAtt) newSubject = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
                        if (!newSubject) {
                            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) newSubject = removeHash(current.baseURI);
                            else if ((this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
                            else if (typeofAtt) newSubject = this.newBlankNode();
                            else if (context.parentObject) {
                                // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
                                newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
                                if (!propertyAtt) skip = true;
                            }
                        }
                        if (typeofAtt) typedResource = newSubject;
                    } // console.log(current.tagName+": newSubject="+newSubject+", currentObjectResource="+currentObjectResource+", typedResource="+typedResource+", skip="+skip)
                    // var rdfaData = null
                    if (newSubject) // this.newSubject(current,newSubject)
                    {
                        if (aboutAtt || resourceAtt || typedResource) {
                            var id = newSubject;
                            if (typeofAtt && !aboutAtt && !resourceAtt && currentObjectResource) id = currentObjectResource;
                             // console.log("Setting data attribute for "+current.localName+" for subject "+id)
                            this.newSubjectOrigin(current, id);
                        }
                    } // Sequence Step 7: generate type triple
                    if (typedResource) {
                        values = this.tokenize(typeofAtt.value);
                        for(var _i6 = 0; _i6 < values.length; _i6++){
                            var object = this.parseTermOrCURIEOrAbsURI(values[_i6], vocabulary, context.terms, prefixes, base);
                            if (object) this.addTriple(current, typedResource, RDFaProcessor1.typeURI, {
                                type: RDFaProcessor1.objectURI,
                                value: object
                            });
                        }
                    } // Sequence Step 8: new list mappings if there is a new subject
                    // console.log("Step 8: newSubject="+newSubject+", context.parentObject="+context.parentObject)
                    if (newSubject && newSubject !== context.parentObject) {
                        // console.log("Generating new list mapping for "+newSubject)
                        listMapping = {
                        };
                        listMappingDifferent = true;
                    } // Sequence Step 9: generate object triple
                    if (currentObjectResource) {
                        if (relAtt && inlistAtt) for(var _i7 = 0; _i7 < relAttPredicates.length; _i7++){
                            var _list = listMapping[relAttPredicates[_i7]];
                            if (!_list) {
                                _list = [];
                                listMapping[relAttPredicates[_i7]] = _list;
                            }
                            _list.push({
                                type: RDFaProcessor1.objectURI,
                                value: currentObjectResource
                            });
                        }
                        else if (relAtt) for(var _i8 = 0; _i8 < relAttPredicates.length; _i8++)this.addTriple(current, newSubject, relAttPredicates[_i8], {
                            type: RDFaProcessor1.objectURI,
                            value: currentObjectResource
                        });
                        if (revAtt) for(var _i9 = 0; _i9 < revAttPredicates.length; _i9++)this.addTriple(current, currentObjectResource, revAttPredicates[_i9], {
                            type: RDFaProcessor1.objectURI,
                            value: newSubject
                        });
                    } else {
                        // Sequence Step 10: incomplete triples
                        if (newSubject && !currentObjectResource && (relAtt || revAtt)) currentObjectResource = this.newBlankNode(); // alert(current.tagName+": generated blank node, newSubject="+newSubject+" currentObjectResource="+currentObjectResource)
                        if (relAtt && inlistAtt) for(var _i10 = 0; _i10 < relAttPredicates.length; _i10++){
                            var _list2 = listMapping[relAttPredicates[_i10]];
                            if (!_list2) {
                                _list2 = [];
                                listMapping[predicate] = _list2;
                            } // console.log("Adding incomplete list for "+predicate)
                            incomplete.push({
                                predicate: relAttPredicates[_i10],
                                list: _list2
                            });
                        }
                        else if (relAtt) for(var _i11 = 0; _i11 < relAttPredicates.length; _i11++)incomplete.push({
                            predicate: relAttPredicates[_i11],
                            forward: true
                        });
                        if (revAtt) for(var _i12 = 0; _i12 < revAttPredicates.length; _i12++)incomplete.push({
                            predicate: revAttPredicates[_i12],
                            forward: false
                        });
                    } // Step 11: Current property values
                    if (propertyAtt) {
                        var datatype = null;
                        var content = null;
                        if (datatypeAtt) {
                            datatype = datatypeAtt.value === '' ? RDFaProcessor1.PlainLiteralURI : this.parseTermOrCURIEOrAbsURI(datatypeAtt.value, vocabulary, context.terms, prefixes, base);
                            if (datetimeAtt && !contentAtt) content = datetimeAtt.value;
                            else content = datatype === RDFaProcessor1.XMLLiteralURI || datatype === RDFaProcessor1.HTMLLiteralURI ? null : contentAtt ? contentAtt.value : current.textContent;
                        } else if (contentAtt) {
                            datatype = RDFaProcessor1.PlainLiteralURI;
                            content = contentAtt.value;
                        } else if (datetimeAtt) {
                            content = datetimeAtt.value;
                            datatype = RDFaProcessor1.deriveDateTimeType(content);
                            if (!datatype) datatype = RDFaProcessor1.PlainLiteralURI;
                        } else if (!relAtt && !revAtt) {
                            if (resourceAtt) content = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
                            if (!content && hrefAtt) content = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
                            else if (!content && srcAtt) content = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
                            if (content) datatype = RDFaProcessor1.objectURI;
                        }
                        if (!datatype) {
                            if (typeofAtt && !aboutAtt) {
                                datatype = RDFaProcessor1.objectURI;
                                content = typedResource;
                            } else {
                                content = current.textContent;
                                if (this.inHTMLMode && current.localName === 'time') datatype = RDFaProcessor1.deriveDateTimeType(content);
                                if (!datatype) datatype = RDFaProcessor1.PlainLiteralURI;
                            }
                        }
                        values = this.tokenize(propertyAtt.value);
                        for(var _i13 = 0; _i13 < values.length; _i13++){
                            var _predicate2 = this.parsePredicate(values[_i13], vocabulary, context.terms, prefixes, base);
                            if (_predicate2) {
                                if (inlistAtt) {
                                    var _list3 = listMapping[_predicate2];
                                    if (!_list3) {
                                        _list3 = [];
                                        listMapping[_predicate2] = _list3;
                                    }
                                    _list3.push(datatype === RDFaProcessor1.XMLLiteralURI || datatype === RDFaProcessor1.HTMLLiteralURI ? {
                                        type: datatype,
                                        value: current.childNodes
                                    } : {
                                        type: datatype || RDFaProcessor1.PlainLiteralURI,
                                        value: content,
                                        language: language
                                    });
                                } else if (datatype === RDFaProcessor1.XMLLiteralURI || datatype === RDFaProcessor1.HTMLLiteralURI) this.addTriple(current, newSubject, _predicate2, {
                                    type: datatype,
                                    value: current.childNodes
                                });
                                else this.addTriple(current, newSubject, _predicate2, {
                                    type: datatype || RDFaProcessor1.PlainLiteralURI,
                                    value: content,
                                    language: language
                                }); // console.log(newSubject+" "+predicate+"="+content)
                            }
                        }
                    } // Sequence Step 12: complete incomplete triples with new subject
                    if (newSubject && !skip) for(var _i14 = 0; _i14 < context.incomplete.length; _i14++){
                        if (context.incomplete[_i14].list) // console.log("Adding subject "+newSubject+" to list for "+context.incomplete[i].predicate)
                        // TODO: it is unclear what to do here
                        context.incomplete[_i14].list.push({
                            type: RDFaProcessor1.objectURI,
                            value: newSubject
                        });
                        else if (context.incomplete[_i14].forward) // console.log(current.tagName+": completing forward triple "+context.incomplete[i].predicate+" with object="+newSubject)
                        this.addTriple(current, context.subject, context.incomplete[_i14].predicate, {
                            type: RDFaProcessor1.objectURI,
                            value: newSubject
                        });
                        else // console.log(current.tagName+": completing reverse triple with object="+context.subject)
                        this.addTriple(current, newSubject, context.incomplete[_i14].predicate, {
                            type: RDFaProcessor1.objectURI,
                            value: context.subject
                        });
                    }
                    var childContext = null;
                    var listSubject = newSubject;
                    if (skip) {
                        // TODO: should subject be null?
                        childContext = this.push(context, context.subject); // TODO: should the entObject be passed along?  If not, then intermediary children will keep properties from being associated with incomplete triples.
                        // TODO: Verify: if the current baseURI has changed and the parentObject is the parent's base URI, then the baseURI should change
                        childContext.parentObject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
                        childContext.incomplete = context.incomplete;
                        childContext.language = language;
                        childContext.prefixes = prefixes;
                        childContext.vocabulary = vocabulary;
                    } else {
                        childContext = this.push(context, newSubject);
                        childContext.parentObject = currentObjectResource || newSubject || context.subject;
                        childContext.prefixes = prefixes;
                        childContext.incomplete = incomplete;
                        if (currentObjectResource) {
                            // console.log("Generating new list mapping for "+currentObjectResource)
                            listSubject = currentObjectResource;
                            listMapping = {
                            };
                            listMappingDifferent = true;
                        }
                        childContext.listMapping = listMapping;
                        childContext.language = language;
                        childContext.vocabulary = vocabulary;
                    }
                    if (listMappingDifferent) // console.log("Pushing list parent "+current.localName)
                    queue.unshift({
                        parent: current,
                        context: context,
                        subject: listSubject,
                        listMapping: listMapping
                    });
                    for(var child = current.lastChild; child; child = child.previousSibling)if (child.nodeType === Node.ELEMENT_NODE) // console.log("Pushing child "+child.localName)
                    // child.baseURI = current.baseURI
                    queue.unshift({
                        current: child,
                        context: childContext
                    });
                }
                if (this.inHTMLMode) this.copyProperties();
                for(var _i15 = 0; _i15 < this.finishedHandlers.length; _i15++)this.finishedHandlers[_i15](node);
            }
        },
        {
            key: "push",
            value: function push(parent, subject) {
                return {
                    parent: parent,
                    subject: subject || (parent ? parent.subject : null),
                    parentObject: null,
                    incomplete: [],
                    listMapping: parent ? parent.listMapping : {
                    },
                    language: parent ? parent.language : this.language,
                    prefixes: parent ? parent.prefixes : this.target.graph.prefixes,
                    terms: parent ? parent.terms : this.target.graph.terms,
                    vocabulary: parent ? parent.vocabulary : this.vocabulary
                };
            }
        },
        {
            key: "resolveAndNormalize",
            value: function resolveAndNormalize(base, uri) {
                // console.log("Joining " + uri + " to " + base + " making " +  Uri.join(uri, base))
                return _uri.join(uri, base); // @@ normalize?
            }
        },
        {
            key: "setContext",
            value: function setContext(node) {
                // We only recognized XHTML+RDFa 1.1 if the version is set propertyly
                if (node.localName === 'html' && node.getAttribute('version') === 'XHTML+RDFa 1.1') this.setXHTMLContext();
                else if (node.localName === 'html' || node.namespaceURI === 'http://www.w3.org/1999/xhtml') {
                    if (typeof document !== 'undefined' && document.doctype) {
                        if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.0//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd') {
                            console.log('WARNING: RDF 1.0 is not supported.  Defaulting to HTML5 mode.');
                            this.setHTMLContext();
                        } else if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.1//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd') this.setXHTMLContext();
                        else this.setHTMLContext();
                    } else this.setHTMLContext();
                } else this.setXMLContext();
            }
        },
        {
            key: "setHTMLContext",
            value: function setHTMLContext() {
                this.setInitialContext();
                this.langAttributes = [
                    {
                        namespaceURI: 'http://www.w3.org/XML/1998/namespace',
                        localName: 'lang'
                    },
                    {
                        namespaceURI: null,
                        localName: 'lang'
                    }
                ];
                this.inXHTMLMode = false;
                this.inHTMLMode = true;
            }
        },
        {
            key: "setInitialContext",
            value: function setInitialContext() {
                this.vocabulary = null; // By default, the prefixes are terms are loaded to the RDFa 1.1. standard within the graph constructor
                this.langAttributes = [
                    {
                        namespaceURI: 'http://www.w3.org/XML/1998/namespace',
                        localName: 'lang'
                    }
                ];
            }
        },
        {
            key: "setXHTMLContext",
            value: function setXHTMLContext() {
                this.setInitialContext();
                this.inXHTMLMode = true;
                this.inHTMLMode = false;
                this.langAttributes = [
                    {
                        namespaceURI: 'http://www.w3.org/XML/1998/namespace',
                        localName: 'lang'
                    },
                    {
                        namespaceURI: null,
                        localName: 'lang'
                    }
                ]; // From http://www.w3.org/2011/rdfa-context/xhtml-rdfa-1.1
                this.target.graph.terms['alternate'] = 'http://www.w3.org/1999/xhtml/vocab#alternate';
                this.target.graph.terms['appendix'] = 'http://www.w3.org/1999/xhtml/vocab#appendix';
                this.target.graph.terms['bookmark'] = 'http://www.w3.org/1999/xhtml/vocab#bookmark';
                this.target.graph.terms['cite'] = 'http://www.w3.org/1999/xhtml/vocab#cite';
                this.target.graph.terms['chapter'] = 'http://www.w3.org/1999/xhtml/vocab#chapter';
                this.target.graph.terms['contents'] = 'http://www.w3.org/1999/xhtml/vocab#contents';
                this.target.graph.terms['copyright'] = 'http://www.w3.org/1999/xhtml/vocab#copyright';
                this.target.graph.terms['first'] = 'http://www.w3.org/1999/xhtml/vocab#first';
                this.target.graph.terms['glossary'] = 'http://www.w3.org/1999/xhtml/vocab#glossary';
                this.target.graph.terms['help'] = 'http://www.w3.org/1999/xhtml/vocab#help';
                this.target.graph.terms['icon'] = 'http://www.w3.org/1999/xhtml/vocab#icon';
                this.target.graph.terms['index'] = 'http://www.w3.org/1999/xhtml/vocab#index';
                this.target.graph.terms['last'] = 'http://www.w3.org/1999/xhtml/vocab#last';
                this.target.graph.terms['license'] = 'http://www.w3.org/1999/xhtml/vocab#license';
                this.target.graph.terms['meta'] = 'http://www.w3.org/1999/xhtml/vocab#meta';
                this.target.graph.terms['next'] = 'http://www.w3.org/1999/xhtml/vocab#next';
                this.target.graph.terms['prev'] = 'http://www.w3.org/1999/xhtml/vocab#prev';
                this.target.graph.terms['previous'] = 'http://www.w3.org/1999/xhtml/vocab#previous';
                this.target.graph.terms['section'] = 'http://www.w3.org/1999/xhtml/vocab#section';
                this.target.graph.terms['stylesheet'] = 'http://www.w3.org/1999/xhtml/vocab#stylesheet';
                this.target.graph.terms['subsection'] = 'http://www.w3.org/1999/xhtml/vocab#subsection';
                this.target.graph.terms['start'] = 'http://www.w3.org/1999/xhtml/vocab#start';
                this.target.graph.terms['top'] = 'http://www.w3.org/1999/xhtml/vocab#top';
                this.target.graph.terms['up'] = 'http://www.w3.org/1999/xhtml/vocab#up';
                this.target.graph.terms['p3pv1'] = 'http://www.w3.org/1999/xhtml/vocab#p3pv1'; // other
                this.target.graph.terms['related'] = 'http://www.w3.org/1999/xhtml/vocab#related';
                this.target.graph.terms['role'] = 'http://www.w3.org/1999/xhtml/vocab#role';
                this.target.graph.terms['transformation'] = 'http://www.w3.org/1999/xhtml/vocab#transformation';
            }
        },
        {
            key: "setXMLContext",
            value: function setXMLContext() {
                this.setInitialContext();
                this.inXHTMLMode = false;
                this.inHTMLMode = false;
            }
        },
        {
            key: "tokenize",
            value: function tokenize(str) {
                return this.trim(str).split(/\s+/);
            }
        },
        {
            key: "toRDFNodeObject",
            value: function toRDFNodeObject(x) {
                var _this = this;
                if (typeof x === 'undefined') return undefined;
                if (typeof x === 'string') {
                    if (x.substring(0, 2) === '_:') {
                        if (typeof this.blankNodes[x.substring(2)] === 'undefined') this.blankNodes[x.substring(2)] = new _blankNodeDefault.default(x.substring(2));
                        return this.blankNodes[x.substring(2)];
                    }
                    return _canonicalDataFactoryDefault.default.namedNode(x);
                }
                switch(x.type){
                    case RDFaProcessor1.objectURI:
                        if (x.value.substring(0, 2) === '_:') {
                            if (typeof this.blankNodes[x.value.substring(2)] === 'undefined') this.blankNodes[x.value.substring(2)] = new _blankNodeDefault.default(x.value.substring(2));
                            return this.blankNodes[x.value.substring(2)];
                        }
                        return _canonicalDataFactoryDefault.default.namedNode(x.value);
                    case RDFaProcessor1.PlainLiteralURI:
                        return new _literalDefault.default(x.value, x.language || '');
                    case RDFaProcessor1.XMLLiteralURI:
                    case RDFaProcessor1.HTMLLiteralURI:
                        var string = '';
                        Object.keys(x.value).forEach(function(i) {
                            string += _utilsJs.domToString(x.value[i], _this.htmlOptions);
                        });
                        return new _literalDefault.default(string, '', new _namedNodeDefault.default(x.type));
                    default:
                        return new _literalDefault.default(x.value, '', new _namedNodeDefault.default(x.type));
                }
            }
        },
        {
            key: "trim",
            value: function trim(str) {
                return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
            }
        }
    ], [
        {
            key: "parseRDFaDOM",
            value: function parseRDFaDOM(dom, kb, base) {
                var p = new RDFaProcessor1(kb, {
                    'base': base
                }); //  Cannot assign to read only property 'baseURI' of object '#<XMLDocument>':
                if (!dom.baseURI) // Note this became a read-only attribute some time before 2018
                dom.baseURI = base; // oinly set if not already set
                p.process(dom, {
                    baseURI: base
                });
            }
        },
        {
            key: "tokenize",
            value: function tokenize(str) {
                return this.trim(str).split(/\s+/);
            }
        },
        {
            key: "trim",
            value: function trim(str) {
                return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
            }
        }
    ]);
    return RDFaProcessor1;
}();
RDFaProcessor.XMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral';
RDFaProcessor.HTMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML';
RDFaProcessor.PlainLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral';
RDFaProcessor.objectURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#object';
RDFaProcessor.typeURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
RDFaProcessor.nameChar = "[-A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u10000-\uEFFFF.0-9\xB7\u0300-\u036F\u203F-\u2040]";
RDFaProcessor.nameStartChar = "[A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\xFF\u0100-\u0131\u0134-\u013E\u0141-\u0148\u014A-\u017E\u0180-\u01C3\u01CD-\u01F0\u01F4-\u01F5\u01FA-\u0217\u0250-\u02A8\u02BB-\u02C1\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03CE\u03D0-\u03D6\u03DA\u03DC\u03DE\u03E0\u03E2-\u03F3\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E-\u0481\u0490-\u04C4\u04C7-\u04C8\u04CB-\u04CC\u04D0-\u04EB\u04EE-\u04F5\u04F8-\u04F9\u0531-\u0556\u0559\u0561-\u0586\u05D0-\u05EA\u05F0-\u05F2\u0621-\u063A\u0641-\u064A\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D3\u06D5\u06E5-\u06E6\u0905-\u0939\u093D\u0958-\u0961\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8B\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AE0\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B36-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB5\u0BB7-\u0BB9\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CDE\u0CE0-\u0CE1\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D28\u0D2A-\u0D39\u0D60-\u0D61\u0E01-\u0E2E\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EAE\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0F40-\u0F47\u0F49-\u0F69\u10A0-\u10C5\u10D0-\u10F6\u1100\u1102-\u1103\u1105-\u1107\u1109\u110B-\u110C\u110E-\u1112\u113C\u113E\u1140\u114C\u114E\u1150\u1154-\u1155\u1159\u115F-\u1161\u1163\u1165\u1167\u1169\u116D-\u116E\u1172-\u1173\u1175\u119E\u11A8\u11AB\u11AE-\u11AF\u11B7-\u11B8\u11BA\u11BC-\u11C2\u11EB\u11F0\u11F9\u1E00-\u1E9B\u1EA0-\u1EF9\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2126\u212A-\u212B\u212E\u2180-\u2182\u3041-\u3094\u30A1-\u30FA\u3105-\u312C\uAC00-\uD7A3\u4E00-\u9FA5\u3007\u3021-\u3029_]";
RDFaProcessor.NCNAME = new RegExp('^' + RDFaProcessor.nameStartChar + RDFaProcessor.nameChar + '*$');
/*
RDFaProcessor.prototype.resolveAndNormalize = function(base,href) {
   var u = base.resolve(href)
   var parsed = this.parseURI(u)
   parsed.normalize()
   return parsed.spec
}
*/ RDFaProcessor.dateTimeTypes = [
    {
        pattern: /-?P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?/,
        type: 'http://www.w3.org/2001/XMLSchema#duration'
    },
    {
        pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9]T(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\.[0-9]+)?(?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
        type: 'http://www.w3.org/2001/XMLSchema#dateTime'
    },
    {
        pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9](?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
        type: 'http://www.w3.org/2001/XMLSchema#date'
    },
    {
        pattern: /(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\.[0-9]+)?(?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
        type: 'http://www.w3.org/2001/XMLSchema#time'
    },
    {
        pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]/,
        type: 'http://www.w3.org/2001/XMLSchema#gYearMonth'
    },
    {
        pattern: /-?[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9]/,
        type: 'http://www.w3.org/2001/XMLSchema#gYear'
    }
];
var parseRDFaDOM = RDFaProcessor.parseRDFaDOM;

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","./blank-node":"8EviO","./literal":"8jO2p","./named-node":"imvOa","./uri":"cwuSF","./utils-js":"2DMBx","./factories/canonical-data-factory":"ijj5A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5j1sr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>RDFParser
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
/**
 *  RDF/XML PARSER
 *
 *  Parser believed to be in full positive RDF/XML parsing compliance
 *  with the possible exception of handling deprecated RDF attributes
 *  appropriately. Parser is believed to comply fully with other W3C
 *  and industry standards where appropriate (DOM, ECMAScript, &c.)
 *
 *  Author: David Sheets <dsheets@mit.edu>
 *
 * W3C® SOFTWARE NOTICE AND LICENSE
 * http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
 * This work (and included software, documentation such as READMEs, or
 * other related items) is being provided by the copyright holders under
 * the following license. By obtaining, using and/or copying this work,
 * you (the licensee) agree that you have read, understood, and will
 * comply with the following terms and conditions.
 *
 * Permission to copy, modify, and distribute this software and its
 * documentation, with or without modification, for any purpose and
 * without fee or royalty is hereby granted, provided that you include
 * the following on ALL copies of the software and documentation or
 * portions thereof, including modifications:
 *
 * 1. The full text of this NOTICE in a location viewable to users of
 * the redistributed or derivative work.
 * 2. Any pre-existing intellectual property disclaimers, notices, or terms and
 * conditions. If none exist, the W3C Software Short Notice should be
 * included (hypertext is preferred, text is permitted) within the body
 * of any redistributed or derivative code.
 * 3. Notice of any changes or modifications to the files, including the
 * date changes were made. (We recommend you provide URIs to the location
 * from which the code is derived.)
 *
 * THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND COPYRIGHT
 * HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR FITNESS
 * FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR
 * DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,
 * TRADEMARKS OR OTHER RIGHTS.
 *
 * COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL
 * OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR
 * DOCUMENTATION.
 *
 * The name and trademarks of copyright holders may NOT be used in
 * advertising or publicity pertaining to the software without specific,
 * written prior permission. Title to copyright in this software and any
 * associated documentation will at all times remain with copyright
 * holders.
 */ /**
 * @class RDFParser resource object tied to an RDFStore
 *
 * @author David Sheets <dsheets@mit.edu>
 *
*/ var _uri = require("./uri");
var RDFParser = /*#__PURE__*/ function() {
    /*
   * @constructor
   * @param {RDFStore} store An RDFStore object
   */ function RDFParser1(store) {
        _classCallCheckDefault.default(this, RDFParser1);
        /** Our triple store reference @private */ this.store = store;
        /** Our identified blank nodes @private */ this.bnodes = {
        };
        /** A context for context-aware stores @private */ this.why = null;
        /** Reification flag */ this.reify = false;
    }
    /** Standard namespaces that we know how to handle @final
   *  @member RDFParser
   */ _createClassDefault.default(RDFParser1, [
        {
            key: "frameFactory",
            value: /**
     * Frame class for namespace and base URI lookups
     * Base lookups will always resolve because the parser knows
     * the default base.
     *
     * @private
     */ function frameFactory(parser, parent, element) {
                return {
                    'NODE': 1,
                    'ARC': 2,
                    'parent': parent,
                    'parser': parser,
                    'store': parser.store,
                    'element': element,
                    'lastChild': 0,
                    'base': null,
                    'lang': null,
                    'node': null,
                    'nodeType': null,
                    'listIndex': 1,
                    'rdfid': null,
                    'datatype': null,
                    'collection': false,
                    /** Terminate the frame and notify the store that we're done */ 'terminateFrame': function terminateFrame() {
                        if (this.collection) this.node.close();
                    },
                    /** Add a symbol of a certain type to the this frame */ 'addSymbol': function addSymbol(type, uri) {
                        uri = _uri.join(uri, this.base);
                        this.node = this.store.sym(uri);
                        this.nodeType = type;
                    },
                    /** Load any constructed triples into the store */ 'loadTriple': function loadTriple() {
                        if (this.parent.parent.collection) this.parent.parent.node.append(this.node);
                        else this.store.add(this.parent.parent.node, this.parent.node, this.node, this.parser.why);
                        if (this.parent.rdfid != null) {
                            // reify
                            var triple = this.store.sym(_uri.join('#' + this.parent.rdfid, this.base));
                            this.store.add(triple, this.store.sym(RDFParser1.ns.RDF + 'type'), this.store.sym(RDFParser1.ns.RDF + 'Statement'), this.parser.why);
                            this.store.add(triple, this.store.sym(RDFParser1.ns.RDF + 'subject'), this.parent.parent.node, this.parser.why);
                            this.store.add(triple, this.store.sym(RDFParser1.ns.RDF + 'predicate'), this.parent.node, this.parser.why);
                            this.store.add(triple, this.store.sym(RDFParser1.ns.RDF + 'object'), this.node, this.parser.why);
                        }
                    },
                    /** Check if it's OK to load a triple */ 'isTripleToLoad': function isTripleToLoad() {
                        return this.parent != null && this.parent.parent != null && this.nodeType === this.NODE && this.parent.nodeType === this.ARC && this.parent.parent.nodeType === this.NODE;
                    },
                    /** Add a symbolic node to this frame */ 'addNode': function addNode(uri) {
                        this.addSymbol(this.NODE, uri);
                        if (this.isTripleToLoad()) this.loadTriple();
                    },
                    /** Add a collection node to this frame */ 'addCollection': function addCollection() {
                        this.nodeType = this.NODE;
                        this.node = this.store.collection();
                        this.collection = true;
                        if (this.isTripleToLoad()) this.loadTriple();
                    },
                    /** Add a collection arc to this frame */ 'addCollectionArc': function addCollectionArc() {
                        this.nodeType = this.ARC;
                    },
                    /** Add a bnode to this frame */ 'addBNode': function addBNode(id) {
                        if (id != null) {
                            if (this.parser.bnodes[id] != null) this.node = this.parser.bnodes[id];
                            else this.node = this.parser.bnodes[id] = this.store.bnode();
                        } else this.node = this.store.bnode();
                        this.nodeType = this.NODE;
                        if (this.isTripleToLoad()) this.loadTriple();
                    },
                    /** Add an arc or property to this frame */ 'addArc': function addArc(uri) {
                        if (uri === RDFParser1.ns.RDF + 'li') {
                            uri = RDFParser1.ns.RDF + '_' + this.parent.listIndex;
                            this.parent.listIndex++;
                        }
                        this.addSymbol(this.ARC, uri);
                    },
                    /** Add a literal to this frame */ 'addLiteral': function addLiteral(value) {
                        if (this.parent.datatype && this.parent.datatype !== RDFParser1.ns.RDF + 'langString') this.node = this.store.literal(value, this.store.sym(this.parent.datatype));
                        else this.node = this.store.literal(value, this.lang);
                        this.nodeType = this.NODE;
                        if (this.isTripleToLoad()) this.loadTriple();
                    }
                };
            } // from the OpenLayers source .. needed to get around IE problems.
        },
        {
            key: "getAttributeNodeNS",
            value: function getAttributeNodeNS(node, uri, name) {
                var attributeNode = null;
                if (node.getAttributeNodeNS) attributeNode = node.getAttributeNodeNS(uri, name);
                else {
                    var attributes = node.attributes;
                    var potentialNode, fullName;
                    for(var i = 0; i < attributes.length; ++i){
                        potentialNode = attributes[i];
                        if (potentialNode.namespaceURI === uri) {
                            fullName = potentialNode.prefix ? potentialNode.prefix + ':' + name : name;
                            if (fullName === potentialNode.nodeName) {
                                attributeNode = potentialNode;
                                break;
                            }
                        }
                    }
                }
                return attributeNode;
            }
        },
        {
            key: "parse",
            value: function parse(document, base, why) {
                var children = document.childNodes; // clean up for the next run
                this.cleanParser(); // figure out the root element
                var root;
                if (document.nodeType === RDFParser1.nodeType.DOCUMENT) {
                    for(var c = 0; c < children.length; c++)if (children[c].nodeType === RDFParser1.nodeType.ELEMENT) {
                        root = children[c];
                        break;
                    }
                } else if (document.nodeType === RDFParser1.nodeType.ELEMENT) root = document;
                else throw new Error("RDFParser: can't find root in " + base + '. Halting. '); // return false
                this.why = why; // our topmost frame
                var f = this.frameFactory(this);
                this.base = base;
                f.base = base;
                f.lang = null; // was '' but can't have langs like that 2015 (!)
                this.parseDOM(this.buildFrame(f, root));
                return true;
            }
        },
        {
            key: "parseDOM",
            value: function parseDOM(frame) {
                // a DOM utility function used in parsing
                var rdfid;
                var elementURI = (function(el) {
                    var result = '';
                    if (el.namespaceURI == null) throw new Error('RDF/XML syntax error: No namespace for ' + el.localName + ' in ' + this.base);
                    if (el.namespaceURI) result = result + el.namespaceURI;
                    if (el.localName) result = result + el.localName;
                    else if (el.nodeName) {
                        if (el.nodeName.indexOf(':') >= 0) result = result + el.nodeName.split(':')[1];
                        else result = result + el.nodeName;
                    }
                    return result;
                }).bind(this);
                var dig = true; // if we'll dig down in the tree on the next iter
                while(frame.parent){
                    var dom = frame.element;
                    var attrs = dom.attributes;
                    if (dom.nodeType === RDFParser1.nodeType.TEXT || dom.nodeType === RDFParser1.nodeType.CDATA_SECTION) {
                        // we have a literal
                        if (frame.parent.nodeType === frame.NODE) {
                            // must have had attributes, store as rdf:value
                            frame.addArc(RDFParser1.ns.RDF + 'value');
                            frame = this.buildFrame(frame);
                        }
                        frame.addLiteral(dom.nodeValue);
                    } else if (elementURI(dom) !== RDFParser1.ns.RDF + 'RDF') {
                        // not root
                        if (frame.parent && frame.parent.collection) {
                            // we're a collection element
                            frame.addCollectionArc();
                            frame = this.buildFrame(frame, frame.element);
                            frame.parent.element = null;
                        }
                        if (!frame.parent || !frame.parent.nodeType || frame.parent.nodeType === frame.ARC) {
                            // we need a node
                            var about = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'about');
                            rdfid = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'ID');
                            if (about && rdfid) throw new Error('RDFParser: ' + dom.nodeName + ' has both rdf:id and rdf:about.' + ' Halting. Only one of these' + ' properties may be specified on a' + ' node.');
                            if (!about && rdfid) {
                                frame.addNode('#' + rdfid.nodeValue);
                                dom.removeAttributeNode(rdfid);
                            } else if (about == null && rdfid == null) {
                                var bnid = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'nodeID');
                                if (bnid) {
                                    frame.addBNode(bnid.nodeValue);
                                    dom.removeAttributeNode(bnid);
                                } else frame.addBNode();
                            } else {
                                frame.addNode(about.nodeValue);
                                dom.removeAttributeNode(about);
                            } // Typed nodes
                            var rdftype = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'type');
                            if (RDFParser1.ns.RDF + 'Description' !== elementURI(dom)) rdftype = {
                                'nodeValue': elementURI(dom)
                            };
                            if (rdftype != null) {
                                this.store.add(frame.node, this.store.sym(RDFParser1.ns.RDF + 'type'), this.store.sym(_uri.join(rdftype.nodeValue, frame.base)), this.why);
                                if (rdftype.nodeName) dom.removeAttributeNode(rdftype);
                            } // Property Attributes
                            for(var x = attrs.length - 1; x >= 0; x--)this.store.add(frame.node, this.store.sym(elementURI(attrs[x])), this.store.literal(attrs[x].nodeValue, frame.lang), this.why);
                        } else {
                            // we should add an arc (or implicit bnode+arc)
                            frame.addArc(elementURI(dom)); // save the arc's rdf:ID if it has one
                            if (this.reify) {
                                rdfid = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'ID');
                                if (rdfid) {
                                    frame.rdfid = rdfid.nodeValue;
                                    dom.removeAttributeNode(rdfid);
                                }
                            }
                            var parsetype = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'parseType');
                            var datatype = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'datatype');
                            if (datatype) {
                                frame.datatype = datatype.nodeValue;
                                dom.removeAttributeNode(datatype);
                            }
                            if (parsetype) {
                                var nv = parsetype.nodeValue;
                                if (nv === 'Literal') {
                                    frame.datatype = RDFParser1.ns.RDF + 'XMLLiteral';
                                    frame = this.buildFrame(frame); // Don't include the literal node, only its children
                                    frame.addLiteral(dom.childNodes);
                                    dig = false;
                                } else if (nv === 'Resource') {
                                    frame = this.buildFrame(frame, frame.element);
                                    frame.parent.element = null;
                                    frame.addBNode();
                                } else if (nv === 'Collection') {
                                    frame = this.buildFrame(frame, frame.element);
                                    frame.parent.element = null;
                                    frame.addCollection();
                                }
                                dom.removeAttributeNode(parsetype);
                            }
                            if (attrs.length !== 0) {
                                var resource = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'resource');
                                var bnid2 = this.getAttributeNodeNS(dom, RDFParser1.ns.RDF, 'nodeID');
                                frame = this.buildFrame(frame);
                                if (resource) {
                                    frame.addNode(resource.nodeValue);
                                    dom.removeAttributeNode(resource);
                                } else if (bnid2) {
                                    frame.addBNode(bnid2.nodeValue);
                                    dom.removeAttributeNode(bnid2);
                                } else frame.addBNode();
                                for(var x1 = attrs.length - 1; x1 >= 0; x1--){
                                    var f = this.buildFrame(frame);
                                    f.addArc(elementURI(attrs[x1]));
                                    if (elementURI(attrs[x1]) === RDFParser1.ns.RDF + 'type') this.buildFrame(f).addNode(attrs[x1].nodeValue);
                                    else this.buildFrame(f).addLiteral(attrs[x1].nodeValue);
                                }
                            } else if (dom.childNodes.length === 0) this.buildFrame(frame).addLiteral('');
                        }
                    } // rdf:RDF
                    // dig dug
                    dom = frame.element;
                    while(frame.parent){
                        var pframe = frame;
                        while(dom == null){
                            frame = frame.parent;
                            dom = frame.element;
                        }
                        var candidate = dom.childNodes && dom.childNodes[frame.lastChild];
                        if (!candidate || !dig) {
                            frame.terminateFrame();
                            if (!(frame = frame.parent)) break;
                             // done
                            dom = frame.element;
                            dig = true;
                        } else if (candidate.nodeType !== RDFParser1.nodeType.ELEMENT && candidate.nodeType !== RDFParser1.nodeType.TEXT && candidate.nodeType !== RDFParser1.nodeType.CDATA_SECTION || (candidate.nodeType === RDFParser1.nodeType.TEXT || candidate.nodeType === RDFParser1.nodeType.CDATA_SECTION) && dom.childNodes.length !== 1) frame.lastChild++;
                        else {
                            // not a leaf
                            frame.lastChild++;
                            frame = this.buildFrame(pframe, dom.childNodes[frame.lastChild - 1]);
                            break;
                        }
                    }
                } // while
            }
        },
        {
            key: "cleanParser",
            value: function cleanParser() {
                this.bnodes = {
                };
                this.why = null;
            }
        },
        {
            key: "buildFrame",
            value: function buildFrame(parent, element) {
                var frame = this.frameFactory(this, parent, element);
                if (parent) {
                    frame.base = parent.base;
                    frame.lang = parent.lang;
                }
                if (!element || element.nodeType === RDFParser1.nodeType.TEXT || element.nodeType === RDFParser1.nodeType.CDATA_SECTION) return frame;
                var attrs = element.attributes;
                var base = element.getAttributeNode('xml:base');
                if (base != null) {
                    frame.base = base.nodeValue;
                    element.removeAttribute('xml:base');
                }
                var lang = element.getAttributeNode('xml:lang');
                if (lang != null) {
                    frame.lang = lang.nodeValue;
                    element.removeAttribute('xml:lang');
                } // remove all extraneous xml and xmlns attributes
                for(var x = attrs.length - 1; x >= 0; x--)if (attrs[x].nodeName.substr(0, 3) === 'xml') {
                    if (attrs[x].name.slice(0, 6) === 'xmlns:') {
                        var uri = attrs[x].nodeValue; // alert('base for namespac attr:'+this.base)
                        if (this.base) uri = _uri.join(uri, this.base);
                        this.store.setPrefixForURI(attrs[x].name.slice(6), uri);
                    } //		alert('rdfparser: xml atribute: '+attrs[x].name) //@@
                    element.removeAttributeNode(attrs[x]);
                }
                return frame;
            }
        }
    ]);
    return RDFParser1;
}();
_definePropertyDefault.default(RDFParser, "ns", {
    'RDF': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'RDFS': 'http://www.w3.org/2000/01/rdf-schema#'
});
_definePropertyDefault.default(RDFParser, "nodeType", {
    'ELEMENT': 1,
    'ATTRIBUTE': 2,
    'TEXT': 3,
    'CDATA_SECTION': 4,
    'ENTITY_REFERENCE': 5,
    'ENTITY': 6,
    'PROCESSING_INSTRUCTION': 7,
    'COMMENT': 8,
    'DOCUMENT': 9,
    'DOCUMENT_TYPE': 10,
    'DOCUMENT_FRAGMENT': 11,
    'NOTATION': 12
});

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/defineProperty":"4x6r7","./uri":"cwuSF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRSLG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Parse a simple SPARL-Update subset syntax for patches.
//
//  This parses
//   WHERE {xxx} DELETE {yyy} INSERT DATA {zzz}
// (not necessarily in that order)
// as though it were the n3
//   <#query> patch:where {xxx}; patch:delete {yyy}; patch:insert {zzz}.
var _n3Parser = require("./n3parser");
var _n3ParserDefault = parcelHelpers.interopDefault(_n3Parser);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
function sparqlUpdateParser(str1, kb, base) {
    var i1, j, k;
    var keywords = [
        'INSERT',
        'DELETE',
        'WHERE'
    ];
    var SQNS = _namespaceDefault.default('http://www.w3.org/ns/pim/patch#');
    var p = _n3ParserDefault.default(kb, kb, base, base, null, null, '', null);
    var clauses = {
    };
    var badSyntax = function badSyntax(uri, lines, str, i, why) {
        return 'Line ' + (lines + 1) + ' of <' + uri + '>: Bad syntax:\n   ' + why + '\n   at: "' + str.slice(i, i + 30) + '"';
    }; // var check = function (next, last, message) {
    //   if (next < 0) {
    //     throw badSyntax(p._thisDoc, p.lines, str, j, last, message)
    //   }
    //   return next
    // }
    i1 = 0;
    var query = kb.sym(base + '#query'); // Invent a URI for the query
    clauses['query'] = query; // A way of accessing it in its N3 model.
    while(true){
        // console.log("A Now at i = " + i)
        j = p.skipSpace(str1, i1);
        if (j < 0) return clauses;
         // console.log("B After space at j= " + j)
        if (str1[j] === ';') {
            i1 = p.skipSpace(str1, j + 1);
            if (i1 < 0) return clauses; // Allow end in a
            j = i1;
        }
        var found = false;
        for(k = 0; k < keywords.length; k++){
            var key = keywords[k];
            if (str1.slice(j, j + key.length) === key) {
                i1 = p.skipSpace(str1, j + key.length);
                if (i1 < 0) throw badSyntax(p._thisDoc, p.lines, str1, j + key.length, 'found EOF, needed {...} after ' + key);
                if ((key === 'INSERT' || key === 'DELETE') && str1.slice(i1, i1 + 4) === 'DATA') {
                    // Some wanted 'DATA'. Whatever
                    j = p.skipSpace(str1, i1 + 4);
                    if (j < 0) throw badSyntax(p._thisDoc, p.lines, str1, i1 + 4, 'needed {...} after INSERT DATA ' + key);
                    i1 = j;
                }
                var res2 = [];
                j = p.node(str1, i1, res2); // Parse all the complexity of the clause
                if (j < 0) throw badSyntax(p._thisDoc, p.lines, str1, i1, 'bad syntax or EOF in {...} after ' + key);
                clauses[key.toLowerCase()] = res2[0];
                kb.add(query, SQNS(key.toLowerCase()), res2[0]); // , kb.sym(base)
                // key is the keyword and res2 has the contents
                found = true;
                i1 = j;
            }
        }
        if (!found && str1.slice(j, j + 7) === '@prefix') {
            i1 = p.directive(str1, j);
            if (i1 < 0) throw badSyntax(p._thisDoc, p.lines, str1, i1, 'bad syntax or EOF after @prefix ');
             // console.log("P before dot i= " + i)
            i1 = p.checkDot(str1, i1); // console.log("Q after dot i= " + i)
            found = true;
        }
        if (!found) // console.log("Bad syntax " + j)
        throw badSyntax(p._thisDoc, p.lines, str1, j, "Unknown syntax at start of statememt: '" + str1.slice(j).slice(0, 20) + "'");
    } // while
// return clauses
}
exports.default = sparqlUpdateParser;

},{"./n3parser":"f4bGR","./namespace":"iFtHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4ah4":[function(require,module,exports) {
var global = typeof self !== 'undefined' ? self : this;
var __self__ = function() {
    function F() {
        this.fetch = false;
        this.DOMException = global.DOMException;
    }
    F.prototype = global;
    return new F();
}();
(function(self) {
    var irrelevant = function(exports) {
        var support = {
            searchParams: 'URLSearchParams' in self,
            iterable: 'Symbol' in self && 'iterator' in Symbol,
            blob: 'FileReader' in self && 'Blob' in self && function() {
                try {
                    new Blob();
                    return true;
                } catch (e) {
                    return false;
                }
            }(),
            formData: 'FormData' in self,
            arrayBuffer: 'ArrayBuffer' in self
        };
        function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
            var viewClasses = [
                '[object Int8Array]',
                '[object Uint8Array]',
                '[object Uint8ClampedArray]',
                '[object Int16Array]',
                '[object Uint16Array]',
                '[object Int32Array]',
                '[object Uint32Array]',
                '[object Float32Array]',
                '[object Float64Array]'
            ];
            var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
        }
        function normalizeName(name) {
            if (typeof name !== 'string') name = String(name);
            if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) throw new TypeError('Invalid character in header field name');
            return name.toLowerCase();
        }
        function normalizeValue(value) {
            if (typeof value !== 'string') value = String(value);
            return value;
        }
        // Build a destructive iterator for the value list
        function iteratorFor(items) {
            var iterator = {
                next: function() {
                    var value = items.shift();
                    return {
                        done: value === undefined,
                        value: value
                    };
                }
            };
            if (support.iterable) iterator[Symbol.iterator] = function() {
                return iterator;
            };
            return iterator;
        }
        function Headers(headers) {
            this.map = {
            };
            if (headers instanceof Headers) headers.forEach(function(value, name) {
                this.append(name, value);
            }, this);
            else if (Array.isArray(headers)) headers.forEach(function(header) {
                this.append(header[0], header[1]);
            }, this);
            else if (headers) Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
            }, this);
        }
        Headers.prototype.append = function(name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ', ' + value : value;
        };
        Headers.prototype['delete'] = function(name) {
            delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
            return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
            for(var name in this.map)if (this.map.hasOwnProperty(name)) callback.call(thisArg, this.map[name], name, this);
        };
        Headers.prototype.keys = function() {
            var items = [];
            this.forEach(function(value, name) {
                items.push(name);
            });
            return iteratorFor(items);
        };
        Headers.prototype.values = function() {
            var items = [];
            this.forEach(function(value) {
                items.push(value);
            });
            return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
            var items = [];
            this.forEach(function(value, name) {
                items.push([
                    name,
                    value
                ]);
            });
            return iteratorFor(items);
        };
        if (support.iterable) Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        function consumed(body) {
            if (body.bodyUsed) return Promise.reject(new TypeError('Already read'));
            body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
            return new Promise(function(resolve, reject) {
                reader.onload = function() {
                    resolve(reader.result);
                };
                reader.onerror = function() {
                    reject(reader.error);
                };
            });
        }
        function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
        }
        function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise;
        }
        function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);
            for(var i = 0; i < view.length; i++)chars[i] = String.fromCharCode(view[i]);
            return chars.join('');
        }
        function bufferClone(buf) {
            if (buf.slice) return buf.slice(0);
            else {
                var view = new Uint8Array(buf.byteLength);
                view.set(new Uint8Array(buf));
                return view.buffer;
            }
        }
        function Body() {
            this.bodyUsed = false;
            this._initBody = function(body) {
                this._bodyInit = body;
                if (!body) this._bodyText = '';
                else if (typeof body === 'string') this._bodyText = body;
                else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body;
                else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body;
                else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString();
                else if (support.arrayBuffer && support.blob && isDataView(body)) {
                    this._bodyArrayBuffer = bufferClone(body.buffer);
                    // IE 10-11 can't handle a DataView body.
                    this._bodyInit = new Blob([
                        this._bodyArrayBuffer
                    ]);
                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) this._bodyArrayBuffer = bufferClone(body);
                else this._bodyText = body = Object.prototype.toString.call(body);
                if (!this.headers.get('content-type')) {
                    if (typeof body === 'string') this.headers.set('content-type', 'text/plain;charset=UTF-8');
                    else if (this._bodyBlob && this._bodyBlob.type) this.headers.set('content-type', this._bodyBlob.type);
                    else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                }
            };
            if (support.blob) {
                this.blob = function() {
                    var rejected = consumed(this);
                    if (rejected) return rejected;
                    if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                    else if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                        this._bodyArrayBuffer
                    ]));
                    else if (this._bodyFormData) throw new Error('could not read FormData body as blob');
                    else return Promise.resolve(new Blob([
                        this._bodyText
                    ]));
                };
                this.arrayBuffer = function() {
                    if (this._bodyArrayBuffer) return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                    else return this.blob().then(readBlobAsArrayBuffer);
                };
            }
            this.text = function() {
                var rejected = consumed(this);
                if (rejected) return rejected;
                if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
                else if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                else if (this._bodyFormData) throw new Error('could not read FormData body as text');
                else return Promise.resolve(this._bodyText);
            };
            if (support.formData) this.formData = function() {
                return this.text().then(decode);
            };
            this.json = function() {
                return this.text().then(JSON.parse);
            };
            return this;
        }
        // HTTP methods whose capitalization should be normalized
        var methods = [
            'DELETE',
            'GET',
            'HEAD',
            'OPTIONS',
            'POST',
            'PUT'
        ];
        function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
            options = options || {
            };
            var body = options.body;
            if (input instanceof Request) {
                if (input.bodyUsed) throw new TypeError('Already read');
                this.url = input.url;
                this.credentials = input.credentials;
                if (!options.headers) this.headers = new Headers(input.headers);
                this.method = input.method;
                this.mode = input.mode;
                this.signal = input.signal;
                if (!body && input._bodyInit != null) {
                    body = input._bodyInit;
                    input.bodyUsed = true;
                }
            } else this.url = String(input);
            this.credentials = options.credentials || this.credentials || 'same-origin';
            if (options.headers || !this.headers) this.headers = new Headers(options.headers);
            this.method = normalizeMethod(options.method || this.method || 'GET');
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;
            if ((this.method === 'GET' || this.method === 'HEAD') && body) throw new TypeError('Body not allowed for GET or HEAD requests');
            this._initBody(body);
        }
        Request.prototype.clone = function() {
            return new Request(this, {
                body: this._bodyInit
            });
        };
        function decode(body) {
            var form = new FormData();
            body.trim().split('&').forEach(function(bytes) {
                if (bytes) {
                    var split = bytes.split('=');
                    var name = split.shift().replace(/\+/g, ' ');
                    var value = split.join('=').replace(/\+/g, ' ');
                    form.append(decodeURIComponent(name), decodeURIComponent(value));
                }
            });
            return form;
        }
        function parseHeaders(rawHeaders) {
            var headers = new Headers();
            // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
            // https://tools.ietf.org/html/rfc7230#section-3.2
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
            preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
                var parts = line.split(':');
                var key = parts.shift().trim();
                if (key) {
                    var value = parts.join(':').trim();
                    headers.append(key, value);
                }
            });
            return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
            if (!options) options = {
            };
            this.type = 'default';
            this.status = options.status === undefined ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = 'statusText' in options ? options.statusText : 'OK';
            this.headers = new Headers(options.headers);
            this.url = options.url || '';
            this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new Headers(this.headers),
                url: this.url
            });
        };
        Response.error = function() {
            var response = new Response(null, {
                status: 0,
                statusText: ''
            });
            response.type = 'error';
            return response;
        };
        var redirectStatuses = [
            301,
            302,
            303,
            307,
            308
        ];
        Response.redirect = function(url, status) {
            if (redirectStatuses.indexOf(status) === -1) throw new RangeError('Invalid status code');
            return new Response(null, {
                status: status,
                headers: {
                    location: url
                }
            });
        };
        exports.DOMException = self.DOMException;
        try {
            new exports.DOMException();
        } catch (err) {
            exports.DOMException = function(message, name) {
                this.message = message;
                this.name = name;
                var error = Error(message);
                this.stack = error.stack;
            };
            exports.DOMException.prototype = Object.create(Error.prototype);
            exports.DOMException.prototype.constructor = exports.DOMException;
        }
        function fetch(input, init) {
            return new Promise(function(resolve, reject) {
                var request = new Request(input, init);
                if (request.signal && request.signal.aborted) return reject(new exports.DOMException('Aborted', 'AbortError'));
                var xhr = new XMLHttpRequest();
                function abortXhr() {
                    xhr.abort();
                }
                xhr.onload = function() {
                    var options = {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                    };
                    options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                    var body = 'response' in xhr ? xhr.response : xhr.responseText;
                    resolve(new Response(body, options));
                };
                xhr.onerror = function() {
                    reject(new TypeError('Network request failed'));
                };
                xhr.ontimeout = function() {
                    reject(new TypeError('Network request failed'));
                };
                xhr.onabort = function() {
                    reject(new exports.DOMException('Aborted', 'AbortError'));
                };
                xhr.open(request.method, request.url, true);
                if (request.credentials === 'include') xhr.withCredentials = true;
                else if (request.credentials === 'omit') xhr.withCredentials = false;
                if ('responseType' in xhr && support.blob) xhr.responseType = 'blob';
                request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                });
                if (request.signal) {
                    request.signal.addEventListener('abort', abortXhr);
                    xhr.onreadystatechange = function() {
                        // DONE (success or failure)
                        if (xhr.readyState === 4) request.signal.removeEventListener('abort', abortXhr);
                    };
                }
                xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
            });
        }
        fetch.polyfill = true;
        if (!self.fetch) {
            self.fetch = fetch;
            self.Headers = Headers;
            self.Request = Request;
            self.Response = Response;
        }
        exports.Headers = Headers;
        exports.Request = Request;
        exports.Response = Response;
        exports.fetch = fetch;
        Object.defineProperty(exports, '__esModule', {
            value: true
        });
        return exports;
    }({
    });
})(__self__);
__self__.fetch.ponyfill = true;
// Remove "polyfill" property added by whatwg-fetch
delete __self__.fetch.polyfill;
// Choose between native implementation (global) or custom implementation (__self__)
// var ctx = global.fetch ? global : __self__;
var ctx = __self__; // this line disable service worker support temporarily
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
;
exports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.
;
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
;
exports.Headers = ctx.Headers;
exports.Request = ctx.Request;
exports.Response = ctx.Response;
module.exports = exports;

},{}],"fLGm5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (function() {
    return {
        parseJSON: function parseJSON(data, source, store) {
            var subject, predicate, object;
            var bnodes = {
            };
            var why = store.sym(source);
            for(var x in data){
                if (x.indexOf('_:') === 0) {
                    if (bnodes[x]) subject = bnodes[x];
                    else {
                        subject = store.bnode(x);
                        bnodes[x] = subject;
                    }
                } else subject = store.sym(x);
                var preds = data[x];
                for(var y in preds){
                    var objects = preds[y];
                    predicate = store.sym(y);
                    for(var z in objects){
                        var obj = objects[z];
                        if (obj.type === 'uri') {
                            object = store.sym(obj.value);
                            store.add(subject, predicate, object, why);
                        } else if (obj.type === 'BlankNode') {
                            if (bnodes[obj.value]) object = bnodes[obj.value];
                            else {
                                object = store.bnode(obj.value);
                                bnodes[obj.value] = object;
                            }
                            store.add(subject, predicate, object, why);
                        } else if (obj.type === 'Literal') {
                            // var datatype
                            if (obj.datatype) object = store.literal(obj.value, undefined, store.sym(obj.datatype));
                            else if (obj.lang) object = store.literal(obj.value, obj.lang);
                            else object = store.literal(obj.value);
                            store.add(subject, predicate, object, why);
                        } else throw new Error('error: unexpected termtype: ' + z.type);
                    }
                }
            }
        }
    };
})();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2WzWX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
function queryToSPARQL(query1) {
    var indent = 0;
    function getSelect(query) {
        var str = addIndent() + 'SELECT ';
        for(var i = 0; i < query.vars.length; i++)str += query.vars[i] + ' ';
        str += '\n';
        return str;
    }
    function getPattern(pat) {
        var str = '';
        var st = pat.statements;
        for(var x in st){
            _logDefault.default.debug('Found statement: ' + st);
            str += addIndent() + st[x] + '\n';
        }
        return str;
    }
    function getConstraints(pat) {
        var str = '';
        for(var v in pat.constraints){
            var foo = pat.constraints[v];
            str += addIndent() + 'FILTER ( ' + foo.describe(v) + ' ) ' + '\n';
        }
        return str;
    }
    function getOptionals(pat) {
        var str = '';
        for(var x = 0; x < pat.optional.length; x++){
            // alert(pat.optional.termType)
            _logDefault.default.debug('Found optional query');
            str += addIndent() + 'OPTIONAL { ' + '\n';
            indent++;
            str += getPattern(pat.optional[x]);
            str += getConstraints(pat.optional[x]);
            str += getOptionals(pat.optional[x]);
            indent--;
            str += addIndent() + '}' + '\n';
        }
        return str;
    }
    function getWhere(pat) {
        var str = addIndent() + 'WHERE \n' + '{ \n';
        indent++;
        str += getPattern(pat);
        str += getConstraints(pat);
        str += getOptionals(pat);
        indent--;
        str += '}';
        return str;
    }
    function addIndent() {
        var str = '';
        for(var i = 0; i < indent; i++)str += '    ';
        return str;
    }
    function getSPARQL(query) {
        return getSelect(query) + getWhere(query.pat);
    }
    return getSPARQL(query1);
}
exports.default = queryToSPARQL;

},{"./log":"44B5t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lXtbK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Converting between SPARQL queries and the $rdf query API
/*

function SQuery () {
  this.terms = []
  return this
}

STerm.prototype.toString = STerm.val
SQuery.prototype.add = function (str) {this.terms.push()}*/ var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _query = require("./query");
function SPARQLToQuery(SPARQL, testMode, kb) {
    // AJAR_ClearTable()
    var variableHash = [];
    function makeVar(name) {
        if (variableHash[name]) return variableHash[name];
        var newVar = kb.variable(name);
        variableHash[name] = newVar;
        return newVar;
    } // term type functions
    function isRealText(term) {
        return typeof term === 'string' && term.match(/[^ \n\t]/);
    }
    function isVar(term) {
        return typeof term === 'string' && term.match(/^[\?\$]/);
    }
    function fixSymbolBrackets(term) {
        if (typeof term === 'string') return term.replace(/^&lt;/, '<').replace(/&gt;$/, '>');
        else return term;
    }
    function isSymbol(term) {
        return typeof term === 'string' && term.match(/^<[^>]*>$/);
    }
    function isBnode(term) {
        return typeof term === 'string' && (term.match(/^_:/) || term.match(/^$/));
    }
    function isPrefix(term) {
        return typeof term === 'string' && term.match(/:$/);
    }
    function isPrefixedSymbol(term) {
        return typeof term === 'string' && term.match(/^:|^[^_][^:]*:/);
    }
    function getPrefix(term) {
        var a = term.split(':');
        return a[0];
    }
    function getSuffix(term) {
        var a = term.split(':');
        return a[1];
    }
    function removeBrackets(term) {
        if (isSymbol(term)) return term.slice(1, term.length - 1);
        else return term;
    } // takes a string and returns an array of strings and Literals in the place of literals
    function parseLiterals(str) {
        // var sin = (str.indexOf(/[ \n]\'/)==-1)?null:str.indexOf(/[ \n]\'/), doub = (str.indexOf(/[ \n]\"/)==-1)?null:str.indexOf(/[ \n]\"/)
        var sin = str.indexOf("'") === -1 ? null : str.indexOf("'");
        var doub = str.indexOf('"') === -1 ? null : str.indexOf('"'); // alert("S: "+sin+" D: "+doub)
        if (!sin && !doub) {
            var a = new Array(1);
            a[0] = str;
            return a;
        }
        var res = new Array(2);
        var br;
        var ind;
        if (!sin || doub && doub < sin) {
            br = '"';
            ind = doub;
        } else if (!doub || sin && sin < doub) {
            br = "'";
            ind = sin;
        } else {
            _logDefault.default.error('SQARQL QUERY OOPS!');
            return res;
        }
        res[0] = str.slice(0, ind);
        var end = str.slice(ind + 1).indexOf(br);
        if (end === -1) {
            _logDefault.default.error('SPARQL parsing error: no matching parentheses in literal ' + str);
            return str;
        } // alert(str.slice(end + ind + 2).match(/^\^\^/))
        var end2;
        if (str.slice(end + ind + 2).match(/^\^\^/)) {
            end2 = str.slice(end + ind + 2).indexOf(' '); // alert(end2)
            res[1] = kb.literal(str.slice(ind + 1, ind + 1 + end), kb.sym(removeBrackets(str.slice(ind + 4 + end, ind + 2 + end + end2)))); // alert(res[1].datatype.uri)
            res = res.concat(parseLiterals(str.slice(end + ind + 3 + end2)));
        } else if (str.slice(end + ind + 2).match(/^@/)) {
            end2 = str.slice(end + ind + 2).indexOf(' '); // alert(end2)
            res[1] = kb.literal(str.slice(ind + 1, ind + 1 + end), str.slice(ind + 3 + end, ind + 2 + end + end2), null); // alert(res[1].datatype.uri)
            res = res.concat(parseLiterals(str.slice(end + ind + 2 + end2)));
        } else {
            res[1] = kb.literal(str.slice(ind + 1, ind + 1 + end));
            _logDefault.default.info('Literal found: ' + res[1]);
            res = res.concat(parseLiterals(str.slice(end + ind + 2))); // finds any other literals
        }
        return res;
    }
    function spaceDelimit(str) {
        str = str.replace(/\(/g, ' ( ').replace(/\)/g, ' ) ').replace(/</g, ' <').replace(/>/g, '> ').replace(/{/g, ' { ').replace(/}/g, ' } ').replace(/[\t\n\r]/g, ' ').replace(/; /g, ' ; ').replace(/\. /g, ' . ').replace(/, /g, ' , ');
        _logDefault.default.info('New str into spaceDelimit: \n' + str);
        var res = [];
        var br = str.split(' ');
        for(var x in br)if (isRealText(br[x])) res = res.concat(br[x]);
        return res;
    }
    function replaceKeywords(input) {
        var strarr = input;
        for(var x = 0; x < strarr.length; x++){
            if (strarr[x] === 'a') strarr[x] = '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>';
            if (strarr[x] === 'is' && strarr[x + 2] === 'of') {
                strarr.splice(x, 1);
                strarr.splice(x + 1, 1);
                var s = strarr[x - 1];
                strarr[x - 1] = strarr[x + 1];
                strarr[x + 1] = s;
            }
        }
        return strarr;
    }
    function toTerms(input) {
        var res = [];
        for(var x = 0; x < input.length; x++){
            if (typeof input[x] !== 'string') {
                res[x] = input[x];
                continue;
            }
            input[x] = fixSymbolBrackets(input[x]);
            if (isVar(input[x])) res[x] = makeVar(input[x].slice(1));
            else if (isBnode(input[x])) {
                _logDefault.default.info(input[x] + ' was identified as a bnode.');
                res[x] = kb.bnode();
            } else if (isSymbol(input[x])) {
                _logDefault.default.info(input[x] + ' was identified as a symbol.');
                res[x] = kb.sym(removeBrackets(input[x]));
            } else if (isPrefixedSymbol(input[x])) {
                _logDefault.default.info(input[x] + ' was identified as a prefixed symbol');
                if (prefixes[getPrefix(input[x])]) res[x] = kb.sym(input[x] = prefixes[getPrefix(input[x])] + getSuffix(input[x]));
                else {
                    _logDefault.default.error('SPARQL error: ' + input[x] + ' with prefix ' + getPrefix(input[x]) + ' does not have a correct prefix entry.');
                    res[x] = input[x];
                }
            } else res[x] = input[x];
        }
        return res;
    }
    function tokenize(str) {
        var token1 = parseLiterals(str);
        var token2 = [];
        for(var x in token1)if (typeof token1[x] === 'string') token2 = token2.concat(spaceDelimit(token1[x]));
        else token2 = token2.concat(token1[x]);
        token2 = replaceKeywords(token2);
        _logDefault.default.info('SPARQL Tokens: ' + token2);
        return token2;
    } // CASE-INSENSITIVE
    function arrayIndexOf(str, arr) {
        for(var i = 0; i < arr.length; i++){
            if (typeof arr[i] !== 'string') continue;
            if (arr[i].toLowerCase() === str.toLowerCase()) return i;
        } // log.warn("No instance of "+str+" in array "+arr)
        return null;
    } // CASE-INSENSITIVE
    function arrayIndicesOf(str, arr) {
        var ind = [];
        for(var i = 0; i < arr.length; i++){
            if (typeof arr[i] !== 'string') continue;
            if (arr[i].toLowerCase() === str.toLowerCase()) ind.push(i);
        }
        return ind;
    }
    function setVars(input, query) {
        _logDefault.default.info('SPARQL vars: ' + input);
        for(var x in input)if (isVar(input[x])) {
            _logDefault.default.info('Added ' + input[x] + ' to query variables from SPARQL');
            var v = makeVar(input[x].slice(1));
            query.vars.push(v);
            v.label = input[x].slice(1);
        } else _logDefault.default.warn('Incorrect SPARQL variable in SELECT: ' + input[x]);
    }
    function getPrefixDeclarations(input) {
        var prefInd = arrayIndicesOf('PREFIX', input);
        var res = [];
        for(var i in prefInd){
            var a = input[prefInd[i] + 1];
            var b = input[prefInd[i] + 2];
            if (!isPrefix(a)) _logDefault.default.error('Invalid SPARQL prefix: ' + a);
            else if (!isSymbol(b)) _logDefault.default.error('Invalid SPARQL symbol: ' + b);
            else {
                _logDefault.default.info('Prefix found: ' + a + ' -> ' + b);
                var pref = getPrefix(a);
                var symbol = removeBrackets(b);
                res[pref] = symbol;
            }
        }
        return res;
    }
    function getMatchingBracket(arr, open, close) {
        _logDefault.default.info('Looking for a close bracket of type ' + close + ' in ' + arr);
        var index = 0;
        for(var i = 0; i < arr.length; i++){
            if (arr[i] === open) index++;
            if (arr[i] === close) index--;
            if (index < 0) return i;
        }
        _logDefault.default.error('Statement had no close parenthesis in SPARQL query');
        return 0;
    }
    function constraintGreaterThan(value) {
        this.describe = function(varstr) {
            return varstr + ' > ' + value.toNT();
        };
        this.test = function(term) {
            if (term.value.match(/[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?/)) return parseFloat(term.value) > parseFloat(value);
            else return term.toNT() > value.toNT();
        };
        return this;
    }
    function constraintLessThan(value) {
        // this is not the recommended usage. Should only work on literal, numeric, dateTime
        this.describe = function(varstr) {
            return varstr + ' < ' + value.toNT();
        };
        this.test = function(term) {
            // this.describe = function (varstr) { return varstr + " < "+value }
            if (term.value.match(/[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?/)) return parseFloat(term.value) < parseFloat(value);
            else return term.toNT() < value.toNT();
        };
        return this;
    } // This should only work on literals but doesn't.
    function ConstraintEqualTo(value) {
        this.describe = function(varstr) {
            return varstr + ' = ' + value.toNT();
        };
        this.test = function(term) {
            return value.equals(term);
        };
        return this;
    } // value must be a literal
    function ConstraintRegexp(value) {
        this.describe = function(varstr) {
            return "REGEXP( '" + value + "' , " + varstr + ' )';
        };
        this.test = function(term) {
            var str = value; // str = str.replace(/^//,"").replace(//$/,"")
            var rg = new RegExp(str);
            if (term.value) return rg.test(term.value);
            else return false;
        };
    }
    function setConstraint(input, pat) {
        if (input.length === 3 && input[0].termType === 'Variable' && (input[2].termType === 'NamedNode' || input[2].termType === 'Literal')) {
            if (input[1] === '=') {
                _logDefault.default.debug('Constraint added: ' + input);
                pat.constraints[input[0]] = new ConstraintEqualTo(input[2]);
            } else if (input[1] === '>') {
                _logDefault.default.debug('Constraint added: ' + input);
                pat.constraints[input[0]] = new ConstraintEqualTo(input[2]);
            } else if (input[1] === '<') {
                _logDefault.default.debug('Constraint added: ' + input);
                pat.constraints[input[0]] = new ConstraintEqualTo(input[2]);
            } else _logDefault.default.warn("I don't know how to handle the constraint: " + input);
        } else if (input.length === 6 && typeof input[0] === 'string' && input[0].toLowerCase() === 'regexp' && input[1] === '(' && input[5] === ')' && input[3] === ',' && input[4].termType === 'Variable' && input[2].termType === 'Literal') {
            _logDefault.default.debug('Constraint added: ' + input);
            pat.constraints[input[4]] = new ConstraintRegexp(input[2].value);
        } // log.warn("I don't know how to handle the constraint: "+input)
    // alert("length: "+input.length+" input 0 type: "+input[0].termType+" input 1: "+input[1]+" input[2] type: "+input[2].termType)
    }
    function setOptional(terms, pat) {
        _logDefault.default.debug('Optional query: ' + terms + ' not yet implemented.');
        var opt = kb.formula();
        setWhere(terms, opt);
        pat.optional.push(opt);
    }
    function setWhere(input, pat) {
        var terms = toTerms(input);
        var end;
        _logDefault.default.debug('WHERE: ' + terms);
        var opt; // var opt = arrayIndicesOf("OPTIONAL",terms)
        while(arrayIndexOf('OPTIONAL', terms)){
            opt = arrayIndexOf('OPTIONAL', terms);
            _logDefault.default.debug('OPT: ' + opt + ' ' + terms[opt] + ' in ' + terms);
            if (terms[opt + 1] !== '{') _logDefault.default.warn('Bad optional opening bracket in word ' + opt);
            end = getMatchingBracket(terms.slice(opt + 2), '{', '}');
            if (end === -1) _logDefault.default.error('No matching bracket in word ' + opt);
            else {
                setOptional(terms.slice(opt + 2, opt + 2 + end), pat); // alert(pat.statements[0].toNT())
                opt = arrayIndexOf('OPTIONAL', terms);
                end = getMatchingBracket(terms.slice(opt + 2), '{', '}');
                terms.splice(opt, end + 3);
            }
        }
        _logDefault.default.debug('WHERE after optionals: ' + terms);
        while(arrayIndexOf('FILTER', terms)){
            var filt = arrayIndexOf('FILTER', terms);
            if (terms[filt + 1] !== '(') _logDefault.default.warn('Bad filter opening bracket in word ' + filt);
            end = getMatchingBracket(terms.slice(filt + 2), '(', ')');
            if (end === -1) _logDefault.default.error('No matching bracket in word ' + filt);
            else {
                setConstraint(terms.slice(filt + 2, filt + 2 + end), pat);
                filt = arrayIndexOf('FILTER', terms);
                end = getMatchingBracket(terms.slice(filt + 2), '(', ')');
                terms.splice(filt, end + 3);
            }
        }
        _logDefault.default.debug('WHERE after filters and optionals: ' + terms);
        extractStatements(terms, pat);
    }
    function extractStatements(terms, formula) {
        var arrayZero = new Array(1);
        arrayZero[0] = -1; // this is just to add the beginning of the where to the periods index.
        var per = arrayZero.concat(arrayIndicesOf('.', terms));
        var stat = [];
        for(var x = 0; x < per.length - 1; x++)stat[x] = terms.slice(per[x] + 1, per[x + 1]);
         // Now it's in an array of statements
        for(x in stat){
            // THIS MUST BE CHANGED FOR COMMA, SEMICOLON
            _logDefault.default.info('s+p+o ' + x + ' = ' + stat[x]);
            var subj = stat[x][0];
            stat[x].splice(0, 1);
            var sem = arrayZero.concat(arrayIndicesOf(';', stat[x]));
            sem.push(stat[x].length);
            var stat2 = [];
            for(var y = 0; y < sem.length - 1; y++)stat2[y] = stat[x].slice(sem[y] + 1, sem[y + 1]);
            for(x in stat2){
                _logDefault.default.info('p+o ' + x + ' = ' + stat[x]);
                var pred = stat2[x][0];
                stat2[x].splice(0, 1);
                var com = arrayZero.concat(arrayIndicesOf(',', stat2[x]));
                com.push(stat2[x].length);
                var stat3 = [];
                for(y = 0; y < com.length - 1; y++)stat3[y] = stat2[x].slice(com[y] + 1, com[y + 1]);
                for(x in stat3){
                    var obj = stat3[x][0];
                    _logDefault.default.info('Subj=' + subj + ' Pred=' + pred + ' Obj=' + obj);
                    formula.add(subj, pred, obj);
                }
            }
        }
    } // ******************************* Body of SPARQLToQuery ***************************//
    _logDefault.default.info('SPARQL input: \n' + SPARQL);
    var q = new _query.Query();
    var sp = tokenize(SPARQL); // first tokenize everything
    var prefixes = getPrefixDeclarations(sp);
    if (!prefixes.rdf) prefixes.rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
    if (!prefixes.rdfs) prefixes.rdfs = 'http://www.w3.org/2000/01/rdf-schema#';
    var selectLoc = arrayIndexOf('SELECT', sp);
    var whereLoc = arrayIndexOf('WHERE', sp);
    if (selectLoc < 0 || whereLoc < 0 || selectLoc > whereLoc) {
        _logDefault.default.error('Invalid or nonexistent SELECT and WHERE tags in SPARQL query');
        return false;
    }
    setVars(sp.slice(selectLoc + 1, whereLoc), q);
    setWhere(sp.slice(whereLoc + 2, sp.length - 1), q.pat);
    if (testMode) return q;
    for(var x1 in q.pat.statements){
        var st = q.pat.statements[x1];
        if (st.subject.termType === 'NamedNode') {
            if (kb.fetcher) kb.fetcher.lookUpThing(st.subject, 'sparql:' + st.subject);
        }
        if (st.object.termType === 'NamedNode') {
            if (kb.fetcher) kb.fetcher.lookUpThing(st.object, 'sparql:' + st.object);
        }
    } // alert(q.pat)
    return q; // checkVars()
// *******************************************************************//
}
exports.default = SPARQLToQuery;

},{"./log":"44B5t","./query":"1LIOf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9LDv0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>UpdateManager
);
var _typeof = require("@babel/runtime/helpers/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
/* @file Update Manager Class
**
** 2007-07-15 originall sparl update module by Joe Presbrey <presbrey@mit.edu>
** 2010-08-08 TimBL folded in Kenny's WEBDAV
** 2010-12-07 TimBL addred local file write code
*/ var _store = require("./store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _uri = require("./uri");
var _fetcher = require("./fetcher");
var _fetcherDefault = parcelHelpers.interopDefault(_fetcher);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
var _serializer = require("./serializer");
var _serializerDefault = parcelHelpers.interopDefault(_serializer);
var _terms = require("./utils/terms");
var _utilsJs = require("./utils-js");
var _termValue = require("./utils/termValue");
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/**
* The UpdateManager is a helper object for a store.
* Just as a Fetcher provides the store with the ability to read and write,
* the Update Manager provides functionality for making small patches in real time,
* and also looking out for concurrent updates from other agents
*/ var UpdateManager = /*#__PURE__*/ function() {
    /** Index of objects for coordinating incoming and outgoing patches */ /** Object of namespaces */ /**
   * @param  store - The quadstore to store data and metadata. Created if not passed.
  */ function UpdateManager1(store) {
        _classCallCheckDefault.default(this, UpdateManager1);
        _definePropertyDefault.default(this, "store", void 0);
        _definePropertyDefault.default(this, "ifps", void 0);
        _definePropertyDefault.default(this, "fps", void 0);
        _definePropertyDefault.default(this, "patchControl", void 0);
        _definePropertyDefault.default(this, "ns", void 0);
        store = store || new _storeDefault.default();
        if (store.updater) throw new Error("You can't have two UpdateManagers for the same store");
        if (!store.fetcher) store.fetcher = new _fetcherDefault.default(store);
        this.store = store;
        store.updater = this;
        this.ifps = {
        };
        this.fps = {
        };
        this.ns = {
        };
        this.ns.link = _namespaceDefault.default('http://www.w3.org/2007/ont/link#');
        this.ns.http = _namespaceDefault.default('http://www.w3.org/2007/ont/http#');
        this.ns.httph = _namespaceDefault.default('http://www.w3.org/2007/ont/httph#');
        this.ns.ldp = _namespaceDefault.default('http://www.w3.org/ns/ldp#');
        this.ns.rdf = _namespaceDefault.default('http://www.w3.org/1999/02/22-rdf-syntax-ns#');
        this.ns.rdfs = _namespaceDefault.default('http://www.w3.org/2000/01/rdf-schema#');
        this.ns.rdf = _namespaceDefault.default('http://www.w3.org/1999/02/22-rdf-syntax-ns#');
        this.ns.owl = _namespaceDefault.default('http://www.w3.org/2002/07/owl#');
        this.patchControl = [];
    }
    _createClassDefault.default(UpdateManager1, [
        {
            key: "patchControlFor",
            value: function patchControlFor(doc) {
                if (!this.patchControl[doc.value]) this.patchControl[doc.value] = [];
                return this.patchControl[doc.value];
            }
        },
        {
            key: "isHttpUri",
            value: function isHttpUri(uri) {
                return uri.slice(0, 4) === 'http';
            }
        },
        {
            key: "editable",
            value: function editable(uri, kb) {
                if (!uri) return false; // Eg subject is bnode, no known doc to write to
                if (!kb) kb = this.store;
                uri = _termValue.termValue(uri);
                if (!this.isHttpUri(uri)) {
                    if (kb.holds(this.store.rdfFactory.namedNode(uri), this.store.rdfFactory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), this.store.rdfFactory.namedNode('http://www.w3.org/2007/ont/link#MachineEditableDocument'))) return 'LOCALFILE';
                }
                var request;
                var definitive = false; // @ts-ignore passes a string to kb.each, which expects a term. Should this work?
                var requests = kb.each(undefined, this.ns.link('requestedURI'), _uri.docpart(uri));
                var method;
                for(var r = 0; r < requests.length; r++){
                    request = requests[r];
                    if (request !== undefined) {
                        var response = kb.any(request, this.ns.link('response'));
                        if (request !== undefined) {
                            var wacAllow = kb.anyValue(response, this.ns.httph('wac-allow'));
                            if (wacAllow) {
                                var _iterator = _createForOfIteratorHelper(wacAllow.split(',')), _step;
                                try {
                                    for(_iterator.s(); !(_step = _iterator.n()).done;){
                                        var bit = _step.value;
                                        var lr = bit.split('=');
                                        if (lr[0].includes('user') && !lr[1].includes('write') && !lr[1].includes('append')) // console.log('    editable? excluded by WAC-Allow: ', wacAllow)
                                        return false;
                                    }
                                } catch (err) {
                                    _iterator.e(err);
                                } finally{
                                    _iterator.f();
                                }
                            }
                            var acceptPatch = kb.each(response, this.ns.httph('accept-patch'));
                            if (acceptPatch.length) for(var i = 0; i < acceptPatch.length; i++){
                                method = acceptPatch[i].value.trim();
                                if (method.indexOf('application/sparql-update') >= 0) return 'SPARQL';
                                if (method.indexOf('application/sparql-update-single-match') >= 0) return 'SPARQL';
                            }
                            var authorVia = kb.each(response, this.ns.httph('ms-author-via'));
                            if (authorVia.length) for(var _i = 0; _i < authorVia.length; _i++){
                                method = authorVia[_i].value.trim();
                                if (method.indexOf('SPARQL') >= 0) return 'SPARQL';
                                if (method.indexOf('DAV') >= 0) return 'DAV';
                            }
                            if (!this.isHttpUri(uri)) {
                                if (!wacAllow) return false;
                                else return 'LOCALFILE';
                            }
                            var status = kb.each(response, this.ns.http('status'));
                            if (status.length) {
                                for(var _i2 = 0; _i2 < status.length; _i2++)// @ts-ignore since statuses should be TFTerms, this should always be false
                                if (status[_i2] === 200 || status[_i2] === 404) definitive = true; // return false // A definitive answer
                            }
                        }
                    }
                }
                if (requests.length === 0) ;
                else {
                    if (definitive) return false; // We have got a request and it did NOT say editable => not editable
                } // console.log('UpdateManager.editable: inconclusive for ' + uri + '\n')
                return undefined; // We don't know (yet) as we haven't had a response (yet)
            }
        },
        {
            key: "anonymize",
            value: function anonymize(obj) {
                return obj.toNT().substr(0, 2) === '_:' && this.mentioned(obj) ? '?' + obj.toNT().substr(2) : obj.toNT();
            }
        },
        {
            key: "anonymizeNT",
            value: function anonymizeNT(stmt) {
                return this.anonymize(stmt.subject) + ' ' + this.anonymize(stmt.predicate) + ' ' + this.anonymize(stmt.object) + ' .';
            }
        },
        {
            key: "statementBnodes",
            value: function statementBnodes(st) {
                return [
                    st.subject,
                    st.predicate,
                    st.object
                ].filter(function(x) {
                    return _terms.isBlankNode(x);
                });
            }
        },
        {
            key: "statementArrayBnodes",
            value: function statementArrayBnodes(sts) {
                var bnodes = [];
                for(var i = 0; i < sts.length; i++)bnodes = bnodes.concat(this.statementBnodes(sts[i]));
                bnodes.sort(); // in place sort - result may have duplicates
                var bnodes2 = [];
                for(var j = 0; j < bnodes.length; j++)if (j === 0 || !bnodes[j].equals(bnodes[j - 1])) bnodes2.push(bnodes[j]);
                return bnodes2;
            }
        },
        {
            key: "cacheIfps",
            value: function cacheIfps() {
                this.ifps = {
                };
                var a = this.store.each(undefined, this.ns.rdf('type'), this.ns.owl('InverseFunctionalProperty'));
                for(var i = 0; i < a.length; i++)this.ifps[a[i].value] = true;
                this.fps = {
                };
                a = this.store.each(undefined, this.ns.rdf('type'), this.ns.owl('FunctionalProperty'));
                for(var _i3 = 0; _i3 < a.length; _i3++)this.fps[a[_i3].value] = true;
            }
        },
        {
            key: "bnodeContext2",
            value: function bnodeContext2(x, source, depth) {
                // Return a list of statements which indirectly identify a node
                //  Depth > 1 if try further indirection.
                //  Return array of statements (possibly empty), or null if failure
                var sts = this.store.statementsMatching(undefined, undefined, x, source); // incoming links
                var y;
                var res;
                for(var i = 0; i < sts.length; i++)if (this.fps[sts[i].predicate.value]) {
                    y = sts[i].subject;
                    if (!y.isBlank) return [
                        sts[i]
                    ];
                    if (depth) {
                        res = this.bnodeContext2(y, source, depth - 1);
                        if (res) return res.concat([
                            sts[i]
                        ]);
                    }
                }
                 // outgoing links
                sts = this.store.statementsMatching(x, undefined, undefined, source);
                for(var _i4 = 0; _i4 < sts.length; _i4++)if (this.ifps[sts[_i4].predicate.value]) {
                    y = sts[_i4].object;
                    if (!y.isBlank) return [
                        sts[_i4]
                    ];
                    if (depth) {
                        res = this.bnodeContext2(y, source, depth - 1);
                        if (res) return res.concat([
                            sts[_i4]
                        ]);
                    }
                }
                return null; // Failure
            }
        },
        {
            key: "bnodeContext1",
            value: function bnodeContext1(x, source) {
                // Return a list of statements which indirectly identify a node
                //   Breadth-first
                for(var depth = 0; depth < 3; depth++){
                    // Try simple first
                    var con = this.bnodeContext2(x, source, depth);
                    if (con !== null) return con;
                } // If we can't guarantee unique with logic just send all info about node
                return this.store.connectedStatements(x, source); // was:
            // throw new Error('Unable to uniquely identify bnode: ' + x.toNT())
            }
        },
        {
            key: "mentioned",
            value: function mentioned(x) {
                return this.store.statementsMatching(x, null, null, null).length !== 0 || this.store.statementsMatching(null, x).length !== 0 || this.store.statementsMatching(null, null, x).length !== 0;
            }
        },
        {
            key: "bnodeContext",
            value: function bnodeContext(bnodes, doc) {
                var context = [];
                if (bnodes.length) {
                    this.cacheIfps();
                    for(var i = 0; i < bnodes.length; i++){
                        // Does this occur in old graph?
                        var bnode = bnodes[i];
                        if (!this.mentioned(bnode)) continue;
                        context = context.concat(this.bnodeContext1(bnode, doc));
                    }
                }
                return context;
            }
        },
        {
            key: "statementContext",
            value: function statementContext(st) {
                var bnodes = this.statementBnodes(st);
                return this.bnodeContext(bnodes, st.graph);
            }
        },
        {
            key: "contextWhere",
            value: function contextWhere(context) {
                var updater = this;
                return !context || context.length === 0 ? '' : 'WHERE { ' + context.map(function(x) {
                    return updater.anonymizeNT(x);
                }).join('\n') + ' }\n';
            }
        },
        {
            key: "fire",
            value: function fire(uri, query, callbackFunction) {
                var _this = this;
                return Promise.resolve().then(function() {
                    if (!uri) throw new Error('No URI given for remote editing operation: ' + query);
                     // console.log('UpdateManager: sending update to <' + uri + '>')
                    var options = {
                        noMeta: true,
                        contentType: 'application/sparql-update',
                        body: query
                    };
                    return _this.store.fetcher.webOperation('PATCH', uri, options);
                }).then(function(response) {
                    if (!response.ok) {
                        var _message = 'UpdateManager: update failed for <' + uri + '> status=' + response.status + ', ' + response.statusText + '\n   for query: ' + query; // console.log(message)
                        throw new Error(_message);
                    } // console.log('UpdateManager: update Ok for <' + uri + '>')
                    callbackFunction(uri, response.ok, response.responseText, response);
                }).catch(function(err) {
                    callbackFunction(uri, false, err.message, err);
                });
            } // ARE THESE THEE FUNCTIONS USED? DEPROCATE?
        },
        {
            key: "update_statement",
            value: function update_statement(statement) {
                if (statement && !statement.graph) return;
                var updater = this;
                var context = this.statementContext(statement);
                return {
                    statement: statement ? [
                        statement.subject,
                        statement.predicate,
                        statement.object,
                        statement.graph
                    ] : undefined,
                    statementNT: statement ? this.anonymizeNT(statement) : undefined,
                    where: updater.contextWhere(context),
                    set_object: function set_object(obj, callbackFunction) {
                        var query = this.where;
                        query += 'DELETE DATA { ' + this.statementNT + ' } ;\n';
                        query += 'INSERT DATA { ' + this.anonymize(this.statement[0]) + ' ' + this.anonymize(this.statement[1]) + ' ' + this.anonymize(obj) + ' ' + ' . }\n';
                        updater.fire(this.statement[3].value, query, callbackFunction);
                    }
                };
            }
        },
        {
            key: "insert_statement",
            value: function insert_statement(st, callbackFunction) {
                var st0 = st instanceof Array ? st[0] : st;
                var query = this.contextWhere(this.statementContext(st0));
                if (st instanceof Array) {
                    var stText = '';
                    for(var i = 0; i < st.length; i++)stText += st[i] + '\n';
                    query += 'INSERT DATA { ' + stText + ' }\n';
                } else query += 'INSERT DATA { ' + this.anonymize(st.subject) + ' ' + this.anonymize(st.predicate) + ' ' + this.anonymize(st.object) + ' ' + ' . }\n';
                this.fire(st0.graph.value, query, callbackFunction);
            }
        },
        {
            key: "delete_statement",
            value: function delete_statement(st, callbackFunction) {
                var st0 = st instanceof Array ? st[0] : st;
                var query = this.contextWhere(this.statementContext(st0));
                if (st instanceof Array) {
                    var stText = '';
                    for(var i = 0; i < st.length; i++)stText += st[i] + '\n';
                    query += 'DELETE DATA { ' + stText + ' }\n';
                } else query += 'DELETE DATA { ' + this.anonymize(st.subject) + ' ' + this.anonymize(st.predicate) + ' ' + this.anonymize(st.object) + ' ' + ' . }\n';
                this.fire(st0.graph.value, query, callbackFunction);
            } /// //////////////////////
        },
        {
            key: "requestDownstreamAction",
            value: function requestDownstreamAction(doc, action) {
                var control = this.patchControlFor(doc);
                if (!control.pendingUpstream) action(doc);
                else if (control.downstreamAction) {
                    if ('' + control.downstreamAction !== '' + action) // Kludge compare
                    throw new Error("Can't wait for > 1 different downstream actions");
                } else control.downstreamAction = action;
            }
        },
        {
            key: "clearUpstreamCount",
            value: function clearUpstreamCount(doc) {
                var control = this.patchControlFor(doc);
                control.upstreamCount = 0;
            }
        },
        {
            key: "getUpdatesVia",
            value: function getUpdatesVia(doc) {
                var linkHeaders = this.store.fetcher.getHeader(doc, 'updates-via');
                if (!linkHeaders || !linkHeaders.length) return null;
                return linkHeaders[0].trim();
            }
        },
        {
            key: "addDownstreamChangeListener",
            value: function addDownstreamChangeListener(doc1, listener) {
                var _this2 = this;
                var control = this.patchControlFor(doc1);
                if (!control.downstreamChangeListeners) control.downstreamChangeListeners = [];
                control.downstreamChangeListeners.push(listener);
                this.setRefreshHandler(doc1, function(doc) {
                    _this2.reloadAndSync(doc);
                });
            }
        },
        {
            key: "reloadAndSync",
            value: function reloadAndSync(doc) {
                var control = this.patchControlFor(doc);
                var updater = this;
                if (control.reloading) {
                    // console.log('   Already reloading - note this load may be out of date')
                    control.outOfDate = true;
                    return; // once only needed @@ Not true, has changed again
                }
                control.reloading = true;
                var retryTimeout = 1000; // ms
                var tryReload1 = function tryReload() {
                    // console.log('try reload - timeout = ' + retryTimeout)
                    updater.reload(updater.store, doc, function(ok, message, response) {
                        if (ok) {
                            if (control.downstreamChangeListeners) for(var i = 0; i < control.downstreamChangeListeners.length; i++)// console.log('        Calling downstream listener ' + i)
                            control.downstreamChangeListeners[i]();
                            control.reloading = false;
                            if (control.outOfDate) {
                                // console.log('   Extra reload because of extra update.')
                                control.outOfDate = false;
                                tryReload();
                            }
                        } else {
                            control.reloading = false;
                            if (response.status === 0) {
                                // console.log('Network error refreshing the data. Retrying in ' +
                                // retryTimeout / 1000)
                                control.reloading = true;
                                retryTimeout = retryTimeout * 2;
                                setTimeout(tryReload, retryTimeout);
                            }
                        }
                    });
                };
                tryReload1();
            }
        },
        {
            key: "setRefreshHandler",
            value: function setRefreshHandler(doc, handler) {
                var wssURI = this.getUpdatesVia(doc); // relative
                // var kb = this.store
                var theHandler = handler;
                var self = this;
                var updater = this;
                var retryTimeout = 1500; // *2 will be 3 Seconds, 6, 12, etc
                var retries = 0;
                if (!wssURI) // console.log('Server does not support live updates through Updates-Via :-(')
                return false;
                wssURI = _uri.join(wssURI, doc.value);
                var validWssURI = wssURI.replace(/^http:/, 'ws:').replace(/^https:/, 'wss:'); // console.log('Web socket URI ' + wssURI)
                var openWebsocket1 = function openWebsocket() {
                    // From https://github.com/solid/solid-spec#live-updates
                    var socket;
                    if (typeof WebSocket !== 'undefined') socket = new WebSocket(validWssURI);
                    else if (typeof window !== 'undefined' && window.WebSocket) socket = window.WebSocket(validWssURI);
                    else // console.log('Live update disabled, as WebSocket not supported by platform :-(')
                    return;
                    socket.onopen = function() {
                        // console.log('    websocket open')
                        retryTimeout = 1500; // reset timeout to fast on success
                        this.send('sub ' + doc.value);
                        if (retries) // console.log('Web socket has been down, better check for any news.')
                        updater.requestDownstreamAction(doc, theHandler);
                    };
                    var control = self.patchControlFor(doc);
                    control.upstreamCount = 0;
                    socket.onerror = function onerror(err) {
                    }; // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
                    //
                    // 1000  CLOSE_NORMAL  Normal closure; the connection successfully completed whatever purpose for which it was created.
                    // 1001  CLOSE_GOING_AWAY  The endpoint is going away, either
                    //                                  because of a server failure or because the browser is navigating away from the page that opened the connection.
                    // 1002  CLOSE_PROTOCOL_ERROR  The endpoint is terminating the connection due to a protocol error.
                    // 1003  CLOSE_UNSUPPORTED  The connection is being terminated because the endpoint
                    //                                  received data of a type it cannot accept (for example, a text-only endpoint received binary data).
                    // 1004                             Reserved. A meaning might be defined in the future.
                    // 1005  CLOSE_NO_STATUS  Reserved.  Indicates that no status code was provided even though one was expected.
                    // 1006  CLOSE_ABNORMAL  Reserved. Used to indicate that a connection was closed abnormally (
                    //
                    //
                    socket.onclose = function(event) {
                        // console.log('*** Websocket closed with code ' + event.code +
                        //   ", reason '" + event.reason + "' clean = " + event.wasClean)
                        retryTimeout *= 2;
                        retries += 1; // console.log('Retrying in ' + retryTimeout + 'ms') // (ask user?)
                        setTimeout(function() {
                            // console.log('Trying websocket again')
                            openWebsocket();
                        }, retryTimeout);
                    };
                    socket.onmessage = function(msg) {
                        if (msg.data && msg.data.slice(0, 3) === 'pub') {
                            if ('upstreamCount' in control) {
                                control.upstreamCount -= 1;
                                if (control.upstreamCount >= 0) // console.log('just an echo: ' + control.upstreamCount)
                                return; // Just an echo
                            } // console.log('Assume a real downstream change: ' + control.upstreamCount + ' -> 0')
                            control.upstreamCount = 0;
                            self.requestDownstreamAction(doc, theHandler);
                        }
                    };
                }; // openWebsocket
                openWebsocket1();
                return true;
            }
        },
        {
            key: "updateMany",
            value: function updateMany(deletions) {
                var insertions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                var docs = deletions.concat(insertions).map(function(st) {
                    return st.why;
                });
                var thisUpdater = this;
                var uniqueDocs = [];
                docs.forEach(function(doc) {
                    if (!uniqueDocs.find(function(uniqueDoc) {
                        return uniqueDoc.equals(doc);
                    })) uniqueDocs.push(doc);
                });
                var updates = uniqueDocs.map(function(doc) {
                    return thisUpdater.update(deletions.filter(function(st) {
                        return st.why.equals(doc);
                    }), insertions.filter(function(st) {
                        return st.why.equals(doc);
                    }));
                });
                if (updates.length > 1) console.log("@@ updateMany to ".concat(updates.length, ": ").concat(uniqueDocs));
                return Promise.all(updates);
            }
        },
        {
            key: "update",
            value: function update(deletions, insertions, callback, secondTry) {
                var _this3 = this;
                if (!callback) {
                    var thisUpdater = this;
                    return new Promise(function(resolve, reject) {
                        // Promise version
                        thisUpdater.update(deletions, insertions, function(uri, ok, errorBody) {
                            if (!ok) reject(new Error(errorBody));
                            else resolve();
                        }); // callbackFunction
                    }); // promise
                } // if
                try {
                    var kb = this.store;
                    var ds = !deletions ? [] : _terms.isStore(deletions) ? deletions.statements : deletions instanceof Array ? deletions : [
                        deletions
                    ];
                    var is = !insertions ? [] : _terms.isStore(insertions) ? insertions.statements : insertions instanceof Array ? insertions : [
                        insertions
                    ];
                    if (!(ds instanceof Array)) throw new Error('Type Error ' + _typeofDefault.default(ds) + ': ' + ds);
                    if (!(is instanceof Array)) throw new Error('Type Error ' + _typeofDefault.default(is) + ': ' + is);
                    if (ds.length === 0 && is.length === 0) return callback(null, true); // success -- nothing needed to be done.
                    var doc = ds.length ? ds[0].graph : is[0].graph;
                    if (!doc) {
                        var _message2 = 'Error patching: statement does not specify which document to patch:' + ds[0] + ', ' + is[0]; // console.log(message)
                        throw new Error(_message2);
                    }
                    var control = this.patchControlFor(doc);
                    var startTime = Date.now();
                    var props = [
                        'subject',
                        'predicate',
                        'object',
                        'why'
                    ];
                    var verbs = [
                        'insert',
                        'delete'
                    ];
                    var clauses = {
                        'delete': ds,
                        'insert': is
                    };
                    verbs.map(function(verb) {
                        clauses[verb].map(function(st) {
                            if (!doc.equals(st.graph)) throw new Error('update: destination ' + doc + ' inconsistent with delete quad ' + st.graph);
                            props.map(function(prop) {
                                if (typeof st[prop] === 'undefined') throw new Error('update: undefined ' + prop + ' of statement.');
                            });
                        });
                    });
                    var protocol = this.editable(doc.value, kb);
                    if (protocol === false) throw new Error('Update: Can\'t make changes in uneditable ' + doc);
                    if (protocol === undefined) {
                        // Not enough metadata
                        if (secondTry) throw new Error('Update: Loaded ' + doc + "but stil can't figure out what editing protcol it supports.");
                         // console.log(`Update: have not loaded ${doc} before: loading now...`);
                        this.store.fetcher.load(doc).then(function(response) {
                            _this3.update(deletions, insertions, callback, true);
                        }, function(err) {
                            if (err.response.status === 404) // nonexistent files are fine
                            _this3.update(deletions, insertions, callback, true);
                            else throw new Error("Update: Can't get updatability status ".concat(doc, " before patching: ").concat(err));
                        });
                        return;
                    } else if (protocol.indexOf('SPARQL') >= 0) {
                        var bnodes = [];
                        if (ds.length) bnodes = this.statementArrayBnodes(ds);
                        if (is.length) bnodes = bnodes.concat(this.statementArrayBnodes(is));
                        var context = this.bnodeContext(bnodes, doc);
                        var whereClause = this.contextWhere(context);
                        var query = '';
                        if (whereClause.length) {
                            // Is there a WHERE clause?
                            if (ds.length) {
                                query += 'DELETE { ';
                                for(var i = 0; i < ds.length; i++)query += this.anonymizeNT(ds[i]) + '\n';
                                query += ' }\n';
                            }
                            if (is.length) {
                                query += 'INSERT { ';
                                for(var _i5 = 0; _i5 < is.length; _i5++)query += this.anonymizeNT(is[_i5]) + '\n';
                                query += ' }\n';
                            }
                            query += whereClause;
                        } else {
                            // no where clause
                            if (ds.length) {
                                query += 'DELETE DATA { ';
                                for(var _i6 = 0; _i6 < ds.length; _i6++)query += this.anonymizeNT(ds[_i6]) + '\n';
                                query += ' } \n';
                            }
                            if (is.length) {
                                if (ds.length) query += ' ; ';
                                query += 'INSERT DATA { ';
                                for(var _i7 = 0; _i7 < is.length; _i7++)query += this.anonymizeNT(is[_i7]) + '\n';
                                query += ' }\n';
                            }
                        } // Track pending upstream patches until they have finished their callbackFunction
                        control.pendingUpstream = control.pendingUpstream ? control.pendingUpstream + 1 : 1;
                        if ('upstreamCount' in control) control.upstreamCount += 1; // count changes we originated ourselves
                        this.fire(doc.value, query, function(uri, success, body, response) {
                            response.elapsedTimeMs = Date.now() - startTime;
                            console.log('    UpdateManager: Return ' + (success ? 'success ' : 'FAILURE ') + response.status + ' elapsed ' + response.elapsedTimeMs + 'ms');
                            if (success) {
                                try {
                                    kb.remove(ds);
                                } catch (e) {
                                    success = false;
                                    body = 'Remote Ok BUT error deleting ' + ds.length + ' from store!!! ' + e;
                                } // Add in any case -- help recover from weirdness??
                                for(var _i8 = 0; _i8 < is.length; _i8++)kb.add(is[_i8].subject, is[_i8].predicate, is[_i8].object, doc);
                            }
                            callback(uri, success, body, response);
                            control.pendingUpstream -= 1; // When upstream patches have been sent, reload state if downstream waiting
                            if (control.pendingUpstream === 0 && control.downstreamAction) {
                                var downstreamAction = control.downstreamAction;
                                delete control.downstreamAction; // console.log('delayed downstream action:')
                                downstreamAction(doc);
                            }
                        });
                    } else if (protocol.indexOf('DAV') >= 0) this.updateDav(doc, ds, is, callback);
                    else {
                        if (protocol.indexOf('LOCALFILE') >= 0) try {
                            this.updateLocalFile(doc, ds, is, callback);
                        } catch (e) {
                            callback(doc.value, false, 'Exception trying to write back file <' + doc.value + '>\n' // + tabulator.Util.stackString(e))
                            );
                        }
                        else throw new Error("Unhandled edit method: '" + protocol + "' for " + doc);
                    }
                } catch (e) {
                    callback(undefined, false, 'Exception in update: ' + e + '\n' + _utilsJs.stackString(e));
                }
            }
        },
        {
            key: "updateDav",
            value: function updateDav(doc, ds, is, callbackFunction) {
                var kb = this.store; // The code below is derived from Kenny's UpdateCenter.js
                var request = kb.any(doc, this.ns.link('request'));
                if (!request) throw new Error('No record of our HTTP GET request for document: ' + doc);
                 // should not happen
                var response1 = kb.any(request, this.ns.link('response'));
                if (!response1) return null; // throw "No record HTTP GET response for document: "+doc
                var contentType = kb.the(response1, this.ns.httph('content-type')).value; // prepare contents of revised document
                var newSts = kb.statementsMatching(undefined, undefined, undefined, doc).slice(); // copy!
                for(var i = 0; i < ds.length; i++)_utilsJs.RDFArrayRemove(newSts, ds[i]);
                for(var _i9 = 0; _i9 < is.length; _i9++)newSts.push(is[_i9]);
                var documentString = this.serialize(doc.value, newSts, contentType); // Write the new version back
                var candidateTarget = kb.the(response1, this.ns.httph('content-location'));
                var targetURI;
                if (candidateTarget) targetURI = _uri.join(candidateTarget.value, targetURI);
                var options = {
                    contentType: contentType,
                    noMeta: true,
                    body: documentString
                };
                return kb.fetcher.webOperation('PUT', targetURI, options).then(function(response) {
                    if (!response.ok) throw new Error(response.error);
                    for(var _i10 = 0; _i10 < ds.length; _i10++)kb.remove(ds[_i10]);
                    for(var _i11 = 0; _i11 < is.length; _i11++)kb.add(is[_i11].subject, is[_i11].predicate, is[_i11].object, doc);
                    callbackFunction(doc.value, response.ok, response.responseText, response);
                }).catch(function(err) {
                    callbackFunction(doc.value, false, err.message, err);
                });
            }
        },
        {
            key: "updateLocalFile",
            value: function updateLocalFile(doc, ds, is, callbackFunction) {
                var kb = this.store; // console.log('Writing back to local file\n')
                // prepare contents of revised document
                var newSts = kb.statementsMatching(undefined, undefined, undefined, doc).slice(); // copy!
                for(var i = 0; i < ds.length; i++)_utilsJs.RDFArrayRemove(newSts, ds[i]);
                for(var _i12 = 0; _i12 < is.length; _i12++)newSts.push(is[_i12]);
                 // serialize to the appropriate format
                var dot = doc.value.lastIndexOf('.');
                if (dot < 1) throw new Error('Rewriting file: No filename extension: ' + doc.value);
                var ext = doc.value.slice(dot + 1);
                var contentType = _fetcherDefault.default.CONTENT_TYPE_BY_EXT[ext];
                if (!contentType) throw new Error('File extension .' + ext + ' not supported for data write');
                var documentString = this.serialize(doc.value, newSts, contentType);
                kb.fetcher.webOperation('PUT', doc.value, {
                    "body": documentString,
                    contentType: contentType
                }).then(function(response) {
                    if (!response.ok) return callbackFunction(doc.value, false, response.error);
                    for(var _i13 = 0; _i13 < ds.length; _i13++)kb.remove(ds[_i13]);
                    for(var _i14 = 0; _i14 < is.length; _i14++)kb.add(is[_i14].subject, is[_i14].predicate, is[_i14].object, doc);
                    callbackFunction(doc.value, true, ''); // success!
                });
            }
        },
        {
            key: "serialize",
            value: function serialize(uri, data, contentType) {
                var kb = this.store;
                var documentString;
                if (typeof data === 'string') return data;
                 // serialize to the appropriate format
                var sz = _serializerDefault.default(kb);
                sz.suggestNamespaces(kb.namespaces);
                sz.setBase(uri);
                switch(contentType){
                    case 'text/xml':
                    case 'application/rdf+xml':
                        documentString = sz.statementsToXML(data);
                        break;
                    case 'text/n3':
                    case 'text/turtle':
                    case 'application/x-turtle':
                    case 'application/n3':
                        // Legacy
                        documentString = sz.statementsToN3(data);
                        break;
                    default:
                        throw new Error('Content-type ' + contentType + ' not supported for data serialization');
                }
                return documentString;
            }
        },
        {
            key: "put",
            value: function put(doc, data, contentType, callback) {
                var _this4 = this;
                var kb = this.store;
                var documentString;
                return Promise.resolve().then(function() {
                    documentString = _this4.serialize(doc.value, data, contentType);
                    return kb.fetcher.webOperation('PUT', doc.value, {
                        contentType: contentType,
                        body: documentString
                    });
                }).then(function(response) {
                    if (!response.ok) return callback(doc.value, response.ok, response.error, response);
                    delete kb.fetcher.nonexistent[doc.value];
                    delete kb.fetcher.requested[doc.value]; // @@ could this mess with the requested state machine? if a fetch is in progress
                    if (typeof data !== 'string') data.map(function(st) {
                        kb.addStatement(st);
                    });
                    callback(doc.value, response.ok, '', response);
                }).catch(function(err) {
                    callback(doc.value, false, err.message);
                });
            }
        },
        {
            key: "reload",
            value: function reload(kb, doc, callbackFunction) {
                var startTime = Date.now(); // force sets no-cache and
                var options = {
                    force: true,
                    noMeta: true,
                    clearPreviousData: true
                };
                kb.fetcher.nowOrWhenFetched(doc.value, options, function(ok, body, response) {
                    if (!ok) // console.log('    ERROR reloading data: ' + body)
                    callbackFunction(false, 'Error reloading data: ' + body, response); //@ts-ignore Where does onErrorWasCalled come from?
                    else if (response.onErrorWasCalled || response.status !== 200) // console.log('    Non-HTTP error reloading data! onErrorWasCalled=' +
                    //@ts-ignore Where does onErrorWasCalled come from?
                    // response.onErrorWasCalled + ' status: ' + response.status)
                    callbackFunction(false, 'Non-HTTP error reloading data: ' + body, response);
                    else {
                        var elapsedTimeMs = Date.now() - startTime;
                        if (!doc.reloadTimeTotal) doc.reloadTimeTotal = 0;
                        if (!doc.reloadTimeCount) doc.reloadTimeCount = 0;
                        doc.reloadTimeTotal += elapsedTimeMs;
                        doc.reloadTimeCount += 1; // console.log('    Fetch took ' + elapsedTimeMs + 'ms, av. of ' +
                        // doc.reloadTimeCount + ' = ' +
                        // (doc.reloadTimeTotal / doc.reloadTimeCount) + 'ms.')
                        callbackFunction(true);
                    }
                });
            }
        }
    ]);
    return UpdateManager1;
}();

},{"@babel/runtime/helpers/typeof":"jgQjt","@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","@babel/runtime/helpers/defineProperty":"4x6r7","./store":"8JtW2","./uri":"cwuSF","./fetcher":"i4UAw","./namespace":"iFtHC","./serializer":"cnscC","./utils/terms":"cHcdt","./utils-js":"2DMBx","./utils/termValue":"cjlpq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gR1PI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdatesSocket", ()=>UpdatesSocket
);
parcelHelpers.export(exports, "UpdatesVia", ()=>UpdatesVia
);
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
/*
 * Updates-Via
 */ var _rdflibDataFactory = require("./factories/rdflib-data-factory");
var _rdflibDataFactoryDefault = parcelHelpers.interopDefault(_rdflibDataFactory);
var UpdatesSocket = /*#__PURE__*/ function() {
    function UpdatesSocket1(parent, via) {
        _classCallCheckDefault.default(this, UpdatesSocket1);
        this.parent = parent;
        this.via = via;
        this.connected = false;
        this.pending = {
        };
        this.subscribed = {
        };
        this.socket = {
        };
        try {
            this.socket = new WebSocket(via);
            this.socket.onopen = this.onOpen;
            this.socket.onclose = this.onClose;
            this.socket.onmessage = this.onMessage;
            this.socket.onerror = this.onError;
        } catch (error) {
            this.onError(error);
        }
    }
    _createClassDefault.default(UpdatesSocket1, [
        {
            key: "_decode",
            value: function _decode(q) {
                var elt;
                var i;
                var k;
                var r;
                var ref2;
                var ref1;
                var v;
                r = {
                };
                ref2 = (function() {
                    var j, len, ref, results;
                    ref = q.split('&');
                    results = [];
                    for(j = 0, len = ref.length; j < len; j++){
                        elt = ref[j];
                        results.push(elt.split('='));
                    }
                    return results;
                })();
                for(i in ref2){
                    elt = ref2[i];
                    ref1 = [
                        decodeURIComponent(elt[0]),
                        decodeURIComponent(elt[1])
                    ];
                    k = ref1[0];
                    v = ref1[1];
                    if (r[k] == null) r[k] = [];
                    r[k].push(v);
                }
                return r;
            }
        },
        {
            key: "_send",
            value: function _send(method, uri, data) {
                var base, message;
                message = [
                    method,
                    uri,
                    data
                ].join(' ');
                return typeof (base = this.socket).send === 'function' ? base.send(message) : void 0;
            }
        },
        {
            key: "_subscribe",
            value: function _subscribe(uri) {
                this._send('sub', uri, '');
                this.subscribed[uri] = true;
                return this.subscribed[uri];
            }
        },
        {
            key: "onClose",
            value: function onClose(e) {
                var uri;
                this.connected = false;
                for(uri in this.subscribed)this.pending[uri] = true;
                this.subscribed = {
                };
                return this.subscribed;
            }
        },
        {
            key: "onError",
            value: function onError(e) {
                throw new Error('onError' + e);
            }
        },
        {
            key: "onMessage",
            value: function onMessage(e) {
                var base, message;
                message = e.data.split(' ');
                if (message[0] === 'ping') return typeof (base = this.socket).send === 'function' ? base.send('pong ' + message.slice(1).join(' ')) : void 0;
                else if (message[0] === 'pub') return this.parent.onUpdate(message[1], this._decode(message[2]));
            }
        },
        {
            key: "onOpen",
            value: function onOpen(e) {
                var results, uri;
                this.connected = true;
                results = [];
                for(uri in this.pending){
                    delete this.pending[uri];
                    results.push(this._subscribe(uri));
                }
                return results;
            }
        },
        {
            key: "subscribe",
            value: function subscribe(uri) {
                if (this.connected) return this._subscribe(uri);
                else {
                    this.pending[uri] = true;
                    return this.pending[uri];
                }
            }
        }
    ]);
    return UpdatesSocket1;
}();
var UpdatesVia = /*#__PURE__*/ function() {
    function UpdatesVia1(fetcher) {
        _classCallCheckDefault.default(this, UpdatesVia1);
        this.fetcher = fetcher;
        this.graph = {
        };
        this.via = {
        };
        this.fetcher.addCallback('headers', this.onHeaders);
    }
    _createClassDefault.default(UpdatesVia1, [
        {
            key: "onHeaders",
            value: function onHeaders(d) {
                var etag, uri, via;
                if (d.headers == null) return true;
                if (typeof WebSocket === 'undefined' || WebSocket === null) return true;
                etag = d.headers['etag'];
                via = d.headers['updates-via'];
                uri = d.uri;
                if (etag && via) {
                    this.graph[uri] = {
                        etag: etag,
                        via: via
                    };
                    this.register(via, uri);
                }
                return true;
            }
        },
        {
            key: "onUpdate",
            value: function onUpdate(uri, d) {
                return this.fetcher.refresh(_rdflibDataFactoryDefault.default.namedNode(uri));
            }
        },
        {
            key: "register",
            value: function register(via, uri) {
                if (this.via[via] == null) this.via[via] = new UpdatesSocket(this, via);
                return this.via[via].subscribe(uri);
            }
        }
    ]);
    return UpdatesVia1;
}();

},{"@babel/runtime/helpers/classCallCheck":"3nRml","@babel/runtime/helpers/createClass":"2yzPp","./factories/rdflib-data-factory":"eHYzn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHYzn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _store = require("../store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _fetcher = require("../fetcher");
var _fetcherDefault = parcelHelpers.interopDefault(_fetcher);
var _extendedTermFactory = require("./extended-term-factory");
var _extendedTermFactoryDefault = parcelHelpers.interopDefault(_extendedTermFactory);
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {
        };
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _definePropertyDefault.default(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
/** Full RDFLib.js Data Factory */ var RDFlibDataFactory = _objectSpread(_objectSpread({
}, _extendedTermFactoryDefault.default), {
}, {
    /**
   * Creates a new fetcher
   * @param store - The store to use
   * @param options - The options
   */ fetcher: function fetcher(store, options) {
        return new _fetcherDefault.default(store, options);
    },
    /**
   * Creates a new graph (store)
   */ graph: function graph() {
        var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        return new _storeDefault.default(features, opts || {
            rdfFactory: _extendedTermFactoryDefault.default
        });
    },
    /**
   * Creates a new literal node
   * @param val The lexical value
   * @param lang The language
   * @param dt The datatype
   */ lit: function lit(val, lang, dt) {
        return this.literal('' + val, lang || dt);
    },
    /**
   * Creates a new statement
   * @param subject The subject
   * @param predicate The predicate
   * @param object The object
   * @param graph The containing graph
   */ st: function st(subject, predicate, object, graph) {
        return this.quad(subject, predicate, object, graph);
    }
});
exports.default = RDFlibDataFactory;

},{"@babel/runtime/helpers/defineProperty":"4x6r7","../store":"8JtW2","../fetcher":"i4UAw","./extended-term-factory":"g1HzI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h36JB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Alert", ()=>Alert
);
parcelHelpers.export(exports, "Button", ()=>Button
);
parcelHelpers.export(exports, "Carousel", ()=>Carousel
);
parcelHelpers.export(exports, "Collapse", ()=>Collapse
);
parcelHelpers.export(exports, "Dropdown", ()=>Dropdown
);
parcelHelpers.export(exports, "Modal", ()=>Modal
);
parcelHelpers.export(exports, "Offcanvas", ()=>Offcanvas
);
parcelHelpers.export(exports, "Popover", ()=>Popover
);
parcelHelpers.export(exports, "ScrollSpy", ()=>ScrollSpy
);
parcelHelpers.export(exports, "Tab", ()=>Tab
);
parcelHelpers.export(exports, "Toast", ()=>Toast
);
parcelHelpers.export(exports, "Tooltip", ()=>Tooltip
);
/*!
  * Bootstrap v5.2.0 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ var _core = require("@popperjs/core");
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ const MAX_UID = 1000000;
const MILLISECONDS_MULTIPLIER = 1000;
const TRANSITION_END = 'transitionend'; // Shout-out Angus Croll (https://goo.gl/pxwQGp)
const toType = (object)=>{
    if (object === null || object === undefined) return `${object}`;
    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
};
/**
 * Public Util API
 */ const getUID = (prefix)=>{
    do prefix += Math.floor(Math.random() * MAX_UID);
    while (document.getElementById(prefix))
    return prefix;
};
const getSelector = (element)=>{
    let selector = element.getAttribute('data-bs-target');
    if (!selector || selector === '#') {
        let hrefAttribute = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
        // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
        // `document.querySelector` will rightfully complain it is invalid.
        // See https://github.com/twbs/bootstrap/issues/32273
        if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) return null;
         // Just in case some CMS puts out a full URL with the anchor appended
        if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) hrefAttribute = `#${hrefAttribute.split('#')[1]}`;
        selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
    }
    return selector;
};
const getSelectorFromElement = (element)=>{
    const selector = getSelector(element);
    if (selector) return document.querySelector(selector) ? selector : null;
    return null;
};
const getElementFromSelector = (element)=>{
    const selector = getSelector(element);
    return selector ? document.querySelector(selector) : null;
};
const getTransitionDurationFromElement = (element)=>{
    if (!element) return 0;
     // Get transition-duration of the element
    let { transitionDuration , transitionDelay  } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found
    if (!floatTransitionDuration && !floatTransitionDelay) return 0;
     // If multiple durations are defined, take the first
    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};
const triggerTransitionEnd = (element)=>{
    element.dispatchEvent(new Event(TRANSITION_END));
};
const isElement = (object)=>{
    if (!object || typeof object !== 'object') return false;
    if (typeof object.jquery !== 'undefined') object = object[0];
    return typeof object.nodeType !== 'undefined';
};
const getElement = (object)=>{
    // it's a jQuery object or a node element
    if (isElement(object)) return object.jquery ? object[0] : object;
    if (typeof object === 'string' && object.length > 0) return document.querySelector(object);
    return null;
};
const isVisible = (element)=>{
    if (!isElement(element) || element.getClientRects().length === 0) return false;
    const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'; // Handle `details` element as its content may falsie appear visible when it is closed
    const closedDetails = element.closest('details:not([open])');
    if (!closedDetails) return elementIsVisible;
    if (closedDetails !== element) {
        const summary = element.closest('summary');
        if (summary && summary.parentNode !== closedDetails) return false;
        if (summary === null) return false;
    }
    return elementIsVisible;
};
const isDisabled = (element)=>{
    if (!element || element.nodeType !== Node.ELEMENT_NODE) return true;
    if (element.classList.contains('disabled')) return true;
    if (typeof element.disabled !== 'undefined') return element.disabled;
    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
};
const findShadowRoot = (element)=>{
    if (!document.documentElement.attachShadow) return null;
     // Can find the shadow root otherwise it'll return the document
    if (typeof element.getRootNode === 'function') {
        const root = element.getRootNode();
        return root instanceof ShadowRoot ? root : null;
    }
    if (element instanceof ShadowRoot) return element;
     // when we don't find a shadow root
    if (!element.parentNode) return null;
    return findShadowRoot(element.parentNode);
};
const noop = ()=>{
};
/**
 * Trick to restart an element's animation
 *
 * @param {HTMLElement} element
 * @return void
 *
 * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
 */ const reflow = (element)=>{
    element.offsetHeight; // eslint-disable-line no-unused-expressions
};
const getjQuery = ()=>{
    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) return window.jQuery;
    return null;
};
const DOMContentLoadedCallbacks = [];
const onDOMContentLoaded = (callback1)=>{
    if (document.readyState === 'loading') {
        // add listener on the first call when the document is in loading state
        if (!DOMContentLoadedCallbacks.length) document.addEventListener('DOMContentLoaded', ()=>{
            for (const callback of DOMContentLoadedCallbacks)callback();
        });
        DOMContentLoadedCallbacks.push(callback1);
    } else callback1();
};
const isRTL = ()=>document.documentElement.dir === 'rtl'
;
const defineJQueryPlugin = (plugin)=>{
    onDOMContentLoaded(()=>{
        const $ = getjQuery();
        /* istanbul ignore if */ if ($) {
            const name = plugin.NAME;
            const JQUERY_NO_CONFLICT = $.fn[name];
            $.fn[name] = plugin.jQueryInterface;
            $.fn[name].Constructor = plugin;
            $.fn[name].noConflict = ()=>{
                $.fn[name] = JQUERY_NO_CONFLICT;
                return plugin.jQueryInterface;
            };
        }
    });
};
const execute = (callback)=>{
    if (typeof callback === 'function') callback();
};
const executeAfterTransition = (callback, transitionElement, waitForTransition = true)=>{
    if (!waitForTransition) {
        execute(callback);
        return;
    }
    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;
    const handler = ({ target  })=>{
        if (target !== transitionElement) return;
        called = true;
        transitionElement.removeEventListener(TRANSITION_END, handler);
        execute(callback);
    };
    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(()=>{
        if (!called) triggerTransitionEnd(transitionElement);
    }, emulatedDuration);
};
/**
 * Return the previous/next element of a list.
 *
 * @param {array} list    The list of elements
 * @param activeElement   The active element
 * @param shouldGetNext   Choose to get next or previous element
 * @param isCycleAllowed
 * @return {Element|elem} The proper element
 */ const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed)=>{
    const listLength = list.length;
    let index = list.indexOf(activeElement); // if the element does not exist in the list return an element
    // depending on the direction and if cycle is allowed
    if (index === -1) return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    index += shouldGetNext ? 1 : -1;
    if (isCycleAllowed) index = (index + listLength) % listLength;
    return list[Math.max(0, Math.min(index, listLength - 1))];
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): dom/event-handler.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
const stripNameRegex = /\..*/;
const stripUidRegex = /::\d+$/;
const eventRegistry = {
}; // Events storage
let uidEvent = 1;
const customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
};
const nativeEvents = new Set([
    'click',
    'dblclick',
    'mouseup',
    'mousedown',
    'contextmenu',
    'mousewheel',
    'DOMMouseScroll',
    'mouseover',
    'mouseout',
    'mousemove',
    'selectstart',
    'selectend',
    'keydown',
    'keypress',
    'keyup',
    'orientationchange',
    'touchstart',
    'touchmove',
    'touchend',
    'touchcancel',
    'pointerdown',
    'pointermove',
    'pointerup',
    'pointerleave',
    'pointercancel',
    'gesturestart',
    'gesturechange',
    'gestureend',
    'focus',
    'blur',
    'change',
    'reset',
    'select',
    'submit',
    'focusin',
    'focusout',
    'load',
    'unload',
    'beforeunload',
    'resize',
    'move',
    'DOMContentLoaded',
    'readystatechange',
    'error',
    'abort',
    'scroll'
]);
/**
 * Private methods
 */ function makeEventUid(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
}
function getElementEvents(element) {
    const uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {
    };
    return eventRegistry[uid];
}
function bootstrapHandler(element, fn) {
    return function handler(event) {
        hydrateObj(event, {
            delegateTarget: element
        });
        if (handler.oneOff) EventHandler.off(element, event.type, fn);
        return fn.apply(element, [
            event
        ]);
    };
}
function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
        const domElements = element.querySelectorAll(selector);
        for(let { target  } = event; target && target !== this; target = target.parentNode)for (const domElement of domElements){
            if (domElement !== target) continue;
            hydrateObj(event, {
                delegateTarget: target
            });
            if (handler.oneOff) EventHandler.off(element, event.type, selector, fn);
            return fn.apply(target, [
                event
            ]);
        }
    };
}
function findHandler(events, callable, delegationSelector = null) {
    return Object.values(events).find((event)=>event.callable === callable && event.delegationSelector === delegationSelector
    );
}
function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    const isDelegated = typeof handler === 'string'; // todo: tooltip passes `false` instead of selector, so we need to check
    const callable = isDelegated ? delegationFunction : handler || delegationFunction;
    let typeEvent = getTypeEvent(originalTypeEvent);
    if (!nativeEvents.has(typeEvent)) typeEvent = originalTypeEvent;
    return [
        isDelegated,
        callable,
        typeEvent
    ];
}
function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) return;
    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction); // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does
    if (originalTypeEvent in customEvents) {
        const wrapFunction = (fn)=>{
            return function(event) {
                if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) return fn.call(this, event);
            };
        };
        callable = wrapFunction(callable);
    }
    const events = getElementEvents(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {
    });
    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
    if (previousFunction) {
        previousFunction.oneOff = previousFunction.oneOff && oneOff;
        return;
    }
    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
    const fn1 = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn1.delegationSelector = isDelegated ? handler : null;
    fn1.callable = callable;
    fn1.oneOff = oneOff;
    fn1.uidEvent = uid;
    handlers[uid] = fn1;
    element.addEventListener(typeEvent, fn1, isDelegated);
}
function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn = findHandler(events[typeEvent], handler, delegationSelector);
    if (!fn) return;
    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
}
function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {
    };
    for (const handlerKey of Object.keys(storeElementEvent))if (handlerKey.includes(namespace)) {
        const event = storeElementEvent[handlerKey];
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
    }
}
function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
}
const EventHandler = {
    on (element, event, handler, delegationFunction) {
        addHandler(element, event, handler, delegationFunction, false);
    },
    one (element, event, handler, delegationFunction) {
        addHandler(element, event, handler, delegationFunction, true);
    },
    off (element, originalTypeEvent, handler, delegationFunction) {
        if (typeof originalTypeEvent !== 'string' || !element) return;
        const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
        const inNamespace = typeEvent !== originalTypeEvent;
        const events = getElementEvents(element);
        const storeElementEvent = events[typeEvent] || {
        };
        const isNamespace = originalTypeEvent.startsWith('.');
        if (typeof callable !== 'undefined') {
            // Simplest case: handler is passed, remove that listener ONLY.
            if (!Object.keys(storeElementEvent).length) return;
            removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
            return;
        }
        if (isNamespace) for (const elementEvent of Object.keys(events))removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        for (const keyHandlers of Object.keys(storeElementEvent)){
            const handlerKey = keyHandlers.replace(stripUidRegex, '');
            if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
                const event = storeElementEvent[keyHandlers];
                removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
            }
        }
    },
    trigger (element, event, args) {
        if (typeof event !== 'string' || !element) return null;
        const $ = getjQuery();
        const typeEvent = getTypeEvent(event);
        const inNamespace = event !== typeEvent;
        let jQueryEvent = null;
        let bubbles = true;
        let nativeDispatch = true;
        let defaultPrevented = false;
        if (inNamespace && $) {
            jQueryEvent = $.Event(event, args);
            $(element).trigger(jQueryEvent);
            bubbles = !jQueryEvent.isPropagationStopped();
            nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
            defaultPrevented = jQueryEvent.isDefaultPrevented();
        }
        let evt = new Event(event, {
            bubbles,
            cancelable: true
        });
        evt = hydrateObj(evt, args);
        if (defaultPrevented) evt.preventDefault();
        if (nativeDispatch) element.dispatchEvent(evt);
        if (evt.defaultPrevented && jQueryEvent) jQueryEvent.preventDefault();
        return evt;
    }
};
function hydrateObj(obj, meta) {
    for (const [key, value] of Object.entries(meta || {
    }))try {
        obj[key] = value;
    } catch (_unused) {
        Object.defineProperty(obj, key, {
            configurable: true,
            get () {
                return value;
            }
        });
    }
    return obj;
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const elementMap = new Map();
const Data = {
    set (element, key, instance) {
        if (!elementMap.has(element)) elementMap.set(element, new Map());
        const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
        // can be removed later when multiple key/instances are fine to be used
        if (!instanceMap.has(key) && instanceMap.size !== 0) {
            // eslint-disable-next-line no-console
            console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
            return;
        }
        instanceMap.set(key, instance);
    },
    get (element, key) {
        if (elementMap.has(element)) return elementMap.get(element).get(key) || null;
        return null;
    },
    remove (element, key) {
        if (!elementMap.has(element)) return;
        const instanceMap = elementMap.get(element);
        instanceMap.delete(key); // free up element references if there are no instances left for an element
        if (instanceMap.size === 0) elementMap.delete(element);
    }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ function normalizeData(value) {
    if (value === 'true') return true;
    if (value === 'false') return false;
    if (value === Number(value).toString()) return Number(value);
    if (value === '' || value === 'null') return null;
    if (typeof value !== 'string') return value;
    try {
        return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
        return value;
    }
}
function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, (chr)=>`-${chr.toLowerCase()}`
    );
}
const Manipulator = {
    setDataAttribute (element, key, value) {
        element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },
    removeDataAttribute (element, key) {
        element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },
    getDataAttributes (element) {
        if (!element) return {
        };
        const attributes = {
        };
        const bsKeys = Object.keys(element.dataset).filter((key)=>key.startsWith('bs') && !key.startsWith('bsConfig')
        );
        for (const key1 of bsKeys){
            let pureKey = key1.replace(/^bs/, '');
            pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
            attributes[pureKey] = normalizeData(element.dataset[key1]);
        }
        return attributes;
    },
    getDataAttribute (element, key) {
        return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/config.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Class definition
 */ class Config {
    // Getters
    static get Default() {
        return {
        };
    }
    static get DefaultType() {
        return {
        };
    }
    static get NAME() {
        throw new Error('You have to implement the static method "NAME", for each component!');
    }
    _getConfig(config) {
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
    }
    _configAfterMerge(config) {
        return config;
    }
    _mergeConfigObj(config, element) {
        const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {
        }; // try to parse
        return {
            ...this.constructor.Default,
            ...typeof jsonConfig === 'object' ? jsonConfig : {
            },
            ...isElement(element) ? Manipulator.getDataAttributes(element) : {
            },
            ...typeof config === 'object' ? config : {
            }
        };
    }
    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
        for (const property of Object.keys(configTypes)){
            const expectedTypes = configTypes[property];
            const value = config[property];
            const valueType = isElement(value) ? 'element' : toType(value);
            if (!new RegExp(expectedTypes).test(valueType)) throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        }
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): base-component.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const VERSION = '5.2.0';
/**
 * Class definition
 */ class BaseComponent extends Config {
    constructor(element, config){
        super();
        element = getElement(element);
        if (!element) return;
        this._element = element;
        this._config = this._getConfig(config);
        Data.set(this._element, this.constructor.DATA_KEY, this);
    }
    dispose() {
        Data.remove(this._element, this.constructor.DATA_KEY);
        EventHandler.off(this._element, this.constructor.EVENT_KEY);
        for (const propertyName of Object.getOwnPropertyNames(this))this[propertyName] = null;
    }
    _queueCallback(callback, element, isAnimated = true) {
        executeAfterTransition(callback, element, isAnimated);
    }
    _getConfig(config) {
        config = this._mergeConfigObj(config, this._element);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
    }
    static getInstance(element) {
        return Data.get(getElement(element), this.DATA_KEY);
    }
    static getOrCreateInstance(element, config = {
    }) {
        return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
    }
    static get VERSION() {
        return VERSION;
    }
    static get DATA_KEY() {
        return `bs.${this.NAME}`;
    }
    static get EVENT_KEY() {
        return `.${this.DATA_KEY}`;
    }
    static eventName(name) {
        return `${name}${this.EVENT_KEY}`;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/component-functions.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ const enableDismissTrigger = (component, method = 'hide')=>{
    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
    const name = component.NAME;
    EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
        if ([
            'A',
            'AREA'
        ].includes(this.tagName)) event.preventDefault();
        if (isDisabled(this)) return;
        const target = getElementFromSelector(this) || this.closest(`.${name}`);
        const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method
        instance[method]();
    });
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$f = 'alert';
const DATA_KEY$a = 'bs.alert';
const EVENT_KEY$b = `.${DATA_KEY$a}`;
const EVENT_CLOSE = `close${EVENT_KEY$b}`;
const EVENT_CLOSED = `closed${EVENT_KEY$b}`;
const CLASS_NAME_FADE$5 = 'fade';
const CLASS_NAME_SHOW$8 = 'show';
/**
 * Class definition
 */ class Alert extends BaseComponent {
    // Getters
    static get NAME() {
        return NAME$f;
    }
    close() {
        const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
        if (closeEvent.defaultPrevented) return;
        this._element.classList.remove(CLASS_NAME_SHOW$8);
        const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
        this._queueCallback(()=>this._destroyElement()
        , this._element, isAnimated);
    }
    _destroyElement() {
        this._element.remove();
        EventHandler.trigger(this._element, EVENT_CLOSED);
        this.dispose();
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Alert.getOrCreateInstance(this);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config](this);
        });
    }
}
/**
 * Data API implementation
 */ enableDismissTrigger(Alert, 'close');
/**
 * jQuery
 */ defineJQueryPlugin(Alert);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$e = 'button';
const DATA_KEY$9 = 'bs.button';
const EVENT_KEY$a = `.${DATA_KEY$9}`;
const DATA_API_KEY$6 = '.data-api';
const CLASS_NAME_ACTIVE$3 = 'active';
const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
/**
 * Class definition
 */ class Button extends BaseComponent {
    // Getters
    static get NAME() {
        return NAME$e;
    }
    toggle() {
        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Button.getOrCreateInstance(this);
            if (config === 'toggle') data[config]();
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event)=>{
    event.preventDefault();
    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    const data = Button.getOrCreateInstance(button);
    data.toggle();
});
/**
 * jQuery
 */ defineJQueryPlugin(Button);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const SelectorEngine = {
    find (selector, element = document.documentElement) {
        return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },
    findOne (selector, element = document.documentElement) {
        return Element.prototype.querySelector.call(element, selector);
    },
    children (element, selector) {
        return [].concat(...element.children).filter((child)=>child.matches(selector)
        );
    },
    parents (element, selector) {
        const parents = [];
        let ancestor = element.parentNode.closest(selector);
        while(ancestor){
            parents.push(ancestor);
            ancestor = ancestor.parentNode.closest(selector);
        }
        return parents;
    },
    prev (element, selector) {
        let previous = element.previousElementSibling;
        while(previous){
            if (previous.matches(selector)) return [
                previous
            ];
            previous = previous.previousElementSibling;
        }
        return [];
    },
    // TODO: this is now unused; remove later along with prev()
    next (element, selector) {
        let next = element.nextElementSibling;
        while(next){
            if (next.matches(selector)) return [
                next
            ];
            next = next.nextElementSibling;
        }
        return [];
    },
    focusableChildren (element) {
        const focusables = [
            'a',
            'button',
            'input',
            'textarea',
            'select',
            'details',
            '[tabindex]',
            '[contenteditable="true"]'
        ].map((selector)=>`${selector}:not([tabindex^="-"])`
        ).join(',');
        return this.find(focusables, element).filter((el)=>!isDisabled(el) && isVisible(el)
        );
    }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/swipe.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$d = 'swipe';
const EVENT_KEY$9 = '.bs.swipe';
const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
const EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
const EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
const POINTER_TYPE_TOUCH = 'touch';
const POINTER_TYPE_PEN = 'pen';
const CLASS_NAME_POINTER_EVENT = 'pointer-event';
const SWIPE_THRESHOLD = 40;
const Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
};
const DefaultType$c = {
    endCallback: '(function|null)',
    leftCallback: '(function|null)',
    rightCallback: '(function|null)'
};
/**
 * Class definition
 */ class Swipe extends Config {
    constructor(element, config){
        super();
        this._element = element;
        if (!element || !Swipe.isSupported()) return;
        this._config = this._getConfig(config);
        this._deltaX = 0;
        this._supportPointerEvents = Boolean(window.PointerEvent);
        this._initEvents();
    }
    static get Default() {
        return Default$c;
    }
    static get DefaultType() {
        return DefaultType$c;
    }
    static get NAME() {
        return NAME$d;
    }
    dispose() {
        EventHandler.off(this._element, EVENT_KEY$9);
    }
    _start(event) {
        if (!this._supportPointerEvents) {
            this._deltaX = event.touches[0].clientX;
            return;
        }
        if (this._eventIsPointerPenTouch(event)) this._deltaX = event.clientX;
    }
    _end(event) {
        if (this._eventIsPointerPenTouch(event)) this._deltaX = event.clientX - this._deltaX;
        this._handleSwipe();
        execute(this._config.endCallback);
    }
    _move(event) {
        this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
    }
    _handleSwipe() {
        const absDeltaX = Math.abs(this._deltaX);
        if (absDeltaX <= SWIPE_THRESHOLD) return;
        const direction = absDeltaX / this._deltaX;
        this._deltaX = 0;
        if (!direction) return;
        execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
    }
    _initEvents() {
        if (this._supportPointerEvents) {
            EventHandler.on(this._element, EVENT_POINTERDOWN, (event)=>this._start(event)
            );
            EventHandler.on(this._element, EVENT_POINTERUP, (event)=>this._end(event)
            );
            this._element.classList.add(CLASS_NAME_POINTER_EVENT);
        } else {
            EventHandler.on(this._element, EVENT_TOUCHSTART, (event)=>this._start(event)
            );
            EventHandler.on(this._element, EVENT_TOUCHMOVE, (event)=>this._move(event)
            );
            EventHandler.on(this._element, EVENT_TOUCHEND, (event)=>this._end(event)
            );
        }
    }
    _eventIsPointerPenTouch(event) {
        return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
    }
    static isSupported() {
        return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$c = 'carousel';
const DATA_KEY$8 = 'bs.carousel';
const EVENT_KEY$8 = `.${DATA_KEY$8}`;
const DATA_API_KEY$5 = '.data-api';
const ARROW_LEFT_KEY$1 = 'ArrowLeft';
const ARROW_RIGHT_KEY$1 = 'ArrowRight';
const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch
const ORDER_NEXT = 'next';
const ORDER_PREV = 'prev';
const DIRECTION_LEFT = 'left';
const DIRECTION_RIGHT = 'right';
const EVENT_SLIDE = `slide${EVENT_KEY$8}`;
const EVENT_SLID = `slid${EVENT_KEY$8}`;
const EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
const EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
const EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
const EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
const EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
const CLASS_NAME_CAROUSEL = 'carousel';
const CLASS_NAME_ACTIVE$2 = 'active';
const CLASS_NAME_SLIDE = 'slide';
const CLASS_NAME_END = 'carousel-item-end';
const CLASS_NAME_START = 'carousel-item-start';
const CLASS_NAME_NEXT = 'carousel-item-next';
const CLASS_NAME_PREV = 'carousel-item-prev';
const SELECTOR_ACTIVE = '.active';
const SELECTOR_ITEM = '.carousel-item';
const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
const SELECTOR_ITEM_IMG = '.carousel-item img';
const SELECTOR_INDICATORS = '.carousel-indicators';
const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
const KEY_TO_DIRECTION = {
    [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
    [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
};
const Default$b = {
    interval: 5000,
    keyboard: true,
    pause: 'hover',
    ride: false,
    touch: true,
    wrap: true
};
const DefaultType$b = {
    interval: '(number|boolean)',
    // TODO:v6 remove boolean support
    keyboard: 'boolean',
    pause: '(string|boolean)',
    ride: '(boolean|string)',
    touch: 'boolean',
    wrap: 'boolean'
};
/**
 * Class definition
 */ class Carousel extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._interval = null;
        this._activeElement = null;
        this._isSliding = false;
        this.touchTimeout = null;
        this._swipeHelper = null;
        this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
        this._addEventListeners();
        if (this._config.ride === CLASS_NAME_CAROUSEL) this.cycle();
    }
    static get Default() {
        return Default$b;
    }
    static get DefaultType() {
        return DefaultType$b;
    }
    static get NAME() {
        return NAME$c;
    }
    next() {
        this._slide(ORDER_NEXT);
    }
    nextWhenVisible() {
        // FIXME TODO use `document.visibilityState`
        // Don't call next when the page isn't visible
        // or the carousel or its parent isn't visible
        if (!document.hidden && isVisible(this._element)) this.next();
    }
    prev() {
        this._slide(ORDER_PREV);
    }
    pause() {
        if (this._isSliding) triggerTransitionEnd(this._element);
        this._clearInterval();
    }
    cycle() {
        this._clearInterval();
        this._updateInterval();
        this._interval = setInterval(()=>this.nextWhenVisible()
        , this._config.interval);
    }
    _maybeEnableCycle() {
        if (!this._config.ride) return;
        if (this._isSliding) {
            EventHandler.one(this._element, EVENT_SLID, ()=>this.cycle()
            );
            return;
        }
        this.cycle();
    }
    to(index) {
        const items = this._getItems();
        if (index > items.length - 1 || index < 0) return;
        if (this._isSliding) {
            EventHandler.one(this._element, EVENT_SLID, ()=>this.to(index)
            );
            return;
        }
        const activeIndex = this._getItemIndex(this._getActive());
        if (activeIndex === index) return;
        const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
        this._slide(order, items[index]);
    }
    dispose() {
        if (this._swipeHelper) this._swipeHelper.dispose();
        super.dispose();
    }
    _configAfterMerge(config) {
        config.defaultInterval = config.interval;
        return config;
    }
    _addEventListeners() {
        if (this._config.keyboard) EventHandler.on(this._element, EVENT_KEYDOWN$1, (event)=>this._keydown(event)
        );
        if (this._config.pause === 'hover') {
            EventHandler.on(this._element, EVENT_MOUSEENTER$1, ()=>this.pause()
            );
            EventHandler.on(this._element, EVENT_MOUSELEAVE$1, ()=>this._maybeEnableCycle()
            );
        }
        if (this._config.touch && Swipe.isSupported()) this._addTouchEventListeners();
    }
    _addTouchEventListeners() {
        for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element))EventHandler.on(img, EVENT_DRAG_START, (event)=>event.preventDefault()
        );
        const endCallBack = ()=>{
            if (this._config.pause !== 'hover') return;
             // If it's a touch-enabled device, mouseenter/leave are fired as
            // part of the mouse compatibility events on first tap - the carousel
            // would stop cycling until user tapped out of it;
            // here, we listen for touchend, explicitly pause the carousel
            // (as if it's the second time we tap on it, mouseenter compat event
            // is NOT fired) and after a timeout (to allow for mouse compatibility
            // events to fire) we explicitly restart cycling
            this.pause();
            if (this.touchTimeout) clearTimeout(this.touchTimeout);
            this.touchTimeout = setTimeout(()=>this._maybeEnableCycle()
            , TOUCHEVENT_COMPAT_WAIT + this._config.interval);
        };
        const swipeConfig = {
            leftCallback: ()=>this._slide(this._directionToOrder(DIRECTION_LEFT))
            ,
            rightCallback: ()=>this._slide(this._directionToOrder(DIRECTION_RIGHT))
            ,
            endCallback: endCallBack
        };
        this._swipeHelper = new Swipe(this._element, swipeConfig);
    }
    _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) return;
        const direction = KEY_TO_DIRECTION[event.key];
        if (direction) {
            event.preventDefault();
            this._slide(this._directionToOrder(direction));
        }
    }
    _getItemIndex(element) {
        return this._getItems().indexOf(element);
    }
    _setActiveIndicatorElement(index) {
        if (!this._indicatorsElement) return;
        const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
        activeIndicator.removeAttribute('aria-current');
        const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
        if (newActiveIndicator) {
            newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
            newActiveIndicator.setAttribute('aria-current', 'true');
        }
    }
    _updateInterval() {
        const element = this._activeElement || this._getActive();
        if (!element) return;
        const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);
        this._config.interval = elementInterval || this._config.defaultInterval;
    }
    _slide(order, element = null) {
        if (this._isSliding) return;
        const activeElement = this._getActive();
        const isNext = order === ORDER_NEXT;
        const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
        if (nextElement === activeElement) return;
        const nextElementIndex = this._getItemIndex(nextElement);
        const triggerEvent = (eventName)=>{
            return EventHandler.trigger(this._element, eventName, {
                relatedTarget: nextElement,
                direction: this._orderToDirection(order),
                from: this._getItemIndex(activeElement),
                to: nextElementIndex
            });
        };
        const slideEvent = triggerEvent(EVENT_SLIDE);
        if (slideEvent.defaultPrevented) return;
        if (!activeElement || !nextElement) // Some weirdness is happening, so we bail
        // todo: change tests that use empty divs to avoid this check
        return;
        const isCycling = Boolean(this._interval);
        this.pause();
        this._isSliding = true;
        this._setActiveIndicatorElement(nextElementIndex);
        this._activeElement = nextElement;
        const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
        const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
        nextElement.classList.add(orderClassName);
        reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);
        const completeCallBack = ()=>{
            nextElement.classList.remove(directionalClassName, orderClassName);
            nextElement.classList.add(CLASS_NAME_ACTIVE$2);
            activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
            this._isSliding = false;
            triggerEvent(EVENT_SLID);
        };
        this._queueCallback(completeCallBack, activeElement, this._isAnimated());
        if (isCycling) this.cycle();
    }
    _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_SLIDE);
    }
    _getActive() {
        return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
    }
    _getItems() {
        return SelectorEngine.find(SELECTOR_ITEM, this._element);
    }
    _clearInterval() {
        if (this._interval) {
            clearInterval(this._interval);
            this._interval = null;
        }
    }
    _directionToOrder(direction) {
        if (isRTL()) return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }
    _orderToDirection(order) {
        if (isRTL()) return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Carousel.getOrCreateInstance(this, config);
            if (typeof config === 'number') {
                data.to(config);
                return;
            }
            if (typeof config === 'string') {
                if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
                data[config]();
            }
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
    const target = getElementFromSelector(this);
    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) return;
    event.preventDefault();
    const carousel = Carousel.getOrCreateInstance(target);
    const slideIndex = this.getAttribute('data-bs-slide-to');
    if (slideIndex) {
        carousel.to(slideIndex);
        carousel._maybeEnableCycle();
        return;
    }
    if (Manipulator.getDataAttribute(this, 'slide') === 'next') {
        carousel.next();
        carousel._maybeEnableCycle();
        return;
    }
    carousel.prev();
    carousel._maybeEnableCycle();
});
EventHandler.on(window, EVENT_LOAD_DATA_API$3, ()=>{
    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
    for (const carousel of carousels)Carousel.getOrCreateInstance(carousel);
});
/**
 * jQuery
 */ defineJQueryPlugin(Carousel);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$b = 'collapse';
const DATA_KEY$7 = 'bs.collapse';
const EVENT_KEY$7 = `.${DATA_KEY$7}`;
const DATA_API_KEY$4 = '.data-api';
const EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
const EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
const EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
const EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
const CLASS_NAME_SHOW$7 = 'show';
const CLASS_NAME_COLLAPSE = 'collapse';
const CLASS_NAME_COLLAPSING = 'collapsing';
const CLASS_NAME_COLLAPSED = 'collapsed';
const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
const WIDTH = 'width';
const HEIGHT = 'height';
const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
const Default$a = {
    parent: null,
    toggle: true
};
const DefaultType$a = {
    parent: '(null|element)',
    toggle: 'boolean'
};
/**
 * Class definition
 */ class Collapse extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._isTransitioning = false;
        this._triggerArray = [];
        const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
        for (const elem of toggleList){
            const selector = getSelectorFromElement(elem);
            const filterElement = SelectorEngine.find(selector).filter((foundElement)=>foundElement === this._element
            );
            if (selector !== null && filterElement.length) this._triggerArray.push(elem);
        }
        this._initializeChildren();
        if (!this._config.parent) this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
        if (this._config.toggle) this.toggle();
    }
    static get Default() {
        return Default$a;
    }
    static get DefaultType() {
        return DefaultType$a;
    }
    static get NAME() {
        return NAME$b;
    }
    toggle() {
        if (this._isShown()) this.hide();
        else this.show();
    }
    show() {
        if (this._isTransitioning || this._isShown()) return;
        let activeChildren = []; // find active children
        if (this._config.parent) activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element)=>element !== this._element
        ).map((element)=>Collapse.getOrCreateInstance(element, {
                toggle: false
            })
        );
        if (activeChildren.length && activeChildren[0]._isTransitioning) return;
        const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
        if (startEvent.defaultPrevented) return;
        for (const activeInstance of activeChildren)activeInstance.hide();
        const dimension = this._getDimension();
        this._element.classList.remove(CLASS_NAME_COLLAPSE);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.style[dimension] = 0;
        this._addAriaAndCollapsedClass(this._triggerArray, true);
        this._isTransitioning = true;
        const complete = ()=>{
            this._isTransitioning = false;
            this._element.classList.remove(CLASS_NAME_COLLAPSING);
            this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
            this._element.style[dimension] = '';
            EventHandler.trigger(this._element, EVENT_SHOWN$6);
        };
        const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        const scrollSize = `scroll${capitalizedDimension}`;
        this._queueCallback(complete, this._element, true);
        this._element.style[dimension] = `${this._element[scrollSize]}px`;
    }
    hide() {
        if (this._isTransitioning || !this._isShown()) return;
        const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
        if (startEvent.defaultPrevented) return;
        const dimension = this._getDimension();
        this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        for (const trigger of this._triggerArray){
            const element = getElementFromSelector(trigger);
            if (element && !this._isShown(element)) this._addAriaAndCollapsedClass([
                trigger
            ], false);
        }
        this._isTransitioning = true;
        const complete = ()=>{
            this._isTransitioning = false;
            this._element.classList.remove(CLASS_NAME_COLLAPSING);
            this._element.classList.add(CLASS_NAME_COLLAPSE);
            EventHandler.trigger(this._element, EVENT_HIDDEN$6);
        };
        this._element.style[dimension] = '';
        this._queueCallback(complete, this._element, true);
    }
    _isShown(element = this._element) {
        return element.classList.contains(CLASS_NAME_SHOW$7);
    }
    _configAfterMerge(config) {
        config.toggle = Boolean(config.toggle); // Coerce string values
        config.parent = getElement(config.parent);
        return config;
    }
    _getDimension() {
        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }
    _initializeChildren() {
        if (!this._config.parent) return;
        const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
        for (const element of children){
            const selected = getElementFromSelector(element);
            if (selected) this._addAriaAndCollapsedClass([
                element
            ], this._isShown(selected));
        }
    }
    _getFirstLevelChildren(selector) {
        const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent); // remove children if greater depth
        return SelectorEngine.find(selector, this._config.parent).filter((element)=>!children.includes(element)
        );
    }
    _addAriaAndCollapsedClass(triggerArray, isOpen) {
        if (!triggerArray.length) return;
        for (const element of triggerArray){
            element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
            element.setAttribute('aria-expanded', isOpen);
        }
    }
    static jQueryInterface(config) {
        const _config = {
        };
        if (typeof config === 'string' && /show|hide/.test(config)) _config.toggle = false;
        return this.each(function() {
            const data = Collapse.getOrCreateInstance(this, _config);
            if (typeof config === 'string') {
                if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                data[config]();
            }
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') event.preventDefault();
    const selector = getSelectorFromElement(this);
    const selectorElements = SelectorEngine.find(selector);
    for (const element of selectorElements)Collapse.getOrCreateInstance(element, {
        toggle: false
    }).toggle();
});
/**
 * jQuery
 */ defineJQueryPlugin(Collapse);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$a = 'dropdown';
const DATA_KEY$6 = 'bs.dropdown';
const EVENT_KEY$6 = `.${DATA_KEY$6}`;
const DATA_API_KEY$3 = '.data-api';
const ESCAPE_KEY$2 = 'Escape';
const TAB_KEY$1 = 'Tab';
const ARROW_UP_KEY$1 = 'ArrowUp';
const ARROW_DOWN_KEY$1 = 'ArrowDown';
const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button
const EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
const EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
const EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
const CLASS_NAME_SHOW$6 = 'show';
const CLASS_NAME_DROPUP = 'dropup';
const CLASS_NAME_DROPEND = 'dropend';
const CLASS_NAME_DROPSTART = 'dropstart';
const CLASS_NAME_DROPUP_CENTER = 'dropup-center';
const CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';
const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
const SELECTOR_MENU = '.dropdown-menu';
const SELECTOR_NAVBAR = '.navbar';
const SELECTOR_NAVBAR_NAV = '.navbar-nav';
const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
const PLACEMENT_TOPCENTER = 'top';
const PLACEMENT_BOTTOMCENTER = 'bottom';
const Default$9 = {
    autoClose: true,
    boundary: 'clippingParents',
    display: 'dynamic',
    offset: [
        0,
        2
    ],
    popperConfig: null,
    reference: 'toggle'
};
const DefaultType$9 = {
    autoClose: '(boolean|string)',
    boundary: '(string|element)',
    display: 'string',
    offset: '(array|string|function)',
    popperConfig: '(null|object|function)',
    reference: '(string|element|object)'
};
/**
 * Class definition
 */ class Dropdown extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._popper = null;
        this._parent = this._element.parentNode; // dropdown wrapper
        this._menu = SelectorEngine.findOne(SELECTOR_MENU, this._parent);
        this._inNavbar = this._detectNavbar();
    }
    static get Default() {
        return Default$9;
    }
    static get DefaultType() {
        return DefaultType$9;
    }
    static get NAME() {
        return NAME$a;
    }
    toggle() {
        return this._isShown() ? this.hide() : this.show();
    }
    show() {
        if (isDisabled(this._element) || this._isShown()) return;
        const relatedTarget = {
            relatedTarget: this._element
        };
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
        if (showEvent.defaultPrevented) return;
        this._createPopper(); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) for (const element of [].concat(...document.body.children))EventHandler.on(element, 'mouseover', noop);
        this._element.focus();
        this._element.setAttribute('aria-expanded', true);
        this._menu.classList.add(CLASS_NAME_SHOW$6);
        this._element.classList.add(CLASS_NAME_SHOW$6);
        EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
    }
    hide() {
        if (isDisabled(this._element) || !this._isShown()) return;
        const relatedTarget = {
            relatedTarget: this._element
        };
        this._completeHide(relatedTarget);
    }
    dispose() {
        if (this._popper) this._popper.destroy();
        super.dispose();
    }
    update() {
        this._inNavbar = this._detectNavbar();
        if (this._popper) this._popper.update();
    }
    _completeHide(relatedTarget) {
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
        if (hideEvent.defaultPrevented) return;
         // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ('ontouchstart' in document.documentElement) for (const element of [].concat(...document.body.children))EventHandler.off(element, 'mouseover', noop);
        if (this._popper) this._popper.destroy();
        this._menu.classList.remove(CLASS_NAME_SHOW$6);
        this._element.classList.remove(CLASS_NAME_SHOW$6);
        this._element.setAttribute('aria-expanded', 'false');
        Manipulator.removeDataAttribute(this._menu, 'popper');
        EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
    }
    _getConfig(config) {
        config = super._getConfig(config);
        if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') // Popper virtual elements require a getBoundingClientRect method
        throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
        return config;
    }
    _createPopper() {
        if (typeof _core === 'undefined') throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
        let referenceElement = this._element;
        if (this._config.reference === 'parent') referenceElement = this._parent;
        else if (isElement(this._config.reference)) referenceElement = getElement(this._config.reference);
        else if (typeof this._config.reference === 'object') referenceElement = this._config.reference;
        const popperConfig = this._getPopperConfig();
        this._popper = _core.createPopper(referenceElement, this._menu, popperConfig);
    }
    _isShown() {
        return this._menu.classList.contains(CLASS_NAME_SHOW$6);
    }
    _getPlacement() {
        const parentDropdown = this._parent;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) return PLACEMENT_RIGHT;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) return PLACEMENT_LEFT;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) return PLACEMENT_TOPCENTER;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) return PLACEMENT_BOTTOMCENTER;
         // We need to trim the value because custom properties can also include spaces
        const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }
    _detectNavbar() {
        return this._element.closest(SELECTOR_NAVBAR) !== null;
    }
    _getOffset() {
        const { offset  } = this._config;
        if (typeof offset === 'string') return offset.split(',').map((value)=>Number.parseInt(value, 10)
        );
        if (typeof offset === 'function') return (popperData)=>offset(popperData, this._element)
        ;
        return offset;
    }
    _getPopperConfig() {
        const defaultBsPopperConfig = {
            placement: this._getPlacement(),
            modifiers: [
                {
                    name: 'preventOverflow',
                    options: {
                        boundary: this._config.boundary
                    }
                },
                {
                    name: 'offset',
                    options: {
                        offset: this._getOffset()
                    }
                }
            ]
        }; // Disable Popper if we have a static display or Dropdown is in Navbar
        if (this._inNavbar || this._config.display === 'static') {
            Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // todo:v6 remove
            defaultBsPopperConfig.modifiers = [
                {
                    name: 'applyStyles',
                    enabled: false
                }
            ];
        }
        return {
            ...defaultBsPopperConfig,
            ...typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
        };
    }
    _selectMenuItem({ key , target  }) {
        const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element)=>isVisible(element)
        );
        if (!items.length) return;
         // if target isn't included in items (e.g. when expanding the dropdown)
        // allow cycling to get the last item in case key equals ARROW_UP_KEY
        getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Dropdown.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
    static clearMenus(event) {
        if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) return;
        const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
        for (const toggle of openToggles){
            const context = Dropdown.getInstance(toggle);
            if (!context || context._config.autoClose === false) continue;
            const composedPath = event.composedPath();
            const isMenuTarget = composedPath.includes(context._menu);
            if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) continue;
             // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu
            if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) continue;
            const relatedTarget = {
                relatedTarget: context._element
            };
            if (event.type === 'click') relatedTarget.clickEvent = event;
            context._completeHide(relatedTarget);
        }
    }
    static dataApiKeydownHandler(event) {
        // If not an UP | DOWN | ESCAPE key => not a dropdown command
        // If input/textarea && if key is other than ESCAPE => not a dropdown command
        const isInput = /input|textarea/i.test(event.target.tagName);
        const isEscapeEvent = event.key === ESCAPE_KEY$2;
        const isUpOrDownEvent = [
            ARROW_UP_KEY$1,
            ARROW_DOWN_KEY$1
        ].includes(event.key);
        if (!isUpOrDownEvent && !isEscapeEvent) return;
        if (isInput && !isEscapeEvent) return;
        event.preventDefault();
        const getToggleButton = SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
        const instance = Dropdown.getOrCreateInstance(getToggleButton);
        if (isUpOrDownEvent) {
            event.stopPropagation();
            instance.show();
            instance._selectMenuItem(event);
            return;
        }
        if (instance._isShown()) {
            // else is escape and we check if it is shown
            event.stopPropagation();
            instance.hide();
            getToggleButton.focus();
        }
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
});
/**
 * jQuery
 */ defineJQueryPlugin(Dropdown);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/scrollBar.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
const SELECTOR_STICKY_CONTENT = '.sticky-top';
const PROPERTY_PADDING = 'padding-right';
const PROPERTY_MARGIN = 'margin-right';
/**
 * Class definition
 */ class ScrollBarHelper {
    constructor(){
        this._element = document.body;
    }
    getWidth() {
        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
        const documentWidth = document.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
    }
    hide() {
        const width = this.getWidth();
        this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width
        this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width
        ); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth
        this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width
        );
        this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue)=>calculatedValue - width
        );
    }
    reset() {
        this._resetElementAttributes(this._element, 'overflow');
        this._resetElementAttributes(this._element, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
    }
    isOverflowing() {
        return this.getWidth() > 0;
    }
    _disableOverFlow() {
        this._saveInitialAttribute(this._element, 'overflow');
        this._element.style.overflow = 'hidden';
    }
    _setElementAttributes(selector, styleProperty, callback) {
        const scrollbarWidth = this.getWidth();
        const manipulationCallBack = (element)=>{
            if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) return;
            this._saveInitialAttribute(element, styleProperty);
            const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
            element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _saveInitialAttribute(element, styleProperty) {
        const actualValue = element.style.getPropertyValue(styleProperty);
        if (actualValue) Manipulator.setDataAttribute(element, styleProperty, actualValue);
    }
    _resetElementAttributes(selector, styleProperty) {
        const manipulationCallBack = (element)=>{
            const value = Manipulator.getDataAttribute(element, styleProperty); // We only want to remove the property if the value is `null`; the value can also be zero
            if (value === null) {
                element.style.removeProperty(styleProperty);
                return;
            }
            Manipulator.removeDataAttribute(element, styleProperty);
            element.style.setProperty(styleProperty, value);
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _applyManipulationCallback(selector, callBack) {
        if (isElement(selector)) {
            callBack(selector);
            return;
        }
        for (const sel of SelectorEngine.find(selector, this._element))callBack(sel);
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/backdrop.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$9 = 'backdrop';
const CLASS_NAME_FADE$4 = 'fade';
const CLASS_NAME_SHOW$5 = 'show';
const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
const Default$8 = {
    className: 'modal-backdrop',
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: 'body' // give the choice to place backdrop under different elements
};
const DefaultType$8 = {
    className: 'string',
    clickCallback: '(function|null)',
    isAnimated: 'boolean',
    isVisible: 'boolean',
    rootElement: '(element|string)'
};
/**
 * Class definition
 */ class Backdrop extends Config {
    constructor(config){
        super();
        this._config = this._getConfig(config);
        this._isAppended = false;
        this._element = null;
    }
    static get Default() {
        return Default$8;
    }
    static get DefaultType() {
        return DefaultType$8;
    }
    static get NAME() {
        return NAME$9;
    }
    show(callback) {
        if (!this._config.isVisible) {
            execute(callback);
            return;
        }
        this._append();
        const element = this._getElement();
        if (this._config.isAnimated) reflow(element);
        element.classList.add(CLASS_NAME_SHOW$5);
        this._emulateAnimation(()=>{
            execute(callback);
        });
    }
    hide(callback) {
        if (!this._config.isVisible) {
            execute(callback);
            return;
        }
        this._getElement().classList.remove(CLASS_NAME_SHOW$5);
        this._emulateAnimation(()=>{
            this.dispose();
            execute(callback);
        });
    }
    dispose() {
        if (!this._isAppended) return;
        EventHandler.off(this._element, EVENT_MOUSEDOWN);
        this._element.remove();
        this._isAppended = false;
    }
    _getElement() {
        if (!this._element) {
            const backdrop = document.createElement('div');
            backdrop.className = this._config.className;
            if (this._config.isAnimated) backdrop.classList.add(CLASS_NAME_FADE$4);
            this._element = backdrop;
        }
        return this._element;
    }
    _configAfterMerge(config) {
        // use getElement() with the default "body" to get a fresh Element on each instantiation
        config.rootElement = getElement(config.rootElement);
        return config;
    }
    _append() {
        if (this._isAppended) return;
        const element = this._getElement();
        this._config.rootElement.append(element);
        EventHandler.on(element, EVENT_MOUSEDOWN, ()=>{
            execute(this._config.clickCallback);
        });
        this._isAppended = true;
    }
    _emulateAnimation(callback) {
        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/focustrap.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$8 = 'focustrap';
const DATA_KEY$5 = 'bs.focustrap';
const EVENT_KEY$5 = `.${DATA_KEY$5}`;
const EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
const TAB_KEY = 'Tab';
const TAB_NAV_FORWARD = 'forward';
const TAB_NAV_BACKWARD = 'backward';
const Default$7 = {
    autofocus: true,
    trapElement: null // The element to trap focus inside of
};
const DefaultType$7 = {
    autofocus: 'boolean',
    trapElement: 'element'
};
/**
 * Class definition
 */ class FocusTrap extends Config {
    constructor(config){
        super();
        this._config = this._getConfig(config);
        this._isActive = false;
        this._lastTabNavDirection = null;
    }
    static get Default() {
        return Default$7;
    }
    static get DefaultType() {
        return DefaultType$7;
    }
    static get NAME() {
        return NAME$8;
    }
    activate() {
        if (this._isActive) return;
        if (this._config.autofocus) this._config.trapElement.focus();
        EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop
        EventHandler.on(document, EVENT_FOCUSIN$2, (event)=>this._handleFocusin(event)
        );
        EventHandler.on(document, EVENT_KEYDOWN_TAB, (event)=>this._handleKeydown(event)
        );
        this._isActive = true;
    }
    deactivate() {
        if (!this._isActive) return;
        this._isActive = false;
        EventHandler.off(document, EVENT_KEY$5);
    }
    _handleFocusin(event) {
        const { trapElement  } = this._config;
        if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) return;
        const elements = SelectorEngine.focusableChildren(trapElement);
        if (elements.length === 0) trapElement.focus();
        else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) elements[elements.length - 1].focus();
        else elements[0].focus();
    }
    _handleKeydown(event) {
        if (event.key !== TAB_KEY) return;
        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$7 = 'modal';
const DATA_KEY$4 = 'bs.modal';
const EVENT_KEY$4 = `.${DATA_KEY$4}`;
const DATA_API_KEY$2 = '.data-api';
const ESCAPE_KEY$1 = 'Escape';
const EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
const EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
const EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
const EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
const EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
const CLASS_NAME_OPEN = 'modal-open';
const CLASS_NAME_FADE$3 = 'fade';
const CLASS_NAME_SHOW$4 = 'show';
const CLASS_NAME_STATIC = 'modal-static';
const OPEN_SELECTOR$1 = '.modal.show';
const SELECTOR_DIALOG = '.modal-dialog';
const SELECTOR_MODAL_BODY = '.modal-body';
const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
const Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
};
const DefaultType$6 = {
    backdrop: '(boolean|string)',
    focus: 'boolean',
    keyboard: 'boolean'
};
/**
 * Class definition
 */ class Modal extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
        this._backdrop = this._initializeBackDrop();
        this._focustrap = this._initializeFocusTrap();
        this._isShown = false;
        this._isTransitioning = false;
        this._scrollBar = new ScrollBarHelper();
        this._addEventListeners();
    }
    static get Default() {
        return Default$6;
    }
    static get DefaultType() {
        return DefaultType$6;
    }
    static get NAME() {
        return NAME$7;
    }
    toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
        if (this._isShown || this._isTransitioning) return;
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
            relatedTarget
        });
        if (showEvent.defaultPrevented) return;
        this._isShown = true;
        this._isTransitioning = true;
        this._scrollBar.hide();
        document.body.classList.add(CLASS_NAME_OPEN);
        this._adjustDialog();
        this._backdrop.show(()=>this._showElement(relatedTarget)
        );
    }
    hide() {
        if (!this._isShown || this._isTransitioning) return;
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
        if (hideEvent.defaultPrevented) return;
        this._isShown = false;
        this._isTransitioning = true;
        this._focustrap.deactivate();
        this._element.classList.remove(CLASS_NAME_SHOW$4);
        this._queueCallback(()=>this._hideModal()
        , this._element, this._isAnimated());
    }
    dispose() {
        for (const htmlElement of [
            window,
            this._dialog
        ])EventHandler.off(htmlElement, EVENT_KEY$4);
        this._backdrop.dispose();
        this._focustrap.deactivate();
        super.dispose();
    }
    handleUpdate() {
        this._adjustDialog();
    }
    _initializeBackDrop() {
        return new Backdrop({
            isVisible: Boolean(this._config.backdrop),
            // 'static' option will be translated to true, and booleans will keep their value,
            isAnimated: this._isAnimated()
        });
    }
    _initializeFocusTrap() {
        return new FocusTrap({
            trapElement: this._element
        });
    }
    _showElement(relatedTarget) {
        // try to append dynamic modal
        if (!document.body.contains(this._element)) document.body.append(this._element);
        this._element.style.display = 'block';
        this._element.removeAttribute('aria-hidden');
        this._element.setAttribute('aria-modal', true);
        this._element.setAttribute('role', 'dialog');
        this._element.scrollTop = 0;
        const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
        if (modalBody) modalBody.scrollTop = 0;
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW$4);
        const transitionComplete = ()=>{
            if (this._config.focus) this._focustrap.activate();
            this._isTransitioning = false;
            EventHandler.trigger(this._element, EVENT_SHOWN$4, {
                relatedTarget
            });
        };
        this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
    }
    _addEventListeners() {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event)=>{
            if (event.key !== ESCAPE_KEY$1) return;
            if (this._config.keyboard) {
                event.preventDefault();
                this.hide();
                return;
            }
            this._triggerBackdropTransition();
        });
        EventHandler.on(window, EVENT_RESIZE$1, ()=>{
            if (this._isShown && !this._isTransitioning) this._adjustDialog();
        });
        EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event)=>{
            if (event.target !== event.currentTarget) // click is inside modal-dialog
            return;
            if (this._config.backdrop === 'static') {
                this._triggerBackdropTransition();
                return;
            }
            if (this._config.backdrop) this.hide();
        });
    }
    _hideModal() {
        this._element.style.display = 'none';
        this._element.setAttribute('aria-hidden', true);
        this._element.removeAttribute('aria-modal');
        this._element.removeAttribute('role');
        this._isTransitioning = false;
        this._backdrop.hide(()=>{
            document.body.classList.remove(CLASS_NAME_OPEN);
            this._resetAdjustments();
            this._scrollBar.reset();
            EventHandler.trigger(this._element, EVENT_HIDDEN$4);
        });
    }
    _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_FADE$3);
    }
    _triggerBackdropTransition() {
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
        if (hideEvent.defaultPrevented) return;
        const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        const initialOverflowY = this._element.style.overflowY; // return if the following background transition hasn't yet completed
        if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) return;
        if (!isModalOverflowing) this._element.style.overflowY = 'hidden';
        this._element.classList.add(CLASS_NAME_STATIC);
        this._queueCallback(()=>{
            this._element.classList.remove(CLASS_NAME_STATIC);
            this._queueCallback(()=>{
                this._element.style.overflowY = initialOverflowY;
            }, this._dialog);
        }, this._dialog);
        this._element.focus();
    }
    /**
   * The following methods are used to handle overflowing modals
   */ _adjustDialog() {
        const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        const scrollbarWidth = this._scrollBar.getWidth();
        const isBodyOverflowing = scrollbarWidth > 0;
        if (isBodyOverflowing && !isModalOverflowing) {
            const property = isRTL() ? 'paddingLeft' : 'paddingRight';
            this._element.style[property] = `${scrollbarWidth}px`;
        }
        if (!isBodyOverflowing && isModalOverflowing) {
            const property = isRTL() ? 'paddingRight' : 'paddingLeft';
            this._element.style[property] = `${scrollbarWidth}px`;
        }
    }
    _resetAdjustments() {
        this._element.style.paddingLeft = '';
        this._element.style.paddingRight = '';
    }
    static jQueryInterface(config, relatedTarget) {
        return this.each(function() {
            const data = Modal.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config](relatedTarget);
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
    const target = getElementFromSelector(this);
    if ([
        'A',
        'AREA'
    ].includes(this.tagName)) event.preventDefault();
    EventHandler.one(target, EVENT_SHOW$4, (showEvent)=>{
        if (showEvent.defaultPrevented) // only register focus restorer if modal will actually get shown
        return;
        EventHandler.one(target, EVENT_HIDDEN$4, ()=>{
            if (isVisible(this)) this.focus();
        });
    }); // avoid conflict when clicking modal toggler while another one is open
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
    if (alreadyOpen) Modal.getInstance(alreadyOpen).hide();
    const data = Modal.getOrCreateInstance(target);
    data.toggle(this);
});
enableDismissTrigger(Modal);
/**
 * jQuery
 */ defineJQueryPlugin(Modal);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): offcanvas.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$6 = 'offcanvas';
const DATA_KEY$3 = 'bs.offcanvas';
const EVENT_KEY$3 = `.${DATA_KEY$3}`;
const DATA_API_KEY$1 = '.data-api';
const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
const ESCAPE_KEY = 'Escape';
const CLASS_NAME_SHOW$3 = 'show';
const CLASS_NAME_SHOWING$1 = 'showing';
const CLASS_NAME_HIDING = 'hiding';
const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
const OPEN_SELECTOR = '.offcanvas.show';
const EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
const EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
const EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
const EVENT_RESIZE = `resize${EVENT_KEY$3}`;
const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
const Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
};
const DefaultType$5 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    scroll: 'boolean'
};
/**
 * Class definition
 */ class Offcanvas extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._isShown = false;
        this._backdrop = this._initializeBackDrop();
        this._focustrap = this._initializeFocusTrap();
        this._addEventListeners();
    }
    static get Default() {
        return Default$5;
    }
    static get DefaultType() {
        return DefaultType$5;
    }
    static get NAME() {
        return NAME$6;
    }
    toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
        if (this._isShown) return;
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
            relatedTarget
        });
        if (showEvent.defaultPrevented) return;
        this._isShown = true;
        this._backdrop.show();
        if (!this._config.scroll) new ScrollBarHelper().hide();
        this._element.setAttribute('aria-modal', true);
        this._element.setAttribute('role', 'dialog');
        this._element.classList.add(CLASS_NAME_SHOWING$1);
        const completeCallBack = ()=>{
            if (!this._config.scroll || this._config.backdrop) this._focustrap.activate();
            this._element.classList.add(CLASS_NAME_SHOW$3);
            this._element.classList.remove(CLASS_NAME_SHOWING$1);
            EventHandler.trigger(this._element, EVENT_SHOWN$3, {
                relatedTarget
            });
        };
        this._queueCallback(completeCallBack, this._element, true);
    }
    hide() {
        if (!this._isShown) return;
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
        if (hideEvent.defaultPrevented) return;
        this._focustrap.deactivate();
        this._element.blur();
        this._isShown = false;
        this._element.classList.add(CLASS_NAME_HIDING);
        this._backdrop.hide();
        const completeCallback = ()=>{
            this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
            this._element.removeAttribute('aria-modal');
            this._element.removeAttribute('role');
            if (!this._config.scroll) new ScrollBarHelper().reset();
            EventHandler.trigger(this._element, EVENT_HIDDEN$3);
        };
        this._queueCallback(completeCallback, this._element, true);
    }
    dispose() {
        this._backdrop.dispose();
        this._focustrap.deactivate();
        super.dispose();
    }
    _initializeBackDrop() {
        const clickCallback = ()=>{
            if (this._config.backdrop === 'static') {
                EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
                return;
            }
            this.hide();
        }; // 'static' option will be translated to true, and booleans will keep their value
        const isVisible1 = Boolean(this._config.backdrop);
        return new Backdrop({
            className: CLASS_NAME_BACKDROP,
            isVisible: isVisible1,
            isAnimated: true,
            rootElement: this._element.parentNode,
            clickCallback: isVisible1 ? clickCallback : null
        });
    }
    _initializeFocusTrap() {
        return new FocusTrap({
            trapElement: this._element
        });
    }
    _addEventListeners() {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event)=>{
            if (event.key !== ESCAPE_KEY) return;
            if (!this._config.keyboard) {
                EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
                return;
            }
            this.hide();
        });
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Offcanvas.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config](this);
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
    const target = getElementFromSelector(this);
    if ([
        'A',
        'AREA'
    ].includes(this.tagName)) event.preventDefault();
    if (isDisabled(this)) return;
    EventHandler.one(target, EVENT_HIDDEN$3, ()=>{
        // focus on trigger when it is closed
        if (isVisible(this)) this.focus();
    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
    if (alreadyOpen && alreadyOpen !== target) Offcanvas.getInstance(alreadyOpen).hide();
    const data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
});
EventHandler.on(window, EVENT_LOAD_DATA_API$2, ()=>{
    for (const selector of SelectorEngine.find(OPEN_SELECTOR))Offcanvas.getOrCreateInstance(selector).show();
});
EventHandler.on(window, EVENT_RESIZE, ()=>{
    for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]'))if (getComputedStyle(element).position !== 'fixed') Offcanvas.getOrCreateInstance(element).hide();
});
enableDismissTrigger(Offcanvas);
/**
 * jQuery
 */ defineJQueryPlugin(Offcanvas);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ const uriAttributes = new Set([
    'background',
    'cite',
    'href',
    'itemtype',
    'longdesc',
    'poster',
    'src',
    'xlink:href'
]);
const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */ const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 *
 * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */ const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
const allowedAttribute = (attribute, allowedAttributeList)=>{
    const attributeName = attribute.nodeName.toLowerCase();
    if (allowedAttributeList.includes(attributeName)) {
        if (uriAttributes.has(attributeName)) return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
        return true;
    } // Check if a regular expression validates the attribute.
    return allowedAttributeList.filter((attributeRegex)=>attributeRegex instanceof RegExp
    ).some((regex)=>regex.test(attributeName)
    );
};
const DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': [
        'class',
        'dir',
        'id',
        'lang',
        'role',
        ARIA_ATTRIBUTE_PATTERN
    ],
    a: [
        'target',
        'href',
        'title',
        'rel'
    ],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: [
        'src',
        'srcset',
        'alt',
        'title',
        'width',
        'height'
    ],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    if (!unsafeHtml.length) return unsafeHtml;
    if (sanitizeFunction && typeof sanitizeFunction === 'function') return sanitizeFunction(unsafeHtml);
    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));
    for (const element of elements){
        const elementName = element.nodeName.toLowerCase();
        if (!Object.keys(allowList).includes(elementName)) {
            element.remove();
            continue;
        }
        const attributeList = [].concat(...element.attributes);
        const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
        for (const attribute of attributeList)if (!allowedAttribute(attribute, allowedAttributes)) element.removeAttribute(attribute.nodeName);
    }
    return createdDocument.body.innerHTML;
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): util/template-factory.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$5 = 'TemplateFactory';
const Default$4 = {
    allowList: DefaultAllowlist,
    content: {
    },
    // { selector : text ,  selector2 : text2 , }
    extraClass: '',
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: '<div></div>'
};
const DefaultType$4 = {
    allowList: 'object',
    content: 'object',
    extraClass: '(string|function)',
    html: 'boolean',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    template: 'string'
};
const DefaultContentType = {
    entry: '(string|element|function|null)',
    selector: '(string|element)'
};
/**
 * Class definition
 */ class TemplateFactory extends Config {
    constructor(config){
        super();
        this._config = this._getConfig(config);
    }
    static get Default() {
        return Default$4;
    }
    static get DefaultType() {
        return DefaultType$4;
    }
    static get NAME() {
        return NAME$5;
    }
    getContent() {
        return Object.values(this._config.content).map((config)=>this._resolvePossibleFunction(config)
        ).filter(Boolean);
    }
    hasContent() {
        return this.getContent().length > 0;
    }
    changeContent(content) {
        this._checkContent(content);
        this._config.content = {
            ...this._config.content,
            ...content
        };
        return this;
    }
    toHtml() {
        const templateWrapper = document.createElement('div');
        templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
        for (const [selector, text] of Object.entries(this._config.content))this._setContent(templateWrapper, text, selector);
        const template = templateWrapper.children[0];
        const extraClass = this._resolvePossibleFunction(this._config.extraClass);
        if (extraClass) template.classList.add(...extraClass.split(' '));
        return template;
    }
    _typeCheckConfig(config) {
        super._typeCheckConfig(config);
        this._checkContent(config.content);
    }
    _checkContent(arg) {
        for (const [selector, content] of Object.entries(arg))super._typeCheckConfig({
            selector,
            entry: content
        }, DefaultContentType);
    }
    _setContent(template, content, selector) {
        const templateElement = SelectorEngine.findOne(selector, template);
        if (!templateElement) return;
        content = this._resolvePossibleFunction(content);
        if (!content) {
            templateElement.remove();
            return;
        }
        if (isElement(content)) {
            this._putElementInTemplate(getElement(content), templateElement);
            return;
        }
        if (this._config.html) {
            templateElement.innerHTML = this._maybeSanitize(content);
            return;
        }
        templateElement.textContent = content;
    }
    _maybeSanitize(arg) {
        return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
    }
    _resolvePossibleFunction(arg) {
        return typeof arg === 'function' ? arg(this) : arg;
    }
    _putElementInTemplate(element, templateElement) {
        if (this._config.html) {
            templateElement.innerHTML = '';
            templateElement.append(element);
            return;
        }
        templateElement.textContent = element.textContent;
    }
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$4 = 'tooltip';
const DISALLOWED_ATTRIBUTES = new Set([
    'sanitize',
    'allowList',
    'sanitizeFn'
]);
const CLASS_NAME_FADE$2 = 'fade';
const CLASS_NAME_MODAL = 'modal';
const CLASS_NAME_SHOW$2 = 'show';
const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
const EVENT_MODAL_HIDE = 'hide.bs.modal';
const TRIGGER_HOVER = 'hover';
const TRIGGER_FOCUS = 'focus';
const TRIGGER_CLICK = 'click';
const TRIGGER_MANUAL = 'manual';
const EVENT_HIDE$2 = 'hide';
const EVENT_HIDDEN$2 = 'hidden';
const EVENT_SHOW$2 = 'show';
const EVENT_SHOWN$2 = 'shown';
const EVENT_INSERTED = 'inserted';
const EVENT_CLICK$1 = 'click';
const EVENT_FOCUSIN$1 = 'focusin';
const EVENT_FOCUSOUT$1 = 'focusout';
const EVENT_MOUSEENTER = 'mouseenter';
const EVENT_MOUSELEAVE = 'mouseleave';
const AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
};
const Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: 'clippingParents',
    container: false,
    customClass: '',
    delay: 0,
    fallbackPlacements: [
        'top',
        'right',
        'bottom',
        'left'
    ],
    html: false,
    offset: [
        0,
        0
    ],
    placement: 'top',
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: "<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>",
    title: '',
    trigger: 'hover focus'
};
const DefaultType$3 = {
    allowList: 'object',
    animation: 'boolean',
    boundary: '(string|element)',
    container: '(string|element|boolean)',
    customClass: '(string|function)',
    delay: '(number|object)',
    fallbackPlacements: 'array',
    html: 'boolean',
    offset: '(array|string|function)',
    placement: '(string|function)',
    popperConfig: '(null|object|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    selector: '(string|boolean)',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string'
};
/**
 * Class definition
 */ class Tooltip extends BaseComponent {
    constructor(element, config){
        if (typeof _core === 'undefined') throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
        super(element, config); // Private
        this._isEnabled = true;
        this._timeout = 0;
        this._isHovered = false;
        this._activeTrigger = {
        };
        this._popper = null;
        this._templateFactory = null;
        this._newContent = null; // Protected
        this.tip = null;
        this._setListeners();
    }
    static get Default() {
        return Default$3;
    }
    static get DefaultType() {
        return DefaultType$3;
    }
    static get NAME() {
        return NAME$4;
    }
    enable() {
        this._isEnabled = true;
    }
    disable() {
        this._isEnabled = false;
    }
    toggleEnabled() {
        this._isEnabled = !this._isEnabled;
    }
    toggle(event) {
        if (!this._isEnabled) return;
        if (event) {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger.click = !context._activeTrigger.click;
            if (context._isWithActiveTrigger()) context._enter();
            else context._leave();
            return;
        }
        if (this._isShown()) {
            this._leave();
            return;
        }
        this._enter();
    }
    dispose() {
        clearTimeout(this._timeout);
        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
        if (this.tip) this.tip.remove();
        this._disposePopper();
        super.dispose();
    }
    show() {
        if (this._element.style.display === 'none') throw new Error('Please use show on visible elements');
        if (!(this._isWithContent() && this._isEnabled)) return;
        const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
        const shadowRoot = findShadowRoot(this._element);
        const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
        if (showEvent.defaultPrevented || !isInTheDom) return;
         // todo v6 remove this OR make it optional
        if (this.tip) {
            this.tip.remove();
            this.tip = null;
        }
        const tip = this._getTipElement();
        this._element.setAttribute('aria-describedby', tip.getAttribute('id'));
        const { container  } = this._config;
        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
            container.append(tip);
            EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
        }
        if (this._popper) this._popper.update();
        else this._popper = this._createPopper(tip);
        tip.classList.add(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if ('ontouchstart' in document.documentElement) for (const element of [].concat(...document.body.children))EventHandler.on(element, 'mouseover', noop);
        const complete = ()=>{
            const previousHoverState = this._isHovered;
            this._isHovered = false;
            EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
            if (previousHoverState) this._leave();
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
    }
    hide() {
        if (!this._isShown()) return;
        const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
        if (hideEvent.defaultPrevented) return;
        const tip = this._getTipElement();
        tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ('ontouchstart' in document.documentElement) for (const element of [].concat(...document.body.children))EventHandler.off(element, 'mouseover', noop);
        this._activeTrigger[TRIGGER_CLICK] = false;
        this._activeTrigger[TRIGGER_FOCUS] = false;
        this._activeTrigger[TRIGGER_HOVER] = false;
        this._isHovered = false;
        const complete = ()=>{
            if (this._isWithActiveTrigger()) return;
            if (!this._isHovered) tip.remove();
            this._element.removeAttribute('aria-describedby');
            EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
            this._disposePopper();
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
    }
    update() {
        if (this._popper) this._popper.update();
    }
    _isWithContent() {
        return Boolean(this._getTitle());
    }
    _getTipElement() {
        if (!this.tip) this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
        return this.tip;
    }
    _createTipElement(content) {
        const tip = this._getTemplateFactory(content).toHtml(); // todo: remove this check on v6
        if (!tip) return null;
        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2); // todo: on v6 the following can be achieved with CSS only
        tip.classList.add(`bs-${this.constructor.NAME}-auto`);
        const tipId = getUID(this.constructor.NAME).toString();
        tip.setAttribute('id', tipId);
        if (this._isAnimated()) tip.classList.add(CLASS_NAME_FADE$2);
        return tip;
    }
    setContent(content) {
        this._newContent = content;
        if (this._isShown()) {
            this._disposePopper();
            this.show();
        }
    }
    _getTemplateFactory(content) {
        if (this._templateFactory) this._templateFactory.changeContent(content);
        else this._templateFactory = new TemplateFactory({
            ...this._config,
            // the `content` var has to be after `this._config`
            // to override config.content in case of popover
            content,
            extraClass: this._resolvePossibleFunction(this._config.customClass)
        });
        return this._templateFactory;
    }
    _getContentForTemplate() {
        return {
            [SELECTOR_TOOLTIP_INNER]: this._getTitle()
        };
    }
    _getTitle() {
        return this._resolvePossibleFunction(this._config.title) || this._config.originalTitle;
    }
    _initializeOnDelegatedTarget(event) {
        return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }
    _isAnimated() {
        return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
    }
    _isShown() {
        return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
    }
    _createPopper(tip) {
        const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;
        const attachment = AttachmentMap[placement.toUpperCase()];
        return _core.createPopper(this._element, tip, this._getPopperConfig(attachment));
    }
    _getOffset() {
        const { offset  } = this._config;
        if (typeof offset === 'string') return offset.split(',').map((value)=>Number.parseInt(value, 10)
        );
        if (typeof offset === 'function') return (popperData)=>offset(popperData, this._element)
        ;
        return offset;
    }
    _resolvePossibleFunction(arg) {
        return typeof arg === 'function' ? arg.call(this._element) : arg;
    }
    _getPopperConfig(attachment) {
        const defaultBsPopperConfig = {
            placement: attachment,
            modifiers: [
                {
                    name: 'flip',
                    options: {
                        fallbackPlacements: this._config.fallbackPlacements
                    }
                },
                {
                    name: 'offset',
                    options: {
                        offset: this._getOffset()
                    }
                },
                {
                    name: 'preventOverflow',
                    options: {
                        boundary: this._config.boundary
                    }
                },
                {
                    name: 'arrow',
                    options: {
                        element: `.${this.constructor.NAME}-arrow`
                    }
                },
                {
                    name: 'preSetPlacement',
                    enabled: true,
                    phase: 'beforeMain',
                    fn: (data)=>{
                        // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
                        // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
                        this._getTipElement().setAttribute('data-popper-placement', data.state.placement);
                    }
                }
            ]
        };
        return {
            ...defaultBsPopperConfig,
            ...typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
        };
    }
    _setListeners() {
        const triggers = this._config.trigger.split(' ');
        for (const trigger of triggers){
            if (trigger === 'click') EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event)=>this.toggle(event)
            );
            else if (trigger !== TRIGGER_MANUAL) {
                const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
                const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
                EventHandler.on(this._element, eventIn, this._config.selector, (event)=>{
                    const context = this._initializeOnDelegatedTarget(event);
                    context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
                    context._enter();
                });
                EventHandler.on(this._element, eventOut, this._config.selector, (event)=>{
                    const context = this._initializeOnDelegatedTarget(event);
                    context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
                    context._leave();
                });
            }
        }
        this._hideModalHandler = ()=>{
            if (this._element) this.hide();
        };
        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
        if (this._config.selector) this._config = {
            ...this._config,
            trigger: 'manual',
            selector: ''
        };
        else this._fixTitle();
    }
    _fixTitle() {
        const title = this._config.originalTitle;
        if (!title) return;
        if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) this._element.setAttribute('aria-label', title);
        this._element.removeAttribute('title');
    }
    _enter() {
        if (this._isShown() || this._isHovered) {
            this._isHovered = true;
            return;
        }
        this._isHovered = true;
        this._setTimeout(()=>{
            if (this._isHovered) this.show();
        }, this._config.delay.show);
    }
    _leave() {
        if (this._isWithActiveTrigger()) return;
        this._isHovered = false;
        this._setTimeout(()=>{
            if (!this._isHovered) this.hide();
        }, this._config.delay.hide);
    }
    _setTimeout(handler, timeout) {
        clearTimeout(this._timeout);
        this._timeout = setTimeout(handler, timeout);
    }
    _isWithActiveTrigger() {
        return Object.values(this._activeTrigger).includes(true);
    }
    _getConfig(config) {
        const dataAttributes = Manipulator.getDataAttributes(this._element);
        for (const dataAttribute of Object.keys(dataAttributes))if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) delete dataAttributes[dataAttribute];
        config = {
            ...dataAttributes,
            ...typeof config === 'object' && config ? config : {
            }
        };
        config = this._mergeConfigObj(config);
        config = this._configAfterMerge(config);
        this._typeCheckConfig(config);
        return config;
    }
    _configAfterMerge(config) {
        config.container = config.container === false ? document.body : getElement(config.container);
        if (typeof config.delay === 'number') config.delay = {
            show: config.delay,
            hide: config.delay
        };
        config.originalTitle = this._element.getAttribute('title') || '';
        if (typeof config.title === 'number') config.title = config.title.toString();
        if (typeof config.content === 'number') config.content = config.content.toString();
        return config;
    }
    _getDelegateConfig() {
        const config = {
        };
        for(const key in this._config)if (this.constructor.Default[key] !== this._config[key]) config[key] = this._config[key];
         // In the future can be replaced with:
        // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
        // `Object.fromEntries(keysWithDifferentValues)`
        return config;
    }
    _disposePopper() {
        if (this._popper) {
            this._popper.destroy();
            this._popper = null;
        }
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Tooltip.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * jQuery
 */ defineJQueryPlugin(Tooltip);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$3 = 'popover';
const SELECTOR_TITLE = '.popover-header';
const SELECTOR_CONTENT = '.popover-body';
const Default$2 = {
    ...Tooltip.Default,
    content: '',
    offset: [
        0,
        8
    ],
    placement: 'right',
    template: "<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>",
    trigger: 'click'
};
const DefaultType$2 = {
    ...Tooltip.DefaultType,
    content: '(null|string|element|function)'
};
/**
 * Class definition
 */ class Popover extends Tooltip {
    // Getters
    static get Default() {
        return Default$2;
    }
    static get DefaultType() {
        return DefaultType$2;
    }
    static get NAME() {
        return NAME$3;
    }
    _isWithContent() {
        return this._getTitle() || this._getContent();
    }
    _getContentForTemplate() {
        return {
            [SELECTOR_TITLE]: this._getTitle(),
            [SELECTOR_CONTENT]: this._getContent()
        };
    }
    _getContent() {
        return this._resolvePossibleFunction(this._config.content);
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Popover.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * jQuery
 */ defineJQueryPlugin(Popover);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$2 = 'scrollspy';
const DATA_KEY$2 = 'bs.scrollspy';
const EVENT_KEY$2 = `.${DATA_KEY$2}`;
const DATA_API_KEY = '.data-api';
const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
const EVENT_CLICK = `click${EVENT_KEY$2}`;
const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
const CLASS_NAME_ACTIVE$1 = 'active';
const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
const SELECTOR_TARGET_LINKS = '[href]';
const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
const SELECTOR_NAV_LINKS = '.nav-link';
const SELECTOR_NAV_ITEMS = '.nav-item';
const SELECTOR_LIST_ITEMS = '.list-group-item';
const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
const SELECTOR_DROPDOWN = '.dropdown';
const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
const Default$1 = {
    offset: null,
    // TODO: v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: '0px 0px -25%',
    smoothScroll: false,
    target: null
};
const DefaultType$1 = {
    offset: '(number|null)',
    // TODO v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: 'string',
    smoothScroll: 'boolean',
    target: 'element'
};
/**
 * Class definition
 */ class ScrollSpy extends BaseComponent {
    constructor(element, config){
        super(element, config); // this._element is the observablesContainer and config.target the menu links wrapper
        this._targetLinks = new Map();
        this._observableSections = new Map();
        this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element;
        this._activeTarget = null;
        this._observer = null;
        this._previousScrollData = {
            visibleEntryTop: 0,
            parentScrollTop: 0
        };
        this.refresh(); // initialize
    }
    static get Default() {
        return Default$1;
    }
    static get DefaultType() {
        return DefaultType$1;
    }
    static get NAME() {
        return NAME$2;
    }
    refresh() {
        this._initializeTargetsAndObservables();
        this._maybeEnableSmoothScroll();
        if (this._observer) this._observer.disconnect();
        else this._observer = this._getNewObserver();
        for (const section of this._observableSections.values())this._observer.observe(section);
    }
    dispose() {
        this._observer.disconnect();
        super.dispose();
    }
    _configAfterMerge(config) {
        // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case
        config.target = getElement(config.target) || document.body;
        return config;
    }
    _maybeEnableSmoothScroll() {
        if (!this._config.smoothScroll) return;
         // unregister any previous listeners
        EventHandler.off(this._config.target, EVENT_CLICK);
        EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event)=>{
            const observableSection = this._observableSections.get(event.target.hash);
            if (observableSection) {
                event.preventDefault();
                const root = this._rootElement || window;
                const height = observableSection.offsetTop - this._element.offsetTop;
                if (root.scrollTo) {
                    root.scrollTo({
                        top: height,
                        behavior: 'smooth'
                    });
                    return;
                } // Chrome 60 doesn't support `scrollTo`
                root.scrollTop = height;
            }
        });
    }
    _getNewObserver() {
        const options = {
            root: this._rootElement,
            threshold: [
                0.1,
                0.5,
                1
            ],
            rootMargin: this._getRootMargin()
        };
        return new IntersectionObserver((entries)=>this._observerCallback(entries)
        , options);
    }
    _observerCallback(entries) {
        const targetElement = (entry)=>this._targetLinks.get(`#${entry.target.id}`)
        ;
        const activate = (entry)=>{
            this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
            this._process(targetElement(entry));
        };
        const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
        const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
        this._previousScrollData.parentScrollTop = parentScrollTop;
        for (const entry1 of entries){
            if (!entry1.isIntersecting) {
                this._activeTarget = null;
                this._clearActiveClass(targetElement(entry1));
                continue;
            }
            const entryIsLowerThanPrevious = entry1.target.offsetTop >= this._previousScrollData.visibleEntryTop; // if we are scrolling down, pick the bigger offsetTop
            if (userScrollsDown && entryIsLowerThanPrevious) {
                activate(entry1); // if parent isn't scrolled, let's keep the first visible item, breaking the iteration
                if (!parentScrollTop) return;
                continue;
            } // if we are scrolling up, pick the smallest offsetTop
            if (!userScrollsDown && !entryIsLowerThanPrevious) activate(entry1);
        }
    }
    _getRootMargin() {
        return this._config.offset ? `${this._config.offset}px 0px -30%` : this._config.rootMargin;
    }
    _initializeTargetsAndObservables() {
        this._targetLinks = new Map();
        this._observableSections = new Map();
        const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
        for (const anchor of targetLinks){
            // ensure that the anchor has an id and is not disabled
            if (!anchor.hash || isDisabled(anchor)) continue;
            const observableSection = SelectorEngine.findOne(anchor.hash, this._element); // ensure that the observableSection exists & is visible
            if (isVisible(observableSection)) {
                this._targetLinks.set(anchor.hash, anchor);
                this._observableSections.set(anchor.hash, observableSection);
            }
        }
    }
    _process(target) {
        if (this._activeTarget === target) return;
        this._clearActiveClass(this._config.target);
        this._activeTarget = target;
        target.classList.add(CLASS_NAME_ACTIVE$1);
        this._activateParents(target);
        EventHandler.trigger(this._element, EVENT_ACTIVATE, {
            relatedTarget: target
        });
    }
    _activateParents(target) {
        // Activate dropdown parents
        if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
            SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
            return;
        }
        for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP))// Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
        for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS))item.classList.add(CLASS_NAME_ACTIVE$1);
    }
    _clearActiveClass(parent) {
        parent.classList.remove(CLASS_NAME_ACTIVE$1);
        const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
        for (const node of activeNodes)node.classList.remove(CLASS_NAME_ACTIVE$1);
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = ScrollSpy.getOrCreateInstance(this, config);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(window, EVENT_LOAD_DATA_API$1, ()=>{
    for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY))ScrollSpy.getOrCreateInstance(spy);
});
/**
 * jQuery
 */ defineJQueryPlugin(ScrollSpy);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME$1 = 'tab';
const DATA_KEY$1 = 'bs.tab';
const EVENT_KEY$1 = `.${DATA_KEY$1}`;
const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
const EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
const EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
const ARROW_LEFT_KEY = 'ArrowLeft';
const ARROW_RIGHT_KEY = 'ArrowRight';
const ARROW_UP_KEY = 'ArrowUp';
const ARROW_DOWN_KEY = 'ArrowDown';
const CLASS_NAME_ACTIVE = 'active';
const CLASS_NAME_FADE$1 = 'fade';
const CLASS_NAME_SHOW$1 = 'show';
const CLASS_DROPDOWN = 'dropdown';
const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
const SELECTOR_DROPDOWN_MENU = '.dropdown-menu';
const SELECTOR_DROPDOWN_ITEM = '.dropdown-item';
const NOT_SELECTOR_DROPDOWN_TOGGLE = ':not(.dropdown-toggle)';
const SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
const SELECTOR_OUTER = '.nav-item, .list-group-item';
const SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]'; // todo:v6: could be only `tab`
const SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
const SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
/**
 * Class definition
 */ class Tab extends BaseComponent {
    constructor(element){
        super(element);
        this._parent = this._element.closest(SELECTOR_TAB_PANEL);
        if (!this._parent) return; // todo: should Throw exception on v6
         // Set up initial aria attributes
        this._setInitialAttributes(this._parent, this._getChildren());
        EventHandler.on(this._element, EVENT_KEYDOWN, (event)=>this._keydown(event)
        );
    }
    static get NAME() {
        return NAME$1;
    }
    show() {
        // Shows this elem and deactivate the active sibling if exists
        const innerElem = this._element;
        if (this._elemIsActive(innerElem)) return;
         // Search for active tab on same parent to deactivate it
        const active = this._getActiveElem();
        const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
            relatedTarget: innerElem
        }) : null;
        const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
            relatedTarget: active
        });
        if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) return;
        this._deactivate(active, innerElem);
        this._activate(innerElem, active);
    }
    _activate(element, relatedElem) {
        if (!element) return;
        element.classList.add(CLASS_NAME_ACTIVE);
        this._activate(getElementFromSelector(element)); // Search and activate/show the proper section
        const complete = ()=>{
            if (element.getAttribute('role') !== 'tab') {
                element.classList.add(CLASS_NAME_SHOW$1);
                return;
            }
            element.focus();
            element.removeAttribute('tabindex');
            element.setAttribute('aria-selected', true);
            this._toggleDropDown(element, true);
            EventHandler.trigger(element, EVENT_SHOWN$1, {
                relatedTarget: relatedElem
            });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _deactivate(element, relatedElem) {
        if (!element) return;
        element.classList.remove(CLASS_NAME_ACTIVE);
        element.blur();
        this._deactivate(getElementFromSelector(element)); // Search and deactivate the shown section too
        const complete = ()=>{
            if (element.getAttribute('role') !== 'tab') {
                element.classList.remove(CLASS_NAME_SHOW$1);
                return;
            }
            element.setAttribute('aria-selected', false);
            element.setAttribute('tabindex', '-1');
            this._toggleDropDown(element, false);
            EventHandler.trigger(element, EVENT_HIDDEN$1, {
                relatedTarget: relatedElem
            });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _keydown(event) {
        if (![
            ARROW_LEFT_KEY,
            ARROW_RIGHT_KEY,
            ARROW_UP_KEY,
            ARROW_DOWN_KEY
        ].includes(event.key)) return;
        event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page
        event.preventDefault();
        const isNext = [
            ARROW_RIGHT_KEY,
            ARROW_DOWN_KEY
        ].includes(event.key);
        const nextActiveElement = getNextActiveElement(this._getChildren().filter((element)=>!isDisabled(element)
        ), event.target, isNext, true);
        if (nextActiveElement) Tab.getOrCreateInstance(nextActiveElement).show();
    }
    _getChildren() {
        // collection of inner elements
        return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
    }
    _getActiveElem() {
        return this._getChildren().find((child)=>this._elemIsActive(child)
        ) || null;
    }
    _setInitialAttributes(parent, children) {
        this._setAttributeIfNotExists(parent, 'role', 'tablist');
        for (const child of children)this._setInitialAttributesOnChild(child);
    }
    _setInitialAttributesOnChild(child) {
        child = this._getInnerElement(child);
        const isActive = this._elemIsActive(child);
        const outerElem = this._getOuterElement(child);
        child.setAttribute('aria-selected', isActive);
        if (outerElem !== child) this._setAttributeIfNotExists(outerElem, 'role', 'presentation');
        if (!isActive) child.setAttribute('tabindex', '-1');
        this._setAttributeIfNotExists(child, 'role', 'tab'); // set attributes to the related panel too
        this._setInitialAttributesOnTargetPanel(child);
    }
    _setInitialAttributesOnTargetPanel(child) {
        const target = getElementFromSelector(child);
        if (!target) return;
        this._setAttributeIfNotExists(target, 'role', 'tabpanel');
        if (child.id) this._setAttributeIfNotExists(target, 'aria-labelledby', `#${child.id}`);
    }
    _toggleDropDown(element1, open) {
        const outerElem = this._getOuterElement(element1);
        if (!outerElem.classList.contains(CLASS_DROPDOWN)) return;
        const toggle = (selector, className)=>{
            const element = SelectorEngine.findOne(selector, outerElem);
            if (element) element.classList.toggle(className, open);
        };
        toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
        toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
        toggle(SELECTOR_DROPDOWN_ITEM, CLASS_NAME_ACTIVE);
        outerElem.setAttribute('aria-expanded', open);
    }
    _setAttributeIfNotExists(element, attribute, value) {
        if (!element.hasAttribute(attribute)) element.setAttribute(attribute, value);
    }
    _elemIsActive(elem) {
        return elem.classList.contains(CLASS_NAME_ACTIVE);
    }
    _getInnerElement(elem) {
        return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
    }
    _getOuterElement(elem) {
        return elem.closest(SELECTOR_OUTER) || elem;
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Tab.getOrCreateInstance(this);
            if (typeof config !== 'string') return;
            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
            data[config]();
        });
    }
}
/**
 * Data API implementation
 */ EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
    if ([
        'A',
        'AREA'
    ].includes(this.tagName)) event.preventDefault();
    if (isDisabled(this)) return;
    Tab.getOrCreateInstance(this).show();
});
/**
 * Initialize on focus
 */ EventHandler.on(window, EVENT_LOAD_DATA_API, ()=>{
    for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE))Tab.getOrCreateInstance(element);
});
/**
 * jQuery
 */ defineJQueryPlugin(Tab);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.2.0): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */ /**
 * Constants
 */ const NAME = 'toast';
const DATA_KEY = 'bs.toast';
const EVENT_KEY = `.${DATA_KEY}`;
const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
const EVENT_HIDE = `hide${EVENT_KEY}`;
const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
const EVENT_SHOW = `show${EVENT_KEY}`;
const EVENT_SHOWN = `shown${EVENT_KEY}`;
const CLASS_NAME_FADE = 'fade';
const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility
const CLASS_NAME_SHOW = 'show';
const CLASS_NAME_SHOWING = 'showing';
const DefaultType = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
};
const Default = {
    animation: true,
    autohide: true,
    delay: 5000
};
/**
 * Class definition
 */ class Toast extends BaseComponent {
    constructor(element, config){
        super(element, config);
        this._timeout = null;
        this._hasMouseInteraction = false;
        this._hasKeyboardInteraction = false;
        this._setListeners();
    }
    static get Default() {
        return Default;
    }
    static get DefaultType() {
        return DefaultType;
    }
    static get NAME() {
        return NAME;
    }
    show() {
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
        if (showEvent.defaultPrevented) return;
        this._clearTimeout();
        if (this._config.animation) this._element.classList.add(CLASS_NAME_FADE);
        const complete = ()=>{
            this._element.classList.remove(CLASS_NAME_SHOWING);
            EventHandler.trigger(this._element, EVENT_SHOWN);
            this._maybeScheduleHide();
        };
        this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
    }
    hide() {
        if (!this.isShown()) return;
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
        if (hideEvent.defaultPrevented) return;
        const complete = ()=>{
            this._element.classList.add(CLASS_NAME_HIDE); // @deprecated
            this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
            EventHandler.trigger(this._element, EVENT_HIDDEN);
        };
        this._element.classList.add(CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
    }
    dispose() {
        this._clearTimeout();
        if (this.isShown()) this._element.classList.remove(CLASS_NAME_SHOW);
        super.dispose();
    }
    isShown() {
        return this._element.classList.contains(CLASS_NAME_SHOW);
    }
    _maybeScheduleHide() {
        if (!this._config.autohide) return;
        if (this._hasMouseInteraction || this._hasKeyboardInteraction) return;
        this._timeout = setTimeout(()=>{
            this.hide();
        }, this._config.delay);
    }
    _onInteraction(event, isInteracting) {
        switch(event.type){
            case 'mouseover':
            case 'mouseout':
                this._hasMouseInteraction = isInteracting;
                break;
            case 'focusin':
            case 'focusout':
                this._hasKeyboardInteraction = isInteracting;
                break;
        }
        if (isInteracting) {
            this._clearTimeout();
            return;
        }
        const nextElement = event.relatedTarget;
        if (this._element === nextElement || this._element.contains(nextElement)) return;
        this._maybeScheduleHide();
    }
    _setListeners() {
        EventHandler.on(this._element, EVENT_MOUSEOVER, (event)=>this._onInteraction(event, true)
        );
        EventHandler.on(this._element, EVENT_MOUSEOUT, (event)=>this._onInteraction(event, false)
        );
        EventHandler.on(this._element, EVENT_FOCUSIN, (event)=>this._onInteraction(event, true)
        );
        EventHandler.on(this._element, EVENT_FOCUSOUT, (event)=>this._onInteraction(event, false)
        );
    }
    _clearTimeout() {
        clearTimeout(this._timeout);
        this._timeout = null;
    }
    static jQueryInterface(config) {
        return this.each(function() {
            const data = Toast.getOrCreateInstance(this, config);
            if (typeof config === 'string') {
                if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                data[config](this);
            }
        });
    }
}
/**
 * Data API implementation
 */ enableDismissTrigger(Toast);
/**
 * jQuery
 */ defineJQueryPlugin(Toast);

},{"@popperjs/core":"7unqC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7unqC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
parcelHelpers.export(exports, "createPopperBase", ()=>_createPopperJs.createPopper
);
parcelHelpers.export(exports, "createPopper", ()=>_popperJs.createPopper
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
);
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":"lCAq5","./modifiers/index.js":"cap3W","./createPopper.js":"cHuNp","./popper.js":"1PuRF","./popper-lite.js":"gKW1N","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCAq5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top
);
parcelHelpers.export(exports, "bottom", ()=>bottom
);
parcelHelpers.export(exports, "right", ()=>right
);
parcelHelpers.export(exports, "left", ()=>left
);
parcelHelpers.export(exports, "auto", ()=>auto
);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements
);
parcelHelpers.export(exports, "start", ()=>start
);
parcelHelpers.export(exports, "end", ()=>end
);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents
);
parcelHelpers.export(exports, "viewport", ()=>viewport
);
parcelHelpers.export(exports, "popper", ()=>popper
);
parcelHelpers.export(exports, "reference", ()=>reference
);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements
);
parcelHelpers.export(exports, "placements", ()=>placements
);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead
);
parcelHelpers.export(exports, "read", ()=>read
);
parcelHelpers.export(exports, "afterRead", ()=>afterRead
);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain
);
parcelHelpers.export(exports, "main", ()=>main
);
parcelHelpers.export(exports, "afterMain", ()=>afterMain
);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite
);
parcelHelpers.export(exports, "write", ()=>write
);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite
);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases
);
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cap3W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyStyles", ()=>_applyStylesJsDefault.default
);
parcelHelpers.export(exports, "arrow", ()=>_arrowJsDefault.default
);
parcelHelpers.export(exports, "computeStyles", ()=>_computeStylesJsDefault.default
);
parcelHelpers.export(exports, "eventListeners", ()=>_eventListenersJsDefault.default
);
parcelHelpers.export(exports, "flip", ()=>_flipJsDefault.default
);
parcelHelpers.export(exports, "hide", ()=>_hideJsDefault.default
);
parcelHelpers.export(exports, "offset", ()=>_offsetJsDefault.default
);
parcelHelpers.export(exports, "popperOffsets", ()=>_popperOffsetsJsDefault.default
);
parcelHelpers.export(exports, "preventOverflow", ()=>_preventOverflowJsDefault.default
);
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _arrowJs = require("./arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _computeStylesJs = require("./computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _eventListenersJs = require("./eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _hideJs = require("./hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _offsetJs = require("./offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _popperOffsetsJs = require("./popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _preventOverflowJs = require("./preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);

},{"./applyStyles.js":"4iMn4","./arrow.js":"31HFW","./computeStyles.js":"gDlm2","./eventListeners.js":"hBKsL","./flip.js":"fv5wq","./hide.js":"2g4OF","./offset.js":"3GKVY","./popperOffsets.js":"6I679","./preventOverflow.js":"1AMhb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iMn4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name1) {
        var style = state.styles[name1] || {
        };
        var attributes = state.attributes[name1] || {
        };
        var element = state.elements[name1]; // arrow is optional + virtual elements
        if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? '' : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {
        }
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {
            };
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style1 = styleProperties.reduce(function(style, property) {
                style[property] = '';
                return style;
            }, {
            }); // arrow is optional + virtual elements
            if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
            Object.assign(element.style, style1);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect,
    requires: [
        'computeStyles'
    ]
};

},{"../dom-utils/getNodeName.js":"a2Qom","../dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2Qom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
exports.default = getNodeName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYFUC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement
);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement
);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot
);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') return false;
    var OwnElement = _getWindowJsDefault.default(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SkOo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
exports.default = getWindow;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31HFW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : padding;
    return _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var axis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var isVertical = [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = _getLayoutRectJsDefault.default(arrowElement);
    var minProp = axis === 'y' ? _enumsJs.top : _enumsJs.left;
    var maxProp = axis === 'y' ? _enumsJs.bottom : _enumsJs.right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = _getOffsetParentJsDefault.default(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = _withinJs.within(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {
    }, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!_instanceOfJs.isHTMLElement(arrowElement)) console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
        'the arrow.'
    ].join(' '));
    if (!_containsJsDefault.default(state.elements.popper, arrowElement)) {
        console.error([
            'Popper: "arrow" modifier\'s `element` must be a child of the popper',
            'element.'
        ].join(' '));
        return;
    }
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};

},{"../utils/getBasePlacement.js":"59Wp3","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/contains.js":"4QxRR","../dom-utils/getOffsetParent.js":"laoYw","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/within.js":"3glSz","../utils/mergePaddingObject.js":"lEIf9","../utils/expandToHashMap.js":"iQlH5","../enums.js":"lCAq5","../dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59Wp3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
exports.default = getBasePlacement;

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvjuf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = _getBoundingClientRectJsDefault.default(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
exports.default = getLayoutRect;

},{"./getBoundingClientRect.js":"9CFSQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9CFSQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) includeScale = false;
    if (isFixedStrategy === void 0) isFixedStrategy = false;
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && _instanceOfJs.isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? _mathJs.round(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? _mathJs.round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = _instanceOfJs.isElement(element) ? _getWindowJsDefault.default(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !_isLayoutViewportJsDefault.default() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
    };
}
exports.default = getBoundingClientRect;

},{"./instanceOf.js":"gYFUC","../utils/math.js":"gQqVe","./getWindow.js":"2SkOo","./isLayoutViewport.js":"3ipHv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQqVe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "round", ()=>round
);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ipHv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(_userAgentJsDefault.default());
}
exports.default = isLayoutViewport;

},{"../utils/userAgent.js":"1hEx0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hEx0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands) return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
    }).join(' ');
    return navigator.userAgent;
}
exports.default = getUAString;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4QxRR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && _instanceOfJs.isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next)
    } // Give up, the result is false
    return false;
}
exports.default = contains;

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"laoYw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function getTrueOffsetParent(element) {
    if (!_instanceOfJs.isHTMLElement(element) || _getComputedStyleJsDefault.default(element).position === 'fixed') return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(_userAgentJsDefault.default());
    var isIE = /Trident/i.test(_userAgentJsDefault.default());
    if (isIE && _instanceOfJs.isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = _getComputedStyleJsDefault.default(element);
        if (elementCss.position === 'fixed') return null;
    }
    var currentNode = _getParentNodeJsDefault.default(element);
    if (_instanceOfJs.isShadowRoot(currentNode)) currentNode = currentNode.host;
    while(_instanceOfJs.isHTMLElement(currentNode) && [
        'html',
        'body'
    ].indexOf(_getNodeNameJsDefault.default(currentNode)) < 0){
        var css = _getComputedStyleJsDefault.default(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
            'transform',
            'perspective'
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = _getWindowJsDefault.default(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && _isTableElementJsDefault.default(offsetParent) && _getComputedStyleJsDefault.default(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && (_getNodeNameJsDefault.default(offsetParent) === 'html' || _getNodeNameJsDefault.default(offsetParent) === 'body' && _getComputedStyleJsDefault.default(offsetParent).position === 'static')) return window;
    return offsetParent || getContainingBlock(element) || window;
}
exports.default = getOffsetParent;

},{"./getWindow.js":"2SkOo","./getNodeName.js":"a2Qom","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./isTableElement.js":"2qBb7","./getParentNode.js":"bIHpd","../utils/userAgent.js":"1hEx0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mZjB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return _getWindowJsDefault.default(element).getComputedStyle(element);
}
exports.default = getComputedStyle;

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qBb7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf(_getNodeNameJsDefault.default(element)) >= 0;
}
exports.default = isTableElement;

},{"./getNodeName.js":"a2Qom","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIHpd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if (_getNodeNameJsDefault.default(element) === 'html') return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || element.parentNode || (_instanceOfJs.isShadowRoot(element) ? element.host : null) || // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    _getDocumentElementJsDefault.default(element) // fallback
    );
}
exports.default = getParentNode;

},{"./getNodeName.js":"a2Qom","./getDocumentElement.js":"eJ9Y1","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJ9Y1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((_instanceOfJs.isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
exports.default = getDocumentElement;

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Xlom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}
exports.default = getMainAxisFromPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3glSz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", ()=>within
);
parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp
);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return _mathJs.max(min, _mathJs.min(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lEIf9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({
    }, _getFreshSideObjectJsDefault.default(), paddingObject);
}
exports.default = mergePaddingObject;

},{"./getFreshSideObject.js":"g4xOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4xOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
exports.default = getFreshSideObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQlH5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {
    });
}
exports.default = expandToHashMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gDlm2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles
);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: _mathJs.round(x * dpr) / dpr || 0,
        y: _mathJs.round(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = _enumsJs.left;
    var sideY = _enumsJs.top;
    var win = window;
    if (adaptive) {
        var offsetParent = _getOffsetParentJsDefault.default(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === _getWindowJsDefault.default(popper)) {
            offsetParent = _getDocumentElementJsDefault.default(popper);
            if (_getComputedStyleJsDefault.default(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        if (placement === _enumsJs.top || (placement === _enumsJs.left || placement === _enumsJs.right) && variation === _enumsJs.end) {
            sideY = _enumsJs.bottom;
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === _enumsJs.left || (placement === _enumsJs.top || placement === _enumsJs.bottom) && variation === _enumsJs.end) {
            sideX = _enumsJs.right;
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({
        }, commonStyles, (_Object$assign = {
        }, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({
    }, commonStyles, (_Object$assign2 = {
    }, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var transitionProperty = _getComputedStyleJsDefault.default(state.elements.popper).transitionProperty || '';
    if (adaptive && [
        'transform',
        'top',
        'right',
        'bottom',
        'left'
    ].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
    })) console.warn([
        'Popper: Detected CSS transitions on at least one of the following',
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        '\n\n',
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        'for smooth transitions, or remove these properties from the CSS',
        'transition declaration on the popper element if only transitioning',
        'opacity or background-color for example.',
        '\n\n',
        'We recommend using the popper element as a wrapper around an inner',
        'element that can have any CSS property transitioned for animations.'
    ].join(' '));
    var commonStyles = {
        placement: _getBasePlacementJsDefault.default(state.placement),
        variation: _getVariationJsDefault.default(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({
    }, state.styles.popper, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({
    }, state.styles.arrow, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {
    }
};

},{"../enums.js":"lCAq5","../dom-utils/getOffsetParent.js":"laoYw","../dom-utils/getWindow.js":"2SkOo","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getComputedStyle.js":"3mZjB","../utils/getBasePlacement.js":"59Wp3","../utils/getVariation.js":"hIo7Y","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hIo7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getVariation(placement) {
    return placement.split('-')[1];
}
exports.default = getVariation;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBKsL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = _getWindowJsDefault.default(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {
    },
    effect: effect,
    data: {
    }
};

},{"../dom-utils/getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fv5wq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if (_getBasePlacementJsDefault.default(placement) === _enumsJs.auto) return [];
    var oppositePlacement = _getOppositePlacementJsDefault.default(placement);
    return [
        _getOppositeVariationPlacementJsDefault.default(placement),
        oppositePlacement,
        _getOppositeVariationPlacementJsDefault.default(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = _getBasePlacementJsDefault.default(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        _getOppositePlacementJsDefault.default(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat(_getBasePlacementJsDefault.default(placement) === _enumsJs.auto ? _computeAutoPlacementJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement1 = placements[i];
        var _basePlacement = _getBasePlacementJsDefault.default(placement1);
        var isStartVariation = _getVariationJsDefault.default(placement1) === _enumsJs.start;
        var isVertical = [
            _enumsJs.top,
            _enumsJs.bottom
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = _detectOverflowJsDefault.default(state, {
            placement: placement1,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? _enumsJs.right : _enumsJs.left : isStartVariation ? _enumsJs.bottom : _enumsJs.top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var altVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement1;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement1, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i1 = numberOfChecks; _i1 > 0; _i1--){
            var _ret = _loop(_i1);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"a8CY0","../utils/getBasePlacement.js":"59Wp3","../utils/getOppositeVariationPlacement.js":"bKTLC","../utils/detectOverflow.js":"ltCuw","../utils/computeAutoPlacement.js":"gytMj","../enums.js":"lCAq5","../utils/getVariation.js":"hIo7Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8CY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositePlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKTLC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositeVariationPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltCuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? _enumsJs.clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? _enumsJs.viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? _enumsJs.popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
    var altContext = elementContext === _enumsJs.popper ? _enumsJs.reference : _enumsJs.popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = _getClippingRectJsDefault.default(_instanceOfJs.isElement(element) ? element : element.contextElement || _getDocumentElementJsDefault.default(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = _getBoundingClientRectJsDefault.default(state.elements.reference);
    var popperOffsets = _computeOffsetsJsDefault.default({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = _rectToClientRectJsDefault.default(Object.assign({
    }, popperRect, popperOffsets));
    var elementClientRect = elementContext === _enumsJs.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === _enumsJs.popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                _enumsJs.right,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                _enumsJs.top,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
exports.default = detectOverflow;

},{"../dom-utils/getClippingRect.js":"eeg2s","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getBoundingClientRect.js":"9CFSQ","./computeOffsets.js":"7jtXk","./rectToClientRect.js":"cQ3tg","../enums.js":"lCAq5","../dom-utils/instanceOf.js":"gYFUC","./mergePaddingObject.js":"lEIf9","./expandToHashMap.js":"iQlH5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eeg2s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element, strategy) {
    var rect = _getBoundingClientRectJsDefault.default(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === _enumsJs.viewport ? _rectToClientRectJsDefault.default(_getViewportRectJsDefault.default(element, strategy)) : _instanceOfJs.isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : _rectToClientRectJsDefault.default(_getDocumentRectJsDefault.default(_getDocumentElementJsDefault.default(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = _listScrollParentsJsDefault.default(_getParentNodeJsDefault.default(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf(_getComputedStyleJsDefault.default(element).position) >= 0;
    var clipperElement = canEscapeClipping && _instanceOfJs.isHTMLElement(element) ? _getOffsetParentJsDefault.default(element) : element;
    if (!_instanceOfJs.isElement(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return _instanceOfJs.isElement(clippingParent) && _containsJsDefault.default(clippingParent, clipperElement) && _getNodeNameJsDefault.default(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = _mathJs.max(rect.top, accRect.top);
        accRect.right = _mathJs.min(rect.right, accRect.right);
        accRect.bottom = _mathJs.min(rect.bottom, accRect.bottom);
        accRect.left = _mathJs.max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
exports.default = getClippingRect;

},{"../enums.js":"lCAq5","./getViewportRect.js":"cnH2G","./getDocumentRect.js":"d94SC","./listScrollParents.js":"2di3T","./getOffsetParent.js":"laoYw","./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./getBoundingClientRect.js":"9CFSQ","./getParentNode.js":"bIHpd","./contains.js":"4QxRR","./getNodeName.js":"a2Qom","../utils/rectToClientRect.js":"cQ3tg","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnH2G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getViewportRect(element, strategy) {
    var win = _getWindowJsDefault.default(element);
    var html = _getDocumentElementJsDefault.default(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = _isLayoutViewportJsDefault.default();
        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + _getWindowScrollBarXJsDefault.default(element),
        y: y
    };
}
exports.default = getViewportRect;

},{"./getWindow.js":"2SkOo","./getDocumentElement.js":"eJ9Y1","./getWindowScrollBarX.js":"sz4Ld","./isLayoutViewport.js":"3ipHv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sz4Ld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return _getBoundingClientRectJsDefault.default(_getDocumentElementJsDefault.default(element)).left + _getWindowScrollJsDefault.default(element).scrollLeft;
}
exports.default = getWindowScrollBarX;

},{"./getBoundingClientRect.js":"9CFSQ","./getDocumentElement.js":"eJ9Y1","./getWindowScroll.js":"1XUtN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1XUtN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = _getWindowJsDefault.default(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
exports.default = getWindowScroll;

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d94SC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = _getDocumentElementJsDefault.default(element);
    var winScroll = _getWindowScrollJsDefault.default(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = _mathJs.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = _mathJs.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + _getWindowScrollBarXJsDefault.default(element);
    var y = -winScroll.scrollTop;
    if (_getComputedStyleJsDefault.default(body || html).direction === 'rtl') x += _mathJs.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
exports.default = getDocumentRect;

},{"./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./getWindowScrollBarX.js":"sz4Ld","./getWindowScroll.js":"1XUtN","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2di3T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = _getScrollParentJsDefault.default(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = _getWindowJsDefault.default(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], _isScrollParentJsDefault.default(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(_getParentNodeJsDefault.default(target)));
}
exports.default = listScrollParents;

},{"./getScrollParent.js":"jy4ZS","./getParentNode.js":"bIHpd","./getWindow.js":"2SkOo","./isScrollParent.js":"9rLGO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jy4ZS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf(_getNodeNameJsDefault.default(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if (_instanceOfJs.isHTMLElement(node) && _isScrollParentJsDefault.default(node)) return node;
    return getScrollParent(_getParentNodeJsDefault.default(node));
}
exports.default = getScrollParent;

},{"./getParentNode.js":"bIHpd","./isScrollParent.js":"9rLGO","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9rLGO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = _getComputedStyleJsDefault.default(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
exports.default = isScrollParent;

},{"./getComputedStyle.js":"3mZjB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQ3tg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function rectToClientRect(rect) {
    return Object.assign({
    }, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
exports.default = rectToClientRect;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7jtXk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? _getBasePlacementJsDefault.default(placement) : null;
    var variation = placement ? _getVariationJsDefault.default(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? _getMainAxisFromPlacementJsDefault.default(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}
exports.default = computeOffsets;

},{"./getBasePlacement.js":"59Wp3","./getVariation.js":"hIo7Y","./getMainAxisFromPlacement.js":"1Xlom","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gytMj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, placement1 = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enumsJs.placements : _options$allowedAutoP;
    var variation = _getVariationJsDefault.default(placement1);
    var placements = variation ? flipVariations ? _enumsJs.variationPlacements : _enumsJs.variationPlacements.filter(function(placement) {
        return _getVariationJsDefault.default(placement) === variation;
    }) : _enumsJs.basePlacements;
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements;
        console.error([
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.'
        ].join(' '));
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = _detectOverflowJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[_getBasePlacementJsDefault.default(placement)];
        return acc;
    }, {
    });
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
exports.default = computeAutoPlacement;

},{"./getVariation.js":"hIo7Y","../enums.js":"lCAq5","./detectOverflow.js":"ltCuw","./getBasePlacement.js":"59Wp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2g4OF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        _enumsJs.top,
        _enumsJs.right,
        _enumsJs.bottom,
        _enumsJs.left
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = _detectOverflowJsDefault.default(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = _detectOverflowJsDefault.default(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};

},{"../enums.js":"lCAq5","../utils/detectOverflow.js":"ltCuw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3GKVY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY
);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset1) {
    var basePlacement = _getBasePlacementJsDefault.default(placement);
    var invertDistance = [
        _enumsJs.left,
        _enumsJs.top
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset1 === 'function' ? offset1(Object.assign({
    }, rects, {
        placement: placement
    })) : offset1, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = _enumsJs.placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
    }, {
    });
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"59Wp3","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6I679":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = _computeOffsetsJsDefault.default({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {
    }
};

},{"../utils/computeOffsets.js":"7jtXk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1AMhb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = _detectOverflowJsDefault.default(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var variation = _getVariationJsDefault.default(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var altAxis = _getAltAxisJsDefault.default(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? _enumsJs.top : _enumsJs.left;
        var altSide = mainAxis === 'y' ? _enumsJs.bottom : _enumsJs.right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === _enumsJs.start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === _enumsJs.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? _getLayoutRectJsDefault.default(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : _getFreshSideObjectJsDefault.default();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = _withinJs.within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && _getOffsetParentJsDefault.default(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = _withinJs.within(tether ? _mathJs.min(min, tetherMin) : min, offset, tether ? _mathJs.max(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? _enumsJs.top : _enumsJs.left;
        var _altSide = mainAxis === 'x' ? _enumsJs.bottom : _enumsJs.right;
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            _enumsJs.top,
            _enumsJs.left
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? _withinJs.withinMaxClamp(_tetherMin, _offset, _tetherMax) : _withinJs.within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};

},{"../enums.js":"lCAq5","../utils/getBasePlacement.js":"59Wp3","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/getAltAxis.js":"59FWE","../utils/within.js":"3glSz","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/getOffsetParent.js":"laoYw","../utils/detectOverflow.js":"ltCuw","../utils/getVariation.js":"hIo7Y","../utils/getFreshSideObject.js":"g4xOt","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59FWE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
exports.default = getAltAxis;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cHuNp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator
);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
parcelHelpers.export(exports, "detectOverflow", ()=>_detectOverflowJsDefault.default
);
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getComputedStyleJs = require("./dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _validateModifiersJs = require("./utils/validateModifiers.js");
var _validateModifiersJsDefault = parcelHelpers.interopDefault(_validateModifiersJs);
var _uniqueByJs = require("./utils/uniqueBy.js");
var _uniqueByJsDefault = parcelHelpers.interopDefault(_uniqueByJs);
var _getBasePlacementJs = require("./utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var _enumsJs = require("./enums.js");
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {
    };
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference1, popper1, options1) {
        if (options1 === void 0) options1 = defaultOptions;
        var state1 = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({
            }, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {
            },
            elements: {
                reference: reference1,
                popper: popper1
            },
            attributes: {
            },
            styles: {
            }
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state1,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state1.options) : setOptionsAction;
                cleanupModifierEffects();
                state1.options = Object.assign({
                }, defaultOptions, state1.options, options);
                state1.scrollParents = {
                    reference: _instanceOfJs.isElement(reference1) ? _listScrollParentsJsDefault.default(reference1) : reference1.contextElement ? _listScrollParentsJsDefault.default(reference1.contextElement) : [],
                    popper: _listScrollParentsJsDefault.default(popper1)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = _orderModifiersJsDefault.default(_mergeByNameJsDefault.default([].concat(defaultModifiers, state1.options.modifiers))); // Strip out disabled modifiers
                state1.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                var modifiers = _uniqueByJsDefault.default([].concat(orderedModifiers, state1.options.modifiers), function(_ref) {
                    var name = _ref.name;
                    return name;
                });
                _validateModifiersJsDefault.default(modifiers);
                if (_getBasePlacementJsDefault.default(state1.options.placement) === _enumsJs.auto) {
                    var flipModifier = state1.orderedModifiers.find(function(_ref2) {
                        var name = _ref2.name;
                        return name === 'flip';
                    });
                    if (!flipModifier) console.error([
                        'Popper: "auto" placements require the "flip" modifier be',
                        'present and enabled to work.'
                    ].join(' '));
                }
                var _getComputedStyle = _getComputedStyleJsDefault.default(popper1), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                // cause bugs with positioning, so we'll warn the consumer
                if ([
                    marginTop,
                    marginRight,
                    marginBottom,
                    marginLeft
                ].some(function(margin) {
                    return parseFloat(margin);
                })) console.warn([
                    'Popper: CSS "margin" styles cannot be used to apply padding',
                    'between the popper and its reference element or boundary.',
                    'To replicate margin, use the `offset` modifier, as well as',
                    'the `padding` option in the `preventOverflow` and `flip`',
                    'modifiers.'
                ].join(' '));
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state1.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) {
                    console.error(INVALID_ELEMENT_ERROR);
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state1.rects = {
                    reference: _getCompositeRectJsDefault.default(reference, _getOffsetParentJsDefault.default(popper), state1.options.strategy === 'fixed'),
                    popper: _getLayoutRectJsDefault.default(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state1.reset = false;
                state1.placement = state1.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state1.orderedModifiers.forEach(function(modifier) {
                    return state1.modifiersData[modifier.name] = Object.assign({
                    }, modifier.data);
                });
                var __debug_loops__ = 0;
                for(var index = 0; index < state1.orderedModifiers.length; index++){
                    __debug_loops__ += 1;
                    if (__debug_loops__ > 100) {
                        console.error(INFINITE_LOOP_ERROR);
                        break;
                    }
                    if (state1.reset === true) {
                        state1.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state1.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {
                    } : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state1 = fn({
                        state: state1,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state1;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: _debounceJsDefault.default(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state1);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference1, popper1)) {
            console.error(INVALID_ELEMENT_ERROR);
            return instance;
        }
        instance.setOptions(options1).then(function(state) {
            if (!isDestroyed && options1.onFirstUpdate) options1.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state1.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {
                } : _ref3$options, effect = _ref3.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state1,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {
                    };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"ijPls","./dom-utils/getLayoutRect.js":"jvjuf","./dom-utils/listScrollParents.js":"2di3T","./dom-utils/getOffsetParent.js":"laoYw","./dom-utils/getComputedStyle.js":"3mZjB","./utils/orderModifiers.js":"N0VO0","./utils/debounce.js":"g6Chr","./utils/validateModifiers.js":"1S5dQ","./utils/uniqueBy.js":"hhl2M","./utils/getBasePlacement.js":"59Wp3","./utils/mergeByName.js":"2zTVN","./utils/detectOverflow.js":"ltCuw","./dom-utils/instanceOf.js":"gYFUC","./enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijPls":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = _mathJs.round(rect.width) / element.offsetWidth || 1;
    var scaleY = _mathJs.round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = _instanceOfJs.isHTMLElement(offsetParent);
    var offsetParentIsScaled = _instanceOfJs.isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = _getDocumentElementJsDefault.default(offsetParent);
    var rect = _getBoundingClientRectJsDefault.default(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (_getNodeNameJsDefault.default(offsetParent) !== 'body' || _isScrollParentJsDefault.default(documentElement)) scroll = _getNodeScrollJsDefault.default(offsetParent);
        if (_instanceOfJs.isHTMLElement(offsetParent)) {
            offsets = _getBoundingClientRectJsDefault.default(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = _getWindowScrollBarXJsDefault.default(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
exports.default = getCompositeRect;

},{"./getBoundingClientRect.js":"9CFSQ","./getNodeScroll.js":"bBjCr","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","./getWindowScrollBarX.js":"sz4Ld","./getDocumentElement.js":"eJ9Y1","./isScrollParent.js":"9rLGO","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBjCr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === _getWindowJsDefault.default(node) || !_instanceOfJs.isHTMLElement(node)) return _getWindowScrollJsDefault.default(node);
    else return _getHTMLElementScrollJsDefault.default(node);
}
exports.default = getNodeScroll;

},{"./getWindowScroll.js":"1XUtN","./getWindow.js":"2SkOo","./instanceOf.js":"gYFUC","./getHTMLElementScroll.js":"6pwY2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pwY2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
exports.default = getHTMLElementScroll;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"N0VO0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return _enumsJs.modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
exports.default = orderModifiers;

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6Chr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}
exports.default = debounce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1S5dQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatJs = require("./format.js");
var _formatJsDefault = parcelHelpers.interopDefault(_formatJs);
var _enumsJs = require("../enums.js");
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = [
    'name',
    'enabled',
    'phase',
    'fn',
    'effect',
    'requires',
    'options'
];
function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function(value, index, self) {
            return self.indexOf(value) === index;
        }).forEach(function(key) {
            switch(key){
                case 'name':
                    if (typeof modifier.name !== 'string') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                    break;
                case 'enabled':
                    if (typeof modifier.enabled !== 'boolean') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                    break;
                case 'phase':
                    if (_enumsJs.modifierPhases.indexOf(modifier.phase) < 0) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enumsJs.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                    break;
                case 'fn':
                    if (typeof modifier.fn !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'effect':
                    if (modifier.effect != null && typeof modifier.effect !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'requires':
                    if (modifier.requires != null && !Array.isArray(modifier.requires)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                    break;
                case 'requiresIfExists':
                    if (!Array.isArray(modifier.requiresIfExists)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                    break;
                case 'options':
                case 'data':
                    break;
                default:
                    console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function(s) {
                        return "\"" + s + "\"";
                    }).join(', ') + "; but \"" + key + "\" was provided.");
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
                if (modifiers.find(function(mod) {
                    return mod.name === requirement;
                }) == null) console.error(_formatJsDefault.default(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            });
        });
    });
}
exports.default = validateModifiers;

},{"./format.js":"baNIW","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baNIW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function format(str) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return [].concat(args).reduce(function(p, c) {
        return p.replace(/%s/, c);
    }, str);
}
exports.default = format;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hhl2M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function(item) {
        var identifier = fn(item);
        if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
        }
    });
}
exports.default = uniqueBy;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zTVN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function mergeByName(modifiers) {
    var merged1 = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({
        }, existing, current, {
            options: Object.assign({
            }, existing.options, current.options),
            data: Object.assign({
            }, existing.data, current.data)
        }) : current;
        return merged;
    }, {
    }); // IE11 does not support Object.values
    return Object.keys(merged1).map(function(key) {
        return merged1[key];
    });
}
exports.default = mergeByName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1PuRF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
);
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers
);
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
) // eslint-disable-next-line import/no-unused-modules
;
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [
    _eventListenersJsDefault.default,
    _popperOffsetsJsDefault.default,
    _computeStylesJsDefault.default,
    _applyStylesJsDefault.default,
    _offsetJsDefault.default,
    _flipJsDefault.default,
    _preventOverflowJsDefault.default,
    _arrowJsDefault.default,
    _hideJsDefault.default
];
var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"cHuNp","./modifiers/eventListeners.js":"hBKsL","./modifiers/popperOffsets.js":"6I679","./modifiers/computeStyles.js":"gDlm2","./modifiers/applyStyles.js":"4iMn4","./modifiers/offset.js":"3GKVY","./modifiers/flip.js":"fv5wq","./modifiers/preventOverflow.js":"1AMhb","./modifiers/arrow.js":"31HFW","./modifiers/hide.js":"2g4OF","./popper-lite.js":"gKW1N","./modifiers/index.js":"cap3W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gKW1N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
);
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers
);
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var defaultModifiers = [
    _eventListenersJsDefault.default,
    _popperOffsetsJsDefault.default,
    _computeStylesJsDefault.default,
    _applyStylesJsDefault.default
];
var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"cHuNp","./modifiers/eventListeners.js":"hBKsL","./modifiers/popperOffsets.js":"6I679","./modifiers/computeStyles.js":"gDlm2","./modifiers/applyStyles.js":"4iMn4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["l4AUa","ebWYT"], "ebWYT", "parcelRequire63b3")

//# sourceMappingURL=index.739bf03c.js.map
